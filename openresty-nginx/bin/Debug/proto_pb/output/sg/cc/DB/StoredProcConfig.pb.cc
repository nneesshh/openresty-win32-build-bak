// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcConfig.proto

#include "StoredProcConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace db {
class ConfigFacilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFacility>
      _instance;
} _ConfigFacility_default_instance_;
class ConfigItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigItem>
      _instance;
} _ConfigItem_default_instance_;
class ConfigCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCard>
      _instance;
} _ConfigCard_default_instance_;
class ConfigCardStrengthenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCardStrengthen>
      _instance;
} _ConfigCardStrengthen_default_instance_;
class ConfigLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigLevel>
      _instance;
} _ConfigLevel_default_instance_;
class ConfigModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigModel>
      _instance;
} _ConfigModel_default_instance_;
class ConfigPlaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPlace>
      _instance;
} _ConfigPlace_default_instance_;
class ConfigSceneInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigSceneInfo>
      _instance;
} _ConfigSceneInfo_default_instance_;
class ConfigExploreEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigExploreEvent>
      _instance;
} _ConfigExploreEvent_default_instance_;
class ConfigBaseRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigBaseRoom>
      _instance;
} _ConfigBaseRoom_default_instance_;
class ConfigFormulaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFormula>
      _instance;
} _ConfigFormula_default_instance_;
class ConfigShoppingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigShopping>
      _instance;
} _ConfigShopping_default_instance_;
class ConfigCardAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCardAttribute>
      _instance;
} _ConfigCardAttribute_default_instance_;
class ConfigCardEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCardEquip>
      _instance;
} _ConfigCardEquip_default_instance_;
class ConfigCardEquipStrengthenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCardEquipStrengthen>
      _instance;
} _ConfigCardEquipStrengthen_default_instance_;
class ConfigCardLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCardLevel>
      _instance;
} _ConfigCardLevel_default_instance_;
class ConfigWantedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigWanted>
      _instance;
} _ConfigWanted_default_instance_;
class ConfigTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigTask>
      _instance;
} _ConfigTask_default_instance_;
class ConfigTaskStepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigTaskStep>
      _instance;
} _ConfigTaskStep_default_instance_;
class ConfigNpcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigNpc>
      _instance;
} _ConfigNpc_default_instance_;
class ConfigAchievementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigAchievement>
      _instance;
} _ConfigAchievement_default_instance_;
class ConfigAchievementTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigAchievementTask>
      _instance;
} _ConfigAchievementTask_default_instance_;
class ConfigSystemTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigSystemTask>
      _instance;
} _ConfigSystemTask_default_instance_;
class ConfigRandomGiftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigRandomGift>
      _instance;
} _ConfigRandomGift_default_instance_;
class ConfigDungeonEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDungeonEvent>
      _instance;
} _ConfigDungeonEvent_default_instance_;
class ConfigDungeonContentGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDungeonContentGroup>
      _instance;
} _ConfigDungeonContentGroup_default_instance_;
class ConfigEnemyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigEnemy>
      _instance;
} _ConfigEnemy_default_instance_;
class ConfigEnemyEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigEnemyEvent>
      _instance;
} _ConfigEnemyEvent_default_instance_;
class ConfigEnemyGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigEnemyGroup>
      _instance;
} _ConfigEnemyGroup_default_instance_;
class ConfigFightItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFightItem>
      _instance;
} _ConfigFightItem_default_instance_;
class ConfigFightMachineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFightMachine>
      _instance;
} _ConfigFightMachine_default_instance_;
class ConfigDungeonTalentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDungeonTalent>
      _instance;
} _ConfigDungeonTalent_default_instance_;
class ConfigDungeonTalentTreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDungeonTalentTree>
      _instance;
} _ConfigDungeonTalentTree_default_instance_;
class ConfigDungeonStoreGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDungeonStoreGroup>
      _instance;
} _ConfigDungeonStoreGroup_default_instance_;
class ConfigMachineExchangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMachineExchange>
      _instance;
} _ConfigMachineExchange_default_instance_;
class ConfigMachineExchangeGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMachineExchangeGroup>
      _instance;
} _ConfigMachineExchangeGroup_default_instance_;
class ConfigPveMapModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPveMapModel>
      _instance;
} _ConfigPveMapModel_default_instance_;
class ConfigPveRoomModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPveRoomModel>
      _instance;
} _ConfigPveRoomModel_default_instance_;
class ConfigChestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigChest>
      _instance;
} _ConfigChest_default_instance_;
class ConfigDropItemGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDropItemGroup>
      _instance;
} _ConfigDropItemGroup_default_instance_;
class ConfigLotteryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigLottery>
      _instance;
} _ConfigLottery_default_instance_;
class ConfigSecretRoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigSecretRoom>
      _instance;
} _ConfigSecretRoom_default_instance_;
class ConfigSecretRoomGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigSecretRoomGroup>
      _instance;
} _ConfigSecretRoomGroup_default_instance_;
class ConfigFarmSkillLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFarmSkillLevel>
      _instance;
} _ConfigFarmSkillLevel_default_instance_;
class ConfigSkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigSkill>
      _instance;
} _ConfigSkill_default_instance_;
class ConfigFightRandomGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFightRandomGroup>
      _instance;
} _ConfigFightRandomGroup_default_instance_;
class ConfigNpcFightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigNpcFight>
      _instance;
} _ConfigNpcFight_default_instance_;
class ConfigPvePlayerDropDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPvePlayerDrop>
      _instance;
} _ConfigPvePlayerDrop_default_instance_;
class ConfigCardTalentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCardTalent>
      _instance;
} _ConfigCardTalent_default_instance_;
class ConfigShoppingVitalityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigShoppingVitality>
      _instance;
} _ConfigShoppingVitality_default_instance_;
class ConfigRankingRewardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigRankingReward>
      _instance;
} _ConfigRankingReward_default_instance_;
class ConfigFightElementConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFightElementConnect>
      _instance;
} _ConfigFightElementConnect_default_instance_;
class ConfigWildIslandLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigWildIslandLevel>
      _instance;
} _ConfigWildIslandLevel_default_instance_;
class ConfigBusinessmanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigBusinessman>
      _instance;
} _ConfigBusinessman_default_instance_;
class ConfigSkillRandomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigSkillRandom>
      _instance;
} _ConfigSkillRandom_default_instance_;
class ConfigEquipAttributeWordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigEquipAttributeWord>
      _instance;
} _ConfigEquipAttributeWord_default_instance_;
class ConfigEquipRefineCostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigEquipRefineCost>
      _instance;
} _ConfigEquipRefineCost_default_instance_;
class ConfigEquipDecomposeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigEquipDecompose>
      _instance;
} _ConfigEquipDecompose_default_instance_;
class ConfigEquipDecomposeCostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigEquipDecomposeCost>
      _instance;
} _ConfigEquipDecomposeCost_default_instance_;
class ConfigSpecialEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigSpecialEvent>
      _instance;
} _ConfigSpecialEvent_default_instance_;
class ConfigCardPracticeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigCardPractice>
      _instance;
} _ConfigCardPractice_default_instance_;
class ConfigGhostShipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigGhostShip>
      _instance;
} _ConfigGhostShip_default_instance_;
class ConfigFacilityGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFacilityGroup>
      _instance;
} _ConfigFacilityGroup_default_instance_;
class ConfigRankingScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigRankingScore>
      _instance;
} _ConfigRankingScore_default_instance_;
class ConfigRankingBattleRewardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigRankingBattleReward>
      _instance;
} _ConfigRankingBattleReward_default_instance_;
class ConfigEasterEggDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigEasterEgg>
      _instance;
} _ConfigEasterEgg_default_instance_;
class ConfigShipEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigShipEvent>
      _instance;
} _ConfigShipEvent_default_instance_;
class ConfigDailyGiftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDailyGift>
      _instance;
} _ConfigDailyGift_default_instance_;
class ConfigNavigationEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigNavigationEvent>
      _instance;
} _ConfigNavigationEvent_default_instance_;
class ConfigDungeonAltarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDungeonAltar>
      _instance;
} _ConfigDungeonAltar_default_instance_;
class ConfigRobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigRobot>
      _instance;
} _ConfigRobot_default_instance_;
class ConfigBeaconDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigBeacon>
      _instance;
} _ConfigBeacon_default_instance_;
class ConfigMaelstromTileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMaelstromTile>
      _instance;
} _ConfigMaelstromTile_default_instance_;
class ConfigMaelstromDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMaelstrom>
      _instance;
} _ConfigMaelstrom_default_instance_;
class ConfigMaelstromEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMaelstromEvent>
      _instance;
} _ConfigMaelstromEvent_default_instance_;
class ConfigProfessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigProfession>
      _instance;
} _ConfigProfession_default_instance_;
class ConfigBeaconTalentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigBeaconTalent>
      _instance;
} _ConfigBeaconTalent_default_instance_;
class ConfigBeaconTalentGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigBeaconTalentGroup>
      _instance;
} _ConfigBeaconTalentGroup_default_instance_;
class ConfigDungeonChestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigDungeonChest>
      _instance;
} _ConfigDungeonChest_default_instance_;
class ConfigGuildStoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigGuildStore>
      _instance;
} _ConfigGuildStore_default_instance_;
class ConfigGameExchangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigGameExchange>
      _instance;
} _ConfigGameExchange_default_instance_;
class ConfigNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigName>
      _instance;
} _ConfigName_default_instance_;
class ConfigFirstnameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigFirstname>
      _instance;
} _ConfigFirstname_default_instance_;
class ConfigLastnameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigLastname>
      _instance;
} _ConfigLastname_default_instance_;
class ConfigPlayerInvadeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPlayerInvade>
      _instance;
} _ConfigPlayerInvade_default_instance_;
class ConfigRoomModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigRoomModel>
      _instance;
} _ConfigRoomModel_default_instance_;
}  // namespace db
namespace protobuf_StoredProcConfig_2eproto {
static void InitDefaultsConfigFacility() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFacility_default_instance_;
    new (ptr) ::db::ConfigFacility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFacility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFacility =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFacility}, {}};

static void InitDefaultsConfigItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigItem_default_instance_;
    new (ptr) ::db::ConfigItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigItem}, {}};

static void InitDefaultsConfigCard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCard_default_instance_;
    new (ptr) ::db::ConfigCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCard}, {}};

static void InitDefaultsConfigCardStrengthen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCardStrengthen_default_instance_;
    new (ptr) ::db::ConfigCardStrengthen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCardStrengthen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCardStrengthen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCardStrengthen}, {}};

static void InitDefaultsConfigLevel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigLevel_default_instance_;
    new (ptr) ::db::ConfigLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigLevel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigLevel}, {}};

static void InitDefaultsConfigModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigModel_default_instance_;
    new (ptr) ::db::ConfigModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigModel}, {}};

static void InitDefaultsConfigPlace() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPlace_default_instance_;
    new (ptr) ::db::ConfigPlace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPlace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPlace =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigPlace}, {}};

static void InitDefaultsConfigSceneInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigSceneInfo_default_instance_;
    new (ptr) ::db::ConfigSceneInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigSceneInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSceneInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigSceneInfo}, {}};

static void InitDefaultsConfigExploreEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigExploreEvent_default_instance_;
    new (ptr) ::db::ConfigExploreEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigExploreEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigExploreEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigExploreEvent}, {}};

static void InitDefaultsConfigBaseRoom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigBaseRoom_default_instance_;
    new (ptr) ::db::ConfigBaseRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigBaseRoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigBaseRoom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigBaseRoom}, {}};

static void InitDefaultsConfigFormula() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFormula_default_instance_;
    new (ptr) ::db::ConfigFormula();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFormula::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFormula =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFormula}, {}};

static void InitDefaultsConfigShopping() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigShopping_default_instance_;
    new (ptr) ::db::ConfigShopping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigShopping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigShopping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigShopping}, {}};

static void InitDefaultsConfigCardAttribute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCardAttribute_default_instance_;
    new (ptr) ::db::ConfigCardAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCardAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCardAttribute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCardAttribute}, {}};

static void InitDefaultsConfigCardEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCardEquip_default_instance_;
    new (ptr) ::db::ConfigCardEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCardEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCardEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCardEquip}, {}};

static void InitDefaultsConfigCardEquipStrengthen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCardEquipStrengthen_default_instance_;
    new (ptr) ::db::ConfigCardEquipStrengthen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCardEquipStrengthen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCardEquipStrengthen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCardEquipStrengthen}, {}};

static void InitDefaultsConfigCardLevel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCardLevel_default_instance_;
    new (ptr) ::db::ConfigCardLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCardLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCardLevel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCardLevel}, {}};

static void InitDefaultsConfigWanted() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigWanted_default_instance_;
    new (ptr) ::db::ConfigWanted();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigWanted::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigWanted =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigWanted}, {}};

static void InitDefaultsConfigTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigTask_default_instance_;
    new (ptr) ::db::ConfigTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigTask}, {}};

static void InitDefaultsConfigTaskStep() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigTaskStep_default_instance_;
    new (ptr) ::db::ConfigTaskStep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigTaskStep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigTaskStep =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigTaskStep}, {}};

static void InitDefaultsConfigNpc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigNpc_default_instance_;
    new (ptr) ::db::ConfigNpc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigNpc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigNpc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigNpc}, {}};

static void InitDefaultsConfigAchievement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigAchievement_default_instance_;
    new (ptr) ::db::ConfigAchievement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigAchievement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigAchievement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigAchievement}, {}};

static void InitDefaultsConfigAchievementTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigAchievementTask_default_instance_;
    new (ptr) ::db::ConfigAchievementTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigAchievementTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigAchievementTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigAchievementTask}, {}};

static void InitDefaultsConfigSystemTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigSystemTask_default_instance_;
    new (ptr) ::db::ConfigSystemTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigSystemTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSystemTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigSystemTask}, {}};

static void InitDefaultsConfigRandomGift() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigRandomGift_default_instance_;
    new (ptr) ::db::ConfigRandomGift();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigRandomGift::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigRandomGift =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigRandomGift}, {}};

static void InitDefaultsConfigDungeonEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDungeonEvent_default_instance_;
    new (ptr) ::db::ConfigDungeonEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDungeonEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDungeonEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDungeonEvent}, {}};

static void InitDefaultsConfigDungeonContentGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDungeonContentGroup_default_instance_;
    new (ptr) ::db::ConfigDungeonContentGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDungeonContentGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDungeonContentGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDungeonContentGroup}, {}};

static void InitDefaultsConfigEnemy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigEnemy_default_instance_;
    new (ptr) ::db::ConfigEnemy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigEnemy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigEnemy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigEnemy}, {}};

static void InitDefaultsConfigEnemyEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigEnemyEvent_default_instance_;
    new (ptr) ::db::ConfigEnemyEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigEnemyEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigEnemyEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigEnemyEvent}, {}};

static void InitDefaultsConfigEnemyGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigEnemyGroup_default_instance_;
    new (ptr) ::db::ConfigEnemyGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigEnemyGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigEnemyGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigEnemyGroup}, {}};

static void InitDefaultsConfigFightItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFightItem_default_instance_;
    new (ptr) ::db::ConfigFightItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFightItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFightItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFightItem}, {}};

static void InitDefaultsConfigFightMachine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFightMachine_default_instance_;
    new (ptr) ::db::ConfigFightMachine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFightMachine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFightMachine =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFightMachine}, {}};

static void InitDefaultsConfigDungeonTalent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDungeonTalent_default_instance_;
    new (ptr) ::db::ConfigDungeonTalent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDungeonTalent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDungeonTalent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDungeonTalent}, {}};

static void InitDefaultsConfigDungeonTalentTree() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDungeonTalentTree_default_instance_;
    new (ptr) ::db::ConfigDungeonTalentTree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDungeonTalentTree::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDungeonTalentTree =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDungeonTalentTree}, {}};

static void InitDefaultsConfigDungeonStoreGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDungeonStoreGroup_default_instance_;
    new (ptr) ::db::ConfigDungeonStoreGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDungeonStoreGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDungeonStoreGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDungeonStoreGroup}, {}};

static void InitDefaultsConfigMachineExchange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMachineExchange_default_instance_;
    new (ptr) ::db::ConfigMachineExchange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMachineExchange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMachineExchange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigMachineExchange}, {}};

static void InitDefaultsConfigMachineExchangeGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMachineExchangeGroup_default_instance_;
    new (ptr) ::db::ConfigMachineExchangeGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMachineExchangeGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMachineExchangeGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigMachineExchangeGroup}, {}};

static void InitDefaultsConfigPveMapModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPveMapModel_default_instance_;
    new (ptr) ::db::ConfigPveMapModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPveMapModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPveMapModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigPveMapModel}, {}};

static void InitDefaultsConfigPveRoomModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPveRoomModel_default_instance_;
    new (ptr) ::db::ConfigPveRoomModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPveRoomModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPveRoomModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigPveRoomModel}, {}};

static void InitDefaultsConfigChest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigChest_default_instance_;
    new (ptr) ::db::ConfigChest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigChest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigChest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigChest}, {}};

static void InitDefaultsConfigDropItemGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDropItemGroup_default_instance_;
    new (ptr) ::db::ConfigDropItemGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDropItemGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDropItemGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDropItemGroup}, {}};

static void InitDefaultsConfigLottery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigLottery_default_instance_;
    new (ptr) ::db::ConfigLottery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigLottery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigLottery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigLottery}, {}};

static void InitDefaultsConfigSecretRoom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigSecretRoom_default_instance_;
    new (ptr) ::db::ConfigSecretRoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigSecretRoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSecretRoom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigSecretRoom}, {}};

static void InitDefaultsConfigSecretRoomGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigSecretRoomGroup_default_instance_;
    new (ptr) ::db::ConfigSecretRoomGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigSecretRoomGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSecretRoomGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigSecretRoomGroup}, {}};

static void InitDefaultsConfigFarmSkillLevel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFarmSkillLevel_default_instance_;
    new (ptr) ::db::ConfigFarmSkillLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFarmSkillLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFarmSkillLevel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFarmSkillLevel}, {}};

static void InitDefaultsConfigSkill() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigSkill_default_instance_;
    new (ptr) ::db::ConfigSkill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigSkill::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSkill =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigSkill}, {}};

static void InitDefaultsConfigFightRandomGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFightRandomGroup_default_instance_;
    new (ptr) ::db::ConfigFightRandomGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFightRandomGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFightRandomGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFightRandomGroup}, {}};

static void InitDefaultsConfigNpcFight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigNpcFight_default_instance_;
    new (ptr) ::db::ConfigNpcFight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigNpcFight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigNpcFight =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigNpcFight}, {}};

static void InitDefaultsConfigPvePlayerDrop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPvePlayerDrop_default_instance_;
    new (ptr) ::db::ConfigPvePlayerDrop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPvePlayerDrop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPvePlayerDrop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigPvePlayerDrop}, {}};

static void InitDefaultsConfigCardTalent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCardTalent_default_instance_;
    new (ptr) ::db::ConfigCardTalent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCardTalent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCardTalent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCardTalent}, {}};

static void InitDefaultsConfigShoppingVitality() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigShoppingVitality_default_instance_;
    new (ptr) ::db::ConfigShoppingVitality();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigShoppingVitality::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigShoppingVitality =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigShoppingVitality}, {}};

static void InitDefaultsConfigRankingReward() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigRankingReward_default_instance_;
    new (ptr) ::db::ConfigRankingReward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigRankingReward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigRankingReward =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigRankingReward}, {}};

static void InitDefaultsConfigFightElementConnect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFightElementConnect_default_instance_;
    new (ptr) ::db::ConfigFightElementConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFightElementConnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFightElementConnect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFightElementConnect}, {}};

static void InitDefaultsConfigWildIslandLevel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigWildIslandLevel_default_instance_;
    new (ptr) ::db::ConfigWildIslandLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigWildIslandLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigWildIslandLevel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigWildIslandLevel}, {}};

static void InitDefaultsConfigBusinessman() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigBusinessman_default_instance_;
    new (ptr) ::db::ConfigBusinessman();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigBusinessman::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigBusinessman =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigBusinessman}, {}};

static void InitDefaultsConfigSkillRandom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigSkillRandom_default_instance_;
    new (ptr) ::db::ConfigSkillRandom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigSkillRandom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSkillRandom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigSkillRandom}, {}};

static void InitDefaultsConfigEquipAttributeWord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigEquipAttributeWord_default_instance_;
    new (ptr) ::db::ConfigEquipAttributeWord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigEquipAttributeWord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigEquipAttributeWord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigEquipAttributeWord}, {}};

static void InitDefaultsConfigEquipRefineCost() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigEquipRefineCost_default_instance_;
    new (ptr) ::db::ConfigEquipRefineCost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigEquipRefineCost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigEquipRefineCost =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigEquipRefineCost}, {}};

static void InitDefaultsConfigEquipDecompose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigEquipDecompose_default_instance_;
    new (ptr) ::db::ConfigEquipDecompose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigEquipDecompose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigEquipDecompose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigEquipDecompose}, {}};

static void InitDefaultsConfigEquipDecomposeCost() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigEquipDecomposeCost_default_instance_;
    new (ptr) ::db::ConfigEquipDecomposeCost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigEquipDecomposeCost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigEquipDecomposeCost =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigEquipDecomposeCost}, {}};

static void InitDefaultsConfigSpecialEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigSpecialEvent_default_instance_;
    new (ptr) ::db::ConfigSpecialEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigSpecialEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigSpecialEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigSpecialEvent}, {}};

static void InitDefaultsConfigCardPractice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigCardPractice_default_instance_;
    new (ptr) ::db::ConfigCardPractice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigCardPractice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigCardPractice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigCardPractice}, {}};

static void InitDefaultsConfigGhostShip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigGhostShip_default_instance_;
    new (ptr) ::db::ConfigGhostShip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigGhostShip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigGhostShip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigGhostShip}, {}};

static void InitDefaultsConfigFacilityGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFacilityGroup_default_instance_;
    new (ptr) ::db::ConfigFacilityGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFacilityGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFacilityGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFacilityGroup}, {}};

static void InitDefaultsConfigRankingScore() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigRankingScore_default_instance_;
    new (ptr) ::db::ConfigRankingScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigRankingScore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigRankingScore =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigRankingScore}, {}};

static void InitDefaultsConfigRankingBattleReward() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigRankingBattleReward_default_instance_;
    new (ptr) ::db::ConfigRankingBattleReward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigRankingBattleReward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigRankingBattleReward =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigRankingBattleReward}, {}};

static void InitDefaultsConfigEasterEgg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigEasterEgg_default_instance_;
    new (ptr) ::db::ConfigEasterEgg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigEasterEgg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigEasterEgg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigEasterEgg}, {}};

static void InitDefaultsConfigShipEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigShipEvent_default_instance_;
    new (ptr) ::db::ConfigShipEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigShipEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigShipEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigShipEvent}, {}};

static void InitDefaultsConfigDailyGift() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDailyGift_default_instance_;
    new (ptr) ::db::ConfigDailyGift();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDailyGift::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDailyGift =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDailyGift}, {}};

static void InitDefaultsConfigNavigationEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigNavigationEvent_default_instance_;
    new (ptr) ::db::ConfigNavigationEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigNavigationEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigNavigationEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigNavigationEvent}, {}};

static void InitDefaultsConfigDungeonAltar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDungeonAltar_default_instance_;
    new (ptr) ::db::ConfigDungeonAltar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDungeonAltar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDungeonAltar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDungeonAltar}, {}};

static void InitDefaultsConfigRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigRobot_default_instance_;
    new (ptr) ::db::ConfigRobot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigRobot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigRobot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigRobot}, {}};

static void InitDefaultsConfigBeacon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigBeacon_default_instance_;
    new (ptr) ::db::ConfigBeacon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigBeacon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigBeacon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigBeacon}, {}};

static void InitDefaultsConfigMaelstromTile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMaelstromTile_default_instance_;
    new (ptr) ::db::ConfigMaelstromTile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMaelstromTile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMaelstromTile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigMaelstromTile}, {}};

static void InitDefaultsConfigMaelstrom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMaelstrom_default_instance_;
    new (ptr) ::db::ConfigMaelstrom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMaelstrom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMaelstrom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigMaelstrom}, {}};

static void InitDefaultsConfigMaelstromEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMaelstromEvent_default_instance_;
    new (ptr) ::db::ConfigMaelstromEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMaelstromEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMaelstromEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigMaelstromEvent}, {}};

static void InitDefaultsConfigProfession() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigProfession_default_instance_;
    new (ptr) ::db::ConfigProfession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigProfession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigProfession =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigProfession}, {}};

static void InitDefaultsConfigBeaconTalent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigBeaconTalent_default_instance_;
    new (ptr) ::db::ConfigBeaconTalent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigBeaconTalent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigBeaconTalent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigBeaconTalent}, {}};

static void InitDefaultsConfigBeaconTalentGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigBeaconTalentGroup_default_instance_;
    new (ptr) ::db::ConfigBeaconTalentGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigBeaconTalentGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigBeaconTalentGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigBeaconTalentGroup}, {}};

static void InitDefaultsConfigDungeonChest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigDungeonChest_default_instance_;
    new (ptr) ::db::ConfigDungeonChest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigDungeonChest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigDungeonChest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigDungeonChest}, {}};

static void InitDefaultsConfigGuildStore() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigGuildStore_default_instance_;
    new (ptr) ::db::ConfigGuildStore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigGuildStore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigGuildStore =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigGuildStore}, {}};

static void InitDefaultsConfigGameExchange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigGameExchange_default_instance_;
    new (ptr) ::db::ConfigGameExchange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigGameExchange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigGameExchange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigGameExchange}, {}};

static void InitDefaultsConfigName() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigName_default_instance_;
    new (ptr) ::db::ConfigName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigName =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigName}, {}};

static void InitDefaultsConfigFirstname() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigFirstname_default_instance_;
    new (ptr) ::db::ConfigFirstname();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigFirstname::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigFirstname =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigFirstname}, {}};

static void InitDefaultsConfigLastname() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigLastname_default_instance_;
    new (ptr) ::db::ConfigLastname();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigLastname::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigLastname =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigLastname}, {}};

static void InitDefaultsConfigPlayerInvade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPlayerInvade_default_instance_;
    new (ptr) ::db::ConfigPlayerInvade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPlayerInvade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPlayerInvade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigPlayerInvade}, {}};

static void InitDefaultsConfigRoomModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigRoomModel_default_instance_;
    new (ptr) ::db::ConfigRoomModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigRoomModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigRoomModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigRoomModel}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFacility.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCardStrengthen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigLevel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigModel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPlace.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigSceneInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigExploreEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigBaseRoom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFormula.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigShopping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCardAttribute.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCardEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCardEquipStrengthen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCardLevel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigWanted.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigTaskStep.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigNpc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigAchievement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigAchievementTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigSystemTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigRandomGift.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDungeonEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDungeonContentGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigEnemy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigEnemyEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigEnemyGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFightItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFightMachine.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDungeonTalent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDungeonTalentTree.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDungeonStoreGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMachineExchange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMachineExchangeGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPveMapModel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPveRoomModel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigChest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDropItemGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigLottery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigSecretRoom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigSecretRoomGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFarmSkillLevel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigSkill.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFightRandomGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigNpcFight.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPvePlayerDrop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCardTalent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigShoppingVitality.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigRankingReward.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFightElementConnect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigWildIslandLevel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigBusinessman.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigSkillRandom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigEquipAttributeWord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigEquipRefineCost.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigEquipDecompose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigEquipDecomposeCost.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigSpecialEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigCardPractice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigGhostShip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFacilityGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigRankingScore.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigRankingBattleReward.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigEasterEgg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigShipEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDailyGift.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigNavigationEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDungeonAltar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigRobot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigBeacon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMaelstromTile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMaelstrom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMaelstromEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigProfession.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigBeaconTalent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigBeaconTalentGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigDungeonChest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigGuildStore.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigGameExchange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigName.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigFirstname.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigLastname.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPlayerInvade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigRoomModel.base);
}

::google::protobuf::Metadata file_level_metadata[86];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, maintype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, func_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, style_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, build_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, seize_row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, seize_col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, float__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, room_must_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, base_device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, level_up_require_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, level_up_grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, level_up_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, facility_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, people_node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, level_up_ship_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, formula_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, level_up_captain_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, level_up_need_device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, level_up_need_facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, special_property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, machine_id_in_fight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, slot_unlock_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, machine_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacility, level_up_need_time_),
  8,
  0,
  9,
  10,
  11,
  12,
  1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  2,
  21,
  22,
  23,
  24,
  25,
  3,
  26,
  4,
  5,
  6,
  27,
  7,
  28,
  29,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigItem, max_num_),
  2,
  0,
  3,
  4,
  5,
  1,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, profession_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, attack_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, attack_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, energy_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, attack_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, wait_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, move_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, move_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, run_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, can_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, action_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, initial_equip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, talent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, practice_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, farm_skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, chip_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, chip_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, chip_convert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, chip_exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, gather_add_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, penetration_args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, init_fall_skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCard, init_hunger_),
  6,
  0,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  1,
  22,
  21,
  2,
  3,
  23,
  24,
  25,
  4,
  26,
  5,
  27,
  28,
  29,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, initial_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, aptitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, level_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, item_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, chip_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardStrengthen, rising_star_cost_),
  5,
  6,
  0,
  1,
  7,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, need_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, add_facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, add_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, add_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, max_sailor_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, max_vitality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, max_take_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLevel, fail_reward_),
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  8,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, room_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, map_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, ship_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, null_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, ship_facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, pre_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, unlock_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, unlock_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigModel, machine_param_),
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  10,
  11,
  5,
  12,
  6,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, start_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, tiled_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlace, boom_),
  4,
  0,
  1,
  5,
  2,
  6,
  7,
  3,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, sceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, scene_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, belong_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, checkpoint_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, drop_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, formula_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, add_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, end_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, consume_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, star_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, fight_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, max_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, port_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, pre_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, secret_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, start_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, fight_machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, enter_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, dungeon_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, final_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, need_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, first_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, clear_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, boss_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, layer_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, can_repeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, daily_times_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSceneInfo, saved_customer_),
  21,
  0,
  22,
  23,
  24,
  1,
  2,
  3,
  25,
  4,
  26,
  5,
  6,
  27,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  28,
  16,
  17,
  18,
  19,
  29,
  30,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, trigger_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, landform_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, cd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigExploreEvent, time_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, room_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, room_num_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, efficiency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, pre_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, need_material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, farm_skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBaseRoom, machine_param_),
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
  10,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, formula_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, belong_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, add_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, speed_up_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFormula, output_),
  4,
  5,
  0,
  1,
  6,
  2,
  7,
  8,
  9,
  3,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, belong_store_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, goods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, limit_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShopping, double__),
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardAttribute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardAttribute, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardAttribute, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardAttribute, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardAttribute, influence_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, occupation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, farm_skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, initial_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, special_attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, advanced_attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, forge_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, base_attribute_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, quality_refine_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquip, quality_up_cost_),
  8,
  0,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  1,
  2,
  3,
  4,
  17,
  5,
  18,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, strengthen_level_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardEquipStrengthen, attribute_add_),
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardLevel, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardLevel, exp_max_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWanted, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWanted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWanted, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWanted, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWanted, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWanted, place_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWanted, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWanted, reward_),
  4,
  5,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, pre_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, npc_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, add_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTask, harbor_flush_),
  4,
  0,
  5,
  6,
  7,
  1,
  2,
  8,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTaskStep, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTaskStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTaskStep, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTaskStep, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTaskStep, npc_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTaskStep, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTaskStep, harbor_flush_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTaskStep, ship_event_),
  4,
  5,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpc, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpc, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpc, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpc, place_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpc, pos_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpc, pos_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, require_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, get_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievement, reward_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievementTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievementTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievementTask, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievementTask, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievementTask, require_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigAchievementTask, reward_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, condition_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, require_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, refresh_date_weekly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSystemTask, pre_task_),
  5,
  6,
  7,
  0,
  8,
  1,
  9,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRandomGift, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRandomGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRandomGift, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRandomGift, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRandomGift, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRandomGift, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRandomGift, goods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRandomGift, limit_num_),
  2,
  3,
  4,
  0,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, require_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, get_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonEvent, reward_),
  2,
  3,
  0,
  4,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, base_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, random_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, spider_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, stairs_enemy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, npc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, path_choice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonContentGroup, altar_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, profession_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, enemy_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, camp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, physical_attack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, magic_attack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, physical_defense_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, magic_defense_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, summon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, wait_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, attack_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, move_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, run_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, can_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, enemy_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, action_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, drop_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemy, drop_element_),
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyEvent, trigger_info_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyGroup, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyGroup, group_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyGroup, random_enemy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEnemyGroup, random_event_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, use_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, package_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, exchange_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightItem, price_),
  4,
  0,
  5,
  6,
  1,
  7,
  8,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, condition_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, condition_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, trigger_effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, machine_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, trigger_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, special_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightMachine, exist_times_),
  2,
  3,
  4,
  5,
  0,
  6,
  1,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, talent_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, level_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, get_props_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, next_floor_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, next_floor_machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, incentives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, machine_incentives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, reduce_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalent, cost_),
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalentTree, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalentTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalentTree, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalentTree, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalentTree, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonTalentTree, unlock_require_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonStoreGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonStoreGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonStoreGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonStoreGroup, base_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonStoreGroup, random_items_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchange, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchange, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchange, get_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchangeGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchangeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchangeGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMachineExchangeGroup, group_info_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, subtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, map_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, map_tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, map_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_room_one_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_room_two_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_room_three_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_room_four_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_room_five_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_enemy_two_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_enemy_three_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_enemy_four_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, random_enemy_five_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, facilitys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, confirm_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, confirm_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveMapModel, locked_room_),
  17,
  0,
  18,
  19,
  1,
  20,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, facilitys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, drops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, random_machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, altar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, room_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, exist_enemy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPveRoomModel, chest_),
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigChest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigChest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigChest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigChest, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigChest, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigChest, drop_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigChest, drop_group_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, num_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, num_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDropItemGroup, probability_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, limit_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, random_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, lowest_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLottery, activity_reward_),
  4,
  5,
  0,
  6,
  1,
  2,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoom, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoom, model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoom, lock_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoom, trigger_element_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoomGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoomGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoomGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSecretRoomGroup, group_info_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFarmSkillLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFarmSkillLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFarmSkillLevel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFarmSkillLevel, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFarmSkillLevel, exp_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFarmSkillLevel, level_up_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFarmSkillLevel, attribute_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, skill_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, need_star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, level_up_base_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, level_up_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, chip_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, attack_attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, attack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, attack_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, trigger_self_buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, trigger_enemy_buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, buff_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, cd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, product_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, attack_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, special_effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, item_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkill, attribute_add_),
  12,
  14,
  13,
  0,
  1,
  15,
  16,
  2,
  3,
  17,
  4,
  18,
  19,
  20,
  5,
  6,
  7,
  8,
  9,
  21,
  22,
  23,
  24,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightRandomGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightRandomGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightRandomGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightRandomGroup, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightRandomGroup, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightRandomGroup, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightRandomGroup, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightRandomGroup, probability_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpcFight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpcFight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpcFight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpcFight, model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpcFight, move_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNpcFight, effect_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPvePlayerDrop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPvePlayerDrop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPvePlayerDrop, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPvePlayerDrop, facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPvePlayerDrop, drop_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardTalent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardTalent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardTalent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardTalent, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardTalent, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardTalent, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardTalent, farm_skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardTalent, effect_),
  2,
  5,
  0,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShoppingVitality, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShoppingVitality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShoppingVitality, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShoppingVitality, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShoppingVitality, get_vitality_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingReward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingReward, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingReward, ranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingReward, division_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingReward, daily_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingReward, weekly_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingReward, monthly_reward_),
  4,
  0,
  5,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightElementConnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightElementConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightElementConnect, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightElementConnect, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFightElementConnect, connect_element_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, islandid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, vitality_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, worker_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, produce_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, repair_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, map_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandLevel, reward_),
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  1,
  11,
  12,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, exchange_need1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, exchange_reward1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, exchange_need2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, exchange_reward2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, exchange_need3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, exchange_reward3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, goods_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, goods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, discount_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, discount_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, price_fluctuation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, bargain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBusinessman, groupid_),
  12,
  0,
  13,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  14,
  9,
  10,
  11,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkillRandom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkillRandom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkillRandom, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkillRandom, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkillRandom, profession_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSkillRandom, probability_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, attr_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, float__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, perfect_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipAttributeWord, unlock_level_),
  2,
  3,
  4,
  0,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipRefineCost, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipRefineCost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipRefineCost, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipRefineCost, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipRefineCost, success_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipRefineCost, diamond_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipRefineCost, diamond_success_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipRefineCost, limit_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecompose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecompose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecompose, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecompose, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecompose, decompose_get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecompose, skill_influence_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecomposeCost, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecomposeCost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecomposeCost, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecomposeCost, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecomposeCost, success_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEquipDecomposeCost, add_ratio_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, trigger_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, condition_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, trigger_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigSpecialEvent, first_reward_),
  3,
  4,
  0,
  5,
  6,
  7,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, need_star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, attribute_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigCardPractice, talent_level_),
  2,
  3,
  0,
  4,
  5,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, initial_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, unlock_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, boss_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, buff_get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, monster_buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, map_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, special_reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGhostShip, rank_),
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  6,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacilityGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacilityGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacilityGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacilityGroup, contain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacilityGroup, effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFacilityGroup, param_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingScore, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingScore, score_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingBattleReward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingBattleReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingBattleReward, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingBattleReward, combo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingBattleReward, score_up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingBattleReward, score_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRankingBattleReward, reward_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEasterEgg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEasterEgg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEasterEgg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEasterEgg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEasterEgg, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigEasterEgg, choice_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, need_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, need_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, need_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, need_facility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, pre_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, limit_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, enemy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, exculde_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, choice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, untreated_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigShipEvent, happen_limit_),
  9,
  10,
  0,
  1,
  11,
  2,
  3,
  4,
  12,
  13,
  14,
  5,
  15,
  6,
  7,
  8,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDailyGift, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDailyGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDailyGift, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDailyGift, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDailyGift, time_interval_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, deal_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, ignore_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, enemy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, room_effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigNavigationEvent, duration_),
  6,
  7,
  0,
  1,
  2,
  3,
  8,
  4,
  5,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, repair_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, destory_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, adjunct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, adjunct_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, adjunct_skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, adjunct_level_up_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, adjunct_skill_up_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, adjunct_revive_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, adjunct_cure_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonAltar, special_skill_),
  10,
  0,
  1,
  2,
  3,
  11,
  12,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, captain_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, sailor_num_in_jjc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, sailor_in_jjc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, sailor_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, sailor_star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, ship_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, sailor_practice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, sailor_num_in_ship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, sailor_in_ship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, equip_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRobot, invade_score_),
  13,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeacon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeacon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeacon, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeacon, level_up_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeacon, level_up_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeacon, explore_scope_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromTile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromTile, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromTile, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromTile, oil_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromTile, event_num_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, map_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, guild_island_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, guild_island_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, oil_well_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, oil_well_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, oil_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, oil_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, oil_reserves_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, ship_oil_reserves_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, repair_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstrom, event_refresh_time_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  12,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, need_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, contant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, trigger_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, trigger_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, explore_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMaelstromEvent, explore_level_up_),
  5,
  6,
  0,
  1,
  2,
  7,
  3,
  4,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigProfession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigProfession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigProfession, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigProfession, main_attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigProfession, pro_args_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, max_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, pre_talent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, get_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, event_reward_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, point_cost_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, point_get_up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, adjunct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, attribute_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, enemy_weaken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalent, event_weaken_),
  9,
  10,
  11,
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalentGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalentGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalentGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigBeaconTalentGroup, content_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, max_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, add_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, cost_in_dungeon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, get_in_dungeon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigDungeonChest, need_level_),
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGuildStore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGuildStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGuildStore, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGuildStore, extra_goods_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGuildStore, normal_goods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGuildStore, extra_goods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGuildStore, refresh_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGuildStore, discount_),
  4,
  5,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGameExchange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGameExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGameExchange, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGameExchange, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigGameExchange, get_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigName, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigName, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFirstname, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFirstname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFirstname, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFirstname, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFirstname, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigFirstname, order_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLastname, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLastname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLastname, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLastname, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLastname, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigLastname, order_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, match_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, match_remain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, refresh_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, entrys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, defend_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, win_room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, revenge_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, reward_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, extra_reward_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, invade_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, record_remain_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, room_effect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, drop_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPlayerInvade, drop_limit_once_),
  0,
  10,
  1,
  2,
  3,
  4,
  11,
  5,
  12,
  6,
  13,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRoomModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRoomModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRoomModel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRoomModel, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRoomModel, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRoomModel, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigRoomModel, unlock_cost_),
  3,
  4,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 35, sizeof(::db::ConfigFacility)},
  { 65, 78, sizeof(::db::ConfigItem)},
  { 86, 121, sizeof(::db::ConfigCard)},
  { 151, 164, sizeof(::db::ConfigCardStrengthen)},
  { 172, 186, sizeof(::db::ConfigLevel)},
  { 195, 214, sizeof(::db::ConfigModel)},
  { 228, 242, sizeof(::db::ConfigPlace)},
  { 251, 287, sizeof(::db::ConfigSceneInfo)},
  { 318, 333, sizeof(::db::ConfigExploreEvent)},
  { 343, 359, sizeof(::db::ConfigBaseRoom)},
  { 370, 386, sizeof(::db::ConfigFormula)},
  { 397, 411, sizeof(::db::ConfigShopping)},
  { 420, 429, sizeof(::db::ConfigCardAttribute)},
  { 433, 457, sizeof(::db::ConfigCardEquip)},
  { 476, 489, sizeof(::db::ConfigCardEquipStrengthen)},
  { 497, 504, sizeof(::db::ConfigCardLevel)},
  { 506, 517, sizeof(::db::ConfigWanted)},
  { 523, 537, sizeof(::db::ConfigTask)},
  { 546, 557, sizeof(::db::ConfigTaskStep)},
  { 563, 574, sizeof(::db::ConfigNpc)},
  { 580, 594, sizeof(::db::ConfigAchievement)},
  { 603, 612, sizeof(::db::ConfigAchievementTask)},
  { 616, 631, sizeof(::db::ConfigSystemTask)},
  { 641, 652, sizeof(::db::ConfigRandomGift)},
  { 658, 670, sizeof(::db::ConfigDungeonEvent)},
  { 677, 690, sizeof(::db::ConfigDungeonContentGroup)},
  { 698, 726, sizeof(::db::ConfigEnemy)},
  { 749, 756, sizeof(::db::ConfigEnemyEvent)},
  { 758, 768, sizeof(::db::ConfigEnemyGroup)},
  { 773, 787, sizeof(::db::ConfigFightItem)},
  { 796, 810, sizeof(::db::ConfigFightMachine)},
  { 819, 834, sizeof(::db::ConfigDungeonTalent)},
  { 844, 853, sizeof(::db::ConfigDungeonTalentTree)},
  { 857, 865, sizeof(::db::ConfigDungeonStoreGroup)},
  { 868, 876, sizeof(::db::ConfigMachineExchange)},
  { 879, 886, sizeof(::db::ConfigMachineExchangeGroup)},
  { 888, 914, sizeof(::db::ConfigPveMapModel)},
  { 935, 951, sizeof(::db::ConfigPveRoomModel)},
  { 962, 972, sizeof(::db::ConfigChest)},
  { 977, 990, sizeof(::db::ConfigDropItemGroup)},
  { 998, 1011, sizeof(::db::ConfigLottery)},
  { 1019, 1028, sizeof(::db::ConfigSecretRoom)},
  { 1032, 1039, sizeof(::db::ConfigSecretRoomGroup)},
  { 1041, 1051, sizeof(::db::ConfigFarmSkillLevel)},
  { 1056, 1086, sizeof(::db::ConfigSkill)},
  { 1111, 1122, sizeof(::db::ConfigFightRandomGroup)},
  { 1128, 1137, sizeof(::db::ConfigNpcFight)},
  { 1141, 1149, sizeof(::db::ConfigPvePlayerDrop)},
  { 1152, 1163, sizeof(::db::ConfigCardTalent)},
  { 1169, 1177, sizeof(::db::ConfigShoppingVitality)},
  { 1180, 1191, sizeof(::db::ConfigRankingReward)},
  { 1197, 1205, sizeof(::db::ConfigFightElementConnect)},
  { 1208, 1226, sizeof(::db::ConfigWildIslandLevel)},
  { 1239, 1261, sizeof(::db::ConfigBusinessman)},
  { 1278, 1287, sizeof(::db::ConfigSkillRandom)},
  { 1291, 1303, sizeof(::db::ConfigEquipAttributeWord)},
  { 1310, 1321, sizeof(::db::ConfigEquipRefineCost)},
  { 1327, 1336, sizeof(::db::ConfigEquipDecompose)},
  { 1340, 1349, sizeof(::db::ConfigEquipDecomposeCost)},
  { 1353, 1366, sizeof(::db::ConfigSpecialEvent)},
  { 1374, 1386, sizeof(::db::ConfigCardPractice)},
  { 1393, 1410, sizeof(::db::ConfigGhostShip)},
  { 1422, 1431, sizeof(::db::ConfigFacilityGroup)},
  { 1435, 1442, sizeof(::db::ConfigRankingScore)},
  { 1444, 1454, sizeof(::db::ConfigRankingBattleReward)},
  { 1459, 1468, sizeof(::db::ConfigEasterEgg)},
  { 1472, 1495, sizeof(::db::ConfigShipEvent)},
  { 1513, 1521, sizeof(::db::ConfigDailyGift)},
  { 1524, 1540, sizeof(::db::ConfigNavigationEvent)},
  { 1551, 1569, sizeof(::db::ConfigDungeonAltar)},
  { 1582, 1602, sizeof(::db::ConfigRobot)},
  { 1617, 1626, sizeof(::db::ConfigBeacon)},
  { 1630, 1639, sizeof(::db::ConfigMaelstromTile)},
  { 1643, 1661, sizeof(::db::ConfigMaelstrom)},
  { 1674, 1688, sizeof(::db::ConfigMaelstromEvent)},
  { 1697, 1705, sizeof(::db::ConfigProfession)},
  { 1708, 1726, sizeof(::db::ConfigBeaconTalent)},
  { 1739, 1746, sizeof(::db::ConfigBeaconTalentGroup)},
  { 1748, 1763, sizeof(::db::ConfigDungeonChest)},
  { 1773, 1784, sizeof(::db::ConfigGuildStore)},
  { 1790, 1798, sizeof(::db::ConfigGameExchange)},
  { 1801, 1808, sizeof(::db::ConfigName)},
  { 1810, 1819, sizeof(::db::ConfigFirstname)},
  { 1823, 1832, sizeof(::db::ConfigLastname)},
  { 1836, 1855, sizeof(::db::ConfigPlayerInvade)},
  { 1869, 1879, sizeof(::db::ConfigRoomModel)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFacility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCardStrengthen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPlace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigSceneInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigExploreEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigBaseRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFormula_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigShopping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCardAttribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCardEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCardEquipStrengthen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCardLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigWanted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigTaskStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigNpc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigAchievement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigAchievementTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigSystemTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigRandomGift_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDungeonEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDungeonContentGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigEnemy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigEnemyEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigEnemyGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFightItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFightMachine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDungeonTalent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDungeonTalentTree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDungeonStoreGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMachineExchange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMachineExchangeGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPveMapModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPveRoomModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigChest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDropItemGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigLottery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigSecretRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigSecretRoomGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFarmSkillLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFightRandomGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigNpcFight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPvePlayerDrop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCardTalent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigShoppingVitality_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigRankingReward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFightElementConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigWildIslandLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigBusinessman_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigSkillRandom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigEquipAttributeWord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigEquipRefineCost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigEquipDecompose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigEquipDecomposeCost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigSpecialEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigCardPractice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigGhostShip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFacilityGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigRankingScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigRankingBattleReward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigEasterEgg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigShipEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDailyGift_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigNavigationEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDungeonAltar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigBeacon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMaelstromTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMaelstrom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMaelstromEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigProfession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigBeaconTalent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigBeaconTalentGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigDungeonChest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigGuildStore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigGameExchange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigFirstname_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigLastname_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPlayerInvade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigRoomModel_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "StoredProcConfig.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 86);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026StoredProcConfig.proto\022\002db\"\250\005\n\016ConfigF"
      "acility\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\020\n\010mai"
      "ntype\030\003 \002(\005\022\021\n\tfunc_type\030\004 \002(\005\022\020\n\010style_"
      "id\030\005 \002(\005\022\022\n\nbuild_type\030\006 \002(\005\022\020\n\010property"
      "\030\007 \002(\014\022\r\n\005price\030\010 \002(\005\022\021\n\tseize_row\030\t \002(\005"
      "\022\021\n\tseize_col\030\n \002(\005\022\017\n\007seconds\030\013 \002(\005\022\r\n\005"
      "float\030\014 \002(\005\022\014\n\004node\030\r \002(\005\022\021\n\troom_must\030\016"
      " \002(\005\022\026\n\016base_device_id\030\017 \002(\005\022\030\n\020level_up"
      "_require\030\020 \002(\014\022\026\n\016level_up_grade\030\021 \002(\005\022\023"
      "\n\013level_up_id\030\022 \002(\005\022\026\n\016facility_level\030\023 "
      "\002(\005\022\023\n\013people_node\030\024 \002(\005\022\033\n\023level_up_shi"
      "p_level\030\025 \002(\005\022\026\n\016formula_unlock\030\026 \002(\014\022\036\n"
      "\026level_up_captain_level\030\027 \002(\005\022\034\n\024level_u"
      "p_need_device\030\030 \002(\014\022\036\n\026level_up_need_fac"
      "ility\030\031 \002(\014\022\030\n\020special_property\030\032 \002(\014\022\033\n"
      "\023machine_id_in_fight\030\033 \002(\005\022\035\n\025slot_unloc"
      "k_condition\030\034 \002(\014\022\030\n\020machine_capacity\030\035 "
      "\002(\005\022\032\n\022level_up_need_time\030\036 \002(\005\"\205\001\n\nConf"
      "igItem\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\014\n\004type"
      "\030\003 \002(\005\022\014\n\004star\030\004 \002(\005\022\017\n\007quality\030\005 \002(\005\022\020\n"
      "\010property\030\006 \002(\014\022\r\n\005price\030\007 \002(\005\022\017\n\007max_nu"
      "m\030\010 \002(\003\"\334\004\n\nConfigCard\022\n\n\002id\030\001 \002(\005\022\014\n\004na"
      "me\030\002 \002(\014\022\022\n\nprofession\030\004 \002(\005\022\014\n\004star\030\005 \002"
      "(\005\022\024\n\014attack_range\030\006 \002(\005\022\023\n\013attack_mode\030"
      "\007 \002(\005\022\023\n\013energy_cost\030\010 \002(\005\022\023\n\013attack_tim"
      "e\030\t \002(\002\022\021\n\twait_time\030\n \002(\002\022\021\n\tmove_time\030"
      "\013 \002(\002\022\025\n\rmove_distance\030\014 \002(\005\022\024\n\014run_dist"
      "ance\030\r \002(\005\022\020\n\010can_move\030\016 \002(\005\022\023\n\013action_m"
      "ode\030\017 \002(\005\022\r\n\005width\030\020 \002(\005\022\016\n\006height\030\021 \002(\005"
      "\022\025\n\rinitial_equip\030\022 \002(\014\022\016\n\006talent\030\023 \002(\004\022"
      "\026\n\016practice_group\030\024 \002(\005\022\022\n\nfarm_skill\030\025 "
      "\002(\014\022\r\n\005skill\030\026 \002(\014\022\017\n\007chip_id\030\027 \002(\005\022\021\n\tc"
      "hip_cost\030\030 \002(\005\022\024\n\014chip_convert\030\031 \002(\005\022\025\n\r"
      "chip_exchange\030\032 \002(\014\022\030\n\020gather_add_ratio\030"
      "\033 \002(\002\022\030\n\020penetration_args\030\034 \002(\014\022\027\n\017init_"
      "fall_skill\030\035 \002(\003\022\017\n\007quality\030\036 \002(\005\022\023\n\013ini"
      "t_hunger\030\037 \002(\002\"\264\001\n\024ConfigCardStrengthen\022"
      "\016\n\006typeid\030\001 \002(\005\022\014\n\004star\030\002 \002(\005\022\031\n\021initial"
      "_attribute\030\003 \002(\014\022\020\n\010aptitude\030\004 \002(\014\022\021\n\tle"
      "vel_max\030\005 \002(\005\022\021\n\titem_cost\030\006 \002(\014\022\021\n\tchip"
      "_cost\030\007 \002(\014\022\030\n\020rising_star_cost\030\010 \002(\014\"\304\001"
      "\n\013ConfigLevel\022\r\n\005level\030\001 \002(\005\022\020\n\010need_exp"
      "\030\002 \002(\005\022\024\n\014add_facility\030\003 \002(\014\022\020\n\010add_item"
      "\030\004 \002(\014\022\017\n\007add_exp\030\005 \002(\005\022\030\n\020max_sailor_le"
      "vel\030\006 \002(\005\022\024\n\014max_vitality\030\007 \002(\005\022\026\n\016max_t"
      "ake_items\030\010 \002(\005\022\023\n\013fail_reward\030\t \002(\014\"\235\002\n"
      "\013ConfigModel\022\n\n\002id\030\001 \002(\005\022\r\n\005style\030\002 \002(\005\022"
      "\r\n\005level\030\003 \002(\005\022\021\n\troom_open\030\004 \002(\014\022\020\n\010map"
      "_size\030\005 \002(\014\022\025\n\rship_template\030\006 \002(\014\022\025\n\rnu"
      "ll_template\030\007 \002(\014\022\025\n\rship_facility\030\010 \002(\014"
      "\022\022\n\nneed_level\030\t \002(\005\022\021\n\tpre_model\030\n \002(\005\022"
      "\023\n\013unlock_cost\030\013 \002(\014\022\020\n\010capacity\030\014 \002(\005\022\025"
      "\n\runlock_reward\030\r \002(\014\022\025\n\rmachine_param\030\016"
      " \002(\002\"\232\001\n\013ConfigPlace\022\n\n\002id\030\001 \002(\005\022\014\n\004name"
      "\030\002 \002(\014\022\014\n\004time\030\003 \002(\014\022\020\n\010location\030\004 \002(\005\022\021"
      "\n\tstart_pos\030\005 \002(\014\022\r\n\005width\030\006 \002(\005\022\016\n\006heig"
      "ht\030\007 \002(\005\022\021\n\ttiled_map\030\010 \002(\014\022\014\n\004boom\030\t \002("
      "\005\"\217\005\n\017ConfigSceneInfo\022\017\n\007sceneid\030\001 \002(\005\022\022"
      "\n\nscene_name\030\002 \002(\014\022\014\n\004type\030\003 \002(\005\022\021\n\tbelo"
      "ng_to\030\004 \002(\005\022\026\n\016checkpoint_num\030\005 \002(\005\022\013\n\003p"
      "os\030\006 \002(\014\022\021\n\tdrop_item\030\007 \002(\014\022\026\n\016formula_u"
      "nlock\030\010 \002(\014\022\017\n\007add_exp\030\t \002(\005\022\025\n\rend_cond"
      "ition\030\n \002(\014\022\023\n\013consume_num\030\013 \002(\005\022\026\n\016star"
      "_condition\030\014 \002(\014\022\021\n\tfight_map\030\r \002(\014\022\021\n\tm"
      "ax_layer\030\016 \002(\005\022\017\n\007content\030\020 \002(\014\022\023\n\013port_"
      "unlock\030\021 \002(\014\022\020\n\010pre_task\030\022 \002(\014\022\023\n\013secret"
      "_room\030\023 \002(\014\022\021\n\tstart_res\030\024 \002(\014\022\025\n\rfight_"
      "machine\030\025 \002(\014\022\027\n\017enter_condition\030\026 \002(\014\022\025"
      "\n\rdungeon_event\030\027 \002(\014\022\024\n\014final_reward\030\030 "
      "\002(\014\022\022\n\nneed_point\030\031 \002(\005\022\024\n\014first_reward\030"
      "\032 \002(\014\022\024\n\014clear_reward\030\033 \002(\014\022\021\n\tboss_info"
      "\030\034 \002(\014\022\024\n\014layer_reward\030\035 \002(\014\022\022\n\ncan_repe"
      "at\030\036 \002(\005\022\031\n\021daily_times_limit\030\037 \002(\005\022\026\n\016s"
      "aved_customer\030  \002(\014\"\300\001\n\022ConfigExploreEve"
      "nt\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\024\n\014trigger_"
      "type\030\003 \002(\005\022\021\n\tcondition\030\004 \002(\014\022\032\n\022landfor"
      "m_condition\030\005 \002(\014\022\017\n\007content\030\006 \002(\014\022\013\n\003po"
      "s\030\007 \002(\014\022\023\n\013probability\030\010 \002(\002\022\n\n\002cd\030\t \002(\005"
      "\022\014\n\004time\030\n \002(\005\"\342\001\n\016ConfigBaseRoom\022\n\n\002id\030"
      "\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\021\n\troom_type\030\003 \002(\005\022\024"
      "\n\014room_num_min\030\004 \002(\005\022\021\n\tattribute\030\005 \002(\005\022"
      "\022\n\nefficiency\030\006 \002(\005\022\020\n\010pre_room\030\007 \002(\005\022\022\n"
      "\nneed_level\030\010 \002(\005\022\025\n\rneed_material\030\t \002(\014"
      "\022\022\n\nfarm_skill\030\n \002(\005\022\025\n\rmachine_param\030\013 "
      "\002(\014\"\320\001\n\rConfigFormula\022\n\n\002id\030\001 \002(\005\022\r\n\005lev"
      "el\030\002 \002(\005\022\022\n\nproduct_id\030\003 \002(\014\022\024\n\014formula_"
      "name\030\004 \002(\014\022\014\n\004type\030\005 \002(\005\022\020\n\010material\030\006 \002"
      "(\014\022\017\n\007seconds\030\007 \002(\005\022\021\n\tbelong_to\030\010 \002(\005\022\017"
      "\n\007add_exp\030\t \002(\005\022\025\n\rspeed_up_cost\030\n \002(\014\022\016"
      "\n\006output\030\013 \002(\005\"\244\001\n\016ConfigShopping\022\n\n\002id\030"
      "\001 \002(\005\022\017\n\007groupid\030\002 \002(\005\022\020\n\010category\030\003 \002(\005"
      "\022\024\n\014belong_store\030\004 \002(\005\022\r\n\005goods\030\005 \002(\014\022\r\n"
      "\005price\030\006 \002(\014\022\014\n\004date\030\007 \002(\014\022\021\n\tlimit_num\030"
      "\010 \002(\005\022\016\n\006double\030\t \002(\005\"P\n\023ConfigCardAttri"
      "bute\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004name\030\003"
      " \002(\014\022\021\n\tinfluence\030\004 \002(\014\"\375\002\n\017ConfigCardEq"
      "uip\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\014\n\004star\030\003 "
      "\002(\005\022\017\n\007quality\030\004 \002(\005\022\014\n\004part\030\005 \002(\005\022\022\n\nne"
      "ed_level\030\006 \002(\005\022\022\n\noccupation\030\007 \002(\005\022\022\n\nfa"
      "rm_skill\030\010 \002(\005\022\014\n\004type\030\t \002(\005\022\024\n\014initial_"
      "slot\030\n \002(\005\022\021\n\tattribute\030\013 \002(\014\022\024\n\014special"
      "_attr\030\014 \002(\014\022\025\n\radvanced_attr\030\r \002(\014\022\022\n\nfo"
      "rge_cost\030\016 \002(\014\022\r\n\005price\030\017 \002(\005\022\032\n\022base_at"
      "tribute_add\030\020 \002(\014\022\034\n\024quality_refine_time"
      "s\030\021 \002(\005\022\r\n\005skill\030\022 \002(\014\022\027\n\017quality_up_cos"
      "t\030\023 \002(\014\"\246\001\n\031ConfigCardEquipStrengthen\022\n\n"
      "\002id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\017\n\007quality\030\003 \002("
      "\005\022\014\n\004part\030\004 \002(\005\022\034\n\024strengthen_level_max\030"
      "\005 \002(\005\022\014\n\004cost\030\006 \002(\014\022\014\n\004gold\030\007 \002(\014\022\025\n\ratt"
      "ribute_add\030\010 \002(\014\"1\n\017ConfigCardLevel\022\r\n\005l"
      "evel\030\001 \002(\005\022\017\n\007exp_max\030\002 \002(\005\"g\n\014ConfigWan"
      "ted\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\017\n\007content"
      "\030\003 \002(\014\022\r\n\005place\030\004 \002(\014\022\r\n\005event\030\005 \002(\014\022\016\n\006"
      "reward\030\006 \002(\014\"\244\001\n\nConfigTask\022\n\n\002id\030\001 \002(\005\022"
      "\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002(\005\022\022\n\nneed_leve"
      "l\030\004 \002(\005\022\020\n\010pre_task\030\005 \002(\005\022\021\n\tnpc_state\030\010"
      " \002(\014\022\016\n\006reward\030\t \002(\014\022\017\n\007add_exp\030\n \002(\005\022\024\n"
      "\014harbor_flush\030\013 \002(\014\"|\n\016ConfigTaskStep\022\016\n"
      "\006taskid\030\001 \002(\005\022\014\n\004step\030\002 \002(\005\022\021\n\tnpc_state"
      "\030\003 \002(\014\022\017\n\007content\030\004 \002(\014\022\024\n\014harbor_flush\030"
      "\005 \002(\014\022\022\n\nship_event\030\006 \002(\014\"b\n\tConfigNpc\022\n"
      "\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\r\n\005state\030\003 \002(\005\022"
      "\r\n\005place\030\004 \002(\005\022\020\n\010pos_type\030\005 \002(\005\022\013\n\003pos\030"
      "\006 \002(\014\"\237\001\n\021ConfigAchievement\022\n\n\002id\030\001 \002(\005\022"
      "\r\n\005phase\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\022\016\n\006action\030\004"
      " \002(\005\022\016\n\006target\030\005 \002(\005\022\r\n\005param\030\006 \002(\005\022\017\n\007r"
      "equire\030\007 \002(\005\022\021\n\tget_point\030\010 \002(\005\022\016\n\006rewar"
      "d\030\t \002(\014\"X\n\025ConfigAchievementTask\022\n\n\002id\030\001"
      " \002(\005\022\022\n\ndungeon_id\030\002 \002(\005\022\017\n\007require\030\003 \002("
      "\005\022\016\n\006reward\030\004 \002(\014\"\310\001\n\020ConfigSystemTask\022\n"
      "\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\026\n\016condition_ty"
      "pe\030\003 \002(\005\022\021\n\tcondition\030\004 \002(\014\022\017\n\007require\030\005"
      " \002(\005\022\016\n\006reward\030\006 \002(\014\022\013\n\003exp\030\007 \002(\005\022\033\n\023ref"
      "resh_date_weekly\030\010 \002(\014\022\022\n\nneed_level\030\t \002"
      "(\014\022\020\n\010pre_task\030\n \002(\014\"r\n\020ConfigRandomGift"
      "\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\023\n\013probabilit"
      "y\030\003 \002(\005\022\r\n\005price\030\004 \002(\014\022\r\n\005goods\030\005 \002(\014\022\021\n"
      "\tlimit_num\030\006 \002(\005\"\213\001\n\022ConfigDungeonEvent\022"
      "\n\n\002id\030\001 \002(\005\022\016\n\006action\030\002 \002(\005\022\021\n\tcondition"
      "\030\003 \002(\014\022\017\n\007require\030\004 \002(\005\022\021\n\tget_point\030\005 \002"
      "(\005\022\022\n\ndungeon_id\030\006 \002(\005\022\016\n\006reward\030\007 \002(\014\"\261"
      "\001\n\031ConfigDungeonContentGroup\022\n\n\002id\030\001 \002(\005"
      "\022\024\n\014base_element\030\002 \002(\014\022\026\n\016random_element"
      "\030\003 \002(\014\022\023\n\013spider_info\030\004 \002(\014\022\024\n\014stairs_en"
      "emy\030\005 \002(\014\022\013\n\003npc\030\006 \002(\014\022\023\n\013path_choice\030\007 "
      "\002(\014\022\r\n\005altar\030\010 \002(\014\"\301\003\n\013ConfigEnemy\022\n\n\002id"
      "\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\022\n\nprofession\030\003 \002(\005"
      "\022\023\n\013enemy_model\030\004 \002(\005\022\014\n\004camp\030\005 \002(\005\022\n\n\002h"
      "p\030\006 \002(\005\022\027\n\017physical_attack\030\007 \002(\002\022\024\n\014magi"
      "c_attack\030\010 \002(\002\022\030\n\020physical_defense\030\t \002(\002"
      "\022\025\n\rmagic_defense\030\n \002(\002\022\016\n\006summon\030\013 \002(\005\022"
      "\r\n\005width\030\014 \002(\002\022\016\n\006height\030\r \002(\002\022\021\n\twait_t"
      "ime\030\016 \002(\005\022\023\n\013attack_mode\030\017 \002(\005\022\025\n\rmove_d"
      "istance\030\020 \002(\005\022\024\n\014run_distance\030\021 \002(\005\022\020\n\010c"
      "an_move\030\022 \002(\005\022\022\n\nenemy_type\030\023 \002(\005\022\023\n\013act"
      "ion_mode\030\024 \002(\005\022\r\n\005skill\030\025 \002(\014\022\021\n\tdrop_it"
      "em\030\026 \002(\014\022\024\n\014drop_element\030\027 \002(\014\"4\n\020Config"
      "EnemyEvent\022\n\n\002id\030\001 \002(\005\022\024\n\014trigger_info\030\002"
      " \002(\014\"o\n\020ConfigEnemyGroup\022\n\n\002id\030\001 \002(\005\022\017\n\007"
      "eventid\030\002 \002(\005\022\022\n\ngroup_info\030\003 \002(\014\022\024\n\014ran"
      "dom_enemy\030\004 \002(\014\022\024\n\014random_event\030\005 \002(\014\"\247\001"
      "\n\017ConfigFightItem\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 "
      "\002(\014\022\014\n\004type\030\003 \002(\005\022\020\n\010use_type\030\004 \002(\005\022\016\n\006e"
      "ffect\030\005 \002(\014\022\023\n\013package_max\030\006 \002(\005\022\024\n\014exch"
      "ange_num\030\007 \002(\005\022\020\n\010exchange\030\010 \002(\014\022\r\n\005pric"
      "e\030\t \002(\014\"\331\001\n\022ConfigFightMachine\022\n\n\002id\030\001 \002"
      "(\005\022\026\n\016condition_type\030\002 \002(\005\022\027\n\017condition_"
      "param\030\003 \002(\005\022\024\n\014machine_type\030\004 \002(\005\022\026\n\016tri"
      "gger_effect\030\005 \002(\014\022\024\n\014machine_time\030\006 \002(\005\022"
      "\027\n\017trigger_element\030\007 \002(\014\022\024\n\014special_type"
      "\030\010 \002(\005\022\023\n\013exist_times\030\t \002(\005\"\350\001\n\023ConfigDu"
      "ngeonTalent\022\024\n\014talent_group\030\001 \002(\005\022\r\n\005lev"
      "el\030\002 \002(\005\022\021\n\tlevel_max\030\003 \002(\005\022\021\n\tget_props"
      "\030\004 \002(\014\022\027\n\017next_floor_item\030\005 \002(\014\022\032\n\022next_"
      "floor_machine\030\006 \002(\014\022\022\n\nincentives\030\007 \002(\014\022"
      "\032\n\022machine_incentives\030\010 \002(\014\022\023\n\013reduce_co"
      "st\030\t \002(\014\022\014\n\004cost\030\n \002(\014\"Y\n\027ConfigDungeonT"
      "alentTree\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004c"
      "ost\030\003 \002(\014\022\026\n\016unlock_require\030\004 \002(\014\"O\n\027Con"
      "figDungeonStoreGroup\022\n\n\002id\030\001 \002(\005\022\022\n\nbase"
      "_items\030\002 \002(\014\022\024\n\014random_items\030\003 \002(\014\">\n\025Co"
      "nfigMachineExchange\022\n\n\002id\030\001 \002(\005\022\014\n\004cost\030"
      "\002 \002(\014\022\013\n\003get\030\003 \002(\014\"<\n\032ConfigMachineExcha"
      "ngeGroup\022\n\n\002id\030\001 \002(\005\022\022\n\ngroup_info\030\002 \002(\014"
      "\"\326\003\n\021ConfigPveMapModel\022\n\n\002id\030\001 \002(\005\022\014\n\004na"
      "me\030\002 \002(\014\022\014\n\004type\030\003 \002(\005\022\017\n\007subtype\030\004 \002(\005\022"
      "\r\n\005level\030\005 \002(\014\022\020\n\010map_type\030\006 \002(\005\022\021\n\tmap_"
      "tiles\030\007 \002(\014\022\020\n\010map_size\030\010 \002(\014\022\027\n\017random_"
      "room_one\030\013 \002(\014\022\027\n\017random_room_two\030\014 \002(\014\022"
      "\031\n\021random_room_three\030\r \002(\014\022\030\n\020random_roo"
      "m_four\030\016 \002(\014\022\030\n\020random_room_five\030\017 \002(\014\022\030"
      "\n\020random_enemy_two\030\020 \002(\014\022\032\n\022random_enemy"
      "_three\030\021 \002(\014\022\031\n\021random_enemy_four\030\022 \002(\014\022"
      "\031\n\021random_enemy_five\030\023 \002(\014\022\021\n\tfacilitys\030"
      "\025 \002(\014\022\024\n\014confirm_room\030\026 \002(\014\022\027\n\017confirm_e"
      "lement\030\027 \002(\014\022\023\n\013locked_room\030\030 \002(\014\"\320\001\n\022Co"
      "nfigPveRoomModel\022\n\n\002id\030\001 \002(\005\022\017\n\007groupid\030"
      "\002 \002(\005\022\014\n\004type\030\003 \002(\005\022\021\n\tfacilitys\030\004 \002(\014\022\r"
      "\n\005drops\030\005 \002(\014\022\017\n\007machine\030\006 \002(\014\022\026\n\016random"
      "_machine\030\007 \002(\014\022\r\n\005altar\030\010 \002(\014\022\021\n\troom_si"
      "ze\030\t \002(\014\022\023\n\013exist_enemy\030\n \002(\005\022\r\n\005chest\030\013"
      " \002(\014\"^\n\013ConfigChest\022\n\n\002id\030\001 \002(\005\022\r\n\005phase"
      "\030\002 \002(\005\022\r\n\005level\030\003 \002(\014\022\021\n\tdrop_item\030\004 \002(\014"
      "\022\022\n\ndrop_group\030\005 \002(\014\"\226\001\n\023ConfigDropItemG"
      "roup\022\n\n\002id\030\001 \002(\005\022\017\n\007groupid\030\002 \002(\005\022\014\n\004typ"
      "e\030\003 \002(\005\022\r\n\005index\030\004 \002(\005\022\016\n\006typeid\030\005 \002(\005\022\017"
      "\n\007num_min\030\006 \002(\005\022\017\n\007num_max\030\007 \002(\005\022\023\n\013prob"
      "ability\030\010 \002(\002\"\246\001\n\rConfigLottery\022\n\n\002id\030\001 "
      "\002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004cost\030\003 \002(\014\022\021\n\tlimit"
      "_num\030\004 \002(\005\022\025\n\rrandom_groups\030\005 \002(\014\022\025\n\rlow"
      "est_groups\030\006 \002(\014\022\023\n\013activity_id\030\007 \002(\005\022\027\n"
      "\017activity_reward\030\010 \002(\014\"\\\n\020ConfigSecretRo"
      "om\022\n\n\002id\030\001 \002(\005\022\020\n\010model_id\030\002 \002(\005\022\021\n\tlock"
      "_info\030\003 \002(\014\022\027\n\017trigger_element\030\004 \002(\014\"7\n\025"
      "ConfigSecretRoomGroup\022\n\n\002id\030\001 \002(\005\022\022\n\ngro"
      "up_info\030\002 \002(\014\"l\n\024ConfigFarmSkillLevel\022\n\n"
      "\002id\030\001 \002(\004\022\r\n\005level\030\002 \002(\005\022\017\n\007exp_max\030\003 \002("
      "\005\022\025\n\rlevel_up_cost\030\004 \002(\014\022\021\n\tattribute\030\005 "
      "\002(\014\"\375\003\n\013ConfigSkill\022\n\n\002id\030\001 \002(\004\022\023\n\013skill"
      "_level\030\002 \002(\005\022\017\n\007groupid\030\003 \002(\004\022\022\n\nskill_n"
      "ame\030\004 \002(\014\022\023\n\013description\030\005 \002(\014\022\021\n\tneed_s"
      "tar\030\006 \002(\005\022\022\n\nneed_level\030\007 \002(\005\022\032\n\022level_u"
      "p_base_cost\030\010 \002(\014\022\025\n\rlevel_up_cost\030\t \002(\014"
      "\022\021\n\tchip_cost\030\n \002(\005\022\016\n\006target\030\013 \002(\014\022\014\n\004t"
      "ype\030\014 \002(\005\022\020\n\010priority\030\r \002(\005\022\023\n\013attack_at"
      "tr\030\016 \002(\005\022\016\n\006attack\030\017 \002(\014\022\023\n\013attack_mode\030"
      "\020 \002(\014\022\031\n\021trigger_self_buff\030\021 \002(\014\022\032\n\022trig"
      "ger_enemy_buff\030\022 \002(\014\022\021\n\tbuff_mode\030\023 \002(\014\022"
      "\n\n\002cd\030\024 \002(\005\022\017\n\007product\030\025 \002(\005\022\024\n\014attack_r"
      "ange\030\026 \002(\005\022\026\n\016special_effect\030\027 \002(\005\022\020\n\010it"
      "em_add\030\030 \002(\014\022\025\n\rattribute_add\030\031 \002(\014\"w\n\026C"
      "onfigFightRandomGroup\022\n\n\002id\030\001 \002(\005\022\017\n\007gro"
      "upid\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\022\r\n\005index\030\004 \002(\005\022"
      "\016\n\006typeid\030\005 \002(\005\022\023\n\013probability\030\006 \002(\002\"R\n\016"
      "ConfigNpcFight\022\n\n\002id\030\001 \002(\004\022\020\n\010model_id\030\002"
      " \002(\004\022\022\n\nmove_speed\030\003 \002(\005\022\016\n\006effect\030\004 \002(\014"
      "\"A\n\023ConfigPvePlayerDrop\022\n\n\002id\030\001 \002(\004\022\020\n\010f"
      "acility\030\002 \002(\004\022\014\n\004drop\030\003 \002(\014\"t\n\020ConfigCar"
      "dTalent\022\n\n\002id\030\001 \002(\004\022\r\n\005level\030\002 \002(\005\022\014\n\004na"
      "me\030\003 \002(\014\022\020\n\010skill_id\030\004 \002(\004\022\025\n\rfarm_skill"
      "_id\030\005 \002(\004\022\016\n\006effect\030\006 \002(\014\"I\n\026ConfigShopp"
      "ingVitality\022\n\n\002id\030\001 \002(\005\022\r\n\005price\030\002 \002(\005\022\024"
      "\n\014get_vitality\030\003 \002(\005\"\211\001\n\023ConfigRankingRe"
      "ward\022\n\n\002id\030\001 \002(\005\022\017\n\007ranking\030\002 \002(\014\022\020\n\010div"
      "ision\030\003 \002(\005\022\024\n\014daily_reward\030\004 \002(\014\022\025\n\rwee"
      "kly_reward\030\005 \002(\014\022\026\n\016monthly_reward\030\006 \002(\014"
      "\"N\n\031ConfigFightElementConnect\022\n\n\002id\030\001 \002("
      "\005\022\014\n\004type\030\002 \002(\005\022\027\n\017connect_element\030\003 \002(\014"
      "\"\375\001\n\025ConfigWildIslandLevel\022\n\n\002id\030\001 \002(\003\022\020"
      "\n\010islandid\030\002 \002(\003\022\014\n\004name\030\003 \002(\014\022\014\n\004rank\030\004"
      " \002(\005\022\r\n\005level\030\005 \002(\005\022\021\n\tcondition\030\006 \002(\005\022\025"
      "\n\rvitality_cost\030\007 \002(\005\022\022\n\nworker_max\030\010 \002("
      "\005\022\023\n\013produce_add\030\t \002(\005\022\023\n\013repair_cost\030\n "
      "\002(\014\022\020\n\010model_id\030\013 \002(\005\022\021\n\tmap_model\030\014 \002(\005"
      "\022\016\n\006reward\030\r \002(\014\"\366\002\n\021ConfigBusinessman\022\n"
      "\n\002id\030\001 \002(\003\022\014\n\004name\030\002 \002(\014\022\014\n\004type\030\003 \002(\005\022\026"
      "\n\016exchange_need1\030\013 \002(\014\022\030\n\020exchange_rewar"
      "d1\030\014 \002(\014\022\026\n\016exchange_need2\030\r \002(\014\022\030\n\020exch"
      "ange_reward2\030\016 \002(\014\022\026\n\016exchange_need3\030\017 \002"
      "(\014\022\030\n\020exchange_reward3\030\020 \002(\014\022\021\n\tgoods_nu"
      "m\030\025 \002(\014\022\r\n\005goods\030\026 \002(\014\022\034\n\024discount_proba"
      "bility\030\027 \002(\002\022\024\n\014discount_num\030\030 \002(\014\022\031\n\021pr"
      "ice_fluctuation\030\031 \002(\014\022\017\n\007bargain\030\032 \002(\014\022\020"
      "\n\010duration\030\033 \002(\005\022\017\n\007groupid\030\034 \002(\003\"V\n\021Con"
      "figSkillRandom\022\n\n\002id\030\001 \002(\003\022\014\n\004type\030\002 \002(\005"
      "\022\022\n\nprofession\030\003 \002(\014\022\023\n\013probability\030\004 \002("
      "\002\"\223\001\n\030ConfigEquipAttributeWord\022\n\n\002id\030\001 \002"
      "(\005\022\014\n\004type\030\002 \002(\005\022\017\n\007attr_id\030\003 \002(\005\022\020\n\010int"
      "erval\030\004 \002(\014\022\r\n\005float\030\005 \002(\014\022\025\n\rperfect_va"
      "lue\030\006 \002(\002\022\024\n\014unlock_level\030\007 \002(\005\"\232\001\n\025Conf"
      "igEquipRefineCost\022\014\n\004star\030\001 \002(\005\022\014\n\004cost\030"
      "\002 \002(\014\022\033\n\023success_probability\030\003 \002(\002\022\024\n\014di"
      "amond_cost\030\004 \002(\005\022#\n\033diamond_success_prob"
      "ability\030\005 \002(\002\022\r\n\005limit\030\006 \002(\005\"e\n\024ConfigEq"
      "uipDecompose\022\014\n\004star\030\001 \002(\005\022\017\n\007quality\030\002 "
      "\002(\005\022\025\n\rdecompose_get\030\003 \002(\014\022\027\n\017skill_infl"
      "uence\030\004 \002(\014\"d\n\030ConfigEquipDecomposeCost\022"
      "\n\n\002id\030\001 \002(\005\022\014\n\004cost\030\002 \002(\014\022\033\n\023success_pro"
      "bability\030\003 \002(\002\022\021\n\tadd_ratio\030\004 \002(\002\"\261\001\n\022Co"
      "nfigSpecialEvent\022\n\n\002id\030\001 \002(\003\022\017\n\007trigger\030"
      "\002 \002(\005\022\025\n\rtrigger_param\030\003 \002(\014\022\021\n\tconditio"
      "n\030\004 \002(\005\022\027\n\017condition_param\030\005 \002(\005\022\025\n\rtrig"
      "ger_times\030\006 \002(\005\022\016\n\006reward\030\007 \002(\014\022\024\n\014first"
      "_reward\030\010 \002(\014\"\221\001\n\022ConfigCardPractice\022\n\n\002"
      "id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\014\n\004cost\030\003 \002(\014\022\021\n"
      "\tneed_star\030\004 \002(\005\022\022\n\nneed_level\030\005 \002(\005\022\025\n\r"
      "attribute_add\030\006 \002(\014\022\024\n\014talent_level\030\007 \002("
      "\005\"\354\001\n\017ConfigGhostShip\022\n\n\002id\030\001 \002(\005\022\014\n\004typ"
      "e\030\002 \002(\005\022\025\n\rinitial_state\030\003 \002(\005\022\024\n\014unlock"
      "_stage\030\004 \002(\014\022\r\n\005match\030\005 \002(\014\022\022\n\nboss_grou"
      "p\030\006 \002(\014\022\016\n\006reward\030\007 \002(\014\022\020\n\010buff_get\030\010 \002("
      "\014\022\024\n\014monster_buff\030\t \002(\014\022\021\n\tmap_model\030\n \002"
      "(\005\022\026\n\016special_reward\030\013 \002(\014\022\014\n\004rank\030\014 \002(\005"
      "\"Q\n\023ConfigFacilityGroup\022\n\n\002id\030\001 \002(\005\022\017\n\007c"
      "ontain\030\002 \002(\014\022\016\n\006effect\030\003 \002(\005\022\r\n\005param\030\004 "
      "\002(\014\"/\n\022ConfigRankingScore\022\n\n\002id\030\001 \002(\005\022\r\n"
      "\005score\030\002 \002(\014\"l\n\031ConfigRankingBattleRewar"
      "d\022\n\n\002id\030\001 \002(\005\022\r\n\005combo\030\002 \002(\005\022\020\n\010score_up"
      "\030\003 \002(\005\022\022\n\nscore_down\030\004 \002(\005\022\016\n\006reward\030\005 \002"
      "(\014\"I\n\017ConfigEasterEgg\022\n\n\002id\030\001 \002(\005\022\014\n\004typ"
      "e\030\002 \002(\005\022\014\n\004name\030\003 \002(\014\022\016\n\006choice\030\004 \002(\014\"\335\002"
      "\n\017ConfigShipEvent\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 "
      "\002(\005\022\024\n\014need_seconds\030\003 \002(\014\022\022\n\nneed_level\030"
      "\004 \002(\014\022\022\n\nneed_model\030\005 \002(\005\022\021\n\tneed_room\030\006"
      " \002(\014\022\025\n\rneed_facility\030\007 \002(\014\022\020\n\010pre_task\030"
      "\010 \002(\014\022\016\n\006region\030\t \002(\005\022\023\n\013probability\030\n \002"
      "(\002\022\021\n\tlimit_num\030\013 \002(\005\022\r\n\005enemy\030\014 \002(\014\022\017\n\007"
      "exculde\030\r \002(\005\022\016\n\006choice\030\016 \002(\014\022\026\n\016untreat"
      "ed_cost\030\017 \002(\014\022\016\n\006effect\030\020 \002(\014\022\020\n\010duratio"
      "n\030\021 \002(\005\022\024\n\014happen_limit\030\022 \002(\005\"D\n\017ConfigD"
      "ailyGift\022\n\n\002id\030\001 \002(\005\022\016\n\006reward\030\002 \002(\014\022\025\n\r"
      "time_interval\030\003 \002(\014\"\323\001\n\025ConfigNavigation"
      "Event\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\r\n\005level"
      "\030\003 \002(\014\022\021\n\tdeal_cost\030\004 \002(\014\022\023\n\013ignore_cost"
      "\030\005 \002(\014\022\r\n\005enemy\030\006 \002(\014\022\020\n\010model_id\030\007 \002(\005\022"
      "\014\n\004drop\030\010 \002(\014\022\023\n\013room_effect\030\t \002(\014\022\023\n\013pr"
      "obability\030\n \002(\002\022\020\n\010duration\030\013 \002(\005\"\262\002\n\022Co"
      "nfigDungeonAltar\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002"
      "(\014\022\023\n\013repair_cost\030\003 \002(\014\022\024\n\014destory_cost\030"
      "\004 \002(\014\022\014\n\004drop\030\005 \002(\014\022\017\n\007adjunct\030\006 \002(\005\022\024\n\014"
      "adjunct_type\030\007 \002(\005\022\025\n\radjunct_skill\030\010 \002("
      "\014\022\035\n\025adjunct_level_up_cost\030\t \002(\014\022\035\n\025adju"
      "nct_skill_up_cost\030\n \002(\014\022\033\n\023adjunct_reviv"
      "e_cost\030\013 \002(\014\022\031\n\021adjunct_cure_cost\030\014 \002(\014\022"
      "\025\n\rspecial_skill\030\r \002(\014\"\311\002\n\013ConfigRobot\022\r"
      "\n\005level\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\022\r\n\005score\030\003 \002("
      "\014\022\025\n\rcaptain_level\030\004 \002(\014\022\031\n\021sailor_num_i"
      "n_jjc\030\005 \002(\014\022\025\n\rsailor_in_jjc\030\006 \002(\014\022\024\n\014sa"
      "ilor_level\030\007 \002(\014\022\023\n\013sailor_star\030\010 \002(\014\022\022\n"
      "\nship_model\030\t \002(\014\022\027\n\017sailor_practice\030\n \002"
      "(\014\022\032\n\022sailor_num_in_ship\030\013 \002(\014\022\026\n\016sailor"
      "_in_ship\030\014 \002(\014\022\025\n\requip_quality\030\r \002(\014\022\r\n"
      "\005items\030\016 \002(\014\022\024\n\014invade_score\030\017 \002(\014\"b\n\014Co"
      "nfigBeacon\022\r\n\005level\030\001 \002(\005\022\025\n\rlevel_up_co"
      "st\030\002 \002(\014\022\025\n\rlevel_up_time\030\003 \002(\005\022\025\n\rexplo"
      "re_scope\030\004 \002(\014\"U\n\023ConfigMaelstromTile\022\n\n"
      "\002id\030\001 \002(\005\022\r\n\005event\030\002 \002(\014\022\020\n\010oil_cost\030\003 \002"
      "(\005\022\021\n\tevent_num\030\004 \002(\005\"\247\002\n\017ConfigMaelstro"
      "m\022\n\n\002id\030\001 \002(\005\022\020\n\010map_size\030\002 \002(\014\022\013\n\003map\030\003"
      " \002(\014\022\030\n\020guild_island_pos\030\004 \002(\014\022\031\n\021guild_"
      "island_size\030\005 \002(\014\022\024\n\014oil_well_pos\030\006 \002(\014\022"
      "\025\n\roil_well_size\030\007 \002(\014\022\016\n\006oil_id\030\010 \002(\005\022\022"
      "\n\noil_output\030\t \002(\005\022\024\n\014oil_reserves\030\n \002(\005"
      "\022\031\n\021ship_oil_reserves\030\013 \002(\005\022\026\n\016repair_se"
      "conds\030\014 \002(\005\022\032\n\022event_refresh_time\030\r \002(\014\""
      "\304\001\n\024ConfigMaelstromEvent\022\n\n\002id\030\001 \002(\005\022\014\n\004"
      "type\030\002 \002(\005\022\022\n\nneed_level\030\003 \002(\014\022\017\n\007contan"
      "t\030\004 \002(\014\022\016\n\006reward\030\005 \002(\014\022\025\n\rtrigger_times"
      "\030\006 \002(\005\022\025\n\rtrigger_event\030\007 \002(\014\022\025\n\rexplore"
      "_point\030\010 \002(\014\022\030\n\020explore_level_up\030\t \002(\005\"C"
      "\n\020ConfigProfession\022\n\n\002id\030\001 \002(\005\022\021\n\tmain_a"
      "ttr\030\002 \002(\005\022\020\n\010pro_args\030\003 \002(\014\"\223\002\n\022ConfigBe"
      "aconTalent\022\n\n\002id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\021\n"
      "\tmax_level\030\003 \002(\005\022\014\n\004cost\030\004 \002(\005\022\022\n\npre_ta"
      "lent\030\005 \002(\014\022\020\n\010get_item\030\006 \002(\014\022\030\n\020event_re"
      "ward_add\030\007 \002(\014\022\027\n\017point_cost_down\030\010 \002(\014\022"
      "\024\n\014point_get_up\030\t \002(\014\022\017\n\007adjunct\030\n \002(\014\022\025"
      "\n\rattribute_add\030\013 \002(\014\022\024\n\014enemy_weaken\030\014 "
      "\002(\014\022\024\n\014event_weaken\030\r \002(\014\"6\n\027ConfigBeaco"
      "nTalentGroup\022\n\n\002id\030\001 \002(\005\022\017\n\007content\030\002 \002("
      "\014\"\317\001\n\022ConfigDungeonChest\022\n\n\002id\030\001 \002(\005\022\014\n\004"
      "type\030\002 \002(\005\022\021\n\tmax_times\030\003 \002(\005\022\023\n\013probabi"
      "lity\030\004 \002(\002\022\027\n\017add_probability\030\005 \002(\002\022\014\n\004c"
      "ost\030\006 \002(\014\022\027\n\017cost_in_dungeon\030\007 \002(\014\022\013\n\003ge"
      "t\030\010 \002(\014\022\026\n\016get_in_dungeon\030\t \002(\014\022\022\n\nneed_"
      "level\030\n \002(\014\"\216\001\n\020ConfigGuildStore\022\r\n\005leve"
      "l\030\001 \002(\005\022\027\n\017extra_goods_num\030\002 \002(\005\022\024\n\014norm"
      "al_goods\030\003 \002(\014\022\023\n\013extra_goods\030\004 \002(\014\022\025\n\rr"
      "efresh_times\030\005 \002(\014\022\020\n\010discount\030\006 \002(\014\";\n\022"
      "ConfigGameExchange\022\n\n\002id\030\001 \002(\005\022\014\n\004cost\030\002"
      " \002(\014\022\013\n\003get\030\003 \002(\014\"&\n\nConfigName\022\n\n\002id\030\001 "
      "\002(\005\022\014\n\004name\030\002 \002(\014\"H\n\017ConfigFirstname\022\n\n\002"
      "id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004name\030\003 \002(\014\022\r\n\005"
      "order\030\004 \002(\005\"G\n\016ConfigLastname\022\n\n\002id\030\001 \002("
      "\005\022\014\n\004type\030\002 \002(\005\022\014\n\004name\030\003 \002(\014\022\r\n\005order\030\004"
      " \002(\005\"\310\002\n\022ConfigPlayerInvade\022\023\n\013match_sco"
      "re\030\001 \002(\014\022\024\n\014match_remain\030\002 \002(\005\022\025\n\rrefres"
      "h_times\030\003 \002(\014\022\016\n\006entrys\030\004 \002(\014\022\023\n\013defend_"
      "time\030\005 \002(\014\022\020\n\010win_room\030\006 \002(\014\022\024\n\014revenge_"
      "time\030\007 \002(\005\022\024\n\014reward_ratio\030\010 \002(\014\022\032\n\022extr"
      "a_reward_ratio\030\t \002(\002\022\023\n\013invade_cost\030\n \002("
      "\014\022\032\n\022record_remain_time\030\013 \002(\005\022\023\n\013room_ef"
      "fect\030\014 \002(\014\022\022\n\ndrop_limit\030\r \002(\014\022\027\n\017drop_l"
      "imit_once\030\016 \002(\014\"]\n\017ConfigRoomModel\022\n\n\002id"
      "\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004size\030\003 \002(\014\022\r\n\005sh"
      "ape\030\004 \002(\014\022\023\n\013unlock_cost\030\005 \002(\014B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 15435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StoredProcConfig.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StoredProcConfig_2eproto
namespace db {

// ===================================================================

void ConfigFacility::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFacility::kIdFieldNumber;
const int ConfigFacility::kNameFieldNumber;
const int ConfigFacility::kMaintypeFieldNumber;
const int ConfigFacility::kFuncTypeFieldNumber;
const int ConfigFacility::kStyleIdFieldNumber;
const int ConfigFacility::kBuildTypeFieldNumber;
const int ConfigFacility::kPropertyFieldNumber;
const int ConfigFacility::kPriceFieldNumber;
const int ConfigFacility::kSeizeRowFieldNumber;
const int ConfigFacility::kSeizeColFieldNumber;
const int ConfigFacility::kSecondsFieldNumber;
const int ConfigFacility::kFloatFieldNumber;
const int ConfigFacility::kNodeFieldNumber;
const int ConfigFacility::kRoomMustFieldNumber;
const int ConfigFacility::kBaseDeviceIdFieldNumber;
const int ConfigFacility::kLevelUpRequireFieldNumber;
const int ConfigFacility::kLevelUpGradeFieldNumber;
const int ConfigFacility::kLevelUpIdFieldNumber;
const int ConfigFacility::kFacilityLevelFieldNumber;
const int ConfigFacility::kPeopleNodeFieldNumber;
const int ConfigFacility::kLevelUpShipLevelFieldNumber;
const int ConfigFacility::kFormulaUnlockFieldNumber;
const int ConfigFacility::kLevelUpCaptainLevelFieldNumber;
const int ConfigFacility::kLevelUpNeedDeviceFieldNumber;
const int ConfigFacility::kLevelUpNeedFacilityFieldNumber;
const int ConfigFacility::kSpecialPropertyFieldNumber;
const int ConfigFacility::kMachineIdInFightFieldNumber;
const int ConfigFacility::kSlotUnlockConditionFieldNumber;
const int ConfigFacility::kMachineCapacityFieldNumber;
const int ConfigFacility::kLevelUpNeedTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFacility::ConfigFacility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFacility.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFacility)
}
ConfigFacility::ConfigFacility(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFacility.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFacility)
}
ConfigFacility::ConfigFacility(const ConfigFacility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property()) {
    property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property(),
      GetArenaNoVirtual());
  }
  level_up_require_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_up_require()) {
    level_up_require_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_up_require(),
      GetArenaNoVirtual());
  }
  formula_unlock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_formula_unlock()) {
    formula_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.formula_unlock(),
      GetArenaNoVirtual());
  }
  level_up_need_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_up_need_device()) {
    level_up_need_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_up_need_device(),
      GetArenaNoVirtual());
  }
  level_up_need_facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_up_need_facility()) {
    level_up_need_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_up_need_facility(),
      GetArenaNoVirtual());
  }
  special_property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_special_property()) {
    special_property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_property(),
      GetArenaNoVirtual());
  }
  slot_unlock_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_slot_unlock_condition()) {
    slot_unlock_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_unlock_condition(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_up_need_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_up_need_time_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFacility)
}

void ConfigFacility::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_require_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formula_unlock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_need_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_need_facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_unlock_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_up_need_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_up_need_time_));
}

ConfigFacility::~ConfigFacility() {
  // @@protoc_insertion_point(destructor:db.ConfigFacility)
  SharedDtor();
}

void ConfigFacility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_require_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formula_unlock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_need_device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_need_facility_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_property_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_unlock_condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFacility::ArenaDtor(void* object) {
  ConfigFacility* _this = reinterpret_cast< ConfigFacility* >(object);
  (void)_this;
}
void ConfigFacility::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFacility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFacility::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFacility& ConfigFacility::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFacility.base);
  return *internal_default_instance();
}


void ConfigFacility::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFacility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      level_up_require_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      formula_unlock_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      level_up_need_device_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      level_up_need_facility_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      special_property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      slot_unlock_condition_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seize_col_) -
        reinterpret_cast<char*>(&id_)) + sizeof(seize_col_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&facility_level_) -
        reinterpret_cast<char*>(&seconds_)) + sizeof(facility_level_));
  }
  if (cached_has_bits & 1056964608u) {
    ::memset(&people_node_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_up_need_time_) -
        reinterpret_cast<char*>(&people_node_)) + sizeof(level_up_need_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFacility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFacility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 maintype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_maintype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maintype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 func_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_func_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 style_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_style_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 build_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_build_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes property = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seize_row = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_seize_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seize_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seize_col = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_seize_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seize_col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seconds = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 float = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_float_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &float__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 node = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_node();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 room_must = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_room_must();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_must_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 base_device_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_base_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level_up_require = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_up_require()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level_up_grade = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_level_up_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_up_grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level_up_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_level_up_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_up_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 facility_level = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_facility_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facility_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 people_node = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_people_node();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &people_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level_up_ship_level = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_level_up_ship_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_up_ship_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes formula_unlock = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_formula_unlock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level_up_captain_level = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_level_up_captain_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_up_captain_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level_up_need_device = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_up_need_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level_up_need_facility = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_up_need_facility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes special_property = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_special_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 machine_id_in_fight = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_machine_id_in_fight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_id_in_fight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes slot_unlock_condition = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_slot_unlock_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 machine_capacity = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_machine_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level_up_need_time = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_level_up_need_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_up_need_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFacility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFacility)
  return false;
#undef DO_
}

void ConfigFacility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFacility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 maintype = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maintype(), output);
  }

  // required int32 func_type = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->func_type(), output);
  }

  // required int32 style_id = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->style_id(), output);
  }

  // required int32 build_type = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->build_type(), output);
  }

  // required bytes property = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->property(), output);
  }

  // required int32 price = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->price(), output);
  }

  // required int32 seize_row = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seize_row(), output);
  }

  // required int32 seize_col = 10;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->seize_col(), output);
  }

  // required int32 seconds = 11;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->seconds(), output);
  }

  // required int32 float = 12;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->float_(), output);
  }

  // required int32 node = 13;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->node(), output);
  }

  // required int32 room_must = 14;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->room_must(), output);
  }

  // required int32 base_device_id = 15;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->base_device_id(), output);
  }

  // required bytes level_up_require = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->level_up_require(), output);
  }

  // required int32 level_up_grade = 17;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->level_up_grade(), output);
  }

  // required int32 level_up_id = 18;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->level_up_id(), output);
  }

  // required int32 facility_level = 19;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->facility_level(), output);
  }

  // required int32 people_node = 20;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->people_node(), output);
  }

  // required int32 level_up_ship_level = 21;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->level_up_ship_level(), output);
  }

  // required bytes formula_unlock = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->formula_unlock(), output);
  }

  // required int32 level_up_captain_level = 23;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->level_up_captain_level(), output);
  }

  // required bytes level_up_need_device = 24;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->level_up_need_device(), output);
  }

  // required bytes level_up_need_facility = 25;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->level_up_need_facility(), output);
  }

  // required bytes special_property = 26;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->special_property(), output);
  }

  // required int32 machine_id_in_fight = 27;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->machine_id_in_fight(), output);
  }

  // required bytes slot_unlock_condition = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      28, this->slot_unlock_condition(), output);
  }

  // required int32 machine_capacity = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->machine_capacity(), output);
  }

  // required int32 level_up_need_time = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->level_up_need_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFacility)
}

::google::protobuf::uint8* ConfigFacility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFacility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 maintype = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maintype(), target);
  }

  // required int32 func_type = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->func_type(), target);
  }

  // required int32 style_id = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->style_id(), target);
  }

  // required int32 build_type = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->build_type(), target);
  }

  // required bytes property = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->property(), target);
  }

  // required int32 price = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->price(), target);
  }

  // required int32 seize_row = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seize_row(), target);
  }

  // required int32 seize_col = 10;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->seize_col(), target);
  }

  // required int32 seconds = 11;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->seconds(), target);
  }

  // required int32 float = 12;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->float_(), target);
  }

  // required int32 node = 13;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->node(), target);
  }

  // required int32 room_must = 14;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->room_must(), target);
  }

  // required int32 base_device_id = 15;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->base_device_id(), target);
  }

  // required bytes level_up_require = 16;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->level_up_require(), target);
  }

  // required int32 level_up_grade = 17;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->level_up_grade(), target);
  }

  // required int32 level_up_id = 18;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->level_up_id(), target);
  }

  // required int32 facility_level = 19;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->facility_level(), target);
  }

  // required int32 people_node = 20;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->people_node(), target);
  }

  // required int32 level_up_ship_level = 21;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->level_up_ship_level(), target);
  }

  // required bytes formula_unlock = 22;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->formula_unlock(), target);
  }

  // required int32 level_up_captain_level = 23;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->level_up_captain_level(), target);
  }

  // required bytes level_up_need_device = 24;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->level_up_need_device(), target);
  }

  // required bytes level_up_need_facility = 25;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->level_up_need_facility(), target);
  }

  // required bytes special_property = 26;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->special_property(), target);
  }

  // required int32 machine_id_in_fight = 27;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->machine_id_in_fight(), target);
  }

  // required bytes slot_unlock_condition = 28;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        28, this->slot_unlock_condition(), target);
  }

  // required int32 machine_capacity = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->machine_capacity(), target);
  }

  // required int32 level_up_need_time = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->level_up_need_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFacility)
  return target;
}

size_t ConfigFacility::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFacility)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_property()) {
    // required bytes property = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property());
  }

  if (has_level_up_require()) {
    // required bytes level_up_require = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_require());
  }

  if (has_formula_unlock()) {
    // required bytes formula_unlock = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->formula_unlock());
  }

  if (has_level_up_need_device()) {
    // required bytes level_up_need_device = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_need_device());
  }

  if (has_level_up_need_facility()) {
    // required bytes level_up_need_facility = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_need_facility());
  }

  if (has_special_property()) {
    // required bytes special_property = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_property());
  }

  if (has_slot_unlock_condition()) {
    // required bytes slot_unlock_condition = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->slot_unlock_condition());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_maintype()) {
    // required int32 maintype = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maintype());
  }

  if (has_func_type()) {
    // required int32 func_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->func_type());
  }

  if (has_style_id()) {
    // required int32 style_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style_id());
  }

  if (has_build_type()) {
    // required int32 build_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->build_type());
  }

  if (has_price()) {
    // required int32 price = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  if (has_seize_row()) {
    // required int32 seize_row = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seize_row());
  }

  if (has_seize_col()) {
    // required int32 seize_col = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seize_col());
  }

  if (has_seconds()) {
    // required int32 seconds = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  if (has_float_()) {
    // required int32 float = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->float_());
  }

  if (has_node()) {
    // required int32 node = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node());
  }

  if (has_room_must()) {
    // required int32 room_must = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_must());
  }

  if (has_base_device_id()) {
    // required int32 base_device_id = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_device_id());
  }

  if (has_level_up_grade()) {
    // required int32 level_up_grade = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_grade());
  }

  if (has_level_up_id()) {
    // required int32 level_up_id = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_id());
  }

  if (has_facility_level()) {
    // required int32 facility_level = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facility_level());
  }

  if (has_people_node()) {
    // required int32 people_node = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->people_node());
  }

  if (has_level_up_ship_level()) {
    // required int32 level_up_ship_level = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_ship_level());
  }

  if (has_level_up_captain_level()) {
    // required int32 level_up_captain_level = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_captain_level());
  }

  if (has_machine_id_in_fight()) {
    // required int32 machine_id_in_fight = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_id_in_fight());
  }

  if (has_machine_capacity()) {
    // required int32 machine_capacity = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_capacity());
  }

  if (has_level_up_need_time()) {
    // required int32 level_up_need_time = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_need_time());
  }

  return total_size;
}
size_t ConfigFacility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFacility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x3fffffff) ^ 0x3fffffff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes property = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property());

    // required bytes level_up_require = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_require());

    // required bytes formula_unlock = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->formula_unlock());

    // required bytes level_up_need_device = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_need_device());

    // required bytes level_up_need_facility = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_need_facility());

    // required bytes special_property = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_property());

    // required bytes slot_unlock_condition = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->slot_unlock_condition());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 maintype = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maintype());

    // required int32 func_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->func_type());

    // required int32 style_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style_id());

    // required int32 build_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->build_type());

    // required int32 price = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());

    // required int32 seize_row = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seize_row());

    // required int32 seize_col = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seize_col());

    // required int32 seconds = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());

    // required int32 float = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->float_());

    // required int32 node = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node());

    // required int32 room_must = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_must());

    // required int32 base_device_id = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_device_id());

    // required int32 level_up_grade = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_grade());

    // required int32 level_up_id = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_id());

    // required int32 facility_level = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facility_level());

    // required int32 people_node = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->people_node());

    // required int32 level_up_ship_level = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_ship_level());

    // required int32 level_up_captain_level = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_captain_level());

    // required int32 machine_id_in_fight = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_id_in_fight());

    // required int32 machine_capacity = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_capacity());

    // required int32 level_up_need_time = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_need_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFacility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFacility)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFacility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFacility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFacility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFacility)
    MergeFrom(*source);
  }
}

void ConfigFacility::MergeFrom(const ConfigFacility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFacility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_property(from.property());
    }
    if (cached_has_bits & 0x00000004u) {
      set_level_up_require(from.level_up_require());
    }
    if (cached_has_bits & 0x00000008u) {
      set_formula_unlock(from.formula_unlock());
    }
    if (cached_has_bits & 0x00000010u) {
      set_level_up_need_device(from.level_up_need_device());
    }
    if (cached_has_bits & 0x00000020u) {
      set_level_up_need_facility(from.level_up_need_facility());
    }
    if (cached_has_bits & 0x00000040u) {
      set_special_property(from.special_property());
    }
    if (cached_has_bits & 0x00000080u) {
      set_slot_unlock_condition(from.slot_unlock_condition());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      maintype_ = from.maintype_;
    }
    if (cached_has_bits & 0x00000400u) {
      func_type_ = from.func_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      style_id_ = from.style_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      build_type_ = from.build_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00004000u) {
      seize_row_ = from.seize_row_;
    }
    if (cached_has_bits & 0x00008000u) {
      seize_col_ = from.seize_col_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00020000u) {
      float__ = from.float__;
    }
    if (cached_has_bits & 0x00040000u) {
      node_ = from.node_;
    }
    if (cached_has_bits & 0x00080000u) {
      room_must_ = from.room_must_;
    }
    if (cached_has_bits & 0x00100000u) {
      base_device_id_ = from.base_device_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      level_up_grade_ = from.level_up_grade_;
    }
    if (cached_has_bits & 0x00400000u) {
      level_up_id_ = from.level_up_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      facility_level_ = from.facility_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      people_node_ = from.people_node_;
    }
    if (cached_has_bits & 0x02000000u) {
      level_up_ship_level_ = from.level_up_ship_level_;
    }
    if (cached_has_bits & 0x04000000u) {
      level_up_captain_level_ = from.level_up_captain_level_;
    }
    if (cached_has_bits & 0x08000000u) {
      machine_id_in_fight_ = from.machine_id_in_fight_;
    }
    if (cached_has_bits & 0x10000000u) {
      machine_capacity_ = from.machine_capacity_;
    }
    if (cached_has_bits & 0x20000000u) {
      level_up_need_time_ = from.level_up_need_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFacility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFacility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFacility::CopyFrom(const ConfigFacility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFacility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFacility::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fffffff) != 0x3fffffff) return false;
  return true;
}

void ConfigFacility::Swap(ConfigFacility* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFacility* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFacility::UnsafeArenaSwap(ConfigFacility* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFacility::InternalSwap(ConfigFacility* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  property_.Swap(&other->property_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level_up_require_.Swap(&other->level_up_require_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  formula_unlock_.Swap(&other->formula_unlock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level_up_need_device_.Swap(&other->level_up_need_device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level_up_need_facility_.Swap(&other->level_up_need_facility_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  special_property_.Swap(&other->special_property_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  slot_unlock_condition_.Swap(&other->slot_unlock_condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(maintype_, other->maintype_);
  swap(func_type_, other->func_type_);
  swap(style_id_, other->style_id_);
  swap(build_type_, other->build_type_);
  swap(price_, other->price_);
  swap(seize_row_, other->seize_row_);
  swap(seize_col_, other->seize_col_);
  swap(seconds_, other->seconds_);
  swap(float__, other->float__);
  swap(node_, other->node_);
  swap(room_must_, other->room_must_);
  swap(base_device_id_, other->base_device_id_);
  swap(level_up_grade_, other->level_up_grade_);
  swap(level_up_id_, other->level_up_id_);
  swap(facility_level_, other->facility_level_);
  swap(people_node_, other->people_node_);
  swap(level_up_ship_level_, other->level_up_ship_level_);
  swap(level_up_captain_level_, other->level_up_captain_level_);
  swap(machine_id_in_fight_, other->machine_id_in_fight_);
  swap(machine_capacity_, other->machine_capacity_);
  swap(level_up_need_time_, other->level_up_need_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFacility::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigItem::kIdFieldNumber;
const int ConfigItem::kNameFieldNumber;
const int ConfigItem::kTypeFieldNumber;
const int ConfigItem::kStarFieldNumber;
const int ConfigItem::kQualityFieldNumber;
const int ConfigItem::kPropertyFieldNumber;
const int ConfigItem::kPriceFieldNumber;
const int ConfigItem::kMaxNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigItem::ConfigItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigItem)
}
ConfigItem::ConfigItem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigItem.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigItem)
}
ConfigItem::ConfigItem(const ConfigItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property()) {
    property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&id_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigItem)
}

void ConfigItem::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&id_)) + sizeof(price_));
}

ConfigItem::~ConfigItem() {
  // @@protoc_insertion_point(destructor:db.ConfigItem)
  SharedDtor();
}

void ConfigItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigItem::ArenaDtor(void* object) {
  ConfigItem* _this = reinterpret_cast< ConfigItem* >(object);
  (void)_this;
}
void ConfigItem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigItem::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigItem& ConfigItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigItem.base);
  return *internal_default_instance();
}


void ConfigItem::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      property_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&id_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes property = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 max_num = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_max_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigItem)
  return false;
#undef DO_
}

void ConfigItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 star = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // required int32 quality = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // required bytes property = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->property(), output);
  }

  // required int32 price = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price(), output);
  }

  // required int64 max_num = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->max_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigItem)
}

::google::protobuf::uint8* ConfigItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 star = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // required int32 quality = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // required bytes property = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->property(), target);
  }

  // required int32 price = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price(), target);
  }

  // required int64 max_num = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->max_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigItem)
  return target;
}

size_t ConfigItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigItem)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_property()) {
    // required bytes property = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_star()) {
    // required int32 star = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_quality()) {
    // required int32 quality = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  if (has_max_num()) {
    // required int64 max_num = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_num());
  }

  if (has_price()) {
    // required int32 price = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  return total_size;
}
size_t ConfigItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes property = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 star = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 quality = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

    // required int64 max_num = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_num());

    // required int32 price = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigItem)
    MergeFrom(*source);
  }
}

void ConfigItem::MergeFrom(const ConfigItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_property(from.property());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000020u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_num_ = from.max_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigItem::CopyFrom(const ConfigItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void ConfigItem::Swap(ConfigItem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigItem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigItem::UnsafeArenaSwap(ConfigItem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigItem::InternalSwap(ConfigItem* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  property_.Swap(&other->property_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(star_, other->star_);
  swap(quality_, other->quality_);
  swap(max_num_, other->max_num_);
  swap(price_, other->price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigItem::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCard::kIdFieldNumber;
const int ConfigCard::kNameFieldNumber;
const int ConfigCard::kProfessionFieldNumber;
const int ConfigCard::kStarFieldNumber;
const int ConfigCard::kAttackRangeFieldNumber;
const int ConfigCard::kAttackModeFieldNumber;
const int ConfigCard::kEnergyCostFieldNumber;
const int ConfigCard::kAttackTimeFieldNumber;
const int ConfigCard::kWaitTimeFieldNumber;
const int ConfigCard::kMoveTimeFieldNumber;
const int ConfigCard::kMoveDistanceFieldNumber;
const int ConfigCard::kRunDistanceFieldNumber;
const int ConfigCard::kCanMoveFieldNumber;
const int ConfigCard::kActionModeFieldNumber;
const int ConfigCard::kWidthFieldNumber;
const int ConfigCard::kHeightFieldNumber;
const int ConfigCard::kInitialEquipFieldNumber;
const int ConfigCard::kTalentFieldNumber;
const int ConfigCard::kPracticeGroupFieldNumber;
const int ConfigCard::kFarmSkillFieldNumber;
const int ConfigCard::kSkillFieldNumber;
const int ConfigCard::kChipIdFieldNumber;
const int ConfigCard::kChipCostFieldNumber;
const int ConfigCard::kChipConvertFieldNumber;
const int ConfigCard::kChipExchangeFieldNumber;
const int ConfigCard::kGatherAddRatioFieldNumber;
const int ConfigCard::kPenetrationArgsFieldNumber;
const int ConfigCard::kInitFallSkillFieldNumber;
const int ConfigCard::kQualityFieldNumber;
const int ConfigCard::kInitHungerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCard::ConfigCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigCard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCard)
}
ConfigCard::ConfigCard(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCard.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCard)
}
ConfigCard::ConfigCard(const ConfigCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  initial_equip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initial_equip()) {
    initial_equip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_equip(),
      GetArenaNoVirtual());
  }
  farm_skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_farm_skill()) {
    farm_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.farm_skill(),
      GetArenaNoVirtual());
  }
  skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skill()) {
    skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill(),
      GetArenaNoVirtual());
  }
  chip_exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chip_exchange()) {
    chip_exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chip_exchange(),
      GetArenaNoVirtual());
  }
  penetration_args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_penetration_args()) {
    penetration_args_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.penetration_args(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_hunger_) -
    reinterpret_cast<char*>(&id_)) + sizeof(init_hunger_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCard)
}

void ConfigCard::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_equip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  farm_skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chip_exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  penetration_args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_hunger_) -
      reinterpret_cast<char*>(&id_)) + sizeof(init_hunger_));
}

ConfigCard::~ConfigCard() {
  // @@protoc_insertion_point(destructor:db.ConfigCard)
  SharedDtor();
}

void ConfigCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_equip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  farm_skill_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chip_exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  penetration_args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCard::ArenaDtor(void* object) {
  ConfigCard* _this = reinterpret_cast< ConfigCard* >(object);
  (void)_this;
}
void ConfigCard::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCard::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCard& ConfigCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCard.base);
  return *internal_default_instance();
}


void ConfigCard::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      initial_equip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      farm_skill_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      skill_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      chip_exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      penetration_args_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&profession_) -
        reinterpret_cast<char*>(&id_)) + sizeof(profession_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&star_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&move_distance_) -
        reinterpret_cast<char*>(&star_)) + sizeof(move_distance_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&run_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chip_id_) -
        reinterpret_cast<char*>(&run_distance_)) + sizeof(chip_id_));
  }
  if (cached_has_bits & 1056964608u) {
    ::memset(&chip_cost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&init_hunger_) -
        reinterpret_cast<char*>(&chip_cost_)) + sizeof(init_hunger_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 profession = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_profession();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 attack_range = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_attack_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 attack_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_attack_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 energy_cost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_energy_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float attack_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_attack_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float wait_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_wait_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float move_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_move_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &move_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 move_distance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_move_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 run_distance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_run_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &run_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 can_move = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_can_move();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 action_mode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_action_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes initial_equip = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_initial_equip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 talent = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_talent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &talent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 practice_group = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_practice_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes farm_skill = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_farm_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes skill = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chip_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_chip_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chip_cost = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_chip_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chip_convert = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_chip_convert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_convert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes chip_exchange = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chip_exchange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float gather_add_ratio = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          set_has_gather_add_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gather_add_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes penetration_args = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_penetration_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 init_fall_skill = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_init_fall_skill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &init_fall_skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float init_hunger = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {
          set_has_init_hunger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_hunger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCard)
  return false;
#undef DO_
}

void ConfigCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 profession = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // required int32 star = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  // required int32 attack_range = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attack_range(), output);
  }

  // required int32 attack_mode = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attack_mode(), output);
  }

  // required int32 energy_cost = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->energy_cost(), output);
  }

  // required float attack_time = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->attack_time(), output);
  }

  // required float wait_time = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->wait_time(), output);
  }

  // required float move_time = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->move_time(), output);
  }

  // required int32 move_distance = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->move_distance(), output);
  }

  // required int32 run_distance = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->run_distance(), output);
  }

  // required int32 can_move = 14;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->can_move(), output);
  }

  // required int32 action_mode = 15;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->action_mode(), output);
  }

  // required int32 width = 16;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->width(), output);
  }

  // required int32 height = 17;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->height(), output);
  }

  // required bytes initial_equip = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->initial_equip(), output);
  }

  // required uint64 talent = 19;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->talent(), output);
  }

  // required int32 practice_group = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->practice_group(), output);
  }

  // required bytes farm_skill = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->farm_skill(), output);
  }

  // required bytes skill = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->skill(), output);
  }

  // required int32 chip_id = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->chip_id(), output);
  }

  // required int32 chip_cost = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->chip_cost(), output);
  }

  // required int32 chip_convert = 25;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->chip_convert(), output);
  }

  // required bytes chip_exchange = 26;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->chip_exchange(), output);
  }

  // required float gather_add_ratio = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->gather_add_ratio(), output);
  }

  // required bytes penetration_args = 28;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      28, this->penetration_args(), output);
  }

  // required int64 init_fall_skill = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->init_fall_skill(), output);
  }

  // required int32 quality = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->quality(), output);
  }

  // required float init_hunger = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->init_hunger(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCard)
}

::google::protobuf::uint8* ConfigCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 profession = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // required int32 star = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  // required int32 attack_range = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attack_range(), target);
  }

  // required int32 attack_mode = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->attack_mode(), target);
  }

  // required int32 energy_cost = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->energy_cost(), target);
  }

  // required float attack_time = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->attack_time(), target);
  }

  // required float wait_time = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->wait_time(), target);
  }

  // required float move_time = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->move_time(), target);
  }

  // required int32 move_distance = 12;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->move_distance(), target);
  }

  // required int32 run_distance = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->run_distance(), target);
  }

  // required int32 can_move = 14;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->can_move(), target);
  }

  // required int32 action_mode = 15;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->action_mode(), target);
  }

  // required int32 width = 16;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->width(), target);
  }

  // required int32 height = 17;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->height(), target);
  }

  // required bytes initial_equip = 18;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->initial_equip(), target);
  }

  // required uint64 talent = 19;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->talent(), target);
  }

  // required int32 practice_group = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->practice_group(), target);
  }

  // required bytes farm_skill = 21;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->farm_skill(), target);
  }

  // required bytes skill = 22;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->skill(), target);
  }

  // required int32 chip_id = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->chip_id(), target);
  }

  // required int32 chip_cost = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->chip_cost(), target);
  }

  // required int32 chip_convert = 25;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->chip_convert(), target);
  }

  // required bytes chip_exchange = 26;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->chip_exchange(), target);
  }

  // required float gather_add_ratio = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->gather_add_ratio(), target);
  }

  // required bytes penetration_args = 28;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        28, this->penetration_args(), target);
  }

  // required int64 init_fall_skill = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->init_fall_skill(), target);
  }

  // required int32 quality = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->quality(), target);
  }

  // required float init_hunger = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->init_hunger(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCard)
  return target;
}

size_t ConfigCard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCard)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_initial_equip()) {
    // required bytes initial_equip = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->initial_equip());
  }

  if (has_farm_skill()) {
    // required bytes farm_skill = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->farm_skill());
  }

  if (has_skill()) {
    // required bytes skill = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill());
  }

  if (has_chip_exchange()) {
    // required bytes chip_exchange = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chip_exchange());
  }

  if (has_penetration_args()) {
    // required bytes penetration_args = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->penetration_args());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_profession()) {
    // required int32 profession = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->profession());
  }

  if (has_star()) {
    // required int32 star = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_attack_range()) {
    // required int32 attack_range = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_range());
  }

  if (has_attack_mode()) {
    // required int32 attack_mode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_mode());
  }

  if (has_energy_cost()) {
    // required int32 energy_cost = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->energy_cost());
  }

  if (has_attack_time()) {
    // required float attack_time = 9;
    total_size += 1 + 4;
  }

  if (has_wait_time()) {
    // required float wait_time = 10;
    total_size += 1 + 4;
  }

  if (has_move_time()) {
    // required float move_time = 11;
    total_size += 1 + 4;
  }

  if (has_move_distance()) {
    // required int32 move_distance = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_distance());
  }

  if (has_run_distance()) {
    // required int32 run_distance = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->run_distance());
  }

  if (has_can_move()) {
    // required int32 can_move = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->can_move());
  }

  if (has_action_mode()) {
    // required int32 action_mode = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_mode());
  }

  if (has_width()) {
    // required int32 width = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_practice_group()) {
    // required int32 practice_group = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->practice_group());
  }

  if (has_talent()) {
    // required uint64 talent = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->talent());
  }

  if (has_chip_id()) {
    // required int32 chip_id = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chip_id());
  }

  if (has_chip_cost()) {
    // required int32 chip_cost = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chip_cost());
  }

  if (has_chip_convert()) {
    // required int32 chip_convert = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chip_convert());
  }

  if (has_gather_add_ratio()) {
    // required float gather_add_ratio = 27;
    total_size += 2 + 4;
  }

  if (has_init_fall_skill()) {
    // required int64 init_fall_skill = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->init_fall_skill());
  }

  if (has_quality()) {
    // required int32 quality = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  if (has_init_hunger()) {
    // required float init_hunger = 31;
    total_size += 2 + 4;
  }

  return total_size;
}
size_t ConfigCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x3fffffff) ^ 0x3fffffff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes initial_equip = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->initial_equip());

    // required bytes farm_skill = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->farm_skill());

    // required bytes skill = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill());

    // required bytes chip_exchange = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chip_exchange());

    // required bytes penetration_args = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->penetration_args());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 profession = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->profession());

    // required int32 star = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 attack_range = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_range());

    // required int32 attack_mode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_mode());

    // required int32 energy_cost = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->energy_cost());

    // required float attack_time = 9;
    total_size += 1 + 4;

    // required float wait_time = 10;
    total_size += 1 + 4;

    // required float move_time = 11;
    total_size += 1 + 4;

    // required int32 move_distance = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_distance());

    // required int32 run_distance = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->run_distance());

    // required int32 can_move = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->can_move());

    // required int32 action_mode = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_mode());

    // required int32 width = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 practice_group = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->practice_group());

    // required uint64 talent = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->talent());

    // required int32 chip_id = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chip_id());

    // required int32 chip_cost = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chip_cost());

    // required int32 chip_convert = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chip_convert());

    // required float gather_add_ratio = 27;
    total_size += 2 + 4;

    // required int64 init_fall_skill = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->init_fall_skill());

    // required int32 quality = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

    // required float init_hunger = 31;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCard)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCard)
    MergeFrom(*source);
  }
}

void ConfigCard::MergeFrom(const ConfigCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_initial_equip(from.initial_equip());
    }
    if (cached_has_bits & 0x00000004u) {
      set_farm_skill(from.farm_skill());
    }
    if (cached_has_bits & 0x00000008u) {
      set_skill(from.skill());
    }
    if (cached_has_bits & 0x00000010u) {
      set_chip_exchange(from.chip_exchange());
    }
    if (cached_has_bits & 0x00000020u) {
      set_penetration_args(from.penetration_args());
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      profession_ = from.profession_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000200u) {
      attack_range_ = from.attack_range_;
    }
    if (cached_has_bits & 0x00000400u) {
      attack_mode_ = from.attack_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      energy_cost_ = from.energy_cost_;
    }
    if (cached_has_bits & 0x00001000u) {
      attack_time_ = from.attack_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      wait_time_ = from.wait_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      move_time_ = from.move_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      move_distance_ = from.move_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      run_distance_ = from.run_distance_;
    }
    if (cached_has_bits & 0x00020000u) {
      can_move_ = from.can_move_;
    }
    if (cached_has_bits & 0x00040000u) {
      action_mode_ = from.action_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00100000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00200000u) {
      practice_group_ = from.practice_group_;
    }
    if (cached_has_bits & 0x00400000u) {
      talent_ = from.talent_;
    }
    if (cached_has_bits & 0x00800000u) {
      chip_id_ = from.chip_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      chip_cost_ = from.chip_cost_;
    }
    if (cached_has_bits & 0x02000000u) {
      chip_convert_ = from.chip_convert_;
    }
    if (cached_has_bits & 0x04000000u) {
      gather_add_ratio_ = from.gather_add_ratio_;
    }
    if (cached_has_bits & 0x08000000u) {
      init_fall_skill_ = from.init_fall_skill_;
    }
    if (cached_has_bits & 0x10000000u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x20000000u) {
      init_hunger_ = from.init_hunger_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCard::CopyFrom(const ConfigCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fffffff) != 0x3fffffff) return false;
  return true;
}

void ConfigCard::Swap(ConfigCard* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCard* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCard::UnsafeArenaSwap(ConfigCard* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCard::InternalSwap(ConfigCard* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  initial_equip_.Swap(&other->initial_equip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  farm_skill_.Swap(&other->farm_skill_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skill_.Swap(&other->skill_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chip_exchange_.Swap(&other->chip_exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  penetration_args_.Swap(&other->penetration_args_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(profession_, other->profession_);
  swap(star_, other->star_);
  swap(attack_range_, other->attack_range_);
  swap(attack_mode_, other->attack_mode_);
  swap(energy_cost_, other->energy_cost_);
  swap(attack_time_, other->attack_time_);
  swap(wait_time_, other->wait_time_);
  swap(move_time_, other->move_time_);
  swap(move_distance_, other->move_distance_);
  swap(run_distance_, other->run_distance_);
  swap(can_move_, other->can_move_);
  swap(action_mode_, other->action_mode_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(practice_group_, other->practice_group_);
  swap(talent_, other->talent_);
  swap(chip_id_, other->chip_id_);
  swap(chip_cost_, other->chip_cost_);
  swap(chip_convert_, other->chip_convert_);
  swap(gather_add_ratio_, other->gather_add_ratio_);
  swap(init_fall_skill_, other->init_fall_skill_);
  swap(quality_, other->quality_);
  swap(init_hunger_, other->init_hunger_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCard::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCardStrengthen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCardStrengthen::kTypeidFieldNumber;
const int ConfigCardStrengthen::kStarFieldNumber;
const int ConfigCardStrengthen::kInitialAttributeFieldNumber;
const int ConfigCardStrengthen::kAptitudeFieldNumber;
const int ConfigCardStrengthen::kLevelMaxFieldNumber;
const int ConfigCardStrengthen::kItemCostFieldNumber;
const int ConfigCardStrengthen::kChipCostFieldNumber;
const int ConfigCardStrengthen::kRisingStarCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCardStrengthen::ConfigCardStrengthen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardStrengthen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCardStrengthen)
}
ConfigCardStrengthen::ConfigCardStrengthen(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardStrengthen.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCardStrengthen)
}
ConfigCardStrengthen::ConfigCardStrengthen(const ConfigCardStrengthen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  initial_attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initial_attribute()) {
    initial_attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_attribute(),
      GetArenaNoVirtual());
  }
  aptitude_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aptitude()) {
    aptitude_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aptitude(),
      GetArenaNoVirtual());
  }
  item_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_cost()) {
    item_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_cost(),
      GetArenaNoVirtual());
  }
  chip_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chip_cost()) {
    chip_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chip_cost(),
      GetArenaNoVirtual());
  }
  rising_star_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rising_star_cost()) {
    rising_star_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rising_star_cost(),
      GetArenaNoVirtual());
  }
  ::memcpy(&typeid__, &from.typeid__,
    static_cast<size_t>(reinterpret_cast<char*>(&level_max_) -
    reinterpret_cast<char*>(&typeid__)) + sizeof(level_max_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCardStrengthen)
}

void ConfigCardStrengthen::SharedCtor() {
  initial_attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aptitude_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chip_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rising_star_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&typeid__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_max_) -
      reinterpret_cast<char*>(&typeid__)) + sizeof(level_max_));
}

ConfigCardStrengthen::~ConfigCardStrengthen() {
  // @@protoc_insertion_point(destructor:db.ConfigCardStrengthen)
  SharedDtor();
}

void ConfigCardStrengthen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  initial_attribute_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aptitude_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chip_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rising_star_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCardStrengthen::ArenaDtor(void* object) {
  ConfigCardStrengthen* _this = reinterpret_cast< ConfigCardStrengthen* >(object);
  (void)_this;
}
void ConfigCardStrengthen::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCardStrengthen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCardStrengthen::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCardStrengthen& ConfigCardStrengthen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardStrengthen.base);
  return *internal_default_instance();
}


void ConfigCardStrengthen::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCardStrengthen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      initial_attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      aptitude_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      item_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      chip_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      rising_star_cost_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&typeid__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_max_) -
        reinterpret_cast<char*>(&typeid__)) + sizeof(level_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCardStrengthen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCardStrengthen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes initial_attribute = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_initial_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes aptitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aptitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes item_cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes chip_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chip_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes rising_star_cost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rising_star_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCardStrengthen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCardStrengthen)
  return false;
#undef DO_
}

void ConfigCardStrengthen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCardStrengthen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // required int32 star = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // required bytes initial_attribute = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->initial_attribute(), output);
  }

  // required bytes aptitude = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->aptitude(), output);
  }

  // required int32 level_max = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level_max(), output);
  }

  // required bytes item_cost = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->item_cost(), output);
  }

  // required bytes chip_cost = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->chip_cost(), output);
  }

  // required bytes rising_star_cost = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->rising_star_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCardStrengthen)
}

::google::protobuf::uint8* ConfigCardStrengthen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCardStrengthen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 typeid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // required int32 star = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // required bytes initial_attribute = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->initial_attribute(), target);
  }

  // required bytes aptitude = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->aptitude(), target);
  }

  // required int32 level_max = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level_max(), target);
  }

  // required bytes item_cost = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->item_cost(), target);
  }

  // required bytes chip_cost = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->chip_cost(), target);
  }

  // required bytes rising_star_cost = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->rising_star_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCardStrengthen)
  return target;
}

size_t ConfigCardStrengthen::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCardStrengthen)
  size_t total_size = 0;

  if (has_initial_attribute()) {
    // required bytes initial_attribute = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->initial_attribute());
  }

  if (has_aptitude()) {
    // required bytes aptitude = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->aptitude());
  }

  if (has_item_cost()) {
    // required bytes item_cost = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->item_cost());
  }

  if (has_chip_cost()) {
    // required bytes chip_cost = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chip_cost());
  }

  if (has_rising_star_cost()) {
    // required bytes rising_star_cost = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rising_star_cost());
  }

  if (has_typeid_()) {
    // required int32 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_star()) {
    // required int32 star = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_level_max()) {
    // required int32 level_max = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_max());
  }

  return total_size;
}
size_t ConfigCardStrengthen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCardStrengthen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes initial_attribute = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->initial_attribute());

    // required bytes aptitude = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->aptitude());

    // required bytes item_cost = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->item_cost());

    // required bytes chip_cost = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chip_cost());

    // required bytes rising_star_cost = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rising_star_cost());

    // required int32 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 star = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 level_max = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCardStrengthen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCardStrengthen)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCardStrengthen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCardStrengthen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCardStrengthen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCardStrengthen)
    MergeFrom(*source);
  }
}

void ConfigCardStrengthen::MergeFrom(const ConfigCardStrengthen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCardStrengthen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_initial_attribute(from.initial_attribute());
    }
    if (cached_has_bits & 0x00000002u) {
      set_aptitude(from.aptitude());
    }
    if (cached_has_bits & 0x00000004u) {
      set_item_cost(from.item_cost());
    }
    if (cached_has_bits & 0x00000008u) {
      set_chip_cost(from.chip_cost());
    }
    if (cached_has_bits & 0x00000010u) {
      set_rising_star_cost(from.rising_star_cost());
    }
    if (cached_has_bits & 0x00000020u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000040u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000080u) {
      level_max_ = from.level_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCardStrengthen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCardStrengthen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCardStrengthen::CopyFrom(const ConfigCardStrengthen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCardStrengthen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCardStrengthen::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void ConfigCardStrengthen::Swap(ConfigCardStrengthen* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCardStrengthen* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCardStrengthen::UnsafeArenaSwap(ConfigCardStrengthen* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCardStrengthen::InternalSwap(ConfigCardStrengthen* other) {
  using std::swap;
  initial_attribute_.Swap(&other->initial_attribute_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aptitude_.Swap(&other->aptitude_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  item_cost_.Swap(&other->item_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chip_cost_.Swap(&other->chip_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rising_star_cost_.Swap(&other->rising_star_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(typeid__, other->typeid__);
  swap(star_, other->star_);
  swap(level_max_, other->level_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCardStrengthen::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigLevel::kLevelFieldNumber;
const int ConfigLevel::kNeedExpFieldNumber;
const int ConfigLevel::kAddFacilityFieldNumber;
const int ConfigLevel::kAddItemFieldNumber;
const int ConfigLevel::kAddExpFieldNumber;
const int ConfigLevel::kMaxSailorLevelFieldNumber;
const int ConfigLevel::kMaxVitalityFieldNumber;
const int ConfigLevel::kMaxTakeItemsFieldNumber;
const int ConfigLevel::kFailRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigLevel::ConfigLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigLevel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigLevel)
}
ConfigLevel::ConfigLevel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigLevel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigLevel)
}
ConfigLevel::ConfigLevel(const ConfigLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  add_facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_add_facility()) {
    add_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_facility(),
      GetArenaNoVirtual());
  }
  add_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_add_item()) {
    add_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_item(),
      GetArenaNoVirtual());
  }
  fail_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fail_reward()) {
    fail_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fail_reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_take_items_) -
    reinterpret_cast<char*>(&level_)) + sizeof(max_take_items_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigLevel)
}

void ConfigLevel::SharedCtor() {
  add_facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fail_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_take_items_) -
      reinterpret_cast<char*>(&level_)) + sizeof(max_take_items_));
}

ConfigLevel::~ConfigLevel() {
  // @@protoc_insertion_point(destructor:db.ConfigLevel)
  SharedDtor();
}

void ConfigLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  add_facility_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fail_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigLevel::ArenaDtor(void* object) {
  ConfigLevel* _this = reinterpret_cast< ConfigLevel* >(object);
  (void)_this;
}
void ConfigLevel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigLevel::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigLevel& ConfigLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigLevel.base);
  return *internal_default_instance();
}


void ConfigLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      add_facility_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      add_item_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      fail_reward_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_vitality_) -
        reinterpret_cast<char*>(&level_)) + sizeof(max_vitality_));
  }
  max_take_items_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_exp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_need_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes add_facility = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_add_facility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes add_item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add_exp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_add_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_sailor_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_max_sailor_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_sailor_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_vitality = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_vitality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_vitality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_take_items = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_max_take_items();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_take_items_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes fail_reward = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fail_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigLevel)
  return false;
#undef DO_
}

void ConfigLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 need_exp = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_exp(), output);
  }

  // required bytes add_facility = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->add_facility(), output);
  }

  // required bytes add_item = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->add_item(), output);
  }

  // required int32 add_exp = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_exp(), output);
  }

  // required int32 max_sailor_level = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_sailor_level(), output);
  }

  // required int32 max_vitality = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_vitality(), output);
  }

  // required int32 max_take_items = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_take_items(), output);
  }

  // required bytes fail_reward = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->fail_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigLevel)
}

::google::protobuf::uint8* ConfigLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 need_exp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_exp(), target);
  }

  // required bytes add_facility = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->add_facility(), target);
  }

  // required bytes add_item = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->add_item(), target);
  }

  // required int32 add_exp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_exp(), target);
  }

  // required int32 max_sailor_level = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_sailor_level(), target);
  }

  // required int32 max_vitality = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_vitality(), target);
  }

  // required int32 max_take_items = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_take_items(), target);
  }

  // required bytes fail_reward = 9;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->fail_reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigLevel)
  return target;
}

size_t ConfigLevel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigLevel)
  size_t total_size = 0;

  if (has_add_facility()) {
    // required bytes add_facility = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->add_facility());
  }

  if (has_add_item()) {
    // required bytes add_item = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->add_item());
  }

  if (has_fail_reward()) {
    // required bytes fail_reward = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fail_reward());
  }

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_need_exp()) {
    // required int32 need_exp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_exp());
  }

  if (has_add_exp()) {
    // required int32 add_exp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_exp());
  }

  if (has_max_sailor_level()) {
    // required int32 max_sailor_level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_sailor_level());
  }

  if (has_max_vitality()) {
    // required int32 max_vitality = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_vitality());
  }

  if (has_max_take_items()) {
    // required int32 max_take_items = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_take_items());
  }

  return total_size;
}
size_t ConfigLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes add_facility = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->add_facility());

    // required bytes add_item = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->add_item());

    // required bytes fail_reward = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fail_reward());

    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 need_exp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_exp());

    // required int32 add_exp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_exp());

    // required int32 max_sailor_level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_sailor_level());

    // required int32 max_vitality = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_vitality());

    // required int32 max_take_items = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_take_items());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigLevel)
    MergeFrom(*source);
  }
}

void ConfigLevel::MergeFrom(const ConfigLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_add_facility(from.add_facility());
    }
    if (cached_has_bits & 0x00000002u) {
      set_add_item(from.add_item());
    }
    if (cached_has_bits & 0x00000004u) {
      set_fail_reward(from.fail_reward());
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      need_exp_ = from.need_exp_;
    }
    if (cached_has_bits & 0x00000020u) {
      add_exp_ = from.add_exp_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_sailor_level_ = from.max_sailor_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_vitality_ = from.max_vitality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_max_take_items(from.max_take_items());
  }
}

void ConfigLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigLevel::CopyFrom(const ConfigLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigLevel::Swap(ConfigLevel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigLevel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigLevel::UnsafeArenaSwap(ConfigLevel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigLevel::InternalSwap(ConfigLevel* other) {
  using std::swap;
  add_facility_.Swap(&other->add_facility_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  add_item_.Swap(&other->add_item_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fail_reward_.Swap(&other->fail_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(need_exp_, other->need_exp_);
  swap(add_exp_, other->add_exp_);
  swap(max_sailor_level_, other->max_sailor_level_);
  swap(max_vitality_, other->max_vitality_);
  swap(max_take_items_, other->max_take_items_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigLevel::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigModel::kIdFieldNumber;
const int ConfigModel::kStyleFieldNumber;
const int ConfigModel::kLevelFieldNumber;
const int ConfigModel::kRoomOpenFieldNumber;
const int ConfigModel::kMapSizeFieldNumber;
const int ConfigModel::kShipTemplateFieldNumber;
const int ConfigModel::kNullTemplateFieldNumber;
const int ConfigModel::kShipFacilityFieldNumber;
const int ConfigModel::kNeedLevelFieldNumber;
const int ConfigModel::kPreModelFieldNumber;
const int ConfigModel::kUnlockCostFieldNumber;
const int ConfigModel::kCapacityFieldNumber;
const int ConfigModel::kUnlockRewardFieldNumber;
const int ConfigModel::kMachineParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigModel::ConfigModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigModel)
}
ConfigModel::ConfigModel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigModel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigModel)
}
ConfigModel::ConfigModel(const ConfigModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room_open()) {
    room_open_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_open(),
      GetArenaNoVirtual());
  }
  map_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_size()) {
    map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_size(),
      GetArenaNoVirtual());
  }
  ship_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ship_template()) {
    ship_template_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ship_template(),
      GetArenaNoVirtual());
  }
  null_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_null_template()) {
    null_template_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.null_template(),
      GetArenaNoVirtual());
  }
  ship_facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ship_facility()) {
    ship_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ship_facility(),
      GetArenaNoVirtual());
  }
  unlock_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_cost()) {
    unlock_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_cost(),
      GetArenaNoVirtual());
  }
  unlock_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_reward()) {
    unlock_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&machine_param_) -
    reinterpret_cast<char*>(&id_)) + sizeof(machine_param_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigModel)
}

void ConfigModel::SharedCtor() {
  room_open_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  null_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&machine_param_) -
      reinterpret_cast<char*>(&id_)) + sizeof(machine_param_));
}

ConfigModel::~ConfigModel() {
  // @@protoc_insertion_point(destructor:db.ConfigModel)
  SharedDtor();
}

void ConfigModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  room_open_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  null_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_facility_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigModel::ArenaDtor(void* object) {
  ConfigModel* _this = reinterpret_cast< ConfigModel* >(object);
  (void)_this;
}
void ConfigModel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigModel::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigModel& ConfigModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigModel.base);
  return *internal_default_instance();
}


void ConfigModel::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      room_open_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ship_template_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      null_template_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ship_facility_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      unlock_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      unlock_reward_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  if (cached_has_bits & 16128u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&machine_param_) -
        reinterpret_cast<char*>(&style_)) + sizeof(machine_param_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 style = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes room_open = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_open()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes map_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ship_template = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ship_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes null_template = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_null_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ship_facility = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ship_facility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_need_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pre_model = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pre_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes unlock_cost = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unlock_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 capacity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes unlock_reward = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unlock_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float machine_param = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_machine_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &machine_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigModel)
  return false;
#undef DO_
}

void ConfigModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 style = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->style(), output);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required bytes room_open = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->room_open(), output);
  }

  // required bytes map_size = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->map_size(), output);
  }

  // required bytes ship_template = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->ship_template(), output);
  }

  // required bytes null_template = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->null_template(), output);
  }

  // required bytes ship_facility = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->ship_facility(), output);
  }

  // required int32 need_level = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->need_level(), output);
  }

  // required int32 pre_model = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pre_model(), output);
  }

  // required bytes unlock_cost = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->unlock_cost(), output);
  }

  // required int32 capacity = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->capacity(), output);
  }

  // required bytes unlock_reward = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->unlock_reward(), output);
  }

  // required float machine_param = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->machine_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigModel)
}

::google::protobuf::uint8* ConfigModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 style = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->style(), target);
  }

  // required int32 level = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required bytes room_open = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->room_open(), target);
  }

  // required bytes map_size = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->map_size(), target);
  }

  // required bytes ship_template = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ship_template(), target);
  }

  // required bytes null_template = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->null_template(), target);
  }

  // required bytes ship_facility = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->ship_facility(), target);
  }

  // required int32 need_level = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->need_level(), target);
  }

  // required int32 pre_model = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pre_model(), target);
  }

  // required bytes unlock_cost = 11;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->unlock_cost(), target);
  }

  // required int32 capacity = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->capacity(), target);
  }

  // required bytes unlock_reward = 13;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->unlock_reward(), target);
  }

  // required float machine_param = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->machine_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigModel)
  return target;
}

size_t ConfigModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigModel)
  size_t total_size = 0;

  if (has_room_open()) {
    // required bytes room_open = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room_open());
  }

  if (has_map_size()) {
    // required bytes map_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_size());
  }

  if (has_ship_template()) {
    // required bytes ship_template = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ship_template());
  }

  if (has_null_template()) {
    // required bytes null_template = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->null_template());
  }

  if (has_ship_facility()) {
    // required bytes ship_facility = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ship_facility());
  }

  if (has_unlock_cost()) {
    // required bytes unlock_cost = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_cost());
  }

  if (has_unlock_reward()) {
    // required bytes unlock_reward = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_style()) {
    // required int32 style = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style());
  }

  if (has_level()) {
    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_need_level()) {
    // required int32 need_level = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());
  }

  if (has_pre_model()) {
    // required int32 pre_model = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pre_model());
  }

  if (has_capacity()) {
    // required int32 capacity = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());
  }

  if (has_machine_param()) {
    // required float machine_param = 14;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ConfigModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required bytes room_open = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room_open());

    // required bytes map_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_size());

    // required bytes ship_template = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ship_template());

    // required bytes null_template = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->null_template());

    // required bytes ship_facility = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ship_facility());

    // required bytes unlock_cost = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_cost());

    // required bytes unlock_reward = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 style = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style());

    // required int32 level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 need_level = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());

    // required int32 pre_model = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pre_model());

    // required int32 capacity = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());

    // required float machine_param = 14;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigModel)
    MergeFrom(*source);
  }
}

void ConfigModel::MergeFrom(const ConfigModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_room_open(from.room_open());
    }
    if (cached_has_bits & 0x00000002u) {
      set_map_size(from.map_size());
    }
    if (cached_has_bits & 0x00000004u) {
      set_ship_template(from.ship_template());
    }
    if (cached_has_bits & 0x00000008u) {
      set_null_template(from.null_template());
    }
    if (cached_has_bits & 0x00000010u) {
      set_ship_facility(from.ship_facility());
    }
    if (cached_has_bits & 0x00000020u) {
      set_unlock_cost(from.unlock_cost());
    }
    if (cached_has_bits & 0x00000040u) {
      set_unlock_reward(from.unlock_reward());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000200u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000400u) {
      need_level_ = from.need_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      pre_model_ = from.pre_model_;
    }
    if (cached_has_bits & 0x00001000u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00002000u) {
      machine_param_ = from.machine_param_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigModel::CopyFrom(const ConfigModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  return true;
}

void ConfigModel::Swap(ConfigModel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigModel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigModel::UnsafeArenaSwap(ConfigModel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigModel::InternalSwap(ConfigModel* other) {
  using std::swap;
  room_open_.Swap(&other->room_open_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_size_.Swap(&other->map_size_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ship_template_.Swap(&other->ship_template_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  null_template_.Swap(&other->null_template_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ship_facility_.Swap(&other->ship_facility_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unlock_cost_.Swap(&other->unlock_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unlock_reward_.Swap(&other->unlock_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(style_, other->style_);
  swap(level_, other->level_);
  swap(need_level_, other->need_level_);
  swap(pre_model_, other->pre_model_);
  swap(capacity_, other->capacity_);
  swap(machine_param_, other->machine_param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigModel::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPlace::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPlace::kIdFieldNumber;
const int ConfigPlace::kNameFieldNumber;
const int ConfigPlace::kTimeFieldNumber;
const int ConfigPlace::kLocationFieldNumber;
const int ConfigPlace::kStartPosFieldNumber;
const int ConfigPlace::kWidthFieldNumber;
const int ConfigPlace::kHeightFieldNumber;
const int ConfigPlace::kTiledMapFieldNumber;
const int ConfigPlace::kBoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPlace::ConfigPlace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigPlace.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPlace)
}
ConfigPlace::ConfigPlace(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPlace.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPlace)
}
ConfigPlace::ConfigPlace(const ConfigPlace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_time()) {
    time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time(),
      GetArenaNoVirtual());
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_pos()) {
    start_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos(),
      GetArenaNoVirtual());
  }
  tiled_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tiled_map()) {
    tiled_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tiled_map(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&boom_) -
    reinterpret_cast<char*>(&id_)) + sizeof(boom_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigPlace)
}

void ConfigPlace::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tiled_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boom_) -
      reinterpret_cast<char*>(&id_)) + sizeof(boom_));
}

ConfigPlace::~ConfigPlace() {
  // @@protoc_insertion_point(destructor:db.ConfigPlace)
  SharedDtor();
}

void ConfigPlace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tiled_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigPlace::ArenaDtor(void* object) {
  ConfigPlace* _this = reinterpret_cast< ConfigPlace* >(object);
  (void)_this;
}
void ConfigPlace::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPlace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPlace::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPlace& ConfigPlace::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPlace.base);
  return *internal_default_instance();
}


void ConfigPlace::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPlace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      start_pos_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      tiled_map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&id_)) + sizeof(height_));
  }
  boom_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPlace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPlace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_location();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes start_pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes tiled_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tiled_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boom = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_boom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPlace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPlace)
  return false;
#undef DO_
}

void ConfigPlace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPlace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->time(), output);
  }

  // required int32 location = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->location(), output);
  }

  // required bytes start_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->start_pos(), output);
  }

  // required int32 width = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // required int32 height = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  // required bytes tiled_map = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->tiled_map(), output);
  }

  // required int32 boom = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->boom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPlace)
}

::google::protobuf::uint8* ConfigPlace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPlace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes time = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->time(), target);
  }

  // required int32 location = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->location(), target);
  }

  // required bytes start_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->start_pos(), target);
  }

  // required int32 width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // required int32 height = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  // required bytes tiled_map = 8;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->tiled_map(), target);
  }

  // required int32 boom = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->boom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPlace)
  return target;
}

size_t ConfigPlace::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigPlace)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_time()) {
    // required bytes time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->time());
  }

  if (has_start_pos()) {
    // required bytes start_pos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_pos());
  }

  if (has_tiled_map()) {
    // required bytes tiled_map = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tiled_map());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_location()) {
    // required int32 location = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->location());
  }

  if (has_width()) {
    // required int32 width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_boom()) {
    // required int32 boom = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boom());
  }

  return total_size;
}
size_t ConfigPlace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPlace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->time());

    // required bytes start_pos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_pos());

    // required bytes tiled_map = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tiled_map());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 location = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->location());

    // required int32 width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 boom = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boom());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPlace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPlace)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPlace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPlace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPlace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPlace)
    MergeFrom(*source);
  }
}

void ConfigPlace::MergeFrom(const ConfigPlace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPlace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_time(from.time());
    }
    if (cached_has_bits & 0x00000004u) {
      set_start_pos(from.start_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      set_tiled_map(from.tiled_map());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      location_ = from.location_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_boom(from.boom());
  }
}

void ConfigPlace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPlace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPlace::CopyFrom(const ConfigPlace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPlace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPlace::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigPlace::Swap(ConfigPlace* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPlace* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPlace::UnsafeArenaSwap(ConfigPlace* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPlace::InternalSwap(ConfigPlace* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_.Swap(&other->time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_pos_.Swap(&other->start_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tiled_map_.Swap(&other->tiled_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(location_, other->location_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(boom_, other->boom_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPlace::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigSceneInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSceneInfo::kSceneidFieldNumber;
const int ConfigSceneInfo::kSceneNameFieldNumber;
const int ConfigSceneInfo::kTypeFieldNumber;
const int ConfigSceneInfo::kBelongToFieldNumber;
const int ConfigSceneInfo::kCheckpointNumFieldNumber;
const int ConfigSceneInfo::kPosFieldNumber;
const int ConfigSceneInfo::kDropItemFieldNumber;
const int ConfigSceneInfo::kFormulaUnlockFieldNumber;
const int ConfigSceneInfo::kAddExpFieldNumber;
const int ConfigSceneInfo::kEndConditionFieldNumber;
const int ConfigSceneInfo::kConsumeNumFieldNumber;
const int ConfigSceneInfo::kStarConditionFieldNumber;
const int ConfigSceneInfo::kFightMapFieldNumber;
const int ConfigSceneInfo::kMaxLayerFieldNumber;
const int ConfigSceneInfo::kContentFieldNumber;
const int ConfigSceneInfo::kPortUnlockFieldNumber;
const int ConfigSceneInfo::kPreTaskFieldNumber;
const int ConfigSceneInfo::kSecretRoomFieldNumber;
const int ConfigSceneInfo::kStartResFieldNumber;
const int ConfigSceneInfo::kFightMachineFieldNumber;
const int ConfigSceneInfo::kEnterConditionFieldNumber;
const int ConfigSceneInfo::kDungeonEventFieldNumber;
const int ConfigSceneInfo::kFinalRewardFieldNumber;
const int ConfigSceneInfo::kNeedPointFieldNumber;
const int ConfigSceneInfo::kFirstRewardFieldNumber;
const int ConfigSceneInfo::kClearRewardFieldNumber;
const int ConfigSceneInfo::kBossInfoFieldNumber;
const int ConfigSceneInfo::kLayerRewardFieldNumber;
const int ConfigSceneInfo::kCanRepeatFieldNumber;
const int ConfigSceneInfo::kDailyTimesLimitFieldNumber;
const int ConfigSceneInfo::kSavedCustomerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSceneInfo::ConfigSceneInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigSceneInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigSceneInfo)
}
ConfigSceneInfo::ConfigSceneInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSceneInfo.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigSceneInfo)
}
ConfigSceneInfo::ConfigSceneInfo(const ConfigSceneInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scene_name()) {
    scene_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_name(),
      GetArenaNoVirtual());
  }
  pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pos()) {
    pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos(),
      GetArenaNoVirtual());
  }
  drop_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_item()) {
    drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_item(),
      GetArenaNoVirtual());
  }
  formula_unlock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_formula_unlock()) {
    formula_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.formula_unlock(),
      GetArenaNoVirtual());
  }
  end_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_end_condition()) {
    end_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_condition(),
      GetArenaNoVirtual());
  }
  star_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_star_condition()) {
    star_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.star_condition(),
      GetArenaNoVirtual());
  }
  fight_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fight_map()) {
    fight_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fight_map(),
      GetArenaNoVirtual());
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  port_unlock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_port_unlock()) {
    port_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_unlock(),
      GetArenaNoVirtual());
  }
  pre_task_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pre_task()) {
    pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pre_task(),
      GetArenaNoVirtual());
  }
  secret_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret_room()) {
    secret_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_room(),
      GetArenaNoVirtual());
  }
  start_res_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_res()) {
    start_res_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_res(),
      GetArenaNoVirtual());
  }
  fight_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fight_machine()) {
    fight_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fight_machine(),
      GetArenaNoVirtual());
  }
  enter_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enter_condition()) {
    enter_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enter_condition(),
      GetArenaNoVirtual());
  }
  dungeon_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dungeon_event()) {
    dungeon_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeon_event(),
      GetArenaNoVirtual());
  }
  final_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_final_reward()) {
    final_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_reward(),
      GetArenaNoVirtual());
  }
  first_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first_reward()) {
    first_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_reward(),
      GetArenaNoVirtual());
  }
  clear_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clear_reward()) {
    clear_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clear_reward(),
      GetArenaNoVirtual());
  }
  boss_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_boss_info()) {
    boss_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boss_info(),
      GetArenaNoVirtual());
  }
  layer_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_reward()) {
    layer_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_reward(),
      GetArenaNoVirtual());
  }
  saved_customer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_saved_customer()) {
    saved_customer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.saved_customer(),
      GetArenaNoVirtual());
  }
  ::memcpy(&sceneid_, &from.sceneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&daily_times_limit_) -
    reinterpret_cast<char*>(&sceneid_)) + sizeof(daily_times_limit_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigSceneInfo)
}

void ConfigSceneInfo::SharedCtor() {
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formula_unlock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  star_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fight_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_unlock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_task_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_res_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fight_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enter_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dungeon_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boss_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  saved_customer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sceneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&daily_times_limit_) -
      reinterpret_cast<char*>(&sceneid_)) + sizeof(daily_times_limit_));
}

ConfigSceneInfo::~ConfigSceneInfo() {
  // @@protoc_insertion_point(destructor:db.ConfigSceneInfo)
  SharedDtor();
}

void ConfigSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  scene_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formula_unlock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  star_condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fight_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_unlock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_task_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_res_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fight_machine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enter_condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dungeon_event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boss_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  saved_customer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSceneInfo::ArenaDtor(void* object) {
  ConfigSceneInfo* _this = reinterpret_cast< ConfigSceneInfo* >(object);
  (void)_this;
}
void ConfigSceneInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigSceneInfo::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigSceneInfo& ConfigSceneInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSceneInfo.base);
  return *internal_default_instance();
}


void ConfigSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      scene_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pos_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      drop_item_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      formula_unlock_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      end_condition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      star_condition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      fight_map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      content_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      port_unlock_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      pre_task_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      secret_room_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      start_res_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      fight_machine_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      enter_condition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      dungeon_event_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      final_reward_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      first_reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      clear_reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      boss_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      layer_reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      saved_customer_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 14680064u) {
    ::memset(&sceneid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&belong_to_) -
        reinterpret_cast<char*>(&sceneid_)) + sizeof(belong_to_));
  }
  if (cached_has_bits & 2130706432u) {
    ::memset(&checkpoint_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&daily_times_limit_) -
        reinterpret_cast<char*>(&checkpoint_num_)) + sizeof(daily_times_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigSceneInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes scene_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_scene_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 belong_to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_belong_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belong_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkpoint_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_checkpoint_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop_item = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes formula_unlock = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_formula_unlock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add_exp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_add_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes end_condition = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 consume_num = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_consume_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes star_condition = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_star_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes fight_map = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fight_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_layer = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_max_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes port_unlock = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_port_unlock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pre_task = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pre_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes secret_room = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes start_res = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes fight_machine = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fight_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes enter_condition = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enter_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes dungeon_event = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dungeon_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes final_reward = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_final_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_point = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_need_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes first_reward = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes clear_reward = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clear_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes boss_info = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_boss_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes layer_reward = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_layer_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 can_repeat = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_can_repeat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_repeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 daily_times_limit = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_daily_times_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_times_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes saved_customer = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_saved_customer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigSceneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigSceneInfo)
  return false;
#undef DO_
}

void ConfigSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sceneid = 1;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // required bytes scene_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->scene_name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 belong_to = 4;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->belong_to(), output);
  }

  // required int32 checkpoint_num = 5;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->checkpoint_num(), output);
  }

  // required bytes pos = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->pos(), output);
  }

  // required bytes drop_item = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->drop_item(), output);
  }

  // required bytes formula_unlock = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->formula_unlock(), output);
  }

  // required int32 add_exp = 9;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->add_exp(), output);
  }

  // required bytes end_condition = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->end_condition(), output);
  }

  // required int32 consume_num = 11;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->consume_num(), output);
  }

  // required bytes star_condition = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->star_condition(), output);
  }

  // required bytes fight_map = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->fight_map(), output);
  }

  // required int32 max_layer = 14;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_layer(), output);
  }

  // required bytes content = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->content(), output);
  }

  // required bytes port_unlock = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->port_unlock(), output);
  }

  // required bytes pre_task = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->pre_task(), output);
  }

  // required bytes secret_room = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->secret_room(), output);
  }

  // required bytes start_res = 20;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->start_res(), output);
  }

  // required bytes fight_machine = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->fight_machine(), output);
  }

  // required bytes enter_condition = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->enter_condition(), output);
  }

  // required bytes dungeon_event = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->dungeon_event(), output);
  }

  // required bytes final_reward = 24;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->final_reward(), output);
  }

  // required int32 need_point = 25;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->need_point(), output);
  }

  // required bytes first_reward = 26;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->first_reward(), output);
  }

  // required bytes clear_reward = 27;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      27, this->clear_reward(), output);
  }

  // required bytes boss_info = 28;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      28, this->boss_info(), output);
  }

  // required bytes layer_reward = 29;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      29, this->layer_reward(), output);
  }

  // required int32 can_repeat = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->can_repeat(), output);
  }

  // required int32 daily_times_limit = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->daily_times_limit(), output);
  }

  // required bytes saved_customer = 32;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      32, this->saved_customer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigSceneInfo)
}

::google::protobuf::uint8* ConfigSceneInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigSceneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sceneid = 1;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // required bytes scene_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->scene_name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 belong_to = 4;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->belong_to(), target);
  }

  // required int32 checkpoint_num = 5;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->checkpoint_num(), target);
  }

  // required bytes pos = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->pos(), target);
  }

  // required bytes drop_item = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->drop_item(), target);
  }

  // required bytes formula_unlock = 8;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->formula_unlock(), target);
  }

  // required int32 add_exp = 9;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->add_exp(), target);
  }

  // required bytes end_condition = 10;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->end_condition(), target);
  }

  // required int32 consume_num = 11;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->consume_num(), target);
  }

  // required bytes star_condition = 12;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->star_condition(), target);
  }

  // required bytes fight_map = 13;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->fight_map(), target);
  }

  // required int32 max_layer = 14;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_layer(), target);
  }

  // required bytes content = 16;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->content(), target);
  }

  // required bytes port_unlock = 17;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->port_unlock(), target);
  }

  // required bytes pre_task = 18;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->pre_task(), target);
  }

  // required bytes secret_room = 19;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->secret_room(), target);
  }

  // required bytes start_res = 20;
  if (cached_has_bits & 0x00000800u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->start_res(), target);
  }

  // required bytes fight_machine = 21;
  if (cached_has_bits & 0x00001000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->fight_machine(), target);
  }

  // required bytes enter_condition = 22;
  if (cached_has_bits & 0x00002000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->enter_condition(), target);
  }

  // required bytes dungeon_event = 23;
  if (cached_has_bits & 0x00004000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->dungeon_event(), target);
  }

  // required bytes final_reward = 24;
  if (cached_has_bits & 0x00008000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->final_reward(), target);
  }

  // required int32 need_point = 25;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->need_point(), target);
  }

  // required bytes first_reward = 26;
  if (cached_has_bits & 0x00010000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->first_reward(), target);
  }

  // required bytes clear_reward = 27;
  if (cached_has_bits & 0x00020000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->clear_reward(), target);
  }

  // required bytes boss_info = 28;
  if (cached_has_bits & 0x00040000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        28, this->boss_info(), target);
  }

  // required bytes layer_reward = 29;
  if (cached_has_bits & 0x00080000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->layer_reward(), target);
  }

  // required int32 can_repeat = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->can_repeat(), target);
  }

  // required int32 daily_times_limit = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->daily_times_limit(), target);
  }

  // required bytes saved_customer = 32;
  if (cached_has_bits & 0x00100000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        32, this->saved_customer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigSceneInfo)
  return target;
}

size_t ConfigSceneInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigSceneInfo)
  size_t total_size = 0;

  if (has_scene_name()) {
    // required bytes scene_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->scene_name());
  }

  if (has_pos()) {
    // required bytes pos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pos());
  }

  if (has_drop_item()) {
    // required bytes drop_item = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_item());
  }

  if (has_formula_unlock()) {
    // required bytes formula_unlock = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->formula_unlock());
  }

  if (has_end_condition()) {
    // required bytes end_condition = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_condition());
  }

  if (has_star_condition()) {
    // required bytes star_condition = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->star_condition());
  }

  if (has_fight_map()) {
    // required bytes fight_map = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fight_map());
  }

  if (has_content()) {
    // required bytes content = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_port_unlock()) {
    // required bytes port_unlock = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->port_unlock());
  }

  if (has_pre_task()) {
    // required bytes pre_task = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_task());
  }

  if (has_secret_room()) {
    // required bytes secret_room = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret_room());
  }

  if (has_start_res()) {
    // required bytes start_res = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_res());
  }

  if (has_fight_machine()) {
    // required bytes fight_machine = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fight_machine());
  }

  if (has_enter_condition()) {
    // required bytes enter_condition = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->enter_condition());
  }

  if (has_dungeon_event()) {
    // required bytes dungeon_event = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dungeon_event());
  }

  if (has_final_reward()) {
    // required bytes final_reward = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->final_reward());
  }

  if (has_first_reward()) {
    // required bytes first_reward = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_reward());
  }

  if (has_clear_reward()) {
    // required bytes clear_reward = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clear_reward());
  }

  if (has_boss_info()) {
    // required bytes boss_info = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->boss_info());
  }

  if (has_layer_reward()) {
    // required bytes layer_reward = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->layer_reward());
  }

  if (has_saved_customer()) {
    // required bytes saved_customer = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->saved_customer());
  }

  if (has_sceneid()) {
    // required int32 sceneid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sceneid());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_belong_to()) {
    // required int32 belong_to = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belong_to());
  }

  if (has_checkpoint_num()) {
    // required int32 checkpoint_num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checkpoint_num());
  }

  if (has_add_exp()) {
    // required int32 add_exp = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_exp());
  }

  if (has_consume_num()) {
    // required int32 consume_num = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consume_num());
  }

  if (has_max_layer()) {
    // required int32 max_layer = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_layer());
  }

  if (has_need_point()) {
    // required int32 need_point = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_point());
  }

  if (has_can_repeat()) {
    // required int32 can_repeat = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->can_repeat());
  }

  if (has_daily_times_limit()) {
    // required int32 daily_times_limit = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->daily_times_limit());
  }

  return total_size;
}
size_t ConfigSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigSceneInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x7fffffff) ^ 0x7fffffff) == 0) {  // All required fields are present.
    // required bytes scene_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->scene_name());

    // required bytes pos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pos());

    // required bytes drop_item = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_item());

    // required bytes formula_unlock = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->formula_unlock());

    // required bytes end_condition = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_condition());

    // required bytes star_condition = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->star_condition());

    // required bytes fight_map = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fight_map());

    // required bytes content = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required bytes port_unlock = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->port_unlock());

    // required bytes pre_task = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_task());

    // required bytes secret_room = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret_room());

    // required bytes start_res = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_res());

    // required bytes fight_machine = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fight_machine());

    // required bytes enter_condition = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->enter_condition());

    // required bytes dungeon_event = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dungeon_event());

    // required bytes final_reward = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->final_reward());

    // required bytes first_reward = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_reward());

    // required bytes clear_reward = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clear_reward());

    // required bytes boss_info = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->boss_info());

    // required bytes layer_reward = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->layer_reward());

    // required bytes saved_customer = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->saved_customer());

    // required int32 sceneid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sceneid());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 belong_to = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belong_to());

    // required int32 checkpoint_num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checkpoint_num());

    // required int32 add_exp = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_exp());

    // required int32 consume_num = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consume_num());

    // required int32 max_layer = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_layer());

    // required int32 need_point = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_point());

    // required int32 can_repeat = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->can_repeat());

    // required int32 daily_times_limit = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->daily_times_limit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigSceneInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigSceneInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigSceneInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigSceneInfo)
    MergeFrom(*source);
  }
}

void ConfigSceneInfo::MergeFrom(const ConfigSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_scene_name(from.scene_name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_pos(from.pos());
    }
    if (cached_has_bits & 0x00000004u) {
      set_drop_item(from.drop_item());
    }
    if (cached_has_bits & 0x00000008u) {
      set_formula_unlock(from.formula_unlock());
    }
    if (cached_has_bits & 0x00000010u) {
      set_end_condition(from.end_condition());
    }
    if (cached_has_bits & 0x00000020u) {
      set_star_condition(from.star_condition());
    }
    if (cached_has_bits & 0x00000040u) {
      set_fight_map(from.fight_map());
    }
    if (cached_has_bits & 0x00000080u) {
      set_content(from.content());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_port_unlock(from.port_unlock());
    }
    if (cached_has_bits & 0x00000200u) {
      set_pre_task(from.pre_task());
    }
    if (cached_has_bits & 0x00000400u) {
      set_secret_room(from.secret_room());
    }
    if (cached_has_bits & 0x00000800u) {
      set_start_res(from.start_res());
    }
    if (cached_has_bits & 0x00001000u) {
      set_fight_machine(from.fight_machine());
    }
    if (cached_has_bits & 0x00002000u) {
      set_enter_condition(from.enter_condition());
    }
    if (cached_has_bits & 0x00004000u) {
      set_dungeon_event(from.dungeon_event());
    }
    if (cached_has_bits & 0x00008000u) {
      set_final_reward(from.final_reward());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_first_reward(from.first_reward());
    }
    if (cached_has_bits & 0x00020000u) {
      set_clear_reward(from.clear_reward());
    }
    if (cached_has_bits & 0x00040000u) {
      set_boss_info(from.boss_info());
    }
    if (cached_has_bits & 0x00080000u) {
      set_layer_reward(from.layer_reward());
    }
    if (cached_has_bits & 0x00100000u) {
      set_saved_customer(from.saved_customer());
    }
    if (cached_has_bits & 0x00200000u) {
      sceneid_ = from.sceneid_;
    }
    if (cached_has_bits & 0x00400000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00800000u) {
      belong_to_ = from.belong_to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      checkpoint_num_ = from.checkpoint_num_;
    }
    if (cached_has_bits & 0x02000000u) {
      add_exp_ = from.add_exp_;
    }
    if (cached_has_bits & 0x04000000u) {
      consume_num_ = from.consume_num_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_layer_ = from.max_layer_;
    }
    if (cached_has_bits & 0x10000000u) {
      need_point_ = from.need_point_;
    }
    if (cached_has_bits & 0x20000000u) {
      can_repeat_ = from.can_repeat_;
    }
    if (cached_has_bits & 0x40000000u) {
      daily_times_limit_ = from.daily_times_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSceneInfo::CopyFrom(const ConfigSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x7fffffff) != 0x7fffffff) return false;
  return true;
}

void ConfigSceneInfo::Swap(ConfigSceneInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigSceneInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigSceneInfo::UnsafeArenaSwap(ConfigSceneInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigSceneInfo::InternalSwap(ConfigSceneInfo* other) {
  using std::swap;
  scene_name_.Swap(&other->scene_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pos_.Swap(&other->pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_item_.Swap(&other->drop_item_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  formula_unlock_.Swap(&other->formula_unlock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_condition_.Swap(&other->end_condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  star_condition_.Swap(&other->star_condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fight_map_.Swap(&other->fight_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_unlock_.Swap(&other->port_unlock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pre_task_.Swap(&other->pre_task_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_room_.Swap(&other->secret_room_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_res_.Swap(&other->start_res_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fight_machine_.Swap(&other->fight_machine_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enter_condition_.Swap(&other->enter_condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dungeon_event_.Swap(&other->dungeon_event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  final_reward_.Swap(&other->final_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_reward_.Swap(&other->first_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clear_reward_.Swap(&other->clear_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  boss_info_.Swap(&other->boss_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  layer_reward_.Swap(&other->layer_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  saved_customer_.Swap(&other->saved_customer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sceneid_, other->sceneid_);
  swap(type_, other->type_);
  swap(belong_to_, other->belong_to_);
  swap(checkpoint_num_, other->checkpoint_num_);
  swap(add_exp_, other->add_exp_);
  swap(consume_num_, other->consume_num_);
  swap(max_layer_, other->max_layer_);
  swap(need_point_, other->need_point_);
  swap(can_repeat_, other->can_repeat_);
  swap(daily_times_limit_, other->daily_times_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigSceneInfo::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigExploreEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigExploreEvent::kIdFieldNumber;
const int ConfigExploreEvent::kTypeFieldNumber;
const int ConfigExploreEvent::kTriggerTypeFieldNumber;
const int ConfigExploreEvent::kConditionFieldNumber;
const int ConfigExploreEvent::kLandformConditionFieldNumber;
const int ConfigExploreEvent::kContentFieldNumber;
const int ConfigExploreEvent::kPosFieldNumber;
const int ConfigExploreEvent::kProbabilityFieldNumber;
const int ConfigExploreEvent::kCdFieldNumber;
const int ConfigExploreEvent::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigExploreEvent::ConfigExploreEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigExploreEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigExploreEvent)
}
ConfigExploreEvent::ConfigExploreEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigExploreEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigExploreEvent)
}
ConfigExploreEvent::ConfigExploreEvent(const ConfigExploreEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_condition()) {
    condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.condition(),
      GetArenaNoVirtual());
  }
  landform_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_landform_condition()) {
    landform_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landform_condition(),
      GetArenaNoVirtual());
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pos()) {
    pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigExploreEvent)
}

void ConfigExploreEvent::SharedCtor() {
  condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  landform_condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(time_));
}

ConfigExploreEvent::~ConfigExploreEvent() {
  // @@protoc_insertion_point(destructor:db.ConfigExploreEvent)
  SharedDtor();
}

void ConfigExploreEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  landform_condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigExploreEvent::ArenaDtor(void* object) {
  ConfigExploreEvent* _this = reinterpret_cast< ConfigExploreEvent* >(object);
  (void)_this;
}
void ConfigExploreEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigExploreEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigExploreEvent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigExploreEvent& ConfigExploreEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigExploreEvent.base);
  return *internal_default_instance();
}


void ConfigExploreEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigExploreEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      condition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      landform_condition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      pos_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_) -
        reinterpret_cast<char*>(&id_)) + sizeof(probability_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&cd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&cd_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigExploreEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigExploreEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 trigger_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_trigger_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes condition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes landform_condition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_landform_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float probability = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cd = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_cd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigExploreEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigExploreEvent)
  return false;
#undef DO_
}

void ConfigExploreEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigExploreEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 trigger_type = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trigger_type(), output);
  }

  // required bytes condition = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->condition(), output);
  }

  // required bytes landform_condition = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->landform_condition(), output);
  }

  // required bytes content = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->content(), output);
  }

  // required bytes pos = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->pos(), output);
  }

  // required float probability = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->probability(), output);
  }

  // required int32 cd = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cd(), output);
  }

  // required int32 time = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigExploreEvent)
}

::google::protobuf::uint8* ConfigExploreEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigExploreEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 trigger_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trigger_type(), target);
  }

  // required bytes condition = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->condition(), target);
  }

  // required bytes landform_condition = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->landform_condition(), target);
  }

  // required bytes content = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->content(), target);
  }

  // required bytes pos = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->pos(), target);
  }

  // required float probability = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->probability(), target);
  }

  // required int32 cd = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cd(), target);
  }

  // required int32 time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigExploreEvent)
  return target;
}

size_t ConfigExploreEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigExploreEvent)
  size_t total_size = 0;

  if (has_condition()) {
    // required bytes condition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->condition());
  }

  if (has_landform_condition()) {
    // required bytes landform_condition = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->landform_condition());
  }

  if (has_content()) {
    // required bytes content = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_pos()) {
    // required bytes pos = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pos());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_trigger_type()) {
    // required int32 trigger_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_type());
  }

  if (has_probability()) {
    // required float probability = 8;
    total_size += 1 + 4;
  }

  if (has_cd()) {
    // required int32 cd = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cd());
  }

  if (has_time()) {
    // required int32 time = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  return total_size;
}
size_t ConfigExploreEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigExploreEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes condition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->condition());

    // required bytes landform_condition = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->landform_condition());

    // required bytes content = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required bytes pos = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pos());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 trigger_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_type());

    // required float probability = 8;
    total_size += 1 + 4;

    // required int32 cd = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cd());

    // required int32 time = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigExploreEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigExploreEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigExploreEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigExploreEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigExploreEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigExploreEvent)
    MergeFrom(*source);
  }
}

void ConfigExploreEvent::MergeFrom(const ConfigExploreEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigExploreEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_condition(from.condition());
    }
    if (cached_has_bits & 0x00000002u) {
      set_landform_condition(from.landform_condition());
    }
    if (cached_has_bits & 0x00000004u) {
      set_content(from.content());
    }
    if (cached_has_bits & 0x00000008u) {
      set_pos(from.pos());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      trigger_type_ = from.trigger_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      cd_ = from.cd_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigExploreEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigExploreEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigExploreEvent::CopyFrom(const ConfigExploreEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigExploreEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigExploreEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void ConfigExploreEvent::Swap(ConfigExploreEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigExploreEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigExploreEvent::UnsafeArenaSwap(ConfigExploreEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigExploreEvent::InternalSwap(ConfigExploreEvent* other) {
  using std::swap;
  condition_.Swap(&other->condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  landform_condition_.Swap(&other->landform_condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pos_.Swap(&other->pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(trigger_type_, other->trigger_type_);
  swap(probability_, other->probability_);
  swap(cd_, other->cd_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigExploreEvent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigBaseRoom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigBaseRoom::kIdFieldNumber;
const int ConfigBaseRoom::kNameFieldNumber;
const int ConfigBaseRoom::kRoomTypeFieldNumber;
const int ConfigBaseRoom::kRoomNumMinFieldNumber;
const int ConfigBaseRoom::kAttributeFieldNumber;
const int ConfigBaseRoom::kEfficiencyFieldNumber;
const int ConfigBaseRoom::kPreRoomFieldNumber;
const int ConfigBaseRoom::kNeedLevelFieldNumber;
const int ConfigBaseRoom::kNeedMaterialFieldNumber;
const int ConfigBaseRoom::kFarmSkillFieldNumber;
const int ConfigBaseRoom::kMachineParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigBaseRoom::ConfigBaseRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigBaseRoom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigBaseRoom)
}
ConfigBaseRoom::ConfigBaseRoom(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBaseRoom.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigBaseRoom)
}
ConfigBaseRoom::ConfigBaseRoom(const ConfigBaseRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  need_material_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_need_material()) {
    need_material_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.need_material(),
      GetArenaNoVirtual());
  }
  machine_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_param()) {
    machine_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_param(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&farm_skill_) -
    reinterpret_cast<char*>(&id_)) + sizeof(farm_skill_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigBaseRoom)
}

void ConfigBaseRoom::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_material_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&farm_skill_) -
      reinterpret_cast<char*>(&id_)) + sizeof(farm_skill_));
}

ConfigBaseRoom::~ConfigBaseRoom() {
  // @@protoc_insertion_point(destructor:db.ConfigBaseRoom)
  SharedDtor();
}

void ConfigBaseRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_material_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigBaseRoom::ArenaDtor(void* object) {
  ConfigBaseRoom* _this = reinterpret_cast< ConfigBaseRoom* >(object);
  (void)_this;
}
void ConfigBaseRoom::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigBaseRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigBaseRoom::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigBaseRoom& ConfigBaseRoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBaseRoom.base);
  return *internal_default_instance();
}


void ConfigBaseRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigBaseRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      need_material_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      machine_param_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&efficiency_) -
        reinterpret_cast<char*>(&id_)) + sizeof(efficiency_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&pre_room_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&farm_skill_) -
        reinterpret_cast<char*>(&pre_room_)) + sizeof(farm_skill_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigBaseRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigBaseRoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 room_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_room_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 room_num_min = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_room_num_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_num_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 attribute = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_attribute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attribute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 efficiency = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_efficiency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &efficiency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pre_room = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_pre_room();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_room_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_need_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes need_material = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_need_material()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 farm_skill = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_farm_skill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &farm_skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes machine_param = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigBaseRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigBaseRoom)
  return false;
#undef DO_
}

void ConfigBaseRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigBaseRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 room_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_type(), output);
  }

  // required int32 room_num_min = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->room_num_min(), output);
  }

  // required int32 attribute = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attribute(), output);
  }

  // required int32 efficiency = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->efficiency(), output);
  }

  // required int32 pre_room = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pre_room(), output);
  }

  // required int32 need_level = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->need_level(), output);
  }

  // required bytes need_material = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->need_material(), output);
  }

  // required int32 farm_skill = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->farm_skill(), output);
  }

  // required bytes machine_param = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->machine_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigBaseRoom)
}

::google::protobuf::uint8* ConfigBaseRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigBaseRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 room_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_type(), target);
  }

  // required int32 room_num_min = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->room_num_min(), target);
  }

  // required int32 attribute = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attribute(), target);
  }

  // required int32 efficiency = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->efficiency(), target);
  }

  // required int32 pre_room = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pre_room(), target);
  }

  // required int32 need_level = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->need_level(), target);
  }

  // required bytes need_material = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->need_material(), target);
  }

  // required int32 farm_skill = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->farm_skill(), target);
  }

  // required bytes machine_param = 11;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->machine_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigBaseRoom)
  return target;
}

size_t ConfigBaseRoom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigBaseRoom)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_need_material()) {
    // required bytes need_material = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_material());
  }

  if (has_machine_param()) {
    // required bytes machine_param = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->machine_param());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_room_type()) {
    // required int32 room_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_type());
  }

  if (has_room_num_min()) {
    // required int32 room_num_min = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_num_min());
  }

  if (has_attribute()) {
    // required int32 attribute = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attribute());
  }

  if (has_efficiency()) {
    // required int32 efficiency = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->efficiency());
  }

  if (has_pre_room()) {
    // required int32 pre_room = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pre_room());
  }

  if (has_need_level()) {
    // required int32 need_level = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());
  }

  if (has_farm_skill()) {
    // required int32 farm_skill = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->farm_skill());
  }

  return total_size;
}
size_t ConfigBaseRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigBaseRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes need_material = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_material());

    // required bytes machine_param = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->machine_param());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 room_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_type());

    // required int32 room_num_min = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_num_min());

    // required int32 attribute = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attribute());

    // required int32 efficiency = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->efficiency());

    // required int32 pre_room = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pre_room());

    // required int32 need_level = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());

    // required int32 farm_skill = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->farm_skill());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigBaseRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigBaseRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigBaseRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigBaseRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigBaseRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigBaseRoom)
    MergeFrom(*source);
  }
}

void ConfigBaseRoom::MergeFrom(const ConfigBaseRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigBaseRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_need_material(from.need_material());
    }
    if (cached_has_bits & 0x00000004u) {
      set_machine_param(from.machine_param());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      room_type_ = from.room_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      room_num_min_ = from.room_num_min_;
    }
    if (cached_has_bits & 0x00000040u) {
      attribute_ = from.attribute_;
    }
    if (cached_has_bits & 0x00000080u) {
      efficiency_ = from.efficiency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      pre_room_ = from.pre_room_;
    }
    if (cached_has_bits & 0x00000200u) {
      need_level_ = from.need_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      farm_skill_ = from.farm_skill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigBaseRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigBaseRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigBaseRoom::CopyFrom(const ConfigBaseRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigBaseRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigBaseRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void ConfigBaseRoom::Swap(ConfigBaseRoom* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigBaseRoom* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigBaseRoom::UnsafeArenaSwap(ConfigBaseRoom* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigBaseRoom::InternalSwap(ConfigBaseRoom* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  need_material_.Swap(&other->need_material_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_param_.Swap(&other->machine_param_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(room_type_, other->room_type_);
  swap(room_num_min_, other->room_num_min_);
  swap(attribute_, other->attribute_);
  swap(efficiency_, other->efficiency_);
  swap(pre_room_, other->pre_room_);
  swap(need_level_, other->need_level_);
  swap(farm_skill_, other->farm_skill_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigBaseRoom::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFormula::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFormula::kIdFieldNumber;
const int ConfigFormula::kLevelFieldNumber;
const int ConfigFormula::kProductIdFieldNumber;
const int ConfigFormula::kFormulaNameFieldNumber;
const int ConfigFormula::kTypeFieldNumber;
const int ConfigFormula::kMaterialFieldNumber;
const int ConfigFormula::kSecondsFieldNumber;
const int ConfigFormula::kBelongToFieldNumber;
const int ConfigFormula::kAddExpFieldNumber;
const int ConfigFormula::kSpeedUpCostFieldNumber;
const int ConfigFormula::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFormula::ConfigFormula()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFormula.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFormula)
}
ConfigFormula::ConfigFormula(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFormula.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFormula)
}
ConfigFormula::ConfigFormula(const ConfigFormula& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_id()) {
    product_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id(),
      GetArenaNoVirtual());
  }
  formula_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_formula_name()) {
    formula_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.formula_name(),
      GetArenaNoVirtual());
  }
  material_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_material()) {
    material_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.material(),
      GetArenaNoVirtual());
  }
  speed_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_speed_up_cost()) {
    speed_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speed_up_cost(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&id_)) + sizeof(output_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFormula)
}

void ConfigFormula::SharedCtor() {
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formula_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  material_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&id_)) + sizeof(output_));
}

ConfigFormula::~ConfigFormula() {
  // @@protoc_insertion_point(destructor:db.ConfigFormula)
  SharedDtor();
}

void ConfigFormula::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formula_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  material_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_up_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFormula::ArenaDtor(void* object) {
  ConfigFormula* _this = reinterpret_cast< ConfigFormula* >(object);
  (void)_this;
}
void ConfigFormula::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFormula::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFormula::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFormula& ConfigFormula::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFormula.base);
  return *internal_default_instance();
}


void ConfigFormula::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFormula)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      product_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      formula_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      material_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      speed_up_cost_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&id_)) + sizeof(seconds_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&belong_to_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_) -
        reinterpret_cast<char*>(&belong_to_)) + sizeof(output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFormula::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFormula)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes product_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes formula_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_formula_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes material = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_material()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seconds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 belong_to = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_belong_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belong_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add_exp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_add_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes speed_up_cost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_speed_up_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 output = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFormula)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFormula)
  return false;
#undef DO_
}

void ConfigFormula::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFormula)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required bytes product_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->product_id(), output);
  }

  // required bytes formula_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->formula_name(), output);
  }

  // required int32 type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // required bytes material = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->material(), output);
  }

  // required int32 seconds = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seconds(), output);
  }

  // required int32 belong_to = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->belong_to(), output);
  }

  // required int32 add_exp = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->add_exp(), output);
  }

  // required bytes speed_up_cost = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->speed_up_cost(), output);
  }

  // required int32 output = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFormula)
}

::google::protobuf::uint8* ConfigFormula::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFormula)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required bytes product_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->product_id(), target);
  }

  // required bytes formula_name = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->formula_name(), target);
  }

  // required int32 type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // required bytes material = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->material(), target);
  }

  // required int32 seconds = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seconds(), target);
  }

  // required int32 belong_to = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->belong_to(), target);
  }

  // required int32 add_exp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->add_exp(), target);
  }

  // required bytes speed_up_cost = 10;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->speed_up_cost(), target);
  }

  // required int32 output = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFormula)
  return target;
}

size_t ConfigFormula::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFormula)
  size_t total_size = 0;

  if (has_product_id()) {
    // required bytes product_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->product_id());
  }

  if (has_formula_name()) {
    // required bytes formula_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->formula_name());
  }

  if (has_material()) {
    // required bytes material = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->material());
  }

  if (has_speed_up_cost()) {
    // required bytes speed_up_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->speed_up_cost());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_type()) {
    // required int32 type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_seconds()) {
    // required int32 seconds = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  if (has_belong_to()) {
    // required int32 belong_to = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belong_to());
  }

  if (has_add_exp()) {
    // required int32 add_exp = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_exp());
  }

  if (has_output()) {
    // required int32 output = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output());
  }

  return total_size;
}
size_t ConfigFormula::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFormula)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required bytes product_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->product_id());

    // required bytes formula_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->formula_name());

    // required bytes material = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->material());

    // required bytes speed_up_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->speed_up_cost());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 seconds = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());

    // required int32 belong_to = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belong_to());

    // required int32 add_exp = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_exp());

    // required int32 output = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFormula::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFormula)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFormula* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFormula>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFormula)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFormula)
    MergeFrom(*source);
  }
}

void ConfigFormula::MergeFrom(const ConfigFormula& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFormula)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_product_id(from.product_id());
    }
    if (cached_has_bits & 0x00000002u) {
      set_formula_name(from.formula_name());
    }
    if (cached_has_bits & 0x00000004u) {
      set_material(from.material());
    }
    if (cached_has_bits & 0x00000008u) {
      set_speed_up_cost(from.speed_up_cost());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      belong_to_ = from.belong_to_;
    }
    if (cached_has_bits & 0x00000200u) {
      add_exp_ = from.add_exp_;
    }
    if (cached_has_bits & 0x00000400u) {
      output_ = from.output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFormula::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFormula)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFormula::CopyFrom(const ConfigFormula& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFormula)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFormula::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void ConfigFormula::Swap(ConfigFormula* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFormula* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFormula::UnsafeArenaSwap(ConfigFormula* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFormula::InternalSwap(ConfigFormula* other) {
  using std::swap;
  product_id_.Swap(&other->product_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  formula_name_.Swap(&other->formula_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  material_.Swap(&other->material_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  speed_up_cost_.Swap(&other->speed_up_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(type_, other->type_);
  swap(seconds_, other->seconds_);
  swap(belong_to_, other->belong_to_);
  swap(add_exp_, other->add_exp_);
  swap(output_, other->output_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFormula::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigShopping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigShopping::kIdFieldNumber;
const int ConfigShopping::kGroupidFieldNumber;
const int ConfigShopping::kCategoryFieldNumber;
const int ConfigShopping::kBelongStoreFieldNumber;
const int ConfigShopping::kGoodsFieldNumber;
const int ConfigShopping::kPriceFieldNumber;
const int ConfigShopping::kDateFieldNumber;
const int ConfigShopping::kLimitNumFieldNumber;
const int ConfigShopping::kDoubleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigShopping::ConfigShopping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigShopping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigShopping)
}
ConfigShopping::ConfigShopping(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigShopping.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigShopping)
}
ConfigShopping::ConfigShopping(const ConfigShopping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_goods()) {
    goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.goods(),
      GetArenaNoVirtual());
  }
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price()) {
    price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price(),
      GetArenaNoVirtual());
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&double__) -
    reinterpret_cast<char*>(&id_)) + sizeof(double__));
  // @@protoc_insertion_point(copy_constructor:db.ConfigShopping)
}

void ConfigShopping::SharedCtor() {
  goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double__) -
      reinterpret_cast<char*>(&id_)) + sizeof(double__));
}

ConfigShopping::~ConfigShopping() {
  // @@protoc_insertion_point(destructor:db.ConfigShopping)
  SharedDtor();
}

void ConfigShopping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  goods_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigShopping::ArenaDtor(void* object) {
  ConfigShopping* _this = reinterpret_cast< ConfigShopping* >(object);
  (void)_this;
}
void ConfigShopping::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigShopping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigShopping::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigShopping& ConfigShopping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigShopping.base);
  return *internal_default_instance();
}


void ConfigShopping::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigShopping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      goods_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      price_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      date_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_num_) -
        reinterpret_cast<char*>(&id_)) + sizeof(limit_num_));
  }
  double__ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigShopping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigShopping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 category = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 belong_store = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_belong_store();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belong_store_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes goods = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_goods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes date = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 limit_num = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_limit_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 double = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_double_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigShopping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigShopping)
  return false;
#undef DO_
}

void ConfigShopping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigShopping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 groupid = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 category = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->category(), output);
  }

  // required int32 belong_store = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->belong_store(), output);
  }

  // required bytes goods = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->goods(), output);
  }

  // required bytes price = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->price(), output);
  }

  // required bytes date = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->date(), output);
  }

  // required int32 limit_num = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->limit_num(), output);
  }

  // required int32 double = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->double_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigShopping)
}

::google::protobuf::uint8* ConfigShopping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigShopping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 groupid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 category = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->category(), target);
  }

  // required int32 belong_store = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->belong_store(), target);
  }

  // required bytes goods = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->goods(), target);
  }

  // required bytes price = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->price(), target);
  }

  // required bytes date = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->date(), target);
  }

  // required int32 limit_num = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->limit_num(), target);
  }

  // required int32 double = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->double_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigShopping)
  return target;
}

size_t ConfigShopping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigShopping)
  size_t total_size = 0;

  if (has_goods()) {
    // required bytes goods = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->goods());
  }

  if (has_price()) {
    // required bytes price = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->price());
  }

  if (has_date()) {
    // required bytes date = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->date());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_groupid()) {
    // required int32 groupid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  if (has_category()) {
    // required int32 category = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category());
  }

  if (has_belong_store()) {
    // required int32 belong_store = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belong_store());
  }

  if (has_limit_num()) {
    // required int32 limit_num = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_num());
  }

  if (has_double_()) {
    // required int32 double = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->double_());
  }

  return total_size;
}
size_t ConfigShopping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigShopping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes goods = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->goods());

    // required bytes price = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->price());

    // required bytes date = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->date());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 groupid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());

    // required int32 category = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category());

    // required int32 belong_store = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belong_store());

    // required int32 limit_num = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_num());

    // required int32 double = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->double_());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigShopping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigShopping)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigShopping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigShopping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigShopping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigShopping)
    MergeFrom(*source);
  }
}

void ConfigShopping::MergeFrom(const ConfigShopping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigShopping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_goods(from.goods());
    }
    if (cached_has_bits & 0x00000002u) {
      set_price(from.price());
    }
    if (cached_has_bits & 0x00000004u) {
      set_date(from.date());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000020u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000040u) {
      belong_store_ = from.belong_store_;
    }
    if (cached_has_bits & 0x00000080u) {
      limit_num_ = from.limit_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_double_(from.double_());
  }
}

void ConfigShopping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigShopping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigShopping::CopyFrom(const ConfigShopping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigShopping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigShopping::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigShopping::Swap(ConfigShopping* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigShopping* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigShopping::UnsafeArenaSwap(ConfigShopping* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigShopping::InternalSwap(ConfigShopping* other) {
  using std::swap;
  goods_.Swap(&other->goods_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  price_.Swap(&other->price_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(groupid_, other->groupid_);
  swap(category_, other->category_);
  swap(belong_store_, other->belong_store_);
  swap(limit_num_, other->limit_num_);
  swap(double__, other->double__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigShopping::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCardAttribute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCardAttribute::kIdFieldNumber;
const int ConfigCardAttribute::kTypeFieldNumber;
const int ConfigCardAttribute::kNameFieldNumber;
const int ConfigCardAttribute::kInfluenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCardAttribute::ConfigCardAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardAttribute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCardAttribute)
}
ConfigCardAttribute::ConfigCardAttribute(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardAttribute.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCardAttribute)
}
ConfigCardAttribute::ConfigCardAttribute(const ConfigCardAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  influence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_influence()) {
    influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.influence(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCardAttribute)
}

void ConfigCardAttribute::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  influence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

ConfigCardAttribute::~ConfigCardAttribute() {
  // @@protoc_insertion_point(destructor:db.ConfigCardAttribute)
  SharedDtor();
}

void ConfigCardAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  influence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCardAttribute::ArenaDtor(void* object) {
  ConfigCardAttribute* _this = reinterpret_cast< ConfigCardAttribute* >(object);
  (void)_this;
}
void ConfigCardAttribute::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCardAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCardAttribute::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCardAttribute& ConfigCardAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardAttribute.base);
  return *internal_default_instance();
}


void ConfigCardAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCardAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      influence_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCardAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCardAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes influence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_influence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCardAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCardAttribute)
  return false;
#undef DO_
}

void ConfigCardAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCardAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes influence = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->influence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCardAttribute)
}

::google::protobuf::uint8* ConfigCardAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCardAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes influence = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->influence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCardAttribute)
  return target;
}

size_t ConfigCardAttribute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCardAttribute)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_influence()) {
    // required bytes influence = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->influence());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ConfigCardAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCardAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes influence = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->influence());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCardAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCardAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCardAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCardAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCardAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCardAttribute)
    MergeFrom(*source);
  }
}

void ConfigCardAttribute::MergeFrom(const ConfigCardAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCardAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_influence(from.influence());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCardAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCardAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCardAttribute::CopyFrom(const ConfigCardAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCardAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCardAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigCardAttribute::Swap(ConfigCardAttribute* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCardAttribute* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCardAttribute::UnsafeArenaSwap(ConfigCardAttribute* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCardAttribute::InternalSwap(ConfigCardAttribute* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  influence_.Swap(&other->influence_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCardAttribute::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCardEquip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCardEquip::kIdFieldNumber;
const int ConfigCardEquip::kNameFieldNumber;
const int ConfigCardEquip::kStarFieldNumber;
const int ConfigCardEquip::kQualityFieldNumber;
const int ConfigCardEquip::kPartFieldNumber;
const int ConfigCardEquip::kNeedLevelFieldNumber;
const int ConfigCardEquip::kOccupationFieldNumber;
const int ConfigCardEquip::kFarmSkillFieldNumber;
const int ConfigCardEquip::kTypeFieldNumber;
const int ConfigCardEquip::kInitialSlotFieldNumber;
const int ConfigCardEquip::kAttributeFieldNumber;
const int ConfigCardEquip::kSpecialAttrFieldNumber;
const int ConfigCardEquip::kAdvancedAttrFieldNumber;
const int ConfigCardEquip::kForgeCostFieldNumber;
const int ConfigCardEquip::kPriceFieldNumber;
const int ConfigCardEquip::kBaseAttributeAddFieldNumber;
const int ConfigCardEquip::kQualityRefineTimesFieldNumber;
const int ConfigCardEquip::kSkillFieldNumber;
const int ConfigCardEquip::kQualityUpCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCardEquip::ConfigCardEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCardEquip)
}
ConfigCardEquip::ConfigCardEquip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardEquip.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCardEquip)
}
ConfigCardEquip::ConfigCardEquip(const ConfigCardEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attribute()) {
    attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute(),
      GetArenaNoVirtual());
  }
  special_attr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_special_attr()) {
    special_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_attr(),
      GetArenaNoVirtual());
  }
  advanced_attr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_advanced_attr()) {
    advanced_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.advanced_attr(),
      GetArenaNoVirtual());
  }
  forge_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_forge_cost()) {
    forge_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forge_cost(),
      GetArenaNoVirtual());
  }
  base_attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_attribute_add()) {
    base_attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_attribute_add(),
      GetArenaNoVirtual());
  }
  skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skill()) {
    skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill(),
      GetArenaNoVirtual());
  }
  quality_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_quality_up_cost()) {
    quality_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_up_cost(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quality_refine_times_) -
    reinterpret_cast<char*>(&id_)) + sizeof(quality_refine_times_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCardEquip)
}

void ConfigCardEquip::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_attr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advanced_attr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forge_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_refine_times_) -
      reinterpret_cast<char*>(&id_)) + sizeof(quality_refine_times_));
}

ConfigCardEquip::~ConfigCardEquip() {
  // @@protoc_insertion_point(destructor:db.ConfigCardEquip)
  SharedDtor();
}

void ConfigCardEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_attr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advanced_attr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forge_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_attribute_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_up_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCardEquip::ArenaDtor(void* object) {
  ConfigCardEquip* _this = reinterpret_cast< ConfigCardEquip* >(object);
  (void)_this;
}
void ConfigCardEquip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCardEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCardEquip::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCardEquip& ConfigCardEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardEquip.base);
  return *internal_default_instance();
}


void ConfigCardEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCardEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      special_attr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      advanced_attr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      forge_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      base_attribute_add_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      skill_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      quality_up_cost_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&initial_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_refine_times_) -
        reinterpret_cast<char*>(&initial_slot_)) + sizeof(quality_refine_times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCardEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCardEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 part = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_part();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_need_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 occupation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_occupation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 farm_skill = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_farm_skill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &farm_skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 initial_slot = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_initial_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attribute = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes special_attr = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_special_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes advanced_attr = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_advanced_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes forge_cost = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forge_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 price = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes base_attribute_add = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base_attribute_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality_refine_times = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_quality_refine_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_refine_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes skill = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes quality_up_cost = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality_up_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCardEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCardEquip)
  return false;
#undef DO_
}

void ConfigCardEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCardEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 star = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // required int32 quality = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // required int32 part = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->part(), output);
  }

  // required int32 need_level = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->need_level(), output);
  }

  // required int32 occupation = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->occupation(), output);
  }

  // required int32 farm_skill = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->farm_skill(), output);
  }

  // required int32 type = 9;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // required int32 initial_slot = 10;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->initial_slot(), output);
  }

  // required bytes attribute = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->attribute(), output);
  }

  // required bytes special_attr = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->special_attr(), output);
  }

  // required bytes advanced_attr = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->advanced_attr(), output);
  }

  // required bytes forge_cost = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->forge_cost(), output);
  }

  // required int32 price = 15;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->price(), output);
  }

  // required bytes base_attribute_add = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->base_attribute_add(), output);
  }

  // required int32 quality_refine_times = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->quality_refine_times(), output);
  }

  // required bytes skill = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->skill(), output);
  }

  // required bytes quality_up_cost = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->quality_up_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCardEquip)
}

::google::protobuf::uint8* ConfigCardEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCardEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 star = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // required int32 quality = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // required int32 part = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->part(), target);
  }

  // required int32 need_level = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->need_level(), target);
  }

  // required int32 occupation = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->occupation(), target);
  }

  // required int32 farm_skill = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->farm_skill(), target);
  }

  // required int32 type = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // required int32 initial_slot = 10;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->initial_slot(), target);
  }

  // required bytes attribute = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->attribute(), target);
  }

  // required bytes special_attr = 12;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->special_attr(), target);
  }

  // required bytes advanced_attr = 13;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->advanced_attr(), target);
  }

  // required bytes forge_cost = 14;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->forge_cost(), target);
  }

  // required int32 price = 15;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->price(), target);
  }

  // required bytes base_attribute_add = 16;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->base_attribute_add(), target);
  }

  // required int32 quality_refine_times = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->quality_refine_times(), target);
  }

  // required bytes skill = 18;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->skill(), target);
  }

  // required bytes quality_up_cost = 19;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->quality_up_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCardEquip)
  return target;
}

size_t ConfigCardEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCardEquip)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_attribute()) {
    // required bytes attribute = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute());
  }

  if (has_special_attr()) {
    // required bytes special_attr = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_attr());
  }

  if (has_advanced_attr()) {
    // required bytes advanced_attr = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->advanced_attr());
  }

  if (has_forge_cost()) {
    // required bytes forge_cost = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->forge_cost());
  }

  if (has_base_attribute_add()) {
    // required bytes base_attribute_add = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->base_attribute_add());
  }

  if (has_skill()) {
    // required bytes skill = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill());
  }

  if (has_quality_up_cost()) {
    // required bytes quality_up_cost = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality_up_cost());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_star()) {
    // required int32 star = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_quality()) {
    // required int32 quality = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  if (has_part()) {
    // required int32 part = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());
  }

  if (has_need_level()) {
    // required int32 need_level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());
  }

  if (has_occupation()) {
    // required int32 occupation = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupation());
  }

  if (has_farm_skill()) {
    // required int32 farm_skill = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->farm_skill());
  }

  if (has_type()) {
    // required int32 type = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_initial_slot()) {
    // required int32 initial_slot = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initial_slot());
  }

  if (has_price()) {
    // required int32 price = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  if (has_quality_refine_times()) {
    // required int32 quality_refine_times = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality_refine_times());
  }

  return total_size;
}
size_t ConfigCardEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCardEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0007ffff) ^ 0x0007ffff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes attribute = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute());

    // required bytes special_attr = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_attr());

    // required bytes advanced_attr = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->advanced_attr());

    // required bytes forge_cost = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->forge_cost());

    // required bytes base_attribute_add = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->base_attribute_add());

    // required bytes skill = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill());

    // required bytes quality_up_cost = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality_up_cost());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 star = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 quality = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

    // required int32 part = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());

    // required int32 need_level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());

    // required int32 occupation = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupation());

    // required int32 farm_skill = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->farm_skill());

    // required int32 type = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 initial_slot = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initial_slot());

    // required int32 price = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());

    // required int32 quality_refine_times = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality_refine_times());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCardEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCardEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCardEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCardEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCardEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCardEquip)
    MergeFrom(*source);
  }
}

void ConfigCardEquip::MergeFrom(const ConfigCardEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCardEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_attribute(from.attribute());
    }
    if (cached_has_bits & 0x00000004u) {
      set_special_attr(from.special_attr());
    }
    if (cached_has_bits & 0x00000008u) {
      set_advanced_attr(from.advanced_attr());
    }
    if (cached_has_bits & 0x00000010u) {
      set_forge_cost(from.forge_cost());
    }
    if (cached_has_bits & 0x00000020u) {
      set_base_attribute_add(from.base_attribute_add());
    }
    if (cached_has_bits & 0x00000040u) {
      set_skill(from.skill());
    }
    if (cached_has_bits & 0x00000080u) {
      set_quality_up_cost(from.quality_up_cost());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000400u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000800u) {
      part_ = from.part_;
    }
    if (cached_has_bits & 0x00001000u) {
      need_level_ = from.need_level_;
    }
    if (cached_has_bits & 0x00002000u) {
      occupation_ = from.occupation_;
    }
    if (cached_has_bits & 0x00004000u) {
      farm_skill_ = from.farm_skill_;
    }
    if (cached_has_bits & 0x00008000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      initial_slot_ = from.initial_slot_;
    }
    if (cached_has_bits & 0x00020000u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00040000u) {
      quality_refine_times_ = from.quality_refine_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCardEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCardEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCardEquip::CopyFrom(const ConfigCardEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCardEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCardEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;
  return true;
}

void ConfigCardEquip::Swap(ConfigCardEquip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCardEquip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCardEquip::UnsafeArenaSwap(ConfigCardEquip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCardEquip::InternalSwap(ConfigCardEquip* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attribute_.Swap(&other->attribute_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  special_attr_.Swap(&other->special_attr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  advanced_attr_.Swap(&other->advanced_attr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  forge_cost_.Swap(&other->forge_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base_attribute_add_.Swap(&other->base_attribute_add_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skill_.Swap(&other->skill_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quality_up_cost_.Swap(&other->quality_up_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(star_, other->star_);
  swap(quality_, other->quality_);
  swap(part_, other->part_);
  swap(need_level_, other->need_level_);
  swap(occupation_, other->occupation_);
  swap(farm_skill_, other->farm_skill_);
  swap(type_, other->type_);
  swap(initial_slot_, other->initial_slot_);
  swap(price_, other->price_);
  swap(quality_refine_times_, other->quality_refine_times_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCardEquip::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCardEquipStrengthen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCardEquipStrengthen::kIdFieldNumber;
const int ConfigCardEquipStrengthen::kLevelFieldNumber;
const int ConfigCardEquipStrengthen::kQualityFieldNumber;
const int ConfigCardEquipStrengthen::kPartFieldNumber;
const int ConfigCardEquipStrengthen::kStrengthenLevelMaxFieldNumber;
const int ConfigCardEquipStrengthen::kCostFieldNumber;
const int ConfigCardEquipStrengthen::kGoldFieldNumber;
const int ConfigCardEquipStrengthen::kAttributeAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCardEquipStrengthen::ConfigCardEquipStrengthen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardEquipStrengthen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCardEquipStrengthen)
}
ConfigCardEquipStrengthen::ConfigCardEquipStrengthen(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardEquipStrengthen.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCardEquipStrengthen)
}
ConfigCardEquipStrengthen::ConfigCardEquipStrengthen(const ConfigCardEquipStrengthen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  gold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gold()) {
    gold_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gold(),
      GetArenaNoVirtual());
  }
  attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attribute_add()) {
    attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_add(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&strengthen_level_max_) -
    reinterpret_cast<char*>(&id_)) + sizeof(strengthen_level_max_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCardEquipStrengthen)
}

void ConfigCardEquipStrengthen::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strengthen_level_max_) -
      reinterpret_cast<char*>(&id_)) + sizeof(strengthen_level_max_));
}

ConfigCardEquipStrengthen::~ConfigCardEquipStrengthen() {
  // @@protoc_insertion_point(destructor:db.ConfigCardEquipStrengthen)
  SharedDtor();
}

void ConfigCardEquipStrengthen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gold_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCardEquipStrengthen::ArenaDtor(void* object) {
  ConfigCardEquipStrengthen* _this = reinterpret_cast< ConfigCardEquipStrengthen* >(object);
  (void)_this;
}
void ConfigCardEquipStrengthen::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCardEquipStrengthen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCardEquipStrengthen::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCardEquipStrengthen& ConfigCardEquipStrengthen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardEquipStrengthen.base);
  return *internal_default_instance();
}


void ConfigCardEquipStrengthen::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCardEquipStrengthen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gold_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      attribute_add_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&strengthen_level_max_) -
        reinterpret_cast<char*>(&id_)) + sizeof(strengthen_level_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCardEquipStrengthen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCardEquipStrengthen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 part = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_part();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 strengthen_level_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_strengthen_level_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strengthen_level_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes gold = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attribute_add = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attribute_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCardEquipStrengthen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCardEquipStrengthen)
  return false;
#undef DO_
}

void ConfigCardEquipStrengthen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCardEquipStrengthen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 quality = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // required int32 part = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->part(), output);
  }

  // required int32 strengthen_level_max = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strengthen_level_max(), output);
  }

  // required bytes cost = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->cost(), output);
  }

  // required bytes gold = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->gold(), output);
  }

  // required bytes attribute_add = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->attribute_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCardEquipStrengthen)
}

::google::protobuf::uint8* ConfigCardEquipStrengthen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCardEquipStrengthen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 quality = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // required int32 part = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->part(), target);
  }

  // required int32 strengthen_level_max = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strengthen_level_max(), target);
  }

  // required bytes cost = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->cost(), target);
  }

  // required bytes gold = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->gold(), target);
  }

  // required bytes attribute_add = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->attribute_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCardEquipStrengthen)
  return target;
}

size_t ConfigCardEquipStrengthen::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCardEquipStrengthen)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_gold()) {
    // required bytes gold = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gold());
  }

  if (has_attribute_add()) {
    // required bytes attribute_add = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute_add());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_quality()) {
    // required int32 quality = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  if (has_part()) {
    // required int32 part = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());
  }

  if (has_strengthen_level_max()) {
    // required int32 strengthen_level_max = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->strengthen_level_max());
  }

  return total_size;
}
size_t ConfigCardEquipStrengthen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCardEquipStrengthen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes cost = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required bytes gold = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gold());

    // required bytes attribute_add = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute_add());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 quality = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

    // required int32 part = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());

    // required int32 strengthen_level_max = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->strengthen_level_max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCardEquipStrengthen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCardEquipStrengthen)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCardEquipStrengthen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCardEquipStrengthen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCardEquipStrengthen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCardEquipStrengthen)
    MergeFrom(*source);
  }
}

void ConfigCardEquipStrengthen::MergeFrom(const ConfigCardEquipStrengthen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCardEquipStrengthen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_gold(from.gold());
    }
    if (cached_has_bits & 0x00000004u) {
      set_attribute_add(from.attribute_add());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000040u) {
      part_ = from.part_;
    }
    if (cached_has_bits & 0x00000080u) {
      strengthen_level_max_ = from.strengthen_level_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCardEquipStrengthen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCardEquipStrengthen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCardEquipStrengthen::CopyFrom(const ConfigCardEquipStrengthen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCardEquipStrengthen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCardEquipStrengthen::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void ConfigCardEquipStrengthen::Swap(ConfigCardEquipStrengthen* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCardEquipStrengthen* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCardEquipStrengthen::UnsafeArenaSwap(ConfigCardEquipStrengthen* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCardEquipStrengthen::InternalSwap(ConfigCardEquipStrengthen* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gold_.Swap(&other->gold_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attribute_add_.Swap(&other->attribute_add_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(quality_, other->quality_);
  swap(part_, other->part_);
  swap(strengthen_level_max_, other->strengthen_level_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCardEquipStrengthen::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCardLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCardLevel::kLevelFieldNumber;
const int ConfigCardLevel::kExpMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCardLevel::ConfigCardLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardLevel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCardLevel)
}
ConfigCardLevel::ConfigCardLevel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardLevel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCardLevel)
}
ConfigCardLevel::ConfigCardLevel(const ConfigCardLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_max_) -
    reinterpret_cast<char*>(&level_)) + sizeof(exp_max_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCardLevel)
}

void ConfigCardLevel::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_max_) -
      reinterpret_cast<char*>(&level_)) + sizeof(exp_max_));
}

ConfigCardLevel::~ConfigCardLevel() {
  // @@protoc_insertion_point(destructor:db.ConfigCardLevel)
  SharedDtor();
}

void ConfigCardLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigCardLevel::ArenaDtor(void* object) {
  ConfigCardLevel* _this = reinterpret_cast< ConfigCardLevel* >(object);
  (void)_this;
}
void ConfigCardLevel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCardLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCardLevel::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCardLevel& ConfigCardLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardLevel.base);
  return *internal_default_instance();
}


void ConfigCardLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCardLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_max_) -
        reinterpret_cast<char*>(&level_)) + sizeof(exp_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCardLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCardLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exp_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_exp_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCardLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCardLevel)
  return false;
#undef DO_
}

void ConfigCardLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCardLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 exp_max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCardLevel)
}

::google::protobuf::uint8* ConfigCardLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCardLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 exp_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCardLevel)
  return target;
}

size_t ConfigCardLevel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCardLevel)
  size_t total_size = 0;

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_exp_max()) {
    // required int32 exp_max = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp_max());
  }

  return total_size;
}
size_t ConfigCardLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCardLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 exp_max = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp_max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCardLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCardLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCardLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCardLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCardLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCardLevel)
    MergeFrom(*source);
  }
}

void ConfigCardLevel::MergeFrom(const ConfigCardLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCardLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      exp_max_ = from.exp_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCardLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCardLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCardLevel::CopyFrom(const ConfigCardLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCardLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCardLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConfigCardLevel::Swap(ConfigCardLevel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCardLevel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCardLevel::UnsafeArenaSwap(ConfigCardLevel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCardLevel::InternalSwap(ConfigCardLevel* other) {
  using std::swap;
  swap(level_, other->level_);
  swap(exp_max_, other->exp_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCardLevel::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigWanted::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigWanted::kIdFieldNumber;
const int ConfigWanted::kTypeFieldNumber;
const int ConfigWanted::kContentFieldNumber;
const int ConfigWanted::kPlaceFieldNumber;
const int ConfigWanted::kEventFieldNumber;
const int ConfigWanted::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigWanted::ConfigWanted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigWanted.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigWanted)
}
ConfigWanted::ConfigWanted(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigWanted.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigWanted)
}
ConfigWanted::ConfigWanted(const ConfigWanted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  place_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_place()) {
    place_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place(),
      GetArenaNoVirtual());
  }
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event()) {
    event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event(),
      GetArenaNoVirtual());
  }
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigWanted)
}

void ConfigWanted::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  place_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

ConfigWanted::~ConfigWanted() {
  // @@protoc_insertion_point(destructor:db.ConfigWanted)
  SharedDtor();
}

void ConfigWanted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  place_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigWanted::ArenaDtor(void* object) {
  ConfigWanted* _this = reinterpret_cast< ConfigWanted* >(object);
  (void)_this;
}
void ConfigWanted::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigWanted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigWanted::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigWanted& ConfigWanted::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigWanted.base);
  return *internal_default_instance();
}


void ConfigWanted::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigWanted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      place_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      event_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      reward_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigWanted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigWanted)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes place = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_place()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes event = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigWanted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigWanted)
  return false;
#undef DO_
}

void ConfigWanted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigWanted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // required bytes place = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->place(), output);
  }

  // required bytes event = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->event(), output);
  }

  // required bytes reward = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigWanted)
}

::google::protobuf::uint8* ConfigWanted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigWanted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // required bytes place = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->place(), target);
  }

  // required bytes event = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->event(), target);
  }

  // required bytes reward = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigWanted)
  return target;
}

size_t ConfigWanted::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigWanted)
  size_t total_size = 0;

  if (has_content()) {
    // required bytes content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_place()) {
    // required bytes place = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->place());
  }

  if (has_event()) {
    // required bytes event = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event());
  }

  if (has_reward()) {
    // required bytes reward = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ConfigWanted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigWanted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required bytes place = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->place());

    // required bytes event = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event());

    // required bytes reward = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigWanted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigWanted)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigWanted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigWanted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigWanted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigWanted)
    MergeFrom(*source);
  }
}

void ConfigWanted::MergeFrom(const ConfigWanted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigWanted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_content(from.content());
    }
    if (cached_has_bits & 0x00000002u) {
      set_place(from.place());
    }
    if (cached_has_bits & 0x00000004u) {
      set_event(from.event());
    }
    if (cached_has_bits & 0x00000008u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigWanted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigWanted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigWanted::CopyFrom(const ConfigWanted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigWanted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigWanted::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigWanted::Swap(ConfigWanted* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigWanted* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigWanted::UnsafeArenaSwap(ConfigWanted* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigWanted::InternalSwap(ConfigWanted* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  place_.Swap(&other->place_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_.Swap(&other->event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigWanted::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigTask::kIdFieldNumber;
const int ConfigTask::kNameFieldNumber;
const int ConfigTask::kTypeFieldNumber;
const int ConfigTask::kNeedLevelFieldNumber;
const int ConfigTask::kPreTaskFieldNumber;
const int ConfigTask::kNpcStateFieldNumber;
const int ConfigTask::kRewardFieldNumber;
const int ConfigTask::kAddExpFieldNumber;
const int ConfigTask::kHarborFlushFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigTask::ConfigTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigTask)
}
ConfigTask::ConfigTask(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigTask.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigTask)
}
ConfigTask::ConfigTask(const ConfigTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  npc_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_npc_state()) {
    npc_state_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.npc_state(),
      GetArenaNoVirtual());
  }
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  harbor_flush_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_harbor_flush()) {
    harbor_flush_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.harbor_flush(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_exp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(add_exp_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigTask)
}

void ConfigTask::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npc_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  harbor_flush_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_exp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(add_exp_));
}

ConfigTask::~ConfigTask() {
  // @@protoc_insertion_point(destructor:db.ConfigTask)
  SharedDtor();
}

void ConfigTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npc_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  harbor_flush_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigTask::ArenaDtor(void* object) {
  ConfigTask* _this = reinterpret_cast< ConfigTask* >(object);
  (void)_this;
}
void ConfigTask::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigTask::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigTask& ConfigTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigTask.base);
  return *internal_default_instance();
}


void ConfigTask::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      npc_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      harbor_flush_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pre_task_) -
        reinterpret_cast<char*>(&id_)) + sizeof(pre_task_));
  }
  add_exp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_need_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pre_task = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pre_task();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes npc_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_npc_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 add_exp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_add_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes harbor_flush = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_harbor_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigTask)
  return false;
#undef DO_
}

void ConfigTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 need_level = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->need_level(), output);
  }

  // required int32 pre_task = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pre_task(), output);
  }

  // required bytes npc_state = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->npc_state(), output);
  }

  // required bytes reward = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->reward(), output);
  }

  // required int32 add_exp = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->add_exp(), output);
  }

  // required bytes harbor_flush = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->harbor_flush(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigTask)
}

::google::protobuf::uint8* ConfigTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 need_level = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->need_level(), target);
  }

  // required int32 pre_task = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pre_task(), target);
  }

  // required bytes npc_state = 8;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->npc_state(), target);
  }

  // required bytes reward = 9;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->reward(), target);
  }

  // required int32 add_exp = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->add_exp(), target);
  }

  // required bytes harbor_flush = 11;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->harbor_flush(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigTask)
  return target;
}

size_t ConfigTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigTask)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_npc_state()) {
    // required bytes npc_state = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->npc_state());
  }

  if (has_reward()) {
    // required bytes reward = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_harbor_flush()) {
    // required bytes harbor_flush = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->harbor_flush());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_need_level()) {
    // required int32 need_level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());
  }

  if (has_pre_task()) {
    // required int32 pre_task = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pre_task());
  }

  if (has_add_exp()) {
    // required int32 add_exp = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_exp());
  }

  return total_size;
}
size_t ConfigTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes npc_state = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->npc_state());

    // required bytes reward = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required bytes harbor_flush = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->harbor_flush());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 need_level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());

    // required int32 pre_task = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pre_task());

    // required int32 add_exp = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_exp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigTask)
    MergeFrom(*source);
  }
}

void ConfigTask::MergeFrom(const ConfigTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_npc_state(from.npc_state());
    }
    if (cached_has_bits & 0x00000004u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000008u) {
      set_harbor_flush(from.harbor_flush());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      need_level_ = from.need_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      pre_task_ = from.pre_task_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_add_exp(from.add_exp());
  }
}

void ConfigTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigTask::CopyFrom(const ConfigTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigTask::Swap(ConfigTask* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigTask* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigTask::UnsafeArenaSwap(ConfigTask* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigTask::InternalSwap(ConfigTask* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  npc_state_.Swap(&other->npc_state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  harbor_flush_.Swap(&other->harbor_flush_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(need_level_, other->need_level_);
  swap(pre_task_, other->pre_task_);
  swap(add_exp_, other->add_exp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigTask::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigTaskStep::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigTaskStep::kTaskidFieldNumber;
const int ConfigTaskStep::kStepFieldNumber;
const int ConfigTaskStep::kNpcStateFieldNumber;
const int ConfigTaskStep::kContentFieldNumber;
const int ConfigTaskStep::kHarborFlushFieldNumber;
const int ConfigTaskStep::kShipEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigTaskStep::ConfigTaskStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigTaskStep.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigTaskStep)
}
ConfigTaskStep::ConfigTaskStep(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigTaskStep.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigTaskStep)
}
ConfigTaskStep::ConfigTaskStep(const ConfigTaskStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npc_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_npc_state()) {
    npc_state_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.npc_state(),
      GetArenaNoVirtual());
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  harbor_flush_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_harbor_flush()) {
    harbor_flush_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.harbor_flush(),
      GetArenaNoVirtual());
  }
  ship_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ship_event()) {
    ship_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ship_event(),
      GetArenaNoVirtual());
  }
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigTaskStep)
}

void ConfigTaskStep::SharedCtor() {
  npc_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  harbor_flush_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(step_));
}

ConfigTaskStep::~ConfigTaskStep() {
  // @@protoc_insertion_point(destructor:db.ConfigTaskStep)
  SharedDtor();
}

void ConfigTaskStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  npc_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  harbor_flush_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigTaskStep::ArenaDtor(void* object) {
  ConfigTaskStep* _this = reinterpret_cast< ConfigTaskStep* >(object);
  (void)_this;
}
void ConfigTaskStep::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigTaskStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigTaskStep::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigTaskStep& ConfigTaskStep::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigTaskStep.base);
  return *internal_default_instance();
}


void ConfigTaskStep::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigTaskStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      npc_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      harbor_flush_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ship_event_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&taskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&step_) -
        reinterpret_cast<char*>(&taskid_)) + sizeof(step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigTaskStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigTaskStep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 taskid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 step = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes npc_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_npc_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes harbor_flush = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_harbor_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ship_event = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ship_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigTaskStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigTaskStep)
  return false;
#undef DO_
}

void ConfigTaskStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigTaskStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 taskid = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // required int32 step = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }

  // required bytes npc_state = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->npc_state(), output);
  }

  // required bytes content = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // required bytes harbor_flush = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->harbor_flush(), output);
  }

  // required bytes ship_event = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->ship_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigTaskStep)
}

::google::protobuf::uint8* ConfigTaskStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigTaskStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 taskid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // required int32 step = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }

  // required bytes npc_state = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->npc_state(), target);
  }

  // required bytes content = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // required bytes harbor_flush = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->harbor_flush(), target);
  }

  // required bytes ship_event = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ship_event(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigTaskStep)
  return target;
}

size_t ConfigTaskStep::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigTaskStep)
  size_t total_size = 0;

  if (has_npc_state()) {
    // required bytes npc_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->npc_state());
  }

  if (has_content()) {
    // required bytes content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_harbor_flush()) {
    // required bytes harbor_flush = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->harbor_flush());
  }

  if (has_ship_event()) {
    // required bytes ship_event = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ship_event());
  }

  if (has_taskid()) {
    // required int32 taskid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  if (has_step()) {
    // required int32 step = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  return total_size;
}
size_t ConfigTaskStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigTaskStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes npc_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->npc_state());

    // required bytes content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required bytes harbor_flush = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->harbor_flush());

    // required bytes ship_event = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ship_event());

    // required int32 taskid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());

    // required int32 step = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigTaskStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigTaskStep)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigTaskStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigTaskStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigTaskStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigTaskStep)
    MergeFrom(*source);
  }
}

void ConfigTaskStep::MergeFrom(const ConfigTaskStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigTaskStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_npc_state(from.npc_state());
    }
    if (cached_has_bits & 0x00000002u) {
      set_content(from.content());
    }
    if (cached_has_bits & 0x00000004u) {
      set_harbor_flush(from.harbor_flush());
    }
    if (cached_has_bits & 0x00000008u) {
      set_ship_event(from.ship_event());
    }
    if (cached_has_bits & 0x00000010u) {
      taskid_ = from.taskid_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_ = from.step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigTaskStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigTaskStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigTaskStep::CopyFrom(const ConfigTaskStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigTaskStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigTaskStep::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigTaskStep::Swap(ConfigTaskStep* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigTaskStep* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigTaskStep::UnsafeArenaSwap(ConfigTaskStep* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigTaskStep::InternalSwap(ConfigTaskStep* other) {
  using std::swap;
  npc_state_.Swap(&other->npc_state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  harbor_flush_.Swap(&other->harbor_flush_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ship_event_.Swap(&other->ship_event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(taskid_, other->taskid_);
  swap(step_, other->step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigTaskStep::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigNpc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigNpc::kIdFieldNumber;
const int ConfigNpc::kTypeFieldNumber;
const int ConfigNpc::kStateFieldNumber;
const int ConfigNpc::kPlaceFieldNumber;
const int ConfigNpc::kPosTypeFieldNumber;
const int ConfigNpc::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigNpc::ConfigNpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigNpc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigNpc)
}
ConfigNpc::ConfigNpc(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigNpc.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigNpc)
}
ConfigNpc::ConfigNpc(const ConfigNpc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pos()) {
    pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pos_type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigNpc)
}

void ConfigNpc::SharedCtor() {
  pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pos_type_));
}

ConfigNpc::~ConfigNpc() {
  // @@protoc_insertion_point(destructor:db.ConfigNpc)
  SharedDtor();
}

void ConfigNpc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigNpc::ArenaDtor(void* object) {
  ConfigNpc* _this = reinterpret_cast< ConfigNpc* >(object);
  (void)_this;
}
void ConfigNpc::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigNpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigNpc::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigNpc& ConfigNpc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigNpc.base);
  return *internal_default_instance();
}


void ConfigNpc::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pos_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 62u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(pos_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigNpc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 place = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_place();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &place_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pos_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigNpc)
  return false;
#undef DO_
}

void ConfigNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // required int32 place = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->place(), output);
  }

  // required int32 pos_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_type(), output);
  }

  // required bytes pos = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigNpc)
}

::google::protobuf::uint8* ConfigNpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigNpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // required int32 place = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->place(), target);
  }

  // required int32 pos_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_type(), target);
  }

  // required bytes pos = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigNpc)
  return target;
}

size_t ConfigNpc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigNpc)
  size_t total_size = 0;

  if (has_pos()) {
    // required bytes pos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pos());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_state()) {
    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_place()) {
    // required int32 place = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->place());
  }

  if (has_pos_type()) {
    // required int32 pos_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_type());
  }

  return total_size;
}
size_t ConfigNpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigNpc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes pos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pos());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 place = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->place());

    // required int32 pos_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigNpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigNpc)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigNpc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigNpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigNpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigNpc)
    MergeFrom(*source);
  }
}

void ConfigNpc::MergeFrom(const ConfigNpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigNpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_pos(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      place_ = from.place_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_type_ = from.pos_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigNpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNpc::CopyFrom(const ConfigNpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigNpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigNpc::Swap(ConfigNpc* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigNpc* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigNpc::UnsafeArenaSwap(ConfigNpc* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigNpc::InternalSwap(ConfigNpc* other) {
  using std::swap;
  pos_.Swap(&other->pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(state_, other->state_);
  swap(place_, other->place_);
  swap(pos_type_, other->pos_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigNpc::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigAchievement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigAchievement::kIdFieldNumber;
const int ConfigAchievement::kPhaseFieldNumber;
const int ConfigAchievement::kTypeFieldNumber;
const int ConfigAchievement::kActionFieldNumber;
const int ConfigAchievement::kTargetFieldNumber;
const int ConfigAchievement::kParamFieldNumber;
const int ConfigAchievement::kRequireFieldNumber;
const int ConfigAchievement::kGetPointFieldNumber;
const int ConfigAchievement::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigAchievement::ConfigAchievement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigAchievement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigAchievement)
}
ConfigAchievement::ConfigAchievement(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigAchievement.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigAchievement)
}
ConfigAchievement::ConfigAchievement(const ConfigAchievement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_point_) -
    reinterpret_cast<char*>(&id_)) + sizeof(get_point_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigAchievement)
}

void ConfigAchievement::SharedCtor() {
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_point_) -
      reinterpret_cast<char*>(&id_)) + sizeof(get_point_));
}

ConfigAchievement::~ConfigAchievement() {
  // @@protoc_insertion_point(destructor:db.ConfigAchievement)
  SharedDtor();
}

void ConfigAchievement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigAchievement::ArenaDtor(void* object) {
  ConfigAchievement* _this = reinterpret_cast< ConfigAchievement* >(object);
  (void)_this;
}
void ConfigAchievement::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigAchievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigAchievement::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigAchievement& ConfigAchievement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigAchievement.base);
  return *internal_default_instance();
}


void ConfigAchievement::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigAchievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reward_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_) -
        reinterpret_cast<char*>(&id_)) + sizeof(require_));
  }
  get_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigAchievement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 phase = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 target = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 require = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_require();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 get_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_get_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigAchievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigAchievement)
  return false;
#undef DO_
}

void ConfigAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigAchievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 phase = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phase(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 action = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }

  // required int32 target = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->target(), output);
  }

  // required int32 param = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param(), output);
  }

  // required int32 require = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->require(), output);
  }

  // required int32 get_point = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->get_point(), output);
  }

  // required bytes reward = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigAchievement)
}

::google::protobuf::uint8* ConfigAchievement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigAchievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 phase = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phase(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 action = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }

  // required int32 target = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->target(), target);
  }

  // required int32 param = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->param(), target);
  }

  // required int32 require = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->require(), target);
  }

  // required int32 get_point = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->get_point(), target);
  }

  // required bytes reward = 9;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigAchievement)
  return target;
}

size_t ConfigAchievement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigAchievement)
  size_t total_size = 0;

  if (has_reward()) {
    // required bytes reward = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_phase()) {
    // required int32 phase = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phase());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_action()) {
    // required int32 action = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());
  }

  if (has_target()) {
    // required int32 target = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  if (has_param()) {
    // required int32 param = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param());
  }

  if (has_require()) {
    // required int32 require = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require());
  }

  if (has_get_point()) {
    // required int32 get_point = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_point());
  }

  return total_size;
}
size_t ConfigAchievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigAchievement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes reward = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 phase = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phase());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 action = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());

    // required int32 target = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());

    // required int32 param = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param());

    // required int32 require = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require());

    // required int32 get_point = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_point());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigAchievement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigAchievement)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigAchievement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigAchievement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigAchievement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigAchievement)
    MergeFrom(*source);
  }
}

void ConfigAchievement::MergeFrom(const ConfigAchievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigAchievement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000040u) {
      param_ = from.param_;
    }
    if (cached_has_bits & 0x00000080u) {
      require_ = from.require_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_get_point(from.get_point());
  }
}

void ConfigAchievement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigAchievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigAchievement::CopyFrom(const ConfigAchievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigAchievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigAchievement::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigAchievement::Swap(ConfigAchievement* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigAchievement* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigAchievement::UnsafeArenaSwap(ConfigAchievement* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigAchievement::InternalSwap(ConfigAchievement* other) {
  using std::swap;
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(phase_, other->phase_);
  swap(type_, other->type_);
  swap(action_, other->action_);
  swap(target_, other->target_);
  swap(param_, other->param_);
  swap(require_, other->require_);
  swap(get_point_, other->get_point_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigAchievement::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigAchievementTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigAchievementTask::kIdFieldNumber;
const int ConfigAchievementTask::kDungeonIdFieldNumber;
const int ConfigAchievementTask::kRequireFieldNumber;
const int ConfigAchievementTask::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigAchievementTask::ConfigAchievementTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigAchievementTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigAchievementTask)
}
ConfigAchievementTask::ConfigAchievementTask(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigAchievementTask.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigAchievementTask)
}
ConfigAchievementTask::ConfigAchievementTask(const ConfigAchievementTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_) -
    reinterpret_cast<char*>(&id_)) + sizeof(require_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigAchievementTask)
}

void ConfigAchievementTask::SharedCtor() {
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_) -
      reinterpret_cast<char*>(&id_)) + sizeof(require_));
}

ConfigAchievementTask::~ConfigAchievementTask() {
  // @@protoc_insertion_point(destructor:db.ConfigAchievementTask)
  SharedDtor();
}

void ConfigAchievementTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigAchievementTask::ArenaDtor(void* object) {
  ConfigAchievementTask* _this = reinterpret_cast< ConfigAchievementTask* >(object);
  (void)_this;
}
void ConfigAchievementTask::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigAchievementTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigAchievementTask::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigAchievementTask& ConfigAchievementTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigAchievementTask.base);
  return *internal_default_instance();
}


void ConfigAchievementTask::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigAchievementTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reward_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&require_) -
        reinterpret_cast<char*>(&id_)) + sizeof(require_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigAchievementTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigAchievementTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 dungeon_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dungeon_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 require = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_require();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigAchievementTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigAchievementTask)
  return false;
#undef DO_
}

void ConfigAchievementTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigAchievementTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 dungeon_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dungeon_id(), output);
  }

  // required int32 require = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->require(), output);
  }

  // required bytes reward = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigAchievementTask)
}

::google::protobuf::uint8* ConfigAchievementTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigAchievementTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 dungeon_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dungeon_id(), target);
  }

  // required int32 require = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->require(), target);
  }

  // required bytes reward = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigAchievementTask)
  return target;
}

size_t ConfigAchievementTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigAchievementTask)
  size_t total_size = 0;

  if (has_reward()) {
    // required bytes reward = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_dungeon_id()) {
    // required int32 dungeon_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dungeon_id());
  }

  if (has_require()) {
    // required int32 require = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require());
  }

  return total_size;
}
size_t ConfigAchievementTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigAchievementTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes reward = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 dungeon_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dungeon_id());

    // required int32 require = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigAchievementTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigAchievementTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigAchievementTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigAchievementTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigAchievementTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigAchievementTask)
    MergeFrom(*source);
  }
}

void ConfigAchievementTask::MergeFrom(const ConfigAchievementTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigAchievementTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      dungeon_id_ = from.dungeon_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      require_ = from.require_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigAchievementTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigAchievementTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigAchievementTask::CopyFrom(const ConfigAchievementTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigAchievementTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigAchievementTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigAchievementTask::Swap(ConfigAchievementTask* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigAchievementTask* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigAchievementTask::UnsafeArenaSwap(ConfigAchievementTask* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigAchievementTask::InternalSwap(ConfigAchievementTask* other) {
  using std::swap;
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(require_, other->require_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigAchievementTask::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigSystemTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSystemTask::kIdFieldNumber;
const int ConfigSystemTask::kTypeFieldNumber;
const int ConfigSystemTask::kConditionTypeFieldNumber;
const int ConfigSystemTask::kConditionFieldNumber;
const int ConfigSystemTask::kRequireFieldNumber;
const int ConfigSystemTask::kRewardFieldNumber;
const int ConfigSystemTask::kExpFieldNumber;
const int ConfigSystemTask::kRefreshDateWeeklyFieldNumber;
const int ConfigSystemTask::kNeedLevelFieldNumber;
const int ConfigSystemTask::kPreTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSystemTask::ConfigSystemTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigSystemTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigSystemTask)
}
ConfigSystemTask::ConfigSystemTask(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSystemTask.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigSystemTask)
}
ConfigSystemTask::ConfigSystemTask(const ConfigSystemTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_condition()) {
    condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.condition(),
      GetArenaNoVirtual());
  }
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  refresh_date_weekly_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_refresh_date_weekly()) {
    refresh_date_weekly_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refresh_date_weekly(),
      GetArenaNoVirtual());
  }
  need_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_need_level()) {
    need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.need_level(),
      GetArenaNoVirtual());
  }
  pre_task_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pre_task()) {
    pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pre_task(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigSystemTask)
}

void ConfigSystemTask::SharedCtor() {
  condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_date_weekly_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_task_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exp_));
}

ConfigSystemTask::~ConfigSystemTask() {
  // @@protoc_insertion_point(destructor:db.ConfigSystemTask)
  SharedDtor();
}

void ConfigSystemTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_date_weekly_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_task_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSystemTask::ArenaDtor(void* object) {
  ConfigSystemTask* _this = reinterpret_cast< ConfigSystemTask* >(object);
  (void)_this;
}
void ConfigSystemTask::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigSystemTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigSystemTask::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigSystemTask& ConfigSystemTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSystemTask.base);
  return *internal_default_instance();
}


void ConfigSystemTask::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigSystemTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      condition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      refresh_date_weekly_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      need_level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      pre_task_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&condition_type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(condition_type_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&require_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_) -
        reinterpret_cast<char*>(&require_)) + sizeof(exp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigSystemTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigSystemTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 condition_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_condition_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes condition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 require = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_require();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes refresh_date_weekly = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_refresh_date_weekly()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes need_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_need_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pre_task = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pre_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigSystemTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigSystemTask)
  return false;
#undef DO_
}

void ConfigSystemTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigSystemTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 condition_type = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->condition_type(), output);
  }

  // required bytes condition = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->condition(), output);
  }

  // required int32 require = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->require(), output);
  }

  // required bytes reward = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->reward(), output);
  }

  // required int32 exp = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }

  // required bytes refresh_date_weekly = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->refresh_date_weekly(), output);
  }

  // required bytes need_level = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->need_level(), output);
  }

  // required bytes pre_task = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->pre_task(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigSystemTask)
}

::google::protobuf::uint8* ConfigSystemTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigSystemTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 condition_type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->condition_type(), target);
  }

  // required bytes condition = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->condition(), target);
  }

  // required int32 require = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->require(), target);
  }

  // required bytes reward = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->reward(), target);
  }

  // required int32 exp = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp(), target);
  }

  // required bytes refresh_date_weekly = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->refresh_date_weekly(), target);
  }

  // required bytes need_level = 9;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->need_level(), target);
  }

  // required bytes pre_task = 10;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->pre_task(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigSystemTask)
  return target;
}

size_t ConfigSystemTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigSystemTask)
  size_t total_size = 0;

  if (has_condition()) {
    // required bytes condition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->condition());
  }

  if (has_reward()) {
    // required bytes reward = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_refresh_date_weekly()) {
    // required bytes refresh_date_weekly = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->refresh_date_weekly());
  }

  if (has_need_level()) {
    // required bytes need_level = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_level());
  }

  if (has_pre_task()) {
    // required bytes pre_task = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_task());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_condition_type()) {
    // required int32 condition_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition_type());
  }

  if (has_require()) {
    // required int32 require = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require());
  }

  if (has_exp()) {
    // required int32 exp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  return total_size;
}
size_t ConfigSystemTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigSystemTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes condition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->condition());

    // required bytes reward = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required bytes refresh_date_weekly = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->refresh_date_weekly());

    // required bytes need_level = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_level());

    // required bytes pre_task = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_task());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 condition_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition_type());

    // required int32 require = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require());

    // required int32 exp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigSystemTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigSystemTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigSystemTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigSystemTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigSystemTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigSystemTask)
    MergeFrom(*source);
  }
}

void ConfigSystemTask::MergeFrom(const ConfigSystemTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigSystemTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_condition(from.condition());
    }
    if (cached_has_bits & 0x00000002u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000004u) {
      set_refresh_date_weekly(from.refresh_date_weekly());
    }
    if (cached_has_bits & 0x00000008u) {
      set_need_level(from.need_level());
    }
    if (cached_has_bits & 0x00000010u) {
      set_pre_task(from.pre_task());
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      condition_type_ = from.condition_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      require_ = from.require_;
    }
    if (cached_has_bits & 0x00000200u) {
      exp_ = from.exp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigSystemTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigSystemTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSystemTask::CopyFrom(const ConfigSystemTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigSystemTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSystemTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void ConfigSystemTask::Swap(ConfigSystemTask* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigSystemTask* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigSystemTask::UnsafeArenaSwap(ConfigSystemTask* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigSystemTask::InternalSwap(ConfigSystemTask* other) {
  using std::swap;
  condition_.Swap(&other->condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  refresh_date_weekly_.Swap(&other->refresh_date_weekly_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  need_level_.Swap(&other->need_level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pre_task_.Swap(&other->pre_task_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(condition_type_, other->condition_type_);
  swap(require_, other->require_);
  swap(exp_, other->exp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigSystemTask::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigRandomGift::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRandomGift::kIdFieldNumber;
const int ConfigRandomGift::kTypeFieldNumber;
const int ConfigRandomGift::kProbabilityFieldNumber;
const int ConfigRandomGift::kPriceFieldNumber;
const int ConfigRandomGift::kGoodsFieldNumber;
const int ConfigRandomGift::kLimitNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRandomGift::ConfigRandomGift()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigRandomGift.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigRandomGift)
}
ConfigRandomGift::ConfigRandomGift(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRandomGift.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigRandomGift)
}
ConfigRandomGift::ConfigRandomGift(const ConfigRandomGift& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price()) {
    price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price(),
      GetArenaNoVirtual());
  }
  goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_goods()) {
    goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.goods(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(limit_num_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigRandomGift)
}

void ConfigRandomGift::SharedCtor() {
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(limit_num_));
}

ConfigRandomGift::~ConfigRandomGift() {
  // @@protoc_insertion_point(destructor:db.ConfigRandomGift)
  SharedDtor();
}

void ConfigRandomGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goods_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigRandomGift::ArenaDtor(void* object) {
  ConfigRandomGift* _this = reinterpret_cast< ConfigRandomGift* >(object);
  (void)_this;
}
void ConfigRandomGift::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigRandomGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigRandomGift::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigRandomGift& ConfigRandomGift::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRandomGift.base);
  return *internal_default_instance();
}


void ConfigRandomGift::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigRandomGift)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      price_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      goods_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_num_) -
        reinterpret_cast<char*>(&id_)) + sizeof(limit_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigRandomGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigRandomGift)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes goods = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_goods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 limit_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_limit_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigRandomGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigRandomGift)
  return false;
#undef DO_
}

void ConfigRandomGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigRandomGift)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 probability = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->probability(), output);
  }

  // required bytes price = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->price(), output);
  }

  // required bytes goods = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->goods(), output);
  }

  // required int32 limit_num = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigRandomGift)
}

::google::protobuf::uint8* ConfigRandomGift::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigRandomGift)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 probability = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->probability(), target);
  }

  // required bytes price = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->price(), target);
  }

  // required bytes goods = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->goods(), target);
  }

  // required int32 limit_num = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigRandomGift)
  return target;
}

size_t ConfigRandomGift::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigRandomGift)
  size_t total_size = 0;

  if (has_price()) {
    // required bytes price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->price());
  }

  if (has_goods()) {
    // required bytes goods = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->goods());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_probability()) {
    // required int32 probability = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->probability());
  }

  if (has_limit_num()) {
    // required int32 limit_num = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_num());
  }

  return total_size;
}
size_t ConfigRandomGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigRandomGift)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes price = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->price());

    // required bytes goods = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->goods());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 probability = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->probability());

    // required int32 limit_num = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRandomGift::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigRandomGift)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRandomGift* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRandomGift>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigRandomGift)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigRandomGift)
    MergeFrom(*source);
  }
}

void ConfigRandomGift::MergeFrom(const ConfigRandomGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigRandomGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_price(from.price());
    }
    if (cached_has_bits & 0x00000002u) {
      set_goods(from.goods());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000020u) {
      limit_num_ = from.limit_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigRandomGift::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigRandomGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRandomGift::CopyFrom(const ConfigRandomGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigRandomGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRandomGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigRandomGift::Swap(ConfigRandomGift* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigRandomGift* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigRandomGift::UnsafeArenaSwap(ConfigRandomGift* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigRandomGift::InternalSwap(ConfigRandomGift* other) {
  using std::swap;
  price_.Swap(&other->price_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  goods_.Swap(&other->goods_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(probability_, other->probability_);
  swap(limit_num_, other->limit_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigRandomGift::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDungeonEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDungeonEvent::kIdFieldNumber;
const int ConfigDungeonEvent::kActionFieldNumber;
const int ConfigDungeonEvent::kConditionFieldNumber;
const int ConfigDungeonEvent::kRequireFieldNumber;
const int ConfigDungeonEvent::kGetPointFieldNumber;
const int ConfigDungeonEvent::kDungeonIdFieldNumber;
const int ConfigDungeonEvent::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDungeonEvent::ConfigDungeonEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDungeonEvent)
}
ConfigDungeonEvent::ConfigDungeonEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDungeonEvent)
}
ConfigDungeonEvent::ConfigDungeonEvent(const ConfigDungeonEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_condition()) {
    condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.condition(),
      GetArenaNoVirtual());
  }
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigDungeonEvent)
}

void ConfigDungeonEvent::SharedCtor() {
  condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(dungeon_id_));
}

ConfigDungeonEvent::~ConfigDungeonEvent() {
  // @@protoc_insertion_point(destructor:db.ConfigDungeonEvent)
  SharedDtor();
}

void ConfigDungeonEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDungeonEvent::ArenaDtor(void* object) {
  ConfigDungeonEvent* _this = reinterpret_cast< ConfigDungeonEvent* >(object);
  (void)_this;
}
void ConfigDungeonEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDungeonEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDungeonEvent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDungeonEvent& ConfigDungeonEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonEvent.base);
  return *internal_default_instance();
}


void ConfigDungeonEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDungeonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      condition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reward_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dungeon_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(dungeon_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDungeonEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDungeonEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes condition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 require = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_require();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 get_point = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_get_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 dungeon_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_dungeon_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDungeonEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDungeonEvent)
  return false;
#undef DO_
}

void ConfigDungeonEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDungeonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 action = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action(), output);
  }

  // required bytes condition = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->condition(), output);
  }

  // required int32 require = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->require(), output);
  }

  // required int32 get_point = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->get_point(), output);
  }

  // required int32 dungeon_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dungeon_id(), output);
  }

  // required bytes reward = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDungeonEvent)
}

::google::protobuf::uint8* ConfigDungeonEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDungeonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 action = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action(), target);
  }

  // required bytes condition = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->condition(), target);
  }

  // required int32 require = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->require(), target);
  }

  // required int32 get_point = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->get_point(), target);
  }

  // required int32 dungeon_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dungeon_id(), target);
  }

  // required bytes reward = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDungeonEvent)
  return target;
}

size_t ConfigDungeonEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDungeonEvent)
  size_t total_size = 0;

  if (has_condition()) {
    // required bytes condition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->condition());
  }

  if (has_reward()) {
    // required bytes reward = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_action()) {
    // required int32 action = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());
  }

  if (has_require()) {
    // required int32 require = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require());
  }

  if (has_get_point()) {
    // required int32 get_point = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_point());
  }

  if (has_dungeon_id()) {
    // required int32 dungeon_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dungeon_id());
  }

  return total_size;
}
size_t ConfigDungeonEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDungeonEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes condition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->condition());

    // required bytes reward = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 action = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());

    // required int32 require = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->require());

    // required int32 get_point = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_point());

    // required int32 dungeon_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dungeon_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDungeonEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDungeonEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDungeonEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDungeonEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDungeonEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDungeonEvent)
    MergeFrom(*source);
  }
}

void ConfigDungeonEvent::MergeFrom(const ConfigDungeonEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDungeonEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_condition(from.condition());
    }
    if (cached_has_bits & 0x00000002u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000010u) {
      require_ = from.require_;
    }
    if (cached_has_bits & 0x00000020u) {
      get_point_ = from.get_point_;
    }
    if (cached_has_bits & 0x00000040u) {
      dungeon_id_ = from.dungeon_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDungeonEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDungeonEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDungeonEvent::CopyFrom(const ConfigDungeonEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDungeonEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDungeonEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void ConfigDungeonEvent::Swap(ConfigDungeonEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDungeonEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDungeonEvent::UnsafeArenaSwap(ConfigDungeonEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDungeonEvent::InternalSwap(ConfigDungeonEvent* other) {
  using std::swap;
  condition_.Swap(&other->condition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(action_, other->action_);
  swap(require_, other->require_);
  swap(get_point_, other->get_point_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDungeonEvent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDungeonContentGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDungeonContentGroup::kIdFieldNumber;
const int ConfigDungeonContentGroup::kBaseElementFieldNumber;
const int ConfigDungeonContentGroup::kRandomElementFieldNumber;
const int ConfigDungeonContentGroup::kSpiderInfoFieldNumber;
const int ConfigDungeonContentGroup::kStairsEnemyFieldNumber;
const int ConfigDungeonContentGroup::kNpcFieldNumber;
const int ConfigDungeonContentGroup::kPathChoiceFieldNumber;
const int ConfigDungeonContentGroup::kAltarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDungeonContentGroup::ConfigDungeonContentGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonContentGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDungeonContentGroup)
}
ConfigDungeonContentGroup::ConfigDungeonContentGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonContentGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDungeonContentGroup)
}
ConfigDungeonContentGroup::ConfigDungeonContentGroup(const ConfigDungeonContentGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_element()) {
    base_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_element(),
      GetArenaNoVirtual());
  }
  random_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_element()) {
    random_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_element(),
      GetArenaNoVirtual());
  }
  spider_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spider_info()) {
    spider_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spider_info(),
      GetArenaNoVirtual());
  }
  stairs_enemy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stairs_enemy()) {
    stairs_enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stairs_enemy(),
      GetArenaNoVirtual());
  }
  npc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_npc()) {
    npc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.npc(),
      GetArenaNoVirtual());
  }
  path_choice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path_choice()) {
    path_choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_choice(),
      GetArenaNoVirtual());
  }
  altar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_altar()) {
    altar_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.altar(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigDungeonContentGroup)
}

void ConfigDungeonContentGroup::SharedCtor() {
  base_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spider_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stairs_enemy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_choice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  altar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigDungeonContentGroup::~ConfigDungeonContentGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigDungeonContentGroup)
  SharedDtor();
}

void ConfigDungeonContentGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  base_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spider_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stairs_enemy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_choice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  altar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDungeonContentGroup::ArenaDtor(void* object) {
  ConfigDungeonContentGroup* _this = reinterpret_cast< ConfigDungeonContentGroup* >(object);
  (void)_this;
}
void ConfigDungeonContentGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDungeonContentGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDungeonContentGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDungeonContentGroup& ConfigDungeonContentGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonContentGroup.base);
  return *internal_default_instance();
}


void ConfigDungeonContentGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDungeonContentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      base_element_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      random_element_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      spider_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      stairs_enemy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      npc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      path_choice_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      altar_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDungeonContentGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDungeonContentGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes base_element = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_element = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes spider_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spider_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes stairs_enemy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stairs_enemy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes npc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_npc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes path_choice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path_choice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes altar = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_altar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDungeonContentGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDungeonContentGroup)
  return false;
#undef DO_
}

void ConfigDungeonContentGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDungeonContentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes base_element = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->base_element(), output);
  }

  // required bytes random_element = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->random_element(), output);
  }

  // required bytes spider_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->spider_info(), output);
  }

  // required bytes stairs_enemy = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->stairs_enemy(), output);
  }

  // required bytes npc = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->npc(), output);
  }

  // required bytes path_choice = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->path_choice(), output);
  }

  // required bytes altar = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->altar(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDungeonContentGroup)
}

::google::protobuf::uint8* ConfigDungeonContentGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDungeonContentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes base_element = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->base_element(), target);
  }

  // required bytes random_element = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->random_element(), target);
  }

  // required bytes spider_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->spider_info(), target);
  }

  // required bytes stairs_enemy = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->stairs_enemy(), target);
  }

  // required bytes npc = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->npc(), target);
  }

  // required bytes path_choice = 7;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->path_choice(), target);
  }

  // required bytes altar = 8;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->altar(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDungeonContentGroup)
  return target;
}

size_t ConfigDungeonContentGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDungeonContentGroup)
  size_t total_size = 0;

  if (has_base_element()) {
    // required bytes base_element = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->base_element());
  }

  if (has_random_element()) {
    // required bytes random_element = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_element());
  }

  if (has_spider_info()) {
    // required bytes spider_info = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spider_info());
  }

  if (has_stairs_enemy()) {
    // required bytes stairs_enemy = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stairs_enemy());
  }

  if (has_npc()) {
    // required bytes npc = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->npc());
  }

  if (has_path_choice()) {
    // required bytes path_choice = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->path_choice());
  }

  if (has_altar()) {
    // required bytes altar = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->altar());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigDungeonContentGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDungeonContentGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes base_element = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->base_element());

    // required bytes random_element = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_element());

    // required bytes spider_info = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spider_info());

    // required bytes stairs_enemy = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stairs_enemy());

    // required bytes npc = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->npc());

    // required bytes path_choice = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->path_choice());

    // required bytes altar = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->altar());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDungeonContentGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDungeonContentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDungeonContentGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDungeonContentGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDungeonContentGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDungeonContentGroup)
    MergeFrom(*source);
  }
}

void ConfigDungeonContentGroup::MergeFrom(const ConfigDungeonContentGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDungeonContentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_base_element(from.base_element());
    }
    if (cached_has_bits & 0x00000002u) {
      set_random_element(from.random_element());
    }
    if (cached_has_bits & 0x00000004u) {
      set_spider_info(from.spider_info());
    }
    if (cached_has_bits & 0x00000008u) {
      set_stairs_enemy(from.stairs_enemy());
    }
    if (cached_has_bits & 0x00000010u) {
      set_npc(from.npc());
    }
    if (cached_has_bits & 0x00000020u) {
      set_path_choice(from.path_choice());
    }
    if (cached_has_bits & 0x00000040u) {
      set_altar(from.altar());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDungeonContentGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDungeonContentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDungeonContentGroup::CopyFrom(const ConfigDungeonContentGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDungeonContentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDungeonContentGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void ConfigDungeonContentGroup::Swap(ConfigDungeonContentGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDungeonContentGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDungeonContentGroup::UnsafeArenaSwap(ConfigDungeonContentGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDungeonContentGroup::InternalSwap(ConfigDungeonContentGroup* other) {
  using std::swap;
  base_element_.Swap(&other->base_element_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_element_.Swap(&other->random_element_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spider_info_.Swap(&other->spider_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stairs_enemy_.Swap(&other->stairs_enemy_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  npc_.Swap(&other->npc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_choice_.Swap(&other->path_choice_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  altar_.Swap(&other->altar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDungeonContentGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigEnemy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigEnemy::kIdFieldNumber;
const int ConfigEnemy::kNameFieldNumber;
const int ConfigEnemy::kProfessionFieldNumber;
const int ConfigEnemy::kEnemyModelFieldNumber;
const int ConfigEnemy::kCampFieldNumber;
const int ConfigEnemy::kHpFieldNumber;
const int ConfigEnemy::kPhysicalAttackFieldNumber;
const int ConfigEnemy::kMagicAttackFieldNumber;
const int ConfigEnemy::kPhysicalDefenseFieldNumber;
const int ConfigEnemy::kMagicDefenseFieldNumber;
const int ConfigEnemy::kSummonFieldNumber;
const int ConfigEnemy::kWidthFieldNumber;
const int ConfigEnemy::kHeightFieldNumber;
const int ConfigEnemy::kWaitTimeFieldNumber;
const int ConfigEnemy::kAttackModeFieldNumber;
const int ConfigEnemy::kMoveDistanceFieldNumber;
const int ConfigEnemy::kRunDistanceFieldNumber;
const int ConfigEnemy::kCanMoveFieldNumber;
const int ConfigEnemy::kEnemyTypeFieldNumber;
const int ConfigEnemy::kActionModeFieldNumber;
const int ConfigEnemy::kSkillFieldNumber;
const int ConfigEnemy::kDropItemFieldNumber;
const int ConfigEnemy::kDropElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigEnemy::ConfigEnemy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigEnemy)
}
ConfigEnemy::ConfigEnemy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigEnemy)
}
ConfigEnemy::ConfigEnemy(const ConfigEnemy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skill()) {
    skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill(),
      GetArenaNoVirtual());
  }
  drop_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_item()) {
    drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_item(),
      GetArenaNoVirtual());
  }
  drop_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_element()) {
    drop_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_element(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(action_mode_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigEnemy)
}

void ConfigEnemy::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_mode_) -
      reinterpret_cast<char*>(&id_)) + sizeof(action_mode_));
}

ConfigEnemy::~ConfigEnemy() {
  // @@protoc_insertion_point(destructor:db.ConfigEnemy)
  SharedDtor();
}

void ConfigEnemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigEnemy::ArenaDtor(void* object) {
  ConfigEnemy* _this = reinterpret_cast< ConfigEnemy* >(object);
  (void)_this;
}
void ConfigEnemy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigEnemy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigEnemy::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigEnemy& ConfigEnemy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemy.base);
  return *internal_default_instance();
}


void ConfigEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigEnemy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      skill_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      drop_item_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      drop_element_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(camp_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&hp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&hp_)) + sizeof(height_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&wait_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_mode_) -
        reinterpret_cast<char*>(&wait_time_)) + sizeof(action_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigEnemy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 profession = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_profession();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 enemy_model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_enemy_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 camp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_camp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_hp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float physical_attack = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_physical_attack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &physical_attack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float magic_attack = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_magic_attack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magic_attack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float physical_defense = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_physical_defense();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &physical_defense_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float magic_defense = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_magic_defense();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magic_defense_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 summon = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_summon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &summon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float width = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float height = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 wait_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_wait_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 attack_mode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_attack_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 move_distance = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_move_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 run_distance = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_run_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &run_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 can_move = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_can_move();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 enemy_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_enemy_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 action_mode = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_action_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes skill = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop_item = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop_element = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigEnemy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigEnemy)
  return false;
#undef DO_
}

void ConfigEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigEnemy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 profession = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }

  // required int32 enemy_model = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enemy_model(), output);
  }

  // required int32 camp = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->camp(), output);
  }

  // required int32 hp = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // required float physical_attack = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->physical_attack(), output);
  }

  // required float magic_attack = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->magic_attack(), output);
  }

  // required float physical_defense = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->physical_defense(), output);
  }

  // required float magic_defense = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->magic_defense(), output);
  }

  // required int32 summon = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->summon(), output);
  }

  // required float width = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->width(), output);
  }

  // required float height = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->height(), output);
  }

  // required int32 wait_time = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->wait_time(), output);
  }

  // required int32 attack_mode = 15;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->attack_mode(), output);
  }

  // required int32 move_distance = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->move_distance(), output);
  }

  // required int32 run_distance = 17;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->run_distance(), output);
  }

  // required int32 can_move = 18;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->can_move(), output);
  }

  // required int32 enemy_type = 19;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->enemy_type(), output);
  }

  // required int32 action_mode = 20;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->action_mode(), output);
  }

  // required bytes skill = 21;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->skill(), output);
  }

  // required bytes drop_item = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->drop_item(), output);
  }

  // required bytes drop_element = 23;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->drop_element(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigEnemy)
}

::google::protobuf::uint8* ConfigEnemy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigEnemy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 profession = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }

  // required int32 enemy_model = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enemy_model(), target);
  }

  // required int32 camp = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->camp(), target);
  }

  // required int32 hp = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // required float physical_attack = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->physical_attack(), target);
  }

  // required float magic_attack = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->magic_attack(), target);
  }

  // required float physical_defense = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->physical_defense(), target);
  }

  // required float magic_defense = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->magic_defense(), target);
  }

  // required int32 summon = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->summon(), target);
  }

  // required float width = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->width(), target);
  }

  // required float height = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->height(), target);
  }

  // required int32 wait_time = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->wait_time(), target);
  }

  // required int32 attack_mode = 15;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->attack_mode(), target);
  }

  // required int32 move_distance = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->move_distance(), target);
  }

  // required int32 run_distance = 17;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->run_distance(), target);
  }

  // required int32 can_move = 18;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->can_move(), target);
  }

  // required int32 enemy_type = 19;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->enemy_type(), target);
  }

  // required int32 action_mode = 20;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->action_mode(), target);
  }

  // required bytes skill = 21;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->skill(), target);
  }

  // required bytes drop_item = 22;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->drop_item(), target);
  }

  // required bytes drop_element = 23;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->drop_element(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigEnemy)
  return target;
}

size_t ConfigEnemy::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigEnemy)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_skill()) {
    // required bytes skill = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill());
  }

  if (has_drop_item()) {
    // required bytes drop_item = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_item());
  }

  if (has_drop_element()) {
    // required bytes drop_element = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_element());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_profession()) {
    // required int32 profession = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->profession());
  }

  if (has_enemy_model()) {
    // required int32 enemy_model = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->enemy_model());
  }

  if (has_camp()) {
    // required int32 camp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camp());
  }

  if (has_hp()) {
    // required int32 hp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());
  }

  if (has_physical_attack()) {
    // required float physical_attack = 7;
    total_size += 1 + 4;
  }

  if (has_magic_attack()) {
    // required float magic_attack = 8;
    total_size += 1 + 4;
  }

  if (has_physical_defense()) {
    // required float physical_defense = 9;
    total_size += 1 + 4;
  }

  if (has_magic_defense()) {
    // required float magic_defense = 10;
    total_size += 1 + 4;
  }

  if (has_summon()) {
    // required int32 summon = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->summon());
  }

  if (has_width()) {
    // required float width = 12;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 13;
    total_size += 1 + 4;
  }

  if (has_wait_time()) {
    // required int32 wait_time = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wait_time());
  }

  if (has_attack_mode()) {
    // required int32 attack_mode = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_mode());
  }

  if (has_move_distance()) {
    // required int32 move_distance = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_distance());
  }

  if (has_run_distance()) {
    // required int32 run_distance = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->run_distance());
  }

  if (has_can_move()) {
    // required int32 can_move = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->can_move());
  }

  if (has_enemy_type()) {
    // required int32 enemy_type = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->enemy_type());
  }

  if (has_action_mode()) {
    // required int32 action_mode = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_mode());
  }

  return total_size;
}
size_t ConfigEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigEnemy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x007fffff) ^ 0x007fffff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes skill = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill());

    // required bytes drop_item = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_item());

    // required bytes drop_element = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_element());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 profession = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->profession());

    // required int32 enemy_model = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->enemy_model());

    // required int32 camp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camp());

    // required int32 hp = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());

    // required float physical_attack = 7;
    total_size += 1 + 4;

    // required float magic_attack = 8;
    total_size += 1 + 4;

    // required float physical_defense = 9;
    total_size += 1 + 4;

    // required float magic_defense = 10;
    total_size += 1 + 4;

    // required int32 summon = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->summon());

    // required float width = 12;
    total_size += 1 + 4;

    // required float height = 13;
    total_size += 1 + 4;

    // required int32 wait_time = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wait_time());

    // required int32 attack_mode = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_mode());

    // required int32 move_distance = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_distance());

    // required int32 run_distance = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->run_distance());

    // required int32 can_move = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->can_move());

    // required int32 enemy_type = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->enemy_type());

    // required int32 action_mode = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigEnemy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigEnemy)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigEnemy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigEnemy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigEnemy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigEnemy)
    MergeFrom(*source);
  }
}

void ConfigEnemy::MergeFrom(const ConfigEnemy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigEnemy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_skill(from.skill());
    }
    if (cached_has_bits & 0x00000004u) {
      set_drop_item(from.drop_item());
    }
    if (cached_has_bits & 0x00000008u) {
      set_drop_element(from.drop_element());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      profession_ = from.profession_;
    }
    if (cached_has_bits & 0x00000040u) {
      enemy_model_ = from.enemy_model_;
    }
    if (cached_has_bits & 0x00000080u) {
      camp_ = from.camp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000200u) {
      physical_attack_ = from.physical_attack_;
    }
    if (cached_has_bits & 0x00000400u) {
      magic_attack_ = from.magic_attack_;
    }
    if (cached_has_bits & 0x00000800u) {
      physical_defense_ = from.physical_defense_;
    }
    if (cached_has_bits & 0x00001000u) {
      magic_defense_ = from.magic_defense_;
    }
    if (cached_has_bits & 0x00002000u) {
      summon_ = from.summon_;
    }
    if (cached_has_bits & 0x00004000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00008000u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      wait_time_ = from.wait_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      attack_mode_ = from.attack_mode_;
    }
    if (cached_has_bits & 0x00040000u) {
      move_distance_ = from.move_distance_;
    }
    if (cached_has_bits & 0x00080000u) {
      run_distance_ = from.run_distance_;
    }
    if (cached_has_bits & 0x00100000u) {
      can_move_ = from.can_move_;
    }
    if (cached_has_bits & 0x00200000u) {
      enemy_type_ = from.enemy_type_;
    }
    if (cached_has_bits & 0x00400000u) {
      action_mode_ = from.action_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigEnemy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigEnemy::CopyFrom(const ConfigEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEnemy::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;
  return true;
}

void ConfigEnemy::Swap(ConfigEnemy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigEnemy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigEnemy::UnsafeArenaSwap(ConfigEnemy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigEnemy::InternalSwap(ConfigEnemy* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skill_.Swap(&other->skill_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_item_.Swap(&other->drop_item_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_element_.Swap(&other->drop_element_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(profession_, other->profession_);
  swap(enemy_model_, other->enemy_model_);
  swap(camp_, other->camp_);
  swap(hp_, other->hp_);
  swap(physical_attack_, other->physical_attack_);
  swap(magic_attack_, other->magic_attack_);
  swap(physical_defense_, other->physical_defense_);
  swap(magic_defense_, other->magic_defense_);
  swap(summon_, other->summon_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(wait_time_, other->wait_time_);
  swap(attack_mode_, other->attack_mode_);
  swap(move_distance_, other->move_distance_);
  swap(run_distance_, other->run_distance_);
  swap(can_move_, other->can_move_);
  swap(enemy_type_, other->enemy_type_);
  swap(action_mode_, other->action_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigEnemy::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigEnemyEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigEnemyEvent::kIdFieldNumber;
const int ConfigEnemyEvent::kTriggerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigEnemyEvent::ConfigEnemyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemyEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigEnemyEvent)
}
ConfigEnemyEvent::ConfigEnemyEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemyEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigEnemyEvent)
}
ConfigEnemyEvent::ConfigEnemyEvent(const ConfigEnemyEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trigger_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_info()) {
    trigger_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_info(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigEnemyEvent)
}

void ConfigEnemyEvent::SharedCtor() {
  trigger_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigEnemyEvent::~ConfigEnemyEvent() {
  // @@protoc_insertion_point(destructor:db.ConfigEnemyEvent)
  SharedDtor();
}

void ConfigEnemyEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  trigger_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigEnemyEvent::ArenaDtor(void* object) {
  ConfigEnemyEvent* _this = reinterpret_cast< ConfigEnemyEvent* >(object);
  (void)_this;
}
void ConfigEnemyEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigEnemyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigEnemyEvent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigEnemyEvent& ConfigEnemyEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemyEvent.base);
  return *internal_default_instance();
}


void ConfigEnemyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigEnemyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trigger_info_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigEnemyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigEnemyEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigEnemyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigEnemyEvent)
  return false;
#undef DO_
}

void ConfigEnemyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigEnemyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes trigger_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->trigger_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigEnemyEvent)
}

::google::protobuf::uint8* ConfigEnemyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigEnemyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes trigger_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->trigger_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigEnemyEvent)
  return target;
}

size_t ConfigEnemyEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigEnemyEvent)
  size_t total_size = 0;

  if (has_trigger_info()) {
    // required bytes trigger_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_info());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigEnemyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigEnemyEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes trigger_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_info());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigEnemyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigEnemyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigEnemyEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigEnemyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigEnemyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigEnemyEvent)
    MergeFrom(*source);
  }
}

void ConfigEnemyEvent::MergeFrom(const ConfigEnemyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigEnemyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_trigger_info(from.trigger_info());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigEnemyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigEnemyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigEnemyEvent::CopyFrom(const ConfigEnemyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigEnemyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEnemyEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConfigEnemyEvent::Swap(ConfigEnemyEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigEnemyEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigEnemyEvent::UnsafeArenaSwap(ConfigEnemyEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigEnemyEvent::InternalSwap(ConfigEnemyEvent* other) {
  using std::swap;
  trigger_info_.Swap(&other->trigger_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigEnemyEvent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigEnemyGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigEnemyGroup::kIdFieldNumber;
const int ConfigEnemyGroup::kEventidFieldNumber;
const int ConfigEnemyGroup::kGroupInfoFieldNumber;
const int ConfigEnemyGroup::kRandomEnemyFieldNumber;
const int ConfigEnemyGroup::kRandomEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigEnemyGroup::ConfigEnemyGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemyGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigEnemyGroup)
}
ConfigEnemyGroup::ConfigEnemyGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemyGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigEnemyGroup)
}
ConfigEnemyGroup::ConfigEnemyGroup(const ConfigEnemyGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_info()) {
    group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_info(),
      GetArenaNoVirtual());
  }
  random_enemy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_enemy()) {
    random_enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_enemy(),
      GetArenaNoVirtual());
  }
  random_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_event()) {
    random_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_event(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eventid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(eventid_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigEnemyGroup)
}

void ConfigEnemyGroup::SharedCtor() {
  group_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(eventid_));
}

ConfigEnemyGroup::~ConfigEnemyGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigEnemyGroup)
  SharedDtor();
}

void ConfigEnemyGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  group_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigEnemyGroup::ArenaDtor(void* object) {
  ConfigEnemyGroup* _this = reinterpret_cast< ConfigEnemyGroup* >(object);
  (void)_this;
}
void ConfigEnemyGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigEnemyGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigEnemyGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigEnemyGroup& ConfigEnemyGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEnemyGroup.base);
  return *internal_default_instance();
}


void ConfigEnemyGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigEnemyGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      group_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      random_enemy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      random_event_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eventid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(eventid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigEnemyGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigEnemyGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 eventid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes group_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_enemy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_enemy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_event = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigEnemyGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigEnemyGroup)
  return false;
#undef DO_
}

void ConfigEnemyGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigEnemyGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 eventid = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventid(), output);
  }

  // required bytes group_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->group_info(), output);
  }

  // required bytes random_enemy = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->random_enemy(), output);
  }

  // required bytes random_event = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->random_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigEnemyGroup)
}

::google::protobuf::uint8* ConfigEnemyGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigEnemyGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 eventid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventid(), target);
  }

  // required bytes group_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->group_info(), target);
  }

  // required bytes random_enemy = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->random_enemy(), target);
  }

  // required bytes random_event = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->random_event(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigEnemyGroup)
  return target;
}

size_t ConfigEnemyGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigEnemyGroup)
  size_t total_size = 0;

  if (has_group_info()) {
    // required bytes group_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_info());
  }

  if (has_random_enemy()) {
    // required bytes random_enemy = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy());
  }

  if (has_random_event()) {
    // required bytes random_event = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_event());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_eventid()) {
    // required int32 eventid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eventid());
  }

  return total_size;
}
size_t ConfigEnemyGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigEnemyGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes group_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_info());

    // required bytes random_enemy = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy());

    // required bytes random_event = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_event());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 eventid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eventid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigEnemyGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigEnemyGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigEnemyGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigEnemyGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigEnemyGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigEnemyGroup)
    MergeFrom(*source);
  }
}

void ConfigEnemyGroup::MergeFrom(const ConfigEnemyGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigEnemyGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_group_info(from.group_info());
    }
    if (cached_has_bits & 0x00000002u) {
      set_random_enemy(from.random_enemy());
    }
    if (cached_has_bits & 0x00000004u) {
      set_random_event(from.random_event());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigEnemyGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigEnemyGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigEnemyGroup::CopyFrom(const ConfigEnemyGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigEnemyGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEnemyGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ConfigEnemyGroup::Swap(ConfigEnemyGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigEnemyGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigEnemyGroup::UnsafeArenaSwap(ConfigEnemyGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigEnemyGroup::InternalSwap(ConfigEnemyGroup* other) {
  using std::swap;
  group_info_.Swap(&other->group_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_enemy_.Swap(&other->random_enemy_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_event_.Swap(&other->random_event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(eventid_, other->eventid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigEnemyGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFightItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFightItem::kIdFieldNumber;
const int ConfigFightItem::kNameFieldNumber;
const int ConfigFightItem::kTypeFieldNumber;
const int ConfigFightItem::kUseTypeFieldNumber;
const int ConfigFightItem::kEffectFieldNumber;
const int ConfigFightItem::kPackageMaxFieldNumber;
const int ConfigFightItem::kExchangeNumFieldNumber;
const int ConfigFightItem::kExchangeFieldNumber;
const int ConfigFightItem::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFightItem::ConfigFightItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFightItem)
}
ConfigFightItem::ConfigFightItem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightItem.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFightItem)
}
ConfigFightItem::ConfigFightItem(const ConfigFightItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_effect()) {
    effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effect(),
      GetArenaNoVirtual());
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange(),
      GetArenaNoVirtual());
  }
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price()) {
    price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exchange_num_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFightItem)
}

void ConfigFightItem::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exchange_num_));
}

ConfigFightItem::~ConfigFightItem() {
  // @@protoc_insertion_point(destructor:db.ConfigFightItem)
  SharedDtor();
}

void ConfigFightItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFightItem::ArenaDtor(void* object) {
  ConfigFightItem* _this = reinterpret_cast< ConfigFightItem* >(object);
  (void)_this;
}
void ConfigFightItem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFightItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFightItem::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFightItem& ConfigFightItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightItem.base);
  return *internal_default_instance();
}


void ConfigFightItem::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFightItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      price_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&package_max_) -
        reinterpret_cast<char*>(&id_)) + sizeof(package_max_));
  }
  exchange_num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFightItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFightItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 use_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_use_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes effect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 package_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_package_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exchange_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_exchange_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFightItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFightItem)
  return false;
#undef DO_
}

void ConfigFightItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFightItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 use_type = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->use_type(), output);
  }

  // required bytes effect = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->effect(), output);
  }

  // required int32 package_max = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->package_max(), output);
  }

  // required int32 exchange_num = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exchange_num(), output);
  }

  // required bytes exchange = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->exchange(), output);
  }

  // required bytes price = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFightItem)
}

::google::protobuf::uint8* ConfigFightItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFightItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 use_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->use_type(), target);
  }

  // required bytes effect = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->effect(), target);
  }

  // required int32 package_max = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->package_max(), target);
  }

  // required int32 exchange_num = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exchange_num(), target);
  }

  // required bytes exchange = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->exchange(), target);
  }

  // required bytes price = 9;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFightItem)
  return target;
}

size_t ConfigFightItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFightItem)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_effect()) {
    // required bytes effect = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->effect());
  }

  if (has_exchange()) {
    // required bytes exchange = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange());
  }

  if (has_price()) {
    // required bytes price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->price());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_use_type()) {
    // required int32 use_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_type());
  }

  if (has_package_max()) {
    // required int32 package_max = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->package_max());
  }

  if (has_exchange_num()) {
    // required int32 exchange_num = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchange_num());
  }

  return total_size;
}
size_t ConfigFightItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFightItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes effect = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->effect());

    // required bytes exchange = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange());

    // required bytes price = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->price());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 use_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_type());

    // required int32 package_max = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->package_max());

    // required int32 exchange_num = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exchange_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFightItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFightItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFightItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFightItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFightItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFightItem)
    MergeFrom(*source);
  }
}

void ConfigFightItem::MergeFrom(const ConfigFightItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFightItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_effect(from.effect());
    }
    if (cached_has_bits & 0x00000004u) {
      set_exchange(from.exchange());
    }
    if (cached_has_bits & 0x00000008u) {
      set_price(from.price());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_type_ = from.use_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      package_max_ = from.package_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_exchange_num(from.exchange_num());
  }
}

void ConfigFightItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFightItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFightItem::CopyFrom(const ConfigFightItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFightItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFightItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigFightItem::Swap(ConfigFightItem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFightItem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFightItem::UnsafeArenaSwap(ConfigFightItem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFightItem::InternalSwap(ConfigFightItem* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effect_.Swap(&other->effect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  price_.Swap(&other->price_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(use_type_, other->use_type_);
  swap(package_max_, other->package_max_);
  swap(exchange_num_, other->exchange_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFightItem::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFightMachine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFightMachine::kIdFieldNumber;
const int ConfigFightMachine::kConditionTypeFieldNumber;
const int ConfigFightMachine::kConditionParamFieldNumber;
const int ConfigFightMachine::kMachineTypeFieldNumber;
const int ConfigFightMachine::kTriggerEffectFieldNumber;
const int ConfigFightMachine::kMachineTimeFieldNumber;
const int ConfigFightMachine::kTriggerElementFieldNumber;
const int ConfigFightMachine::kSpecialTypeFieldNumber;
const int ConfigFightMachine::kExistTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFightMachine::ConfigFightMachine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightMachine.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFightMachine)
}
ConfigFightMachine::ConfigFightMachine(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightMachine.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFightMachine)
}
ConfigFightMachine::ConfigFightMachine(const ConfigFightMachine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trigger_effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_effect()) {
    trigger_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_effect(),
      GetArenaNoVirtual());
  }
  trigger_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_element()) {
    trigger_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_element(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exist_times_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exist_times_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFightMachine)
}

void ConfigFightMachine::SharedCtor() {
  trigger_effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_times_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exist_times_));
}

ConfigFightMachine::~ConfigFightMachine() {
  // @@protoc_insertion_point(destructor:db.ConfigFightMachine)
  SharedDtor();
}

void ConfigFightMachine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  trigger_effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFightMachine::ArenaDtor(void* object) {
  ConfigFightMachine* _this = reinterpret_cast< ConfigFightMachine* >(object);
  (void)_this;
}
void ConfigFightMachine::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFightMachine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFightMachine::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFightMachine& ConfigFightMachine::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightMachine.base);
  return *internal_default_instance();
}


void ConfigFightMachine::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFightMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      trigger_effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      trigger_element_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&special_type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(special_type_));
  }
  exist_times_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFightMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFightMachine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 condition_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_condition_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 condition_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_condition_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 machine_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_machine_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger_effect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 machine_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_machine_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger_element = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 special_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_special_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &special_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exist_times = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_exist_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exist_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFightMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFightMachine)
  return false;
#undef DO_
}

void ConfigFightMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFightMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 condition_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->condition_type(), output);
  }

  // required int32 condition_param = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->condition_param(), output);
  }

  // required int32 machine_type = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->machine_type(), output);
  }

  // required bytes trigger_effect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->trigger_effect(), output);
  }

  // required int32 machine_time = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->machine_time(), output);
  }

  // required bytes trigger_element = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->trigger_element(), output);
  }

  // required int32 special_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->special_type(), output);
  }

  // required int32 exist_times = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exist_times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFightMachine)
}

::google::protobuf::uint8* ConfigFightMachine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFightMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 condition_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->condition_type(), target);
  }

  // required int32 condition_param = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->condition_param(), target);
  }

  // required int32 machine_type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->machine_type(), target);
  }

  // required bytes trigger_effect = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->trigger_effect(), target);
  }

  // required int32 machine_time = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->machine_time(), target);
  }

  // required bytes trigger_element = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->trigger_element(), target);
  }

  // required int32 special_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->special_type(), target);
  }

  // required int32 exist_times = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exist_times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFightMachine)
  return target;
}

size_t ConfigFightMachine::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFightMachine)
  size_t total_size = 0;

  if (has_trigger_effect()) {
    // required bytes trigger_effect = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_effect());
  }

  if (has_trigger_element()) {
    // required bytes trigger_element = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_element());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_condition_type()) {
    // required int32 condition_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition_type());
  }

  if (has_condition_param()) {
    // required int32 condition_param = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition_param());
  }

  if (has_machine_type()) {
    // required int32 machine_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_type());
  }

  if (has_machine_time()) {
    // required int32 machine_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_time());
  }

  if (has_special_type()) {
    // required int32 special_type = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->special_type());
  }

  if (has_exist_times()) {
    // required int32 exist_times = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exist_times());
  }

  return total_size;
}
size_t ConfigFightMachine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFightMachine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes trigger_effect = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_effect());

    // required bytes trigger_element = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_element());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 condition_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition_type());

    // required int32 condition_param = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition_param());

    // required int32 machine_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_type());

    // required int32 machine_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->machine_time());

    // required int32 special_type = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->special_type());

    // required int32 exist_times = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exist_times());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFightMachine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFightMachine)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFightMachine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFightMachine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFightMachine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFightMachine)
    MergeFrom(*source);
  }
}

void ConfigFightMachine::MergeFrom(const ConfigFightMachine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFightMachine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_trigger_effect(from.trigger_effect());
    }
    if (cached_has_bits & 0x00000002u) {
      set_trigger_element(from.trigger_element());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      condition_type_ = from.condition_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      condition_param_ = from.condition_param_;
    }
    if (cached_has_bits & 0x00000020u) {
      machine_type_ = from.machine_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      machine_time_ = from.machine_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      special_type_ = from.special_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_exist_times(from.exist_times());
  }
}

void ConfigFightMachine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFightMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFightMachine::CopyFrom(const ConfigFightMachine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFightMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFightMachine::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigFightMachine::Swap(ConfigFightMachine* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFightMachine* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFightMachine::UnsafeArenaSwap(ConfigFightMachine* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFightMachine::InternalSwap(ConfigFightMachine* other) {
  using std::swap;
  trigger_effect_.Swap(&other->trigger_effect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_element_.Swap(&other->trigger_element_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(condition_type_, other->condition_type_);
  swap(condition_param_, other->condition_param_);
  swap(machine_type_, other->machine_type_);
  swap(machine_time_, other->machine_time_);
  swap(special_type_, other->special_type_);
  swap(exist_times_, other->exist_times_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFightMachine::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDungeonTalent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDungeonTalent::kTalentGroupFieldNumber;
const int ConfigDungeonTalent::kLevelFieldNumber;
const int ConfigDungeonTalent::kLevelMaxFieldNumber;
const int ConfigDungeonTalent::kGetPropsFieldNumber;
const int ConfigDungeonTalent::kNextFloorItemFieldNumber;
const int ConfigDungeonTalent::kNextFloorMachineFieldNumber;
const int ConfigDungeonTalent::kIncentivesFieldNumber;
const int ConfigDungeonTalent::kMachineIncentivesFieldNumber;
const int ConfigDungeonTalent::kReduceCostFieldNumber;
const int ConfigDungeonTalent::kCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDungeonTalent::ConfigDungeonTalent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonTalent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDungeonTalent)
}
ConfigDungeonTalent::ConfigDungeonTalent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonTalent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDungeonTalent)
}
ConfigDungeonTalent::ConfigDungeonTalent(const ConfigDungeonTalent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  get_props_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_get_props()) {
    get_props_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.get_props(),
      GetArenaNoVirtual());
  }
  next_floor_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_next_floor_item()) {
    next_floor_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_floor_item(),
      GetArenaNoVirtual());
  }
  next_floor_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_next_floor_machine()) {
    next_floor_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_floor_machine(),
      GetArenaNoVirtual());
  }
  incentives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_incentives()) {
    incentives_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.incentives(),
      GetArenaNoVirtual());
  }
  machine_incentives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine_incentives()) {
    machine_incentives_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_incentives(),
      GetArenaNoVirtual());
  }
  reduce_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reduce_cost()) {
    reduce_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reduce_cost(),
      GetArenaNoVirtual());
  }
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  ::memcpy(&talent_group_, &from.talent_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_max_) -
    reinterpret_cast<char*>(&talent_group_)) + sizeof(level_max_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigDungeonTalent)
}

void ConfigDungeonTalent::SharedCtor() {
  get_props_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_floor_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_floor_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incentives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_incentives_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reduce_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&talent_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_max_) -
      reinterpret_cast<char*>(&talent_group_)) + sizeof(level_max_));
}

ConfigDungeonTalent::~ConfigDungeonTalent() {
  // @@protoc_insertion_point(destructor:db.ConfigDungeonTalent)
  SharedDtor();
}

void ConfigDungeonTalent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  get_props_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_floor_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_floor_machine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incentives_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_incentives_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reduce_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDungeonTalent::ArenaDtor(void* object) {
  ConfigDungeonTalent* _this = reinterpret_cast< ConfigDungeonTalent* >(object);
  (void)_this;
}
void ConfigDungeonTalent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDungeonTalent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDungeonTalent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDungeonTalent& ConfigDungeonTalent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonTalent.base);
  return *internal_default_instance();
}


void ConfigDungeonTalent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDungeonTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      get_props_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      next_floor_item_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      next_floor_machine_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      incentives_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      machine_incentives_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      reduce_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      cost_.ClearNonDefaultToEmpty();
    }
  }
  talent_group_ = 0;
  if (cached_has_bits & 768u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_max_) -
        reinterpret_cast<char*>(&level_)) + sizeof(level_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDungeonTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDungeonTalent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 talent_group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_talent_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes get_props = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_get_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes next_floor_item = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next_floor_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes next_floor_machine = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next_floor_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes incentives = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_incentives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes machine_incentives = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_incentives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reduce_cost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reduce_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDungeonTalent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDungeonTalent)
  return false;
#undef DO_
}

void ConfigDungeonTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDungeonTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 talent_group = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->talent_group(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 level_max = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level_max(), output);
  }

  // required bytes get_props = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->get_props(), output);
  }

  // required bytes next_floor_item = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->next_floor_item(), output);
  }

  // required bytes next_floor_machine = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->next_floor_machine(), output);
  }

  // required bytes incentives = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->incentives(), output);
  }

  // required bytes machine_incentives = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->machine_incentives(), output);
  }

  // required bytes reduce_cost = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->reduce_cost(), output);
  }

  // required bytes cost = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDungeonTalent)
}

::google::protobuf::uint8* ConfigDungeonTalent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDungeonTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 talent_group = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->talent_group(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 level_max = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level_max(), target);
  }

  // required bytes get_props = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->get_props(), target);
  }

  // required bytes next_floor_item = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->next_floor_item(), target);
  }

  // required bytes next_floor_machine = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->next_floor_machine(), target);
  }

  // required bytes incentives = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->incentives(), target);
  }

  // required bytes machine_incentives = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->machine_incentives(), target);
  }

  // required bytes reduce_cost = 9;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->reduce_cost(), target);
  }

  // required bytes cost = 10;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDungeonTalent)
  return target;
}

size_t ConfigDungeonTalent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDungeonTalent)
  size_t total_size = 0;

  if (has_get_props()) {
    // required bytes get_props = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get_props());
  }

  if (has_next_floor_item()) {
    // required bytes next_floor_item = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->next_floor_item());
  }

  if (has_next_floor_machine()) {
    // required bytes next_floor_machine = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->next_floor_machine());
  }

  if (has_incentives()) {
    // required bytes incentives = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->incentives());
  }

  if (has_machine_incentives()) {
    // required bytes machine_incentives = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->machine_incentives());
  }

  if (has_reduce_cost()) {
    // required bytes reduce_cost = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reduce_cost());
  }

  if (has_cost()) {
    // required bytes cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_talent_group()) {
    // required int32 talent_group = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->talent_group());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_level_max()) {
    // required int32 level_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_max());
  }

  return total_size;
}
size_t ConfigDungeonTalent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDungeonTalent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes get_props = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get_props());

    // required bytes next_floor_item = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->next_floor_item());

    // required bytes next_floor_machine = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->next_floor_machine());

    // required bytes incentives = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->incentives());

    // required bytes machine_incentives = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->machine_incentives());

    // required bytes reduce_cost = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reduce_cost());

    // required bytes cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required int32 talent_group = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->talent_group());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 level_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDungeonTalent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDungeonTalent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDungeonTalent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDungeonTalent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDungeonTalent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDungeonTalent)
    MergeFrom(*source);
  }
}

void ConfigDungeonTalent::MergeFrom(const ConfigDungeonTalent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDungeonTalent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_get_props(from.get_props());
    }
    if (cached_has_bits & 0x00000002u) {
      set_next_floor_item(from.next_floor_item());
    }
    if (cached_has_bits & 0x00000004u) {
      set_next_floor_machine(from.next_floor_machine());
    }
    if (cached_has_bits & 0x00000008u) {
      set_incentives(from.incentives());
    }
    if (cached_has_bits & 0x00000010u) {
      set_machine_incentives(from.machine_incentives());
    }
    if (cached_has_bits & 0x00000020u) {
      set_reduce_cost(from.reduce_cost());
    }
    if (cached_has_bits & 0x00000040u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000080u) {
      talent_group_ = from.talent_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000200u) {
      level_max_ = from.level_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDungeonTalent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDungeonTalent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDungeonTalent::CopyFrom(const ConfigDungeonTalent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDungeonTalent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDungeonTalent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void ConfigDungeonTalent::Swap(ConfigDungeonTalent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDungeonTalent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDungeonTalent::UnsafeArenaSwap(ConfigDungeonTalent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDungeonTalent::InternalSwap(ConfigDungeonTalent* other) {
  using std::swap;
  get_props_.Swap(&other->get_props_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_floor_item_.Swap(&other->next_floor_item_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_floor_machine_.Swap(&other->next_floor_machine_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  incentives_.Swap(&other->incentives_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_incentives_.Swap(&other->machine_incentives_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reduce_cost_.Swap(&other->reduce_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(talent_group_, other->talent_group_);
  swap(level_, other->level_);
  swap(level_max_, other->level_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDungeonTalent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDungeonTalentTree::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDungeonTalentTree::kIdFieldNumber;
const int ConfigDungeonTalentTree::kTypeFieldNumber;
const int ConfigDungeonTalentTree::kCostFieldNumber;
const int ConfigDungeonTalentTree::kUnlockRequireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDungeonTalentTree::ConfigDungeonTalentTree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonTalentTree.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDungeonTalentTree)
}
ConfigDungeonTalentTree::ConfigDungeonTalentTree(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonTalentTree.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDungeonTalentTree)
}
ConfigDungeonTalentTree::ConfigDungeonTalentTree(const ConfigDungeonTalentTree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  unlock_require_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_require()) {
    unlock_require_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_require(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigDungeonTalentTree)
}

void ConfigDungeonTalentTree::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_require_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

ConfigDungeonTalentTree::~ConfigDungeonTalentTree() {
  // @@protoc_insertion_point(destructor:db.ConfigDungeonTalentTree)
  SharedDtor();
}

void ConfigDungeonTalentTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_require_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDungeonTalentTree::ArenaDtor(void* object) {
  ConfigDungeonTalentTree* _this = reinterpret_cast< ConfigDungeonTalentTree* >(object);
  (void)_this;
}
void ConfigDungeonTalentTree::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDungeonTalentTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDungeonTalentTree::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDungeonTalentTree& ConfigDungeonTalentTree::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonTalentTree.base);
  return *internal_default_instance();
}


void ConfigDungeonTalentTree::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDungeonTalentTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unlock_require_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDungeonTalentTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDungeonTalentTree)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes unlock_require = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unlock_require()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDungeonTalentTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDungeonTalentTree)
  return false;
#undef DO_
}

void ConfigDungeonTalentTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDungeonTalentTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes cost = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cost(), output);
  }

  // required bytes unlock_require = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->unlock_require(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDungeonTalentTree)
}

::google::protobuf::uint8* ConfigDungeonTalentTree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDungeonTalentTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes cost = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cost(), target);
  }

  // required bytes unlock_require = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->unlock_require(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDungeonTalentTree)
  return target;
}

size_t ConfigDungeonTalentTree::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDungeonTalentTree)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_unlock_require()) {
    // required bytes unlock_require = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_require());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ConfigDungeonTalentTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDungeonTalentTree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required bytes unlock_require = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_require());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDungeonTalentTree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDungeonTalentTree)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDungeonTalentTree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDungeonTalentTree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDungeonTalentTree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDungeonTalentTree)
    MergeFrom(*source);
  }
}

void ConfigDungeonTalentTree::MergeFrom(const ConfigDungeonTalentTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDungeonTalentTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_unlock_require(from.unlock_require());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDungeonTalentTree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDungeonTalentTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDungeonTalentTree::CopyFrom(const ConfigDungeonTalentTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDungeonTalentTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDungeonTalentTree::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigDungeonTalentTree::Swap(ConfigDungeonTalentTree* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDungeonTalentTree* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDungeonTalentTree::UnsafeArenaSwap(ConfigDungeonTalentTree* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDungeonTalentTree::InternalSwap(ConfigDungeonTalentTree* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unlock_require_.Swap(&other->unlock_require_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDungeonTalentTree::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDungeonStoreGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDungeonStoreGroup::kIdFieldNumber;
const int ConfigDungeonStoreGroup::kBaseItemsFieldNumber;
const int ConfigDungeonStoreGroup::kRandomItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDungeonStoreGroup::ConfigDungeonStoreGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonStoreGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDungeonStoreGroup)
}
ConfigDungeonStoreGroup::ConfigDungeonStoreGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonStoreGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDungeonStoreGroup)
}
ConfigDungeonStoreGroup::ConfigDungeonStoreGroup(const ConfigDungeonStoreGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_items_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_items()) {
    base_items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_items(),
      GetArenaNoVirtual());
  }
  random_items_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_items()) {
    random_items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_items(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigDungeonStoreGroup)
}

void ConfigDungeonStoreGroup::SharedCtor() {
  base_items_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_items_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigDungeonStoreGroup::~ConfigDungeonStoreGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigDungeonStoreGroup)
  SharedDtor();
}

void ConfigDungeonStoreGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  base_items_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_items_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDungeonStoreGroup::ArenaDtor(void* object) {
  ConfigDungeonStoreGroup* _this = reinterpret_cast< ConfigDungeonStoreGroup* >(object);
  (void)_this;
}
void ConfigDungeonStoreGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDungeonStoreGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDungeonStoreGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDungeonStoreGroup& ConfigDungeonStoreGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonStoreGroup.base);
  return *internal_default_instance();
}


void ConfigDungeonStoreGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDungeonStoreGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      base_items_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      random_items_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDungeonStoreGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDungeonStoreGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes base_items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_items = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDungeonStoreGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDungeonStoreGroup)
  return false;
#undef DO_
}

void ConfigDungeonStoreGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDungeonStoreGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes base_items = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->base_items(), output);
  }

  // required bytes random_items = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->random_items(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDungeonStoreGroup)
}

::google::protobuf::uint8* ConfigDungeonStoreGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDungeonStoreGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes base_items = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->base_items(), target);
  }

  // required bytes random_items = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->random_items(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDungeonStoreGroup)
  return target;
}

size_t ConfigDungeonStoreGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDungeonStoreGroup)
  size_t total_size = 0;

  if (has_base_items()) {
    // required bytes base_items = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->base_items());
  }

  if (has_random_items()) {
    // required bytes random_items = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_items());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigDungeonStoreGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDungeonStoreGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes base_items = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->base_items());

    // required bytes random_items = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_items());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDungeonStoreGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDungeonStoreGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDungeonStoreGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDungeonStoreGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDungeonStoreGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDungeonStoreGroup)
    MergeFrom(*source);
  }
}

void ConfigDungeonStoreGroup::MergeFrom(const ConfigDungeonStoreGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDungeonStoreGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_base_items(from.base_items());
    }
    if (cached_has_bits & 0x00000002u) {
      set_random_items(from.random_items());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDungeonStoreGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDungeonStoreGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDungeonStoreGroup::CopyFrom(const ConfigDungeonStoreGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDungeonStoreGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDungeonStoreGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigDungeonStoreGroup::Swap(ConfigDungeonStoreGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDungeonStoreGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDungeonStoreGroup::UnsafeArenaSwap(ConfigDungeonStoreGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDungeonStoreGroup::InternalSwap(ConfigDungeonStoreGroup* other) {
  using std::swap;
  base_items_.Swap(&other->base_items_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_items_.Swap(&other->random_items_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDungeonStoreGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMachineExchange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMachineExchange::kIdFieldNumber;
const int ConfigMachineExchange::kCostFieldNumber;
const int ConfigMachineExchange::kGetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMachineExchange::ConfigMachineExchange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigMachineExchange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMachineExchange)
}
ConfigMachineExchange::ConfigMachineExchange(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMachineExchange.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMachineExchange)
}
ConfigMachineExchange::ConfigMachineExchange(const ConfigMachineExchange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_get()) {
    get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.get(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigMachineExchange)
}

void ConfigMachineExchange::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigMachineExchange::~ConfigMachineExchange() {
  // @@protoc_insertion_point(destructor:db.ConfigMachineExchange)
  SharedDtor();
}

void ConfigMachineExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigMachineExchange::ArenaDtor(void* object) {
  ConfigMachineExchange* _this = reinterpret_cast< ConfigMachineExchange* >(object);
  (void)_this;
}
void ConfigMachineExchange::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMachineExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMachineExchange::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMachineExchange& ConfigMachineExchange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMachineExchange.base);
  return *internal_default_instance();
}


void ConfigMachineExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMachineExchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      get_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMachineExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMachineExchange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes get = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMachineExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMachineExchange)
  return false;
#undef DO_
}

void ConfigMachineExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMachineExchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes cost = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cost(), output);
  }

  // required bytes get = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->get(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMachineExchange)
}

::google::protobuf::uint8* ConfigMachineExchange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMachineExchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes cost = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cost(), target);
  }

  // required bytes get = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->get(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMachineExchange)
  return target;
}

size_t ConfigMachineExchange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigMachineExchange)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_get()) {
    // required bytes get = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigMachineExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMachineExchange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required bytes get = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMachineExchange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMachineExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMachineExchange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMachineExchange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMachineExchange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMachineExchange)
    MergeFrom(*source);
  }
}

void ConfigMachineExchange::MergeFrom(const ConfigMachineExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMachineExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_get(from.get());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigMachineExchange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMachineExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMachineExchange::CopyFrom(const ConfigMachineExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMachineExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMachineExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigMachineExchange::Swap(ConfigMachineExchange* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMachineExchange* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMachineExchange::UnsafeArenaSwap(ConfigMachineExchange* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMachineExchange::InternalSwap(ConfigMachineExchange* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  get_.Swap(&other->get_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMachineExchange::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMachineExchangeGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMachineExchangeGroup::kIdFieldNumber;
const int ConfigMachineExchangeGroup::kGroupInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMachineExchangeGroup::ConfigMachineExchangeGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigMachineExchangeGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMachineExchangeGroup)
}
ConfigMachineExchangeGroup::ConfigMachineExchangeGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMachineExchangeGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMachineExchangeGroup)
}
ConfigMachineExchangeGroup::ConfigMachineExchangeGroup(const ConfigMachineExchangeGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_info()) {
    group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_info(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigMachineExchangeGroup)
}

void ConfigMachineExchangeGroup::SharedCtor() {
  group_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigMachineExchangeGroup::~ConfigMachineExchangeGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigMachineExchangeGroup)
  SharedDtor();
}

void ConfigMachineExchangeGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  group_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigMachineExchangeGroup::ArenaDtor(void* object) {
  ConfigMachineExchangeGroup* _this = reinterpret_cast< ConfigMachineExchangeGroup* >(object);
  (void)_this;
}
void ConfigMachineExchangeGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMachineExchangeGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMachineExchangeGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMachineExchangeGroup& ConfigMachineExchangeGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMachineExchangeGroup.base);
  return *internal_default_instance();
}


void ConfigMachineExchangeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMachineExchangeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    group_info_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMachineExchangeGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMachineExchangeGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes group_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMachineExchangeGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMachineExchangeGroup)
  return false;
#undef DO_
}

void ConfigMachineExchangeGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMachineExchangeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes group_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->group_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMachineExchangeGroup)
}

::google::protobuf::uint8* ConfigMachineExchangeGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMachineExchangeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes group_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->group_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMachineExchangeGroup)
  return target;
}

size_t ConfigMachineExchangeGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigMachineExchangeGroup)
  size_t total_size = 0;

  if (has_group_info()) {
    // required bytes group_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_info());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigMachineExchangeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMachineExchangeGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes group_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_info());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMachineExchangeGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMachineExchangeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMachineExchangeGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMachineExchangeGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMachineExchangeGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMachineExchangeGroup)
    MergeFrom(*source);
  }
}

void ConfigMachineExchangeGroup::MergeFrom(const ConfigMachineExchangeGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMachineExchangeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_group_info(from.group_info());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigMachineExchangeGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMachineExchangeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMachineExchangeGroup::CopyFrom(const ConfigMachineExchangeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMachineExchangeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMachineExchangeGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConfigMachineExchangeGroup::Swap(ConfigMachineExchangeGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMachineExchangeGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMachineExchangeGroup::UnsafeArenaSwap(ConfigMachineExchangeGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMachineExchangeGroup::InternalSwap(ConfigMachineExchangeGroup* other) {
  using std::swap;
  group_info_.Swap(&other->group_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMachineExchangeGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPveMapModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPveMapModel::kIdFieldNumber;
const int ConfigPveMapModel::kNameFieldNumber;
const int ConfigPveMapModel::kTypeFieldNumber;
const int ConfigPveMapModel::kSubtypeFieldNumber;
const int ConfigPveMapModel::kLevelFieldNumber;
const int ConfigPveMapModel::kMapTypeFieldNumber;
const int ConfigPveMapModel::kMapTilesFieldNumber;
const int ConfigPveMapModel::kMapSizeFieldNumber;
const int ConfigPveMapModel::kRandomRoomOneFieldNumber;
const int ConfigPveMapModel::kRandomRoomTwoFieldNumber;
const int ConfigPveMapModel::kRandomRoomThreeFieldNumber;
const int ConfigPveMapModel::kRandomRoomFourFieldNumber;
const int ConfigPveMapModel::kRandomRoomFiveFieldNumber;
const int ConfigPveMapModel::kRandomEnemyTwoFieldNumber;
const int ConfigPveMapModel::kRandomEnemyThreeFieldNumber;
const int ConfigPveMapModel::kRandomEnemyFourFieldNumber;
const int ConfigPveMapModel::kRandomEnemyFiveFieldNumber;
const int ConfigPveMapModel::kFacilitysFieldNumber;
const int ConfigPveMapModel::kConfirmRoomFieldNumber;
const int ConfigPveMapModel::kConfirmElementFieldNumber;
const int ConfigPveMapModel::kLockedRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPveMapModel::ConfigPveMapModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigPveMapModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPveMapModel)
}
ConfigPveMapModel::ConfigPveMapModel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPveMapModel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPveMapModel)
}
ConfigPveMapModel::ConfigPveMapModel(const ConfigPveMapModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level()) {
    level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level(),
      GetArenaNoVirtual());
  }
  map_tiles_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_tiles()) {
    map_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_tiles(),
      GetArenaNoVirtual());
  }
  map_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_size()) {
    map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_size(),
      GetArenaNoVirtual());
  }
  random_room_one_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_room_one()) {
    random_room_one_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_room_one(),
      GetArenaNoVirtual());
  }
  random_room_two_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_room_two()) {
    random_room_two_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_room_two(),
      GetArenaNoVirtual());
  }
  random_room_three_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_room_three()) {
    random_room_three_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_room_three(),
      GetArenaNoVirtual());
  }
  random_room_four_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_room_four()) {
    random_room_four_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_room_four(),
      GetArenaNoVirtual());
  }
  random_room_five_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_room_five()) {
    random_room_five_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_room_five(),
      GetArenaNoVirtual());
  }
  random_enemy_two_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_enemy_two()) {
    random_enemy_two_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_enemy_two(),
      GetArenaNoVirtual());
  }
  random_enemy_three_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_enemy_three()) {
    random_enemy_three_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_enemy_three(),
      GetArenaNoVirtual());
  }
  random_enemy_four_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_enemy_four()) {
    random_enemy_four_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_enemy_four(),
      GetArenaNoVirtual());
  }
  random_enemy_five_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_enemy_five()) {
    random_enemy_five_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_enemy_five(),
      GetArenaNoVirtual());
  }
  facilitys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_facilitys()) {
    facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facilitys(),
      GetArenaNoVirtual());
  }
  confirm_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_confirm_room()) {
    confirm_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_room(),
      GetArenaNoVirtual());
  }
  confirm_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_confirm_element()) {
    confirm_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_element(),
      GetArenaNoVirtual());
  }
  locked_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_locked_room()) {
    locked_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locked_room(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(map_type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigPveMapModel)
}

void ConfigPveMapModel::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_tiles_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_one_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_two_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_three_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_four_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_five_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_two_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_three_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_four_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_five_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facilitys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locked_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(map_type_));
}

ConfigPveMapModel::~ConfigPveMapModel() {
  // @@protoc_insertion_point(destructor:db.ConfigPveMapModel)
  SharedDtor();
}

void ConfigPveMapModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_tiles_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_one_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_two_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_three_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_four_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_room_five_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_two_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_three_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_four_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_enemy_five_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facilitys_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locked_room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigPveMapModel::ArenaDtor(void* object) {
  ConfigPveMapModel* _this = reinterpret_cast< ConfigPveMapModel* >(object);
  (void)_this;
}
void ConfigPveMapModel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPveMapModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPveMapModel::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPveMapModel& ConfigPveMapModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPveMapModel.base);
  return *internal_default_instance();
}


void ConfigPveMapModel::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPveMapModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      map_tiles_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      map_size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      random_room_one_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      random_room_two_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      random_room_three_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      random_room_four_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      random_room_five_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      random_enemy_two_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      random_enemy_three_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      random_enemy_four_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      random_enemy_five_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      facilitys_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      confirm_room_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      confirm_element_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    locked_room_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 1966080u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(map_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPveMapModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPveMapModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 subtype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_subtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 map_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_map_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes map_tiles = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes map_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_room_one = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_room_one()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_room_two = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_room_two()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_room_three = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_room_three()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_room_four = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_room_four()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_room_five = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_room_five()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_enemy_two = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_enemy_two()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_enemy_three = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_enemy_three()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_enemy_four = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_enemy_four()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_enemy_five = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_enemy_five()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes facilitys = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_facilitys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes confirm_room = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_confirm_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes confirm_element = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_confirm_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes locked_room = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_locked_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPveMapModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPveMapModel)
  return false;
#undef DO_
}

void ConfigPveMapModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPveMapModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 subtype = 4;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->subtype(), output);
  }

  // required bytes level = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->level(), output);
  }

  // required int32 map_type = 6;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->map_type(), output);
  }

  // required bytes map_tiles = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->map_tiles(), output);
  }

  // required bytes map_size = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->map_size(), output);
  }

  // required bytes random_room_one = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->random_room_one(), output);
  }

  // required bytes random_room_two = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->random_room_two(), output);
  }

  // required bytes random_room_three = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->random_room_three(), output);
  }

  // required bytes random_room_four = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->random_room_four(), output);
  }

  // required bytes random_room_five = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->random_room_five(), output);
  }

  // required bytes random_enemy_two = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->random_enemy_two(), output);
  }

  // required bytes random_enemy_three = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->random_enemy_three(), output);
  }

  // required bytes random_enemy_four = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->random_enemy_four(), output);
  }

  // required bytes random_enemy_five = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->random_enemy_five(), output);
  }

  // required bytes facilitys = 21;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->facilitys(), output);
  }

  // required bytes confirm_room = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->confirm_room(), output);
  }

  // required bytes confirm_element = 23;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->confirm_element(), output);
  }

  // required bytes locked_room = 24;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->locked_room(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPveMapModel)
}

::google::protobuf::uint8* ConfigPveMapModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPveMapModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 subtype = 4;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->subtype(), target);
  }

  // required bytes level = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->level(), target);
  }

  // required int32 map_type = 6;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->map_type(), target);
  }

  // required bytes map_tiles = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->map_tiles(), target);
  }

  // required bytes map_size = 8;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->map_size(), target);
  }

  // required bytes random_room_one = 11;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->random_room_one(), target);
  }

  // required bytes random_room_two = 12;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->random_room_two(), target);
  }

  // required bytes random_room_three = 13;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->random_room_three(), target);
  }

  // required bytes random_room_four = 14;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->random_room_four(), target);
  }

  // required bytes random_room_five = 15;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->random_room_five(), target);
  }

  // required bytes random_enemy_two = 16;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->random_enemy_two(), target);
  }

  // required bytes random_enemy_three = 17;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->random_enemy_three(), target);
  }

  // required bytes random_enemy_four = 18;
  if (cached_has_bits & 0x00000800u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->random_enemy_four(), target);
  }

  // required bytes random_enemy_five = 19;
  if (cached_has_bits & 0x00001000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->random_enemy_five(), target);
  }

  // required bytes facilitys = 21;
  if (cached_has_bits & 0x00002000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->facilitys(), target);
  }

  // required bytes confirm_room = 22;
  if (cached_has_bits & 0x00004000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->confirm_room(), target);
  }

  // required bytes confirm_element = 23;
  if (cached_has_bits & 0x00008000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->confirm_element(), target);
  }

  // required bytes locked_room = 24;
  if (cached_has_bits & 0x00010000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->locked_room(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPveMapModel)
  return target;
}

size_t ConfigPveMapModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigPveMapModel)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_level()) {
    // required bytes level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level());
  }

  if (has_map_tiles()) {
    // required bytes map_tiles = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_tiles());
  }

  if (has_map_size()) {
    // required bytes map_size = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_size());
  }

  if (has_random_room_one()) {
    // required bytes random_room_one = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_one());
  }

  if (has_random_room_two()) {
    // required bytes random_room_two = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_two());
  }

  if (has_random_room_three()) {
    // required bytes random_room_three = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_three());
  }

  if (has_random_room_four()) {
    // required bytes random_room_four = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_four());
  }

  if (has_random_room_five()) {
    // required bytes random_room_five = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_five());
  }

  if (has_random_enemy_two()) {
    // required bytes random_enemy_two = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy_two());
  }

  if (has_random_enemy_three()) {
    // required bytes random_enemy_three = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy_three());
  }

  if (has_random_enemy_four()) {
    // required bytes random_enemy_four = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy_four());
  }

  if (has_random_enemy_five()) {
    // required bytes random_enemy_five = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy_five());
  }

  if (has_facilitys()) {
    // required bytes facilitys = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->facilitys());
  }

  if (has_confirm_room()) {
    // required bytes confirm_room = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->confirm_room());
  }

  if (has_confirm_element()) {
    // required bytes confirm_element = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->confirm_element());
  }

  if (has_locked_room()) {
    // required bytes locked_room = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->locked_room());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_subtype()) {
    // required int32 subtype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subtype());
  }

  if (has_map_type()) {
    // required int32 map_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_type());
  }

  return total_size;
}
size_t ConfigPveMapModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPveMapModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x001fffff) ^ 0x001fffff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level());

    // required bytes map_tiles = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_tiles());

    // required bytes map_size = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_size());

    // required bytes random_room_one = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_one());

    // required bytes random_room_two = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_two());

    // required bytes random_room_three = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_three());

    // required bytes random_room_four = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_four());

    // required bytes random_room_five = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_room_five());

    // required bytes random_enemy_two = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy_two());

    // required bytes random_enemy_three = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy_three());

    // required bytes random_enemy_four = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy_four());

    // required bytes random_enemy_five = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_enemy_five());

    // required bytes facilitys = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->facilitys());

    // required bytes confirm_room = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->confirm_room());

    // required bytes confirm_element = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->confirm_element());

    // required bytes locked_room = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->locked_room());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 subtype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subtype());

    // required int32 map_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPveMapModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPveMapModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPveMapModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPveMapModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPveMapModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPveMapModel)
    MergeFrom(*source);
  }
}

void ConfigPveMapModel::MergeFrom(const ConfigPveMapModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPveMapModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_level(from.level());
    }
    if (cached_has_bits & 0x00000004u) {
      set_map_tiles(from.map_tiles());
    }
    if (cached_has_bits & 0x00000008u) {
      set_map_size(from.map_size());
    }
    if (cached_has_bits & 0x00000010u) {
      set_random_room_one(from.random_room_one());
    }
    if (cached_has_bits & 0x00000020u) {
      set_random_room_two(from.random_room_two());
    }
    if (cached_has_bits & 0x00000040u) {
      set_random_room_three(from.random_room_three());
    }
    if (cached_has_bits & 0x00000080u) {
      set_random_room_four(from.random_room_four());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_random_room_five(from.random_room_five());
    }
    if (cached_has_bits & 0x00000200u) {
      set_random_enemy_two(from.random_enemy_two());
    }
    if (cached_has_bits & 0x00000400u) {
      set_random_enemy_three(from.random_enemy_three());
    }
    if (cached_has_bits & 0x00000800u) {
      set_random_enemy_four(from.random_enemy_four());
    }
    if (cached_has_bits & 0x00001000u) {
      set_random_enemy_five(from.random_enemy_five());
    }
    if (cached_has_bits & 0x00002000u) {
      set_facilitys(from.facilitys());
    }
    if (cached_has_bits & 0x00004000u) {
      set_confirm_room(from.confirm_room());
    }
    if (cached_has_bits & 0x00008000u) {
      set_confirm_element(from.confirm_element());
    }
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      set_locked_room(from.locked_room());
    }
    if (cached_has_bits & 0x00020000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00040000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00080000u) {
      subtype_ = from.subtype_;
    }
    if (cached_has_bits & 0x00100000u) {
      map_type_ = from.map_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigPveMapModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPveMapModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPveMapModel::CopyFrom(const ConfigPveMapModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPveMapModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPveMapModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;
  return true;
}

void ConfigPveMapModel::Swap(ConfigPveMapModel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPveMapModel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPveMapModel::UnsafeArenaSwap(ConfigPveMapModel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPveMapModel::InternalSwap(ConfigPveMapModel* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level_.Swap(&other->level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_tiles_.Swap(&other->map_tiles_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_size_.Swap(&other->map_size_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_room_one_.Swap(&other->random_room_one_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_room_two_.Swap(&other->random_room_two_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_room_three_.Swap(&other->random_room_three_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_room_four_.Swap(&other->random_room_four_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_room_five_.Swap(&other->random_room_five_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_enemy_two_.Swap(&other->random_enemy_two_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_enemy_three_.Swap(&other->random_enemy_three_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_enemy_four_.Swap(&other->random_enemy_four_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_enemy_five_.Swap(&other->random_enemy_five_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  facilitys_.Swap(&other->facilitys_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_room_.Swap(&other->confirm_room_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_element_.Swap(&other->confirm_element_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locked_room_.Swap(&other->locked_room_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(subtype_, other->subtype_);
  swap(map_type_, other->map_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPveMapModel::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPveRoomModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPveRoomModel::kIdFieldNumber;
const int ConfigPveRoomModel::kGroupidFieldNumber;
const int ConfigPveRoomModel::kTypeFieldNumber;
const int ConfigPveRoomModel::kFacilitysFieldNumber;
const int ConfigPveRoomModel::kDropsFieldNumber;
const int ConfigPveRoomModel::kMachineFieldNumber;
const int ConfigPveRoomModel::kRandomMachineFieldNumber;
const int ConfigPveRoomModel::kAltarFieldNumber;
const int ConfigPveRoomModel::kRoomSizeFieldNumber;
const int ConfigPveRoomModel::kExistEnemyFieldNumber;
const int ConfigPveRoomModel::kChestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPveRoomModel::ConfigPveRoomModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigPveRoomModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPveRoomModel)
}
ConfigPveRoomModel::ConfigPveRoomModel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPveRoomModel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPveRoomModel)
}
ConfigPveRoomModel::ConfigPveRoomModel(const ConfigPveRoomModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  facilitys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_facilitys()) {
    facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facilitys(),
      GetArenaNoVirtual());
  }
  drops_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drops()) {
    drops_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drops(),
      GetArenaNoVirtual());
  }
  machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_machine()) {
    machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine(),
      GetArenaNoVirtual());
  }
  random_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_machine()) {
    random_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_machine(),
      GetArenaNoVirtual());
  }
  altar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_altar()) {
    altar_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.altar(),
      GetArenaNoVirtual());
  }
  room_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room_size()) {
    room_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_size(),
      GetArenaNoVirtual());
  }
  chest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chest()) {
    chest_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chest(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exist_enemy_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exist_enemy_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigPveRoomModel)
}

void ConfigPveRoomModel::SharedCtor() {
  facilitys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drops_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  altar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_enemy_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exist_enemy_));
}

ConfigPveRoomModel::~ConfigPveRoomModel() {
  // @@protoc_insertion_point(destructor:db.ConfigPveRoomModel)
  SharedDtor();
}

void ConfigPveRoomModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  facilitys_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drops_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_machine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  altar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigPveRoomModel::ArenaDtor(void* object) {
  ConfigPveRoomModel* _this = reinterpret_cast< ConfigPveRoomModel* >(object);
  (void)_this;
}
void ConfigPveRoomModel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPveRoomModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPveRoomModel::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPveRoomModel& ConfigPveRoomModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPveRoomModel.base);
  return *internal_default_instance();
}


void ConfigPveRoomModel::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPveRoomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      facilitys_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      drops_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      machine_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      random_machine_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      altar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      room_size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      chest_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  if (cached_has_bits & 1792u) {
    ::memset(&groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exist_enemy_) -
        reinterpret_cast<char*>(&groupid_)) + sizeof(exist_enemy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPveRoomModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPveRoomModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes facilitys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_facilitys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drops = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes machine = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_machine = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes altar = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_altar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes room_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exist_enemy = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_exist_enemy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exist_enemy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes chest = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPveRoomModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPveRoomModel)
  return false;
#undef DO_
}

void ConfigPveRoomModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPveRoomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 groupid = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required bytes facilitys = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->facilitys(), output);
  }

  // required bytes drops = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->drops(), output);
  }

  // required bytes machine = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->machine(), output);
  }

  // required bytes random_machine = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->random_machine(), output);
  }

  // required bytes altar = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->altar(), output);
  }

  // required bytes room_size = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->room_size(), output);
  }

  // required int32 exist_enemy = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->exist_enemy(), output);
  }

  // required bytes chest = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->chest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPveRoomModel)
}

::google::protobuf::uint8* ConfigPveRoomModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPveRoomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 groupid = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required bytes facilitys = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->facilitys(), target);
  }

  // required bytes drops = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->drops(), target);
  }

  // required bytes machine = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->machine(), target);
  }

  // required bytes random_machine = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->random_machine(), target);
  }

  // required bytes altar = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->altar(), target);
  }

  // required bytes room_size = 9;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->room_size(), target);
  }

  // required int32 exist_enemy = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->exist_enemy(), target);
  }

  // required bytes chest = 11;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->chest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPveRoomModel)
  return target;
}

size_t ConfigPveRoomModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigPveRoomModel)
  size_t total_size = 0;

  if (has_facilitys()) {
    // required bytes facilitys = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->facilitys());
  }

  if (has_drops()) {
    // required bytes drops = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drops());
  }

  if (has_machine()) {
    // required bytes machine = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->machine());
  }

  if (has_random_machine()) {
    // required bytes random_machine = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_machine());
  }

  if (has_altar()) {
    // required bytes altar = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->altar());
  }

  if (has_room_size()) {
    // required bytes room_size = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room_size());
  }

  if (has_chest()) {
    // required bytes chest = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chest());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_groupid()) {
    // required int32 groupid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_exist_enemy()) {
    // required int32 exist_enemy = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exist_enemy());
  }

  return total_size;
}
size_t ConfigPveRoomModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPveRoomModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required bytes facilitys = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->facilitys());

    // required bytes drops = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drops());

    // required bytes machine = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->machine());

    // required bytes random_machine = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_machine());

    // required bytes altar = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->altar());

    // required bytes room_size = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room_size());

    // required bytes chest = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chest());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 groupid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 exist_enemy = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exist_enemy());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPveRoomModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPveRoomModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPveRoomModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPveRoomModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPveRoomModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPveRoomModel)
    MergeFrom(*source);
  }
}

void ConfigPveRoomModel::MergeFrom(const ConfigPveRoomModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPveRoomModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_facilitys(from.facilitys());
    }
    if (cached_has_bits & 0x00000002u) {
      set_drops(from.drops());
    }
    if (cached_has_bits & 0x00000004u) {
      set_machine(from.machine());
    }
    if (cached_has_bits & 0x00000008u) {
      set_random_machine(from.random_machine());
    }
    if (cached_has_bits & 0x00000010u) {
      set_altar(from.altar());
    }
    if (cached_has_bits & 0x00000020u) {
      set_room_size(from.room_size());
    }
    if (cached_has_bits & 0x00000040u) {
      set_chest(from.chest());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      exist_enemy_ = from.exist_enemy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigPveRoomModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPveRoomModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPveRoomModel::CopyFrom(const ConfigPveRoomModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPveRoomModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPveRoomModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void ConfigPveRoomModel::Swap(ConfigPveRoomModel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPveRoomModel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPveRoomModel::UnsafeArenaSwap(ConfigPveRoomModel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPveRoomModel::InternalSwap(ConfigPveRoomModel* other) {
  using std::swap;
  facilitys_.Swap(&other->facilitys_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drops_.Swap(&other->drops_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_.Swap(&other->machine_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_machine_.Swap(&other->random_machine_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  altar_.Swap(&other->altar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  room_size_.Swap(&other->room_size_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chest_.Swap(&other->chest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(groupid_, other->groupid_);
  swap(type_, other->type_);
  swap(exist_enemy_, other->exist_enemy_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPveRoomModel::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigChest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigChest::kIdFieldNumber;
const int ConfigChest::kPhaseFieldNumber;
const int ConfigChest::kLevelFieldNumber;
const int ConfigChest::kDropItemFieldNumber;
const int ConfigChest::kDropGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigChest::ConfigChest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigChest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigChest)
}
ConfigChest::ConfigChest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigChest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigChest)
}
ConfigChest::ConfigChest(const ConfigChest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level()) {
    level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level(),
      GetArenaNoVirtual());
  }
  drop_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_item()) {
    drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_item(),
      GetArenaNoVirtual());
  }
  drop_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_group()) {
    drop_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_group(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&id_)) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigChest)
}

void ConfigChest::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&id_)) + sizeof(phase_));
}

ConfigChest::~ConfigChest() {
  // @@protoc_insertion_point(destructor:db.ConfigChest)
  SharedDtor();
}

void ConfigChest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigChest::ArenaDtor(void* object) {
  ConfigChest* _this = reinterpret_cast< ConfigChest* >(object);
  (void)_this;
}
void ConfigChest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigChest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigChest::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigChest& ConfigChest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigChest.base);
  return *internal_default_instance();
}


void ConfigChest::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigChest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      drop_item_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      drop_group_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phase_) -
        reinterpret_cast<char*>(&id_)) + sizeof(phase_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigChest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigChest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 phase = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop_item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop_group = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigChest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigChest)
  return false;
#undef DO_
}

void ConfigChest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigChest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 phase = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phase(), output);
  }

  // required bytes level = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->level(), output);
  }

  // required bytes drop_item = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->drop_item(), output);
  }

  // required bytes drop_group = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->drop_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigChest)
}

::google::protobuf::uint8* ConfigChest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigChest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 phase = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phase(), target);
  }

  // required bytes level = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->level(), target);
  }

  // required bytes drop_item = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->drop_item(), target);
  }

  // required bytes drop_group = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->drop_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigChest)
  return target;
}

size_t ConfigChest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigChest)
  size_t total_size = 0;

  if (has_level()) {
    // required bytes level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level());
  }

  if (has_drop_item()) {
    // required bytes drop_item = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_item());
  }

  if (has_drop_group()) {
    // required bytes drop_group = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_group());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_phase()) {
    // required int32 phase = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phase());
  }

  return total_size;
}
size_t ConfigChest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigChest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level());

    // required bytes drop_item = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_item());

    // required bytes drop_group = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_group());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 phase = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phase());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigChest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigChest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigChest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigChest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigChest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigChest)
    MergeFrom(*source);
  }
}

void ConfigChest::MergeFrom(const ConfigChest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigChest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_level(from.level());
    }
    if (cached_has_bits & 0x00000002u) {
      set_drop_item(from.drop_item());
    }
    if (cached_has_bits & 0x00000004u) {
      set_drop_group(from.drop_group());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      phase_ = from.phase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigChest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigChest::CopyFrom(const ConfigChest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigChest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ConfigChest::Swap(ConfigChest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigChest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigChest::UnsafeArenaSwap(ConfigChest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigChest::InternalSwap(ConfigChest* other) {
  using std::swap;
  level_.Swap(&other->level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_item_.Swap(&other->drop_item_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_group_.Swap(&other->drop_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(phase_, other->phase_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigChest::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDropItemGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDropItemGroup::kIdFieldNumber;
const int ConfigDropItemGroup::kGroupidFieldNumber;
const int ConfigDropItemGroup::kTypeFieldNumber;
const int ConfigDropItemGroup::kIndexFieldNumber;
const int ConfigDropItemGroup::kTypeidFieldNumber;
const int ConfigDropItemGroup::kNumMinFieldNumber;
const int ConfigDropItemGroup::kNumMaxFieldNumber;
const int ConfigDropItemGroup::kProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDropItemGroup::ConfigDropItemGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDropItemGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDropItemGroup)
}
ConfigDropItemGroup::ConfigDropItemGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDropItemGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDropItemGroup)
}
ConfigDropItemGroup::ConfigDropItemGroup(const ConfigDropItemGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&id_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigDropItemGroup)
}

void ConfigDropItemGroup::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&id_)) + sizeof(probability_));
}

ConfigDropItemGroup::~ConfigDropItemGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigDropItemGroup)
  SharedDtor();
}

void ConfigDropItemGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigDropItemGroup::ArenaDtor(void* object) {
  ConfigDropItemGroup* _this = reinterpret_cast< ConfigDropItemGroup* >(object);
  (void)_this;
}
void ConfigDropItemGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDropItemGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDropItemGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDropItemGroup& ConfigDropItemGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDropItemGroup.base);
  return *internal_default_instance();
}


void ConfigDropItemGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDropItemGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_) -
        reinterpret_cast<char*>(&id_)) + sizeof(probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDropItemGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDropItemGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_min = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_max = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float probability = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDropItemGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDropItemGroup)
  return false;
#undef DO_
}

void ConfigDropItemGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDropItemGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // required int32 typeid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->typeid_(), output);
  }

  // required int32 num_min = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_min(), output);
  }

  // required int32 num_max = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_max(), output);
  }

  // required float probability = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDropItemGroup)
}

::google::protobuf::uint8* ConfigDropItemGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDropItemGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // required int32 typeid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->typeid_(), target);
  }

  // required int32 num_min = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_min(), target);
  }

  // required int32 num_max = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_max(), target);
  }

  // required float probability = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDropItemGroup)
  return target;
}

size_t ConfigDropItemGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDropItemGroup)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_groupid()) {
    // required int32 groupid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_index()) {
    // required int32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_typeid_()) {
    // required int32 typeid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_num_min()) {
    // required int32 num_min = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_min());
  }

  if (has_num_max()) {
    // required int32 num_max = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_max());
  }

  if (has_probability()) {
    // required float probability = 8;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ConfigDropItemGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDropItemGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 groupid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 typeid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required int32 num_min = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_min());

    // required int32 num_max = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_max());

    // required float probability = 8;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDropItemGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDropItemGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDropItemGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDropItemGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDropItemGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDropItemGroup)
    MergeFrom(*source);
  }
}

void ConfigDropItemGroup::MergeFrom(const ConfigDropItemGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDropItemGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000020u) {
      num_min_ = from.num_min_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_max_ = from.num_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDropItemGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDropItemGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDropItemGroup::CopyFrom(const ConfigDropItemGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDropItemGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDropItemGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void ConfigDropItemGroup::Swap(ConfigDropItemGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDropItemGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDropItemGroup::UnsafeArenaSwap(ConfigDropItemGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDropItemGroup::InternalSwap(ConfigDropItemGroup* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(groupid_, other->groupid_);
  swap(type_, other->type_);
  swap(index_, other->index_);
  swap(typeid__, other->typeid__);
  swap(num_min_, other->num_min_);
  swap(num_max_, other->num_max_);
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDropItemGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigLottery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigLottery::kIdFieldNumber;
const int ConfigLottery::kTypeFieldNumber;
const int ConfigLottery::kCostFieldNumber;
const int ConfigLottery::kLimitNumFieldNumber;
const int ConfigLottery::kRandomGroupsFieldNumber;
const int ConfigLottery::kLowestGroupsFieldNumber;
const int ConfigLottery::kActivityIdFieldNumber;
const int ConfigLottery::kActivityRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigLottery::ConfigLottery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigLottery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigLottery)
}
ConfigLottery::ConfigLottery(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigLottery.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigLottery)
}
ConfigLottery::ConfigLottery(const ConfigLottery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  random_groups_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_random_groups()) {
    random_groups_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_groups(),
      GetArenaNoVirtual());
  }
  lowest_groups_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lowest_groups()) {
    lowest_groups_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lowest_groups(),
      GetArenaNoVirtual());
  }
  activity_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_activity_reward()) {
    activity_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activity_reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&activity_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(activity_id_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigLottery)
}

void ConfigLottery::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_groups_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lowest_groups_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activity_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activity_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(activity_id_));
}

ConfigLottery::~ConfigLottery() {
  // @@protoc_insertion_point(destructor:db.ConfigLottery)
  SharedDtor();
}

void ConfigLottery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_groups_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lowest_groups_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activity_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigLottery::ArenaDtor(void* object) {
  ConfigLottery* _this = reinterpret_cast< ConfigLottery* >(object);
  (void)_this;
}
void ConfigLottery::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigLottery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigLottery::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigLottery& ConfigLottery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigLottery.base);
  return *internal_default_instance();
}


void ConfigLottery::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigLottery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      random_groups_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      lowest_groups_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      activity_reward_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&activity_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(activity_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigLottery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 limit_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_limit_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes random_groups = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes lowest_groups = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lowest_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 activity_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_activity_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes activity_reward = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_activity_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigLottery)
  return false;
#undef DO_
}

void ConfigLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigLottery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes cost = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cost(), output);
  }

  // required int32 limit_num = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit_num(), output);
  }

  // required bytes random_groups = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->random_groups(), output);
  }

  // required bytes lowest_groups = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->lowest_groups(), output);
  }

  // required int32 activity_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->activity_id(), output);
  }

  // required bytes activity_reward = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->activity_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigLottery)
}

::google::protobuf::uint8* ConfigLottery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigLottery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes cost = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cost(), target);
  }

  // required int32 limit_num = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit_num(), target);
  }

  // required bytes random_groups = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->random_groups(), target);
  }

  // required bytes lowest_groups = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->lowest_groups(), target);
  }

  // required int32 activity_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->activity_id(), target);
  }

  // required bytes activity_reward = 8;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->activity_reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigLottery)
  return target;
}

size_t ConfigLottery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigLottery)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_random_groups()) {
    // required bytes random_groups = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_groups());
  }

  if (has_lowest_groups()) {
    // required bytes lowest_groups = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->lowest_groups());
  }

  if (has_activity_reward()) {
    // required bytes activity_reward = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->activity_reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_limit_num()) {
    // required int32 limit_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_num());
  }

  if (has_activity_id()) {
    // required int32 activity_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->activity_id());
  }

  return total_size;
}
size_t ConfigLottery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigLottery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required bytes random_groups = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_groups());

    // required bytes lowest_groups = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->lowest_groups());

    // required bytes activity_reward = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->activity_reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 limit_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_num());

    // required int32 activity_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->activity_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigLottery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigLottery)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigLottery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigLottery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigLottery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigLottery)
    MergeFrom(*source);
  }
}

void ConfigLottery::MergeFrom(const ConfigLottery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigLottery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_random_groups(from.random_groups());
    }
    if (cached_has_bits & 0x00000004u) {
      set_lowest_groups(from.lowest_groups());
    }
    if (cached_has_bits & 0x00000008u) {
      set_activity_reward(from.activity_reward());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      limit_num_ = from.limit_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      activity_id_ = from.activity_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigLottery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigLottery::CopyFrom(const ConfigLottery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void ConfigLottery::Swap(ConfigLottery* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigLottery* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigLottery::UnsafeArenaSwap(ConfigLottery* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigLottery::InternalSwap(ConfigLottery* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_groups_.Swap(&other->random_groups_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lowest_groups_.Swap(&other->lowest_groups_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  activity_reward_.Swap(&other->activity_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(limit_num_, other->limit_num_);
  swap(activity_id_, other->activity_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigLottery::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigSecretRoom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSecretRoom::kIdFieldNumber;
const int ConfigSecretRoom::kModelIdFieldNumber;
const int ConfigSecretRoom::kLockInfoFieldNumber;
const int ConfigSecretRoom::kTriggerElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSecretRoom::ConfigSecretRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigSecretRoom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigSecretRoom)
}
ConfigSecretRoom::ConfigSecretRoom(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSecretRoom.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigSecretRoom)
}
ConfigSecretRoom::ConfigSecretRoom(const ConfigSecretRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lock_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lock_info()) {
    lock_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_info(),
      GetArenaNoVirtual());
  }
  trigger_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_element()) {
    trigger_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_element(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(model_id_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigSecretRoom)
}

void ConfigSecretRoom::SharedCtor() {
  lock_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(model_id_));
}

ConfigSecretRoom::~ConfigSecretRoom() {
  // @@protoc_insertion_point(destructor:db.ConfigSecretRoom)
  SharedDtor();
}

void ConfigSecretRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  lock_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSecretRoom::ArenaDtor(void* object) {
  ConfigSecretRoom* _this = reinterpret_cast< ConfigSecretRoom* >(object);
  (void)_this;
}
void ConfigSecretRoom::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigSecretRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigSecretRoom::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigSecretRoom& ConfigSecretRoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSecretRoom.base);
  return *internal_default_instance();
}


void ConfigSecretRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigSecretRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      lock_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      trigger_element_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(model_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigSecretRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigSecretRoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 model_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_model_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes lock_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lock_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger_element = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigSecretRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigSecretRoom)
  return false;
#undef DO_
}

void ConfigSecretRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigSecretRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 model_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->model_id(), output);
  }

  // required bytes lock_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->lock_info(), output);
  }

  // required bytes trigger_element = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->trigger_element(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigSecretRoom)
}

::google::protobuf::uint8* ConfigSecretRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigSecretRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 model_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->model_id(), target);
  }

  // required bytes lock_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->lock_info(), target);
  }

  // required bytes trigger_element = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->trigger_element(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigSecretRoom)
  return target;
}

size_t ConfigSecretRoom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigSecretRoom)
  size_t total_size = 0;

  if (has_lock_info()) {
    // required bytes lock_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->lock_info());
  }

  if (has_trigger_element()) {
    // required bytes trigger_element = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_element());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_model_id()) {
    // required int32 model_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  return total_size;
}
size_t ConfigSecretRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigSecretRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes lock_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->lock_info());

    // required bytes trigger_element = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_element());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 model_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigSecretRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigSecretRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigSecretRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigSecretRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigSecretRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigSecretRoom)
    MergeFrom(*source);
  }
}

void ConfigSecretRoom::MergeFrom(const ConfigSecretRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigSecretRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_lock_info(from.lock_info());
    }
    if (cached_has_bits & 0x00000002u) {
      set_trigger_element(from.trigger_element());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      model_id_ = from.model_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigSecretRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigSecretRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSecretRoom::CopyFrom(const ConfigSecretRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigSecretRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSecretRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigSecretRoom::Swap(ConfigSecretRoom* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigSecretRoom* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigSecretRoom::UnsafeArenaSwap(ConfigSecretRoom* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigSecretRoom::InternalSwap(ConfigSecretRoom* other) {
  using std::swap;
  lock_info_.Swap(&other->lock_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_element_.Swap(&other->trigger_element_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(model_id_, other->model_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigSecretRoom::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigSecretRoomGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSecretRoomGroup::kIdFieldNumber;
const int ConfigSecretRoomGroup::kGroupInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSecretRoomGroup::ConfigSecretRoomGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigSecretRoomGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigSecretRoomGroup)
}
ConfigSecretRoomGroup::ConfigSecretRoomGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSecretRoomGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigSecretRoomGroup)
}
ConfigSecretRoomGroup::ConfigSecretRoomGroup(const ConfigSecretRoomGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_info()) {
    group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_info(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigSecretRoomGroup)
}

void ConfigSecretRoomGroup::SharedCtor() {
  group_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigSecretRoomGroup::~ConfigSecretRoomGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigSecretRoomGroup)
  SharedDtor();
}

void ConfigSecretRoomGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  group_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSecretRoomGroup::ArenaDtor(void* object) {
  ConfigSecretRoomGroup* _this = reinterpret_cast< ConfigSecretRoomGroup* >(object);
  (void)_this;
}
void ConfigSecretRoomGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigSecretRoomGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigSecretRoomGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigSecretRoomGroup& ConfigSecretRoomGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSecretRoomGroup.base);
  return *internal_default_instance();
}


void ConfigSecretRoomGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigSecretRoomGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    group_info_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigSecretRoomGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigSecretRoomGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes group_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigSecretRoomGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigSecretRoomGroup)
  return false;
#undef DO_
}

void ConfigSecretRoomGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigSecretRoomGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes group_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->group_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigSecretRoomGroup)
}

::google::protobuf::uint8* ConfigSecretRoomGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigSecretRoomGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes group_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->group_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigSecretRoomGroup)
  return target;
}

size_t ConfigSecretRoomGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigSecretRoomGroup)
  size_t total_size = 0;

  if (has_group_info()) {
    // required bytes group_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_info());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigSecretRoomGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigSecretRoomGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes group_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_info());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigSecretRoomGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigSecretRoomGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigSecretRoomGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigSecretRoomGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigSecretRoomGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigSecretRoomGroup)
    MergeFrom(*source);
  }
}

void ConfigSecretRoomGroup::MergeFrom(const ConfigSecretRoomGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigSecretRoomGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_group_info(from.group_info());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigSecretRoomGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigSecretRoomGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSecretRoomGroup::CopyFrom(const ConfigSecretRoomGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigSecretRoomGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSecretRoomGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConfigSecretRoomGroup::Swap(ConfigSecretRoomGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigSecretRoomGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigSecretRoomGroup::UnsafeArenaSwap(ConfigSecretRoomGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigSecretRoomGroup::InternalSwap(ConfigSecretRoomGroup* other) {
  using std::swap;
  group_info_.Swap(&other->group_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigSecretRoomGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFarmSkillLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFarmSkillLevel::kIdFieldNumber;
const int ConfigFarmSkillLevel::kLevelFieldNumber;
const int ConfigFarmSkillLevel::kExpMaxFieldNumber;
const int ConfigFarmSkillLevel::kLevelUpCostFieldNumber;
const int ConfigFarmSkillLevel::kAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFarmSkillLevel::ConfigFarmSkillLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFarmSkillLevel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFarmSkillLevel)
}
ConfigFarmSkillLevel::ConfigFarmSkillLevel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFarmSkillLevel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFarmSkillLevel)
}
ConfigFarmSkillLevel::ConfigFarmSkillLevel(const ConfigFarmSkillLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_up_cost()) {
    level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_up_cost(),
      GetArenaNoVirtual());
  }
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attribute()) {
    attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_max_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exp_max_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFarmSkillLevel)
}

void ConfigFarmSkillLevel::SharedCtor() {
  level_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_max_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exp_max_));
}

ConfigFarmSkillLevel::~ConfigFarmSkillLevel() {
  // @@protoc_insertion_point(destructor:db.ConfigFarmSkillLevel)
  SharedDtor();
}

void ConfigFarmSkillLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  level_up_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFarmSkillLevel::ArenaDtor(void* object) {
  ConfigFarmSkillLevel* _this = reinterpret_cast< ConfigFarmSkillLevel* >(object);
  (void)_this;
}
void ConfigFarmSkillLevel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFarmSkillLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFarmSkillLevel::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFarmSkillLevel& ConfigFarmSkillLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFarmSkillLevel.base);
  return *internal_default_instance();
}


void ConfigFarmSkillLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFarmSkillLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      level_up_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_max_) -
        reinterpret_cast<char*>(&id_)) + sizeof(exp_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFarmSkillLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFarmSkillLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exp_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_exp_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level_up_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_up_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attribute = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFarmSkillLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFarmSkillLevel)
  return false;
#undef DO_
}

void ConfigFarmSkillLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFarmSkillLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 exp_max = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp_max(), output);
  }

  // required bytes level_up_cost = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->level_up_cost(), output);
  }

  // required bytes attribute = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->attribute(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFarmSkillLevel)
}

::google::protobuf::uint8* ConfigFarmSkillLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFarmSkillLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 exp_max = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp_max(), target);
  }

  // required bytes level_up_cost = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->level_up_cost(), target);
  }

  // required bytes attribute = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attribute(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFarmSkillLevel)
  return target;
}

size_t ConfigFarmSkillLevel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFarmSkillLevel)
  size_t total_size = 0;

  if (has_level_up_cost()) {
    // required bytes level_up_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_cost());
  }

  if (has_attribute()) {
    // required bytes attribute = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_exp_max()) {
    // required int32 exp_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp_max());
  }

  return total_size;
}
size_t ConfigFarmSkillLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFarmSkillLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes level_up_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_cost());

    // required bytes attribute = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 exp_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp_max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFarmSkillLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFarmSkillLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFarmSkillLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFarmSkillLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFarmSkillLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFarmSkillLevel)
    MergeFrom(*source);
  }
}

void ConfigFarmSkillLevel::MergeFrom(const ConfigFarmSkillLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFarmSkillLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_level_up_cost(from.level_up_cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_attribute(from.attribute());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      exp_max_ = from.exp_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFarmSkillLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFarmSkillLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFarmSkillLevel::CopyFrom(const ConfigFarmSkillLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFarmSkillLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFarmSkillLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ConfigFarmSkillLevel::Swap(ConfigFarmSkillLevel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFarmSkillLevel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFarmSkillLevel::UnsafeArenaSwap(ConfigFarmSkillLevel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFarmSkillLevel::InternalSwap(ConfigFarmSkillLevel* other) {
  using std::swap;
  level_up_cost_.Swap(&other->level_up_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attribute_.Swap(&other->attribute_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(exp_max_, other->exp_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFarmSkillLevel::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigSkill::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSkill::kIdFieldNumber;
const int ConfigSkill::kSkillLevelFieldNumber;
const int ConfigSkill::kGroupidFieldNumber;
const int ConfigSkill::kSkillNameFieldNumber;
const int ConfigSkill::kDescriptionFieldNumber;
const int ConfigSkill::kNeedStarFieldNumber;
const int ConfigSkill::kNeedLevelFieldNumber;
const int ConfigSkill::kLevelUpBaseCostFieldNumber;
const int ConfigSkill::kLevelUpCostFieldNumber;
const int ConfigSkill::kChipCostFieldNumber;
const int ConfigSkill::kTargetFieldNumber;
const int ConfigSkill::kTypeFieldNumber;
const int ConfigSkill::kPriorityFieldNumber;
const int ConfigSkill::kAttackAttrFieldNumber;
const int ConfigSkill::kAttackFieldNumber;
const int ConfigSkill::kAttackModeFieldNumber;
const int ConfigSkill::kTriggerSelfBuffFieldNumber;
const int ConfigSkill::kTriggerEnemyBuffFieldNumber;
const int ConfigSkill::kBuffModeFieldNumber;
const int ConfigSkill::kCdFieldNumber;
const int ConfigSkill::kProductFieldNumber;
const int ConfigSkill::kAttackRangeFieldNumber;
const int ConfigSkill::kSpecialEffectFieldNumber;
const int ConfigSkill::kItemAddFieldNumber;
const int ConfigSkill::kAttributeAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSkill::ConfigSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigSkill.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigSkill)
}
ConfigSkill::ConfigSkill(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSkill.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigSkill)
}
ConfigSkill::ConfigSkill(const ConfigSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skill_name()) {
    skill_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_name(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description(),
      GetArenaNoVirtual());
  }
  level_up_base_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_up_base_cost()) {
    level_up_base_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_up_base_cost(),
      GetArenaNoVirtual());
  }
  level_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_up_cost()) {
    level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_up_cost(),
      GetArenaNoVirtual());
  }
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target()) {
    target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target(),
      GetArenaNoVirtual());
  }
  attack_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attack()) {
    attack_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attack(),
      GetArenaNoVirtual());
  }
  attack_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attack_mode()) {
    attack_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attack_mode(),
      GetArenaNoVirtual());
  }
  trigger_self_buff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_self_buff()) {
    trigger_self_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_self_buff(),
      GetArenaNoVirtual());
  }
  trigger_enemy_buff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_enemy_buff()) {
    trigger_enemy_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_enemy_buff(),
      GetArenaNoVirtual());
  }
  buff_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buff_mode()) {
    buff_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buff_mode(),
      GetArenaNoVirtual());
  }
  item_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_add()) {
    item_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_add(),
      GetArenaNoVirtual());
  }
  attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attribute_add()) {
    attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_add(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&special_effect_) -
    reinterpret_cast<char*>(&id_)) + sizeof(special_effect_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigSkill)
}

void ConfigSkill::SharedCtor() {
  skill_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_base_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attack_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attack_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_self_buff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_enemy_buff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buff_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&special_effect_) -
      reinterpret_cast<char*>(&id_)) + sizeof(special_effect_));
}

ConfigSkill::~ConfigSkill() {
  // @@protoc_insertion_point(destructor:db.ConfigSkill)
  SharedDtor();
}

void ConfigSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  skill_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_base_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_up_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attack_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attack_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_self_buff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_enemy_buff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buff_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSkill::ArenaDtor(void* object) {
  ConfigSkill* _this = reinterpret_cast< ConfigSkill* >(object);
  (void)_this;
}
void ConfigSkill::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigSkill::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigSkill& ConfigSkill::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSkill.base);
  return *internal_default_instance();
}


void ConfigSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      skill_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      level_up_base_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      level_up_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      attack_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      attack_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      trigger_self_buff_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      trigger_enemy_buff_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      buff_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      item_add_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      attribute_add_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&need_star_) -
        reinterpret_cast<char*>(&id_)) + sizeof(need_star_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&need_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attack_range_) -
        reinterpret_cast<char*>(&need_level_)) + sizeof(attack_range_));
  }
  special_effect_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigSkill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 skill_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 groupid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes skill_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_star = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_need_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_need_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level_up_base_cost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_up_base_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level_up_cost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_up_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 chip_cost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_chip_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes target = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 priority = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 attack_attr = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_attack_attr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_attr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attack = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attack_mode = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attack_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger_self_buff = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_self_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger_enemy_buff = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_enemy_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes buff_mode = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buff_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cd = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_cd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 product = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_product();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 attack_range = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_attack_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 special_effect = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_special_effect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &special_effect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes item_add = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attribute_add = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attribute_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigSkill)
  return false;
#undef DO_
}

void ConfigSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 skill_level = 2;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

  // required uint64 groupid = 3;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->groupid(), output);
  }

  // required bytes skill_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->skill_name(), output);
  }

  // required bytes description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->description(), output);
  }

  // required int32 need_star = 6;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->need_star(), output);
  }

  // required int32 need_level = 7;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->need_level(), output);
  }

  // required bytes level_up_base_cost = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->level_up_base_cost(), output);
  }

  // required bytes level_up_cost = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->level_up_cost(), output);
  }

  // required int32 chip_cost = 10;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->chip_cost(), output);
  }

  // required bytes target = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->target(), output);
  }

  // required int32 type = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->type(), output);
  }

  // required int32 priority = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->priority(), output);
  }

  // required int32 attack_attr = 14;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->attack_attr(), output);
  }

  // required bytes attack = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->attack(), output);
  }

  // required bytes attack_mode = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->attack_mode(), output);
  }

  // required bytes trigger_self_buff = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->trigger_self_buff(), output);
  }

  // required bytes trigger_enemy_buff = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->trigger_enemy_buff(), output);
  }

  // required bytes buff_mode = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->buff_mode(), output);
  }

  // required int32 cd = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->cd(), output);
  }

  // required int32 product = 21;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->product(), output);
  }

  // required int32 attack_range = 22;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->attack_range(), output);
  }

  // required int32 special_effect = 23;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->special_effect(), output);
  }

  // required bytes item_add = 24;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->item_add(), output);
  }

  // required bytes attribute_add = 25;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->attribute_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigSkill)
}

::google::protobuf::uint8* ConfigSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 skill_level = 2;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }

  // required uint64 groupid = 3;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->groupid(), target);
  }

  // required bytes skill_name = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->skill_name(), target);
  }

  // required bytes description = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->description(), target);
  }

  // required int32 need_star = 6;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->need_star(), target);
  }

  // required int32 need_level = 7;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->need_level(), target);
  }

  // required bytes level_up_base_cost = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->level_up_base_cost(), target);
  }

  // required bytes level_up_cost = 9;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->level_up_cost(), target);
  }

  // required int32 chip_cost = 10;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->chip_cost(), target);
  }

  // required bytes target = 11;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->target(), target);
  }

  // required int32 type = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->type(), target);
  }

  // required int32 priority = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->priority(), target);
  }

  // required int32 attack_attr = 14;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->attack_attr(), target);
  }

  // required bytes attack = 15;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->attack(), target);
  }

  // required bytes attack_mode = 16;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->attack_mode(), target);
  }

  // required bytes trigger_self_buff = 17;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->trigger_self_buff(), target);
  }

  // required bytes trigger_enemy_buff = 18;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->trigger_enemy_buff(), target);
  }

  // required bytes buff_mode = 19;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->buff_mode(), target);
  }

  // required int32 cd = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->cd(), target);
  }

  // required int32 product = 21;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->product(), target);
  }

  // required int32 attack_range = 22;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->attack_range(), target);
  }

  // required int32 special_effect = 23;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->special_effect(), target);
  }

  // required bytes item_add = 24;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->item_add(), target);
  }

  // required bytes attribute_add = 25;
  if (cached_has_bits & 0x00000800u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->attribute_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigSkill)
  return target;
}

size_t ConfigSkill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigSkill)
  size_t total_size = 0;

  if (has_skill_name()) {
    // required bytes skill_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_name());
  }

  if (has_description()) {
    // required bytes description = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  if (has_level_up_base_cost()) {
    // required bytes level_up_base_cost = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_base_cost());
  }

  if (has_level_up_cost()) {
    // required bytes level_up_cost = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_cost());
  }

  if (has_target()) {
    // required bytes target = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->target());
  }

  if (has_attack()) {
    // required bytes attack = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attack());
  }

  if (has_attack_mode()) {
    // required bytes attack_mode = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attack_mode());
  }

  if (has_trigger_self_buff()) {
    // required bytes trigger_self_buff = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_self_buff());
  }

  if (has_trigger_enemy_buff()) {
    // required bytes trigger_enemy_buff = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_enemy_buff());
  }

  if (has_buff_mode()) {
    // required bytes buff_mode = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buff_mode());
  }

  if (has_item_add()) {
    // required bytes item_add = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->item_add());
  }

  if (has_attribute_add()) {
    // required bytes attribute_add = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute_add());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_groupid()) {
    // required uint64 groupid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  if (has_skill_level()) {
    // required int32 skill_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skill_level());
  }

  if (has_need_star()) {
    // required int32 need_star = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_star());
  }

  if (has_need_level()) {
    // required int32 need_level = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());
  }

  if (has_chip_cost()) {
    // required int32 chip_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chip_cost());
  }

  if (has_type()) {
    // required int32 type = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_priority()) {
    // required int32 priority = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  if (has_attack_attr()) {
    // required int32 attack_attr = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_attr());
  }

  if (has_cd()) {
    // required int32 cd = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cd());
  }

  if (has_product()) {
    // required int32 product = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->product());
  }

  if (has_attack_range()) {
    // required int32 attack_range = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_range());
  }

  if (has_special_effect()) {
    // required int32 special_effect = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->special_effect());
  }

  return total_size;
}
size_t ConfigSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigSkill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x01ffffff) ^ 0x01ffffff) == 0) {  // All required fields are present.
    // required bytes skill_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_name());

    // required bytes description = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());

    // required bytes level_up_base_cost = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_base_cost());

    // required bytes level_up_cost = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_cost());

    // required bytes target = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->target());

    // required bytes attack = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attack());

    // required bytes attack_mode = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attack_mode());

    // required bytes trigger_self_buff = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_self_buff());

    // required bytes trigger_enemy_buff = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_enemy_buff());

    // required bytes buff_mode = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buff_mode());

    // required bytes item_add = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->item_add());

    // required bytes attribute_add = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute_add());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 groupid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());

    // required int32 skill_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skill_level());

    // required int32 need_star = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_star());

    // required int32 need_level = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());

    // required int32 chip_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chip_cost());

    // required int32 type = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 priority = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());

    // required int32 attack_attr = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_attr());

    // required int32 cd = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cd());

    // required int32 product = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->product());

    // required int32 attack_range = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_range());

    // required int32 special_effect = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->special_effect());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigSkill)
    MergeFrom(*source);
  }
}

void ConfigSkill::MergeFrom(const ConfigSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_skill_name(from.skill_name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_description(from.description());
    }
    if (cached_has_bits & 0x00000004u) {
      set_level_up_base_cost(from.level_up_base_cost());
    }
    if (cached_has_bits & 0x00000008u) {
      set_level_up_cost(from.level_up_cost());
    }
    if (cached_has_bits & 0x00000010u) {
      set_target(from.target());
    }
    if (cached_has_bits & 0x00000020u) {
      set_attack(from.attack());
    }
    if (cached_has_bits & 0x00000040u) {
      set_attack_mode(from.attack_mode());
    }
    if (cached_has_bits & 0x00000080u) {
      set_trigger_self_buff(from.trigger_self_buff());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_trigger_enemy_buff(from.trigger_enemy_buff());
    }
    if (cached_has_bits & 0x00000200u) {
      set_buff_mode(from.buff_mode());
    }
    if (cached_has_bits & 0x00000400u) {
      set_item_add(from.item_add());
    }
    if (cached_has_bits & 0x00000800u) {
      set_attribute_add(from.attribute_add());
    }
    if (cached_has_bits & 0x00001000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00002000u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00004000u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00008000u) {
      need_star_ = from.need_star_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      need_level_ = from.need_level_;
    }
    if (cached_has_bits & 0x00020000u) {
      chip_cost_ = from.chip_cost_;
    }
    if (cached_has_bits & 0x00040000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00080000u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00100000u) {
      attack_attr_ = from.attack_attr_;
    }
    if (cached_has_bits & 0x00200000u) {
      cd_ = from.cd_;
    }
    if (cached_has_bits & 0x00400000u) {
      product_ = from.product_;
    }
    if (cached_has_bits & 0x00800000u) {
      attack_range_ = from.attack_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_special_effect(from.special_effect());
  }
}

void ConfigSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSkill::CopyFrom(const ConfigSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x01ffffff) != 0x01ffffff) return false;
  return true;
}

void ConfigSkill::Swap(ConfigSkill* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigSkill* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigSkill::UnsafeArenaSwap(ConfigSkill* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigSkill::InternalSwap(ConfigSkill* other) {
  using std::swap;
  skill_name_.Swap(&other->skill_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level_up_base_cost_.Swap(&other->level_up_base_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level_up_cost_.Swap(&other->level_up_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attack_.Swap(&other->attack_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attack_mode_.Swap(&other->attack_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_self_buff_.Swap(&other->trigger_self_buff_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_enemy_buff_.Swap(&other->trigger_enemy_buff_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buff_mode_.Swap(&other->buff_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  item_add_.Swap(&other->item_add_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attribute_add_.Swap(&other->attribute_add_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(groupid_, other->groupid_);
  swap(skill_level_, other->skill_level_);
  swap(need_star_, other->need_star_);
  swap(need_level_, other->need_level_);
  swap(chip_cost_, other->chip_cost_);
  swap(type_, other->type_);
  swap(priority_, other->priority_);
  swap(attack_attr_, other->attack_attr_);
  swap(cd_, other->cd_);
  swap(product_, other->product_);
  swap(attack_range_, other->attack_range_);
  swap(special_effect_, other->special_effect_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigSkill::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFightRandomGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFightRandomGroup::kIdFieldNumber;
const int ConfigFightRandomGroup::kGroupidFieldNumber;
const int ConfigFightRandomGroup::kTypeFieldNumber;
const int ConfigFightRandomGroup::kIndexFieldNumber;
const int ConfigFightRandomGroup::kTypeidFieldNumber;
const int ConfigFightRandomGroup::kProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFightRandomGroup::ConfigFightRandomGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightRandomGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFightRandomGroup)
}
ConfigFightRandomGroup::ConfigFightRandomGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightRandomGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFightRandomGroup)
}
ConfigFightRandomGroup::ConfigFightRandomGroup(const ConfigFightRandomGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&id_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFightRandomGroup)
}

void ConfigFightRandomGroup::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&id_)) + sizeof(probability_));
}

ConfigFightRandomGroup::~ConfigFightRandomGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigFightRandomGroup)
  SharedDtor();
}

void ConfigFightRandomGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigFightRandomGroup::ArenaDtor(void* object) {
  ConfigFightRandomGroup* _this = reinterpret_cast< ConfigFightRandomGroup* >(object);
  (void)_this;
}
void ConfigFightRandomGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFightRandomGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFightRandomGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFightRandomGroup& ConfigFightRandomGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightRandomGroup.base);
  return *internal_default_instance();
}


void ConfigFightRandomGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFightRandomGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_) -
        reinterpret_cast<char*>(&id_)) + sizeof(probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFightRandomGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFightRandomGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typeid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float probability = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFightRandomGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFightRandomGroup)
  return false;
#undef DO_
}

void ConfigFightRandomGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFightRandomGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // required int32 typeid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->typeid_(), output);
  }

  // required float probability = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFightRandomGroup)
}

::google::protobuf::uint8* ConfigFightRandomGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFightRandomGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // required int32 typeid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->typeid_(), target);
  }

  // required float probability = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFightRandomGroup)
  return target;
}

size_t ConfigFightRandomGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFightRandomGroup)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_groupid()) {
    // required int32 groupid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_index()) {
    // required int32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_typeid_()) {
    // required int32 typeid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  if (has_probability()) {
    // required float probability = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ConfigFightRandomGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFightRandomGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 groupid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 typeid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());

    // required float probability = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFightRandomGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFightRandomGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFightRandomGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFightRandomGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFightRandomGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFightRandomGroup)
    MergeFrom(*source);
  }
}

void ConfigFightRandomGroup::MergeFrom(const ConfigFightRandomGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFightRandomGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000020u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFightRandomGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFightRandomGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFightRandomGroup::CopyFrom(const ConfigFightRandomGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFightRandomGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFightRandomGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigFightRandomGroup::Swap(ConfigFightRandomGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFightRandomGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFightRandomGroup::UnsafeArenaSwap(ConfigFightRandomGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFightRandomGroup::InternalSwap(ConfigFightRandomGroup* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(groupid_, other->groupid_);
  swap(type_, other->type_);
  swap(index_, other->index_);
  swap(typeid__, other->typeid__);
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFightRandomGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigNpcFight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigNpcFight::kIdFieldNumber;
const int ConfigNpcFight::kModelIdFieldNumber;
const int ConfigNpcFight::kMoveSpeedFieldNumber;
const int ConfigNpcFight::kEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigNpcFight::ConfigNpcFight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigNpcFight.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigNpcFight)
}
ConfigNpcFight::ConfigNpcFight(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigNpcFight.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigNpcFight)
}
ConfigNpcFight::ConfigNpcFight(const ConfigNpcFight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_effect()) {
    effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effect(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_speed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(move_speed_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigNpcFight)
}

void ConfigNpcFight::SharedCtor() {
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_speed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(move_speed_));
}

ConfigNpcFight::~ConfigNpcFight() {
  // @@protoc_insertion_point(destructor:db.ConfigNpcFight)
  SharedDtor();
}

void ConfigNpcFight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigNpcFight::ArenaDtor(void* object) {
  ConfigNpcFight* _this = reinterpret_cast< ConfigNpcFight* >(object);
  (void)_this;
}
void ConfigNpcFight::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigNpcFight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigNpcFight::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigNpcFight& ConfigNpcFight::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigNpcFight.base);
  return *internal_default_instance();
}


void ConfigNpcFight::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigNpcFight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    effect_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&move_speed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(move_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigNpcFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigNpcFight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 model_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_model_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 move_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_move_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes effect = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigNpcFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigNpcFight)
  return false;
#undef DO_
}

void ConfigNpcFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigNpcFight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint64 model_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->model_id(), output);
  }

  // required int32 move_speed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->move_speed(), output);
  }

  // required bytes effect = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->effect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigNpcFight)
}

::google::protobuf::uint8* ConfigNpcFight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigNpcFight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint64 model_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->model_id(), target);
  }

  // required int32 move_speed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->move_speed(), target);
  }

  // required bytes effect = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->effect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigNpcFight)
  return target;
}

size_t ConfigNpcFight::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigNpcFight)
  size_t total_size = 0;

  if (has_effect()) {
    // required bytes effect = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->effect());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_model_id()) {
    // required uint64 model_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->model_id());
  }

  if (has_move_speed()) {
    // required int32 move_speed = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_speed());
  }

  return total_size;
}
size_t ConfigNpcFight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigNpcFight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes effect = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->effect());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 model_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->model_id());

    // required int32 move_speed = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_speed());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigNpcFight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigNpcFight)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigNpcFight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigNpcFight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigNpcFight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigNpcFight)
    MergeFrom(*source);
  }
}

void ConfigNpcFight::MergeFrom(const ConfigNpcFight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigNpcFight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_effect(from.effect());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      move_speed_ = from.move_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigNpcFight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigNpcFight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNpcFight::CopyFrom(const ConfigNpcFight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigNpcFight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNpcFight::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigNpcFight::Swap(ConfigNpcFight* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigNpcFight* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigNpcFight::UnsafeArenaSwap(ConfigNpcFight* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigNpcFight::InternalSwap(ConfigNpcFight* other) {
  using std::swap;
  effect_.Swap(&other->effect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(model_id_, other->model_id_);
  swap(move_speed_, other->move_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigNpcFight::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPvePlayerDrop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPvePlayerDrop::kIdFieldNumber;
const int ConfigPvePlayerDrop::kFacilityFieldNumber;
const int ConfigPvePlayerDrop::kDropFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPvePlayerDrop::ConfigPvePlayerDrop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigPvePlayerDrop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPvePlayerDrop)
}
ConfigPvePlayerDrop::ConfigPvePlayerDrop(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPvePlayerDrop.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPvePlayerDrop)
}
ConfigPvePlayerDrop::ConfigPvePlayerDrop(const ConfigPvePlayerDrop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop()) {
    drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&facility_) -
    reinterpret_cast<char*>(&id_)) + sizeof(facility_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigPvePlayerDrop)
}

void ConfigPvePlayerDrop::SharedCtor() {
  drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&facility_) -
      reinterpret_cast<char*>(&id_)) + sizeof(facility_));
}

ConfigPvePlayerDrop::~ConfigPvePlayerDrop() {
  // @@protoc_insertion_point(destructor:db.ConfigPvePlayerDrop)
  SharedDtor();
}

void ConfigPvePlayerDrop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  drop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigPvePlayerDrop::ArenaDtor(void* object) {
  ConfigPvePlayerDrop* _this = reinterpret_cast< ConfigPvePlayerDrop* >(object);
  (void)_this;
}
void ConfigPvePlayerDrop::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPvePlayerDrop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPvePlayerDrop::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPvePlayerDrop& ConfigPvePlayerDrop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPvePlayerDrop.base);
  return *internal_default_instance();
}


void ConfigPvePlayerDrop::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPvePlayerDrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    drop_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&facility_) -
        reinterpret_cast<char*>(&id_)) + sizeof(facility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPvePlayerDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPvePlayerDrop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 facility = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_facility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPvePlayerDrop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPvePlayerDrop)
  return false;
#undef DO_
}

void ConfigPvePlayerDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPvePlayerDrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint64 facility = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->facility(), output);
  }

  // required bytes drop = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->drop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPvePlayerDrop)
}

::google::protobuf::uint8* ConfigPvePlayerDrop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPvePlayerDrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint64 facility = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->facility(), target);
  }

  // required bytes drop = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->drop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPvePlayerDrop)
  return target;
}

size_t ConfigPvePlayerDrop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigPvePlayerDrop)
  size_t total_size = 0;

  if (has_drop()) {
    // required bytes drop = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_facility()) {
    // required uint64 facility = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->facility());
  }

  return total_size;
}
size_t ConfigPvePlayerDrop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPvePlayerDrop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes drop = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 facility = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->facility());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPvePlayerDrop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPvePlayerDrop)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPvePlayerDrop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPvePlayerDrop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPvePlayerDrop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPvePlayerDrop)
    MergeFrom(*source);
  }
}

void ConfigPvePlayerDrop::MergeFrom(const ConfigPvePlayerDrop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPvePlayerDrop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_drop(from.drop());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      facility_ = from.facility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigPvePlayerDrop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPvePlayerDrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPvePlayerDrop::CopyFrom(const ConfigPvePlayerDrop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPvePlayerDrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPvePlayerDrop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigPvePlayerDrop::Swap(ConfigPvePlayerDrop* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPvePlayerDrop* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPvePlayerDrop::UnsafeArenaSwap(ConfigPvePlayerDrop* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPvePlayerDrop::InternalSwap(ConfigPvePlayerDrop* other) {
  using std::swap;
  drop_.Swap(&other->drop_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(facility_, other->facility_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPvePlayerDrop::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCardTalent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCardTalent::kIdFieldNumber;
const int ConfigCardTalent::kLevelFieldNumber;
const int ConfigCardTalent::kNameFieldNumber;
const int ConfigCardTalent::kSkillIdFieldNumber;
const int ConfigCardTalent::kFarmSkillIdFieldNumber;
const int ConfigCardTalent::kEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCardTalent::ConfigCardTalent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardTalent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCardTalent)
}
ConfigCardTalent::ConfigCardTalent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardTalent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCardTalent)
}
ConfigCardTalent::ConfigCardTalent(const ConfigCardTalent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_effect()) {
    effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effect(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCardTalent)
}

void ConfigCardTalent::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
}

ConfigCardTalent::~ConfigCardTalent() {
  // @@protoc_insertion_point(destructor:db.ConfigCardTalent)
  SharedDtor();
}

void ConfigCardTalent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCardTalent::ArenaDtor(void* object) {
  ConfigCardTalent* _this = reinterpret_cast< ConfigCardTalent* >(object);
  (void)_this;
}
void ConfigCardTalent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCardTalent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCardTalent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCardTalent& ConfigCardTalent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardTalent.base);
  return *internal_default_instance();
}


void ConfigCardTalent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCardTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      effect_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&id_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCardTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCardTalent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 skill_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_skill_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 farm_skill_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_farm_skill_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &farm_skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes effect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCardTalent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCardTalent)
  return false;
#undef DO_
}

void ConfigCardTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCardTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required uint64 skill_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->skill_id(), output);
  }

  // required uint64 farm_skill_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->farm_skill_id(), output);
  }

  // required bytes effect = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->effect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCardTalent)
}

::google::protobuf::uint8* ConfigCardTalent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCardTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint64 skill_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->skill_id(), target);
  }

  // required uint64 farm_skill_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->farm_skill_id(), target);
  }

  // required bytes effect = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->effect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCardTalent)
  return target;
}

size_t ConfigCardTalent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCardTalent)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_effect()) {
    // required bytes effect = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->effect());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_skill_id()) {
    // required uint64 skill_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->skill_id());
  }

  if (has_farm_skill_id()) {
    // required uint64 farm_skill_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->farm_skill_id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t ConfigCardTalent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCardTalent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes effect = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->effect());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 skill_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->skill_id());

    // required uint64 farm_skill_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->farm_skill_id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCardTalent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCardTalent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCardTalent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCardTalent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCardTalent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCardTalent)
    MergeFrom(*source);
  }
}

void ConfigCardTalent::MergeFrom(const ConfigCardTalent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCardTalent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_effect(from.effect());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      skill_id_ = from.skill_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      farm_skill_id_ = from.farm_skill_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCardTalent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCardTalent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCardTalent::CopyFrom(const ConfigCardTalent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCardTalent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCardTalent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigCardTalent::Swap(ConfigCardTalent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCardTalent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCardTalent::UnsafeArenaSwap(ConfigCardTalent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCardTalent::InternalSwap(ConfigCardTalent* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effect_.Swap(&other->effect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(skill_id_, other->skill_id_);
  swap(farm_skill_id_, other->farm_skill_id_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCardTalent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigShoppingVitality::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigShoppingVitality::kIdFieldNumber;
const int ConfigShoppingVitality::kPriceFieldNumber;
const int ConfigShoppingVitality::kGetVitalityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigShoppingVitality::ConfigShoppingVitality()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigShoppingVitality.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigShoppingVitality)
}
ConfigShoppingVitality::ConfigShoppingVitality(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigShoppingVitality.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigShoppingVitality)
}
ConfigShoppingVitality::ConfigShoppingVitality(const ConfigShoppingVitality& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_vitality_) -
    reinterpret_cast<char*>(&id_)) + sizeof(get_vitality_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigShoppingVitality)
}

void ConfigShoppingVitality::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_vitality_) -
      reinterpret_cast<char*>(&id_)) + sizeof(get_vitality_));
}

ConfigShoppingVitality::~ConfigShoppingVitality() {
  // @@protoc_insertion_point(destructor:db.ConfigShoppingVitality)
  SharedDtor();
}

void ConfigShoppingVitality::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigShoppingVitality::ArenaDtor(void* object) {
  ConfigShoppingVitality* _this = reinterpret_cast< ConfigShoppingVitality* >(object);
  (void)_this;
}
void ConfigShoppingVitality::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigShoppingVitality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigShoppingVitality::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigShoppingVitality& ConfigShoppingVitality::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigShoppingVitality.base);
  return *internal_default_instance();
}


void ConfigShoppingVitality::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigShoppingVitality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&get_vitality_) -
        reinterpret_cast<char*>(&id_)) + sizeof(get_vitality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigShoppingVitality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigShoppingVitality)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 get_vitality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_get_vitality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_vitality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigShoppingVitality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigShoppingVitality)
  return false;
#undef DO_
}

void ConfigShoppingVitality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigShoppingVitality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // required int32 get_vitality = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->get_vitality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigShoppingVitality)
}

::google::protobuf::uint8* ConfigShoppingVitality::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigShoppingVitality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // required int32 get_vitality = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->get_vitality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigShoppingVitality)
  return target;
}

size_t ConfigShoppingVitality::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigShoppingVitality)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_price()) {
    // required int32 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  if (has_get_vitality()) {
    // required int32 get_vitality = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_vitality());
  }

  return total_size;
}
size_t ConfigShoppingVitality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigShoppingVitality)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());

    // required int32 get_vitality = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_vitality());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigShoppingVitality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigShoppingVitality)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigShoppingVitality* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigShoppingVitality>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigShoppingVitality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigShoppingVitality)
    MergeFrom(*source);
  }
}

void ConfigShoppingVitality::MergeFrom(const ConfigShoppingVitality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigShoppingVitality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      get_vitality_ = from.get_vitality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigShoppingVitality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigShoppingVitality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigShoppingVitality::CopyFrom(const ConfigShoppingVitality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigShoppingVitality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigShoppingVitality::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigShoppingVitality::Swap(ConfigShoppingVitality* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigShoppingVitality* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigShoppingVitality::UnsafeArenaSwap(ConfigShoppingVitality* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigShoppingVitality::InternalSwap(ConfigShoppingVitality* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(price_, other->price_);
  swap(get_vitality_, other->get_vitality_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigShoppingVitality::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigRankingReward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRankingReward::kIdFieldNumber;
const int ConfigRankingReward::kRankingFieldNumber;
const int ConfigRankingReward::kDivisionFieldNumber;
const int ConfigRankingReward::kDailyRewardFieldNumber;
const int ConfigRankingReward::kWeeklyRewardFieldNumber;
const int ConfigRankingReward::kMonthlyRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRankingReward::ConfigRankingReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingReward.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigRankingReward)
}
ConfigRankingReward::ConfigRankingReward(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingReward.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigRankingReward)
}
ConfigRankingReward::ConfigRankingReward(const ConfigRankingReward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ranking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ranking()) {
    ranking_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ranking(),
      GetArenaNoVirtual());
  }
  daily_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_daily_reward()) {
    daily_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.daily_reward(),
      GetArenaNoVirtual());
  }
  weekly_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weekly_reward()) {
    weekly_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weekly_reward(),
      GetArenaNoVirtual());
  }
  monthly_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_monthly_reward()) {
    monthly_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monthly_reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&division_) -
    reinterpret_cast<char*>(&id_)) + sizeof(division_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigRankingReward)
}

void ConfigRankingReward::SharedCtor() {
  ranking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  daily_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weekly_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monthly_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&division_) -
      reinterpret_cast<char*>(&id_)) + sizeof(division_));
}

ConfigRankingReward::~ConfigRankingReward() {
  // @@protoc_insertion_point(destructor:db.ConfigRankingReward)
  SharedDtor();
}

void ConfigRankingReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  ranking_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  daily_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weekly_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monthly_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigRankingReward::ArenaDtor(void* object) {
  ConfigRankingReward* _this = reinterpret_cast< ConfigRankingReward* >(object);
  (void)_this;
}
void ConfigRankingReward::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigRankingReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigRankingReward::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigRankingReward& ConfigRankingReward::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingReward.base);
  return *internal_default_instance();
}


void ConfigRankingReward::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigRankingReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ranking_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      daily_reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      weekly_reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      monthly_reward_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&division_) -
        reinterpret_cast<char*>(&id_)) + sizeof(division_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigRankingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigRankingReward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ranking = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ranking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 division = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_division();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &division_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes daily_reward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_daily_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes weekly_reward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weekly_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes monthly_reward = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_monthly_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigRankingReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigRankingReward)
  return false;
#undef DO_
}

void ConfigRankingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigRankingReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes ranking = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ranking(), output);
  }

  // required int32 division = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->division(), output);
  }

  // required bytes daily_reward = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->daily_reward(), output);
  }

  // required bytes weekly_reward = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->weekly_reward(), output);
  }

  // required bytes monthly_reward = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->monthly_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigRankingReward)
}

::google::protobuf::uint8* ConfigRankingReward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigRankingReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes ranking = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ranking(), target);
  }

  // required int32 division = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->division(), target);
  }

  // required bytes daily_reward = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->daily_reward(), target);
  }

  // required bytes weekly_reward = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->weekly_reward(), target);
  }

  // required bytes monthly_reward = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->monthly_reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigRankingReward)
  return target;
}

size_t ConfigRankingReward::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigRankingReward)
  size_t total_size = 0;

  if (has_ranking()) {
    // required bytes ranking = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ranking());
  }

  if (has_daily_reward()) {
    // required bytes daily_reward = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->daily_reward());
  }

  if (has_weekly_reward()) {
    // required bytes weekly_reward = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->weekly_reward());
  }

  if (has_monthly_reward()) {
    // required bytes monthly_reward = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monthly_reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_division()) {
    // required int32 division = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->division());
  }

  return total_size;
}
size_t ConfigRankingReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigRankingReward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes ranking = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ranking());

    // required bytes daily_reward = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->daily_reward());

    // required bytes weekly_reward = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->weekly_reward());

    // required bytes monthly_reward = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monthly_reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 division = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->division());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRankingReward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigRankingReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRankingReward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRankingReward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigRankingReward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigRankingReward)
    MergeFrom(*source);
  }
}

void ConfigRankingReward::MergeFrom(const ConfigRankingReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigRankingReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_ranking(from.ranking());
    }
    if (cached_has_bits & 0x00000002u) {
      set_daily_reward(from.daily_reward());
    }
    if (cached_has_bits & 0x00000004u) {
      set_weekly_reward(from.weekly_reward());
    }
    if (cached_has_bits & 0x00000008u) {
      set_monthly_reward(from.monthly_reward());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      division_ = from.division_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigRankingReward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigRankingReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRankingReward::CopyFrom(const ConfigRankingReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigRankingReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRankingReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigRankingReward::Swap(ConfigRankingReward* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigRankingReward* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigRankingReward::UnsafeArenaSwap(ConfigRankingReward* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigRankingReward::InternalSwap(ConfigRankingReward* other) {
  using std::swap;
  ranking_.Swap(&other->ranking_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  daily_reward_.Swap(&other->daily_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  weekly_reward_.Swap(&other->weekly_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  monthly_reward_.Swap(&other->monthly_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(division_, other->division_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigRankingReward::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFightElementConnect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFightElementConnect::kIdFieldNumber;
const int ConfigFightElementConnect::kTypeFieldNumber;
const int ConfigFightElementConnect::kConnectElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFightElementConnect::ConfigFightElementConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightElementConnect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFightElementConnect)
}
ConfigFightElementConnect::ConfigFightElementConnect(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightElementConnect.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFightElementConnect)
}
ConfigFightElementConnect::ConfigFightElementConnect(const ConfigFightElementConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect_element()) {
    connect_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_element(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFightElementConnect)
}

void ConfigFightElementConnect::SharedCtor() {
  connect_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

ConfigFightElementConnect::~ConfigFightElementConnect() {
  // @@protoc_insertion_point(destructor:db.ConfigFightElementConnect)
  SharedDtor();
}

void ConfigFightElementConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  connect_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFightElementConnect::ArenaDtor(void* object) {
  ConfigFightElementConnect* _this = reinterpret_cast< ConfigFightElementConnect* >(object);
  (void)_this;
}
void ConfigFightElementConnect::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFightElementConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFightElementConnect::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFightElementConnect& ConfigFightElementConnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFightElementConnect.base);
  return *internal_default_instance();
}


void ConfigFightElementConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFightElementConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connect_element_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFightElementConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFightElementConnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes connect_element = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connect_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFightElementConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFightElementConnect)
  return false;
#undef DO_
}

void ConfigFightElementConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFightElementConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes connect_element = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->connect_element(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFightElementConnect)
}

::google::protobuf::uint8* ConfigFightElementConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFightElementConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes connect_element = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->connect_element(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFightElementConnect)
  return target;
}

size_t ConfigFightElementConnect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFightElementConnect)
  size_t total_size = 0;

  if (has_connect_element()) {
    // required bytes connect_element = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->connect_element());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ConfigFightElementConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFightElementConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes connect_element = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->connect_element());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFightElementConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFightElementConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFightElementConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFightElementConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFightElementConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFightElementConnect)
    MergeFrom(*source);
  }
}

void ConfigFightElementConnect::MergeFrom(const ConfigFightElementConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFightElementConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_connect_element(from.connect_element());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFightElementConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFightElementConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFightElementConnect::CopyFrom(const ConfigFightElementConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFightElementConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFightElementConnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigFightElementConnect::Swap(ConfigFightElementConnect* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFightElementConnect* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFightElementConnect::UnsafeArenaSwap(ConfigFightElementConnect* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFightElementConnect::InternalSwap(ConfigFightElementConnect* other) {
  using std::swap;
  connect_element_.Swap(&other->connect_element_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFightElementConnect::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigWildIslandLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigWildIslandLevel::kIdFieldNumber;
const int ConfigWildIslandLevel::kIslandidFieldNumber;
const int ConfigWildIslandLevel::kNameFieldNumber;
const int ConfigWildIslandLevel::kRankFieldNumber;
const int ConfigWildIslandLevel::kLevelFieldNumber;
const int ConfigWildIslandLevel::kConditionFieldNumber;
const int ConfigWildIslandLevel::kVitalityCostFieldNumber;
const int ConfigWildIslandLevel::kWorkerMaxFieldNumber;
const int ConfigWildIslandLevel::kProduceAddFieldNumber;
const int ConfigWildIslandLevel::kRepairCostFieldNumber;
const int ConfigWildIslandLevel::kModelIdFieldNumber;
const int ConfigWildIslandLevel::kMapModelFieldNumber;
const int ConfigWildIslandLevel::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigWildIslandLevel::ConfigWildIslandLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigWildIslandLevel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigWildIslandLevel)
}
ConfigWildIslandLevel::ConfigWildIslandLevel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigWildIslandLevel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigWildIslandLevel)
}
ConfigWildIslandLevel::ConfigWildIslandLevel(const ConfigWildIslandLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  repair_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_repair_cost()) {
    repair_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repair_cost(),
      GetArenaNoVirtual());
  }
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_model_) -
    reinterpret_cast<char*>(&id_)) + sizeof(map_model_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigWildIslandLevel)
}

void ConfigWildIslandLevel::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repair_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_model_) -
      reinterpret_cast<char*>(&id_)) + sizeof(map_model_));
}

ConfigWildIslandLevel::~ConfigWildIslandLevel() {
  // @@protoc_insertion_point(destructor:db.ConfigWildIslandLevel)
  SharedDtor();
}

void ConfigWildIslandLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repair_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigWildIslandLevel::ArenaDtor(void* object) {
  ConfigWildIslandLevel* _this = reinterpret_cast< ConfigWildIslandLevel* >(object);
  (void)_this;
}
void ConfigWildIslandLevel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigWildIslandLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigWildIslandLevel::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigWildIslandLevel& ConfigWildIslandLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigWildIslandLevel.base);
  return *internal_default_instance();
}


void ConfigWildIslandLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigWildIslandLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      repair_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      reward_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&condition_) -
        reinterpret_cast<char*>(&id_)) + sizeof(condition_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&vitality_cost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_model_) -
        reinterpret_cast<char*>(&vitality_cost_)) + sizeof(map_model_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigWildIslandLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigWildIslandLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 islandid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_islandid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &islandid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 condition = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_condition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vitality_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_vitality_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vitality_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 worker_max = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_worker_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 produce_add = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_produce_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &produce_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes repair_cost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_repair_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 model_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_model_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 map_model = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_map_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigWildIslandLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigWildIslandLevel)
  return false;
#undef DO_
}

void ConfigWildIslandLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigWildIslandLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int64 islandid = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->islandid(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required int32 rank = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 condition = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->condition(), output);
  }

  // required int32 vitality_cost = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vitality_cost(), output);
  }

  // required int32 worker_max = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->worker_max(), output);
  }

  // required int32 produce_add = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->produce_add(), output);
  }

  // required bytes repair_cost = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->repair_cost(), output);
  }

  // required int32 model_id = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->model_id(), output);
  }

  // required int32 map_model = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->map_model(), output);
  }

  // required bytes reward = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigWildIslandLevel)
}

::google::protobuf::uint8* ConfigWildIslandLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigWildIslandLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int64 islandid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->islandid(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 rank = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required int32 condition = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->condition(), target);
  }

  // required int32 vitality_cost = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vitality_cost(), target);
  }

  // required int32 worker_max = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->worker_max(), target);
  }

  // required int32 produce_add = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->produce_add(), target);
  }

  // required bytes repair_cost = 10;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->repair_cost(), target);
  }

  // required int32 model_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->model_id(), target);
  }

  // required int32 map_model = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->map_model(), target);
  }

  // required bytes reward = 13;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigWildIslandLevel)
  return target;
}

size_t ConfigWildIslandLevel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigWildIslandLevel)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_repair_cost()) {
    // required bytes repair_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->repair_cost());
  }

  if (has_reward()) {
    // required bytes reward = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_islandid()) {
    // required int64 islandid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->islandid());
  }

  if (has_rank()) {
    // required int32 rank = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  if (has_level()) {
    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_condition()) {
    // required int32 condition = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition());
  }

  if (has_vitality_cost()) {
    // required int32 vitality_cost = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vitality_cost());
  }

  if (has_worker_max()) {
    // required int32 worker_max = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_max());
  }

  if (has_produce_add()) {
    // required int32 produce_add = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->produce_add());
  }

  if (has_model_id()) {
    // required int32 model_id = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  if (has_map_model()) {
    // required int32 map_model = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_model());
  }

  return total_size;
}
size_t ConfigWildIslandLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigWildIslandLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes repair_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->repair_cost());

    // required bytes reward = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int64 islandid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->islandid());

    // required int32 rank = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());

    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 condition = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition());

    // required int32 vitality_cost = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vitality_cost());

    // required int32 worker_max = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_max());

    // required int32 produce_add = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->produce_add());

    // required int32 model_id = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());

    // required int32 map_model = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_model());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigWildIslandLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigWildIslandLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigWildIslandLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigWildIslandLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigWildIslandLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigWildIslandLevel)
    MergeFrom(*source);
  }
}

void ConfigWildIslandLevel::MergeFrom(const ConfigWildIslandLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigWildIslandLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_repair_cost(from.repair_cost());
    }
    if (cached_has_bits & 0x00000004u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      islandid_ = from.islandid_;
    }
    if (cached_has_bits & 0x00000020u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000040u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000080u) {
      condition_ = from.condition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      vitality_cost_ = from.vitality_cost_;
    }
    if (cached_has_bits & 0x00000200u) {
      worker_max_ = from.worker_max_;
    }
    if (cached_has_bits & 0x00000400u) {
      produce_add_ = from.produce_add_;
    }
    if (cached_has_bits & 0x00000800u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      map_model_ = from.map_model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigWildIslandLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigWildIslandLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigWildIslandLevel::CopyFrom(const ConfigWildIslandLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigWildIslandLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigWildIslandLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void ConfigWildIslandLevel::Swap(ConfigWildIslandLevel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigWildIslandLevel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigWildIslandLevel::UnsafeArenaSwap(ConfigWildIslandLevel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigWildIslandLevel::InternalSwap(ConfigWildIslandLevel* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  repair_cost_.Swap(&other->repair_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(islandid_, other->islandid_);
  swap(rank_, other->rank_);
  swap(level_, other->level_);
  swap(condition_, other->condition_);
  swap(vitality_cost_, other->vitality_cost_);
  swap(worker_max_, other->worker_max_);
  swap(produce_add_, other->produce_add_);
  swap(model_id_, other->model_id_);
  swap(map_model_, other->map_model_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigWildIslandLevel::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigBusinessman::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigBusinessman::kIdFieldNumber;
const int ConfigBusinessman::kNameFieldNumber;
const int ConfigBusinessman::kTypeFieldNumber;
const int ConfigBusinessman::kExchangeNeed1FieldNumber;
const int ConfigBusinessman::kExchangeReward1FieldNumber;
const int ConfigBusinessman::kExchangeNeed2FieldNumber;
const int ConfigBusinessman::kExchangeReward2FieldNumber;
const int ConfigBusinessman::kExchangeNeed3FieldNumber;
const int ConfigBusinessman::kExchangeReward3FieldNumber;
const int ConfigBusinessman::kGoodsNumFieldNumber;
const int ConfigBusinessman::kGoodsFieldNumber;
const int ConfigBusinessman::kDiscountProbabilityFieldNumber;
const int ConfigBusinessman::kDiscountNumFieldNumber;
const int ConfigBusinessman::kPriceFluctuationFieldNumber;
const int ConfigBusinessman::kBargainFieldNumber;
const int ConfigBusinessman::kDurationFieldNumber;
const int ConfigBusinessman::kGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigBusinessman::ConfigBusinessman()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigBusinessman.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigBusinessman)
}
ConfigBusinessman::ConfigBusinessman(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBusinessman.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigBusinessman)
}
ConfigBusinessman::ConfigBusinessman(const ConfigBusinessman& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  exchange_need1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_need1()) {
    exchange_need1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_need1(),
      GetArenaNoVirtual());
  }
  exchange_reward1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_reward1()) {
    exchange_reward1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_reward1(),
      GetArenaNoVirtual());
  }
  exchange_need2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_need2()) {
    exchange_need2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_need2(),
      GetArenaNoVirtual());
  }
  exchange_reward2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_reward2()) {
    exchange_reward2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_reward2(),
      GetArenaNoVirtual());
  }
  exchange_need3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_need3()) {
    exchange_need3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_need3(),
      GetArenaNoVirtual());
  }
  exchange_reward3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_reward3()) {
    exchange_reward3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_reward3(),
      GetArenaNoVirtual());
  }
  goods_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_goods_num()) {
    goods_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.goods_num(),
      GetArenaNoVirtual());
  }
  goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_goods()) {
    goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.goods(),
      GetArenaNoVirtual());
  }
  discount_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_discount_num()) {
    discount_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discount_num(),
      GetArenaNoVirtual());
  }
  price_fluctuation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price_fluctuation()) {
    price_fluctuation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_fluctuation(),
      GetArenaNoVirtual());
  }
  bargain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bargain()) {
    bargain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bargain(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigBusinessman)
}

void ConfigBusinessman::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_need1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_reward1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_need2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_reward2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_need3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_reward3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goods_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discount_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_fluctuation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bargain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(groupid_));
}

ConfigBusinessman::~ConfigBusinessman() {
  // @@protoc_insertion_point(destructor:db.ConfigBusinessman)
  SharedDtor();
}

void ConfigBusinessman::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_need1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_reward1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_need2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_reward2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_need3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_reward3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goods_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goods_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discount_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_fluctuation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bargain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigBusinessman::ArenaDtor(void* object) {
  ConfigBusinessman* _this = reinterpret_cast< ConfigBusinessman* >(object);
  (void)_this;
}
void ConfigBusinessman::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigBusinessman::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigBusinessman::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigBusinessman& ConfigBusinessman::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBusinessman.base);
  return *internal_default_instance();
}


void ConfigBusinessman::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigBusinessman)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_need1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      exchange_reward1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      exchange_need2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      exchange_reward2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      exchange_need3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      exchange_reward3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      goods_num_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      goods_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      discount_num_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      price_fluctuation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      bargain_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&id_)) + sizeof(duration_));
  }
  groupid_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigBusinessman::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigBusinessman)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange_need1 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_need1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange_reward1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_reward1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange_need2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_need2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange_reward2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_reward2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange_need3 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_need3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange_reward3 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_reward3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes goods_num = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_goods_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes goods = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_goods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float discount_probability = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          set_has_discount_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &discount_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes discount_num = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_discount_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes price_fluctuation = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_price_fluctuation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes bargain = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bargain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 duration = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 groupid = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigBusinessman)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigBusinessman)
  return false;
#undef DO_
}

void ConfigBusinessman::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigBusinessman)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required bytes exchange_need1 = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->exchange_need1(), output);
  }

  // required bytes exchange_reward1 = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->exchange_reward1(), output);
  }

  // required bytes exchange_need2 = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->exchange_need2(), output);
  }

  // required bytes exchange_reward2 = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->exchange_reward2(), output);
  }

  // required bytes exchange_need3 = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->exchange_need3(), output);
  }

  // required bytes exchange_reward3 = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->exchange_reward3(), output);
  }

  // required bytes goods_num = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->goods_num(), output);
  }

  // required bytes goods = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->goods(), output);
  }

  // required float discount_probability = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->discount_probability(), output);
  }

  // required bytes discount_num = 24;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->discount_num(), output);
  }

  // required bytes price_fluctuation = 25;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->price_fluctuation(), output);
  }

  // required bytes bargain = 26;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->bargain(), output);
  }

  // required int32 duration = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->duration(), output);
  }

  // required int64 groupid = 28;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigBusinessman)
}

::google::protobuf::uint8* ConfigBusinessman::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigBusinessman)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required bytes exchange_need1 = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->exchange_need1(), target);
  }

  // required bytes exchange_reward1 = 12;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->exchange_reward1(), target);
  }

  // required bytes exchange_need2 = 13;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->exchange_need2(), target);
  }

  // required bytes exchange_reward2 = 14;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->exchange_reward2(), target);
  }

  // required bytes exchange_need3 = 15;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->exchange_need3(), target);
  }

  // required bytes exchange_reward3 = 16;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->exchange_reward3(), target);
  }

  // required bytes goods_num = 21;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->goods_num(), target);
  }

  // required bytes goods = 22;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->goods(), target);
  }

  // required float discount_probability = 23;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->discount_probability(), target);
  }

  // required bytes discount_num = 24;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->discount_num(), target);
  }

  // required bytes price_fluctuation = 25;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->price_fluctuation(), target);
  }

  // required bytes bargain = 26;
  if (cached_has_bits & 0x00000800u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->bargain(), target);
  }

  // required int32 duration = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->duration(), target);
  }

  // required int64 groupid = 28;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigBusinessman)
  return target;
}

size_t ConfigBusinessman::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigBusinessman)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_exchange_need1()) {
    // required bytes exchange_need1 = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_need1());
  }

  if (has_exchange_reward1()) {
    // required bytes exchange_reward1 = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_reward1());
  }

  if (has_exchange_need2()) {
    // required bytes exchange_need2 = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_need2());
  }

  if (has_exchange_reward2()) {
    // required bytes exchange_reward2 = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_reward2());
  }

  if (has_exchange_need3()) {
    // required bytes exchange_need3 = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_need3());
  }

  if (has_exchange_reward3()) {
    // required bytes exchange_reward3 = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_reward3());
  }

  if (has_goods_num()) {
    // required bytes goods_num = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->goods_num());
  }

  if (has_goods()) {
    // required bytes goods = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->goods());
  }

  if (has_discount_num()) {
    // required bytes discount_num = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->discount_num());
  }

  if (has_price_fluctuation()) {
    // required bytes price_fluctuation = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->price_fluctuation());
  }

  if (has_bargain()) {
    // required bytes bargain = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bargain());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_discount_probability()) {
    // required float discount_probability = 23;
    total_size += 2 + 4;
  }

  if (has_duration()) {
    // required int32 duration = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  if (has_groupid()) {
    // required int64 groupid = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());
  }

  return total_size;
}
size_t ConfigBusinessman::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigBusinessman)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0001ffff) ^ 0x0001ffff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes exchange_need1 = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_need1());

    // required bytes exchange_reward1 = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_reward1());

    // required bytes exchange_need2 = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_need2());

    // required bytes exchange_reward2 = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_reward2());

    // required bytes exchange_need3 = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_need3());

    // required bytes exchange_reward3 = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_reward3());

    // required bytes goods_num = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->goods_num());

    // required bytes goods = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->goods());

    // required bytes discount_num = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->discount_num());

    // required bytes price_fluctuation = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->price_fluctuation());

    // required bytes bargain = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bargain());

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required float discount_probability = 23;
    total_size += 2 + 4;

    // required int32 duration = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());

    // required int64 groupid = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigBusinessman::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigBusinessman)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigBusinessman* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigBusinessman>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigBusinessman)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigBusinessman)
    MergeFrom(*source);
  }
}

void ConfigBusinessman::MergeFrom(const ConfigBusinessman& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigBusinessman)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_exchange_need1(from.exchange_need1());
    }
    if (cached_has_bits & 0x00000004u) {
      set_exchange_reward1(from.exchange_reward1());
    }
    if (cached_has_bits & 0x00000008u) {
      set_exchange_need2(from.exchange_need2());
    }
    if (cached_has_bits & 0x00000010u) {
      set_exchange_reward2(from.exchange_reward2());
    }
    if (cached_has_bits & 0x00000020u) {
      set_exchange_need3(from.exchange_need3());
    }
    if (cached_has_bits & 0x00000040u) {
      set_exchange_reward3(from.exchange_reward3());
    }
    if (cached_has_bits & 0x00000080u) {
      set_goods_num(from.goods_num());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_goods(from.goods());
    }
    if (cached_has_bits & 0x00000200u) {
      set_discount_num(from.discount_num());
    }
    if (cached_has_bits & 0x00000400u) {
      set_price_fluctuation(from.price_fluctuation());
    }
    if (cached_has_bits & 0x00000800u) {
      set_bargain(from.bargain());
    }
    if (cached_has_bits & 0x00001000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00002000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00004000u) {
      discount_probability_ = from.discount_probability_;
    }
    if (cached_has_bits & 0x00008000u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_groupid(from.groupid());
  }
}

void ConfigBusinessman::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigBusinessman)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigBusinessman::CopyFrom(const ConfigBusinessman& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigBusinessman)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigBusinessman::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;
  return true;
}

void ConfigBusinessman::Swap(ConfigBusinessman* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigBusinessman* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigBusinessman::UnsafeArenaSwap(ConfigBusinessman* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigBusinessman::InternalSwap(ConfigBusinessman* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_need1_.Swap(&other->exchange_need1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_reward1_.Swap(&other->exchange_reward1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_need2_.Swap(&other->exchange_need2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_reward2_.Swap(&other->exchange_reward2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_need3_.Swap(&other->exchange_need3_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_reward3_.Swap(&other->exchange_reward3_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  goods_num_.Swap(&other->goods_num_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  goods_.Swap(&other->goods_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  discount_num_.Swap(&other->discount_num_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  price_fluctuation_.Swap(&other->price_fluctuation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bargain_.Swap(&other->bargain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(discount_probability_, other->discount_probability_);
  swap(duration_, other->duration_);
  swap(groupid_, other->groupid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigBusinessman::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigSkillRandom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSkillRandom::kIdFieldNumber;
const int ConfigSkillRandom::kTypeFieldNumber;
const int ConfigSkillRandom::kProfessionFieldNumber;
const int ConfigSkillRandom::kProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSkillRandom::ConfigSkillRandom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigSkillRandom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigSkillRandom)
}
ConfigSkillRandom::ConfigSkillRandom(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSkillRandom.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigSkillRandom)
}
ConfigSkillRandom::ConfigSkillRandom(const ConfigSkillRandom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  profession_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_profession()) {
    profession_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profession(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&id_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigSkillRandom)
}

void ConfigSkillRandom::SharedCtor() {
  profession_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&id_)) + sizeof(probability_));
}

ConfigSkillRandom::~ConfigSkillRandom() {
  // @@protoc_insertion_point(destructor:db.ConfigSkillRandom)
  SharedDtor();
}

void ConfigSkillRandom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  profession_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSkillRandom::ArenaDtor(void* object) {
  ConfigSkillRandom* _this = reinterpret_cast< ConfigSkillRandom* >(object);
  (void)_this;
}
void ConfigSkillRandom::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigSkillRandom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigSkillRandom::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigSkillRandom& ConfigSkillRandom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSkillRandom.base);
  return *internal_default_instance();
}


void ConfigSkillRandom::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigSkillRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    profession_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_) -
        reinterpret_cast<char*>(&id_)) + sizeof(probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigSkillRandom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigSkillRandom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes profession = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_profession()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigSkillRandom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigSkillRandom)
  return false;
#undef DO_
}

void ConfigSkillRandom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigSkillRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes profession = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->profession(), output);
  }

  // required float probability = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigSkillRandom)
}

::google::protobuf::uint8* ConfigSkillRandom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigSkillRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes profession = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->profession(), target);
  }

  // required float probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigSkillRandom)
  return target;
}

size_t ConfigSkillRandom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigSkillRandom)
  size_t total_size = 0;

  if (has_profession()) {
    // required bytes profession = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->profession());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_probability()) {
    // required float probability = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ConfigSkillRandom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigSkillRandom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes profession = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->profession());

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required float probability = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigSkillRandom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigSkillRandom)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigSkillRandom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigSkillRandom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigSkillRandom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigSkillRandom)
    MergeFrom(*source);
  }
}

void ConfigSkillRandom::MergeFrom(const ConfigSkillRandom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigSkillRandom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_profession(from.profession());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigSkillRandom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigSkillRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSkillRandom::CopyFrom(const ConfigSkillRandom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigSkillRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSkillRandom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigSkillRandom::Swap(ConfigSkillRandom* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigSkillRandom* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigSkillRandom::UnsafeArenaSwap(ConfigSkillRandom* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigSkillRandom::InternalSwap(ConfigSkillRandom* other) {
  using std::swap;
  profession_.Swap(&other->profession_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigSkillRandom::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigEquipAttributeWord::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigEquipAttributeWord::kIdFieldNumber;
const int ConfigEquipAttributeWord::kTypeFieldNumber;
const int ConfigEquipAttributeWord::kAttrIdFieldNumber;
const int ConfigEquipAttributeWord::kIntervalFieldNumber;
const int ConfigEquipAttributeWord::kFloatFieldNumber;
const int ConfigEquipAttributeWord::kPerfectValueFieldNumber;
const int ConfigEquipAttributeWord::kUnlockLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigEquipAttributeWord::ConfigEquipAttributeWord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipAttributeWord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigEquipAttributeWord)
}
ConfigEquipAttributeWord::ConfigEquipAttributeWord(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipAttributeWord.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigEquipAttributeWord)
}
ConfigEquipAttributeWord::ConfigEquipAttributeWord(const ConfigEquipAttributeWord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_interval()) {
    interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interval(),
      GetArenaNoVirtual());
  }
  float__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_float_()) {
    float__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.float_(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(unlock_level_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigEquipAttributeWord)
}

void ConfigEquipAttributeWord::SharedCtor() {
  interval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(unlock_level_));
}

ConfigEquipAttributeWord::~ConfigEquipAttributeWord() {
  // @@protoc_insertion_point(destructor:db.ConfigEquipAttributeWord)
  SharedDtor();
}

void ConfigEquipAttributeWord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  interval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigEquipAttributeWord::ArenaDtor(void* object) {
  ConfigEquipAttributeWord* _this = reinterpret_cast< ConfigEquipAttributeWord* >(object);
  (void)_this;
}
void ConfigEquipAttributeWord::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigEquipAttributeWord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigEquipAttributeWord::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigEquipAttributeWord& ConfigEquipAttributeWord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipAttributeWord.base);
  return *internal_default_instance();
}


void ConfigEquipAttributeWord::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigEquipAttributeWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      interval_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      float__.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unlock_level_) -
        reinterpret_cast<char*>(&id_)) + sizeof(unlock_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigEquipAttributeWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigEquipAttributeWord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 attr_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_attr_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes float = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_float_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float perfect_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_perfect_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &perfect_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 unlock_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_unlock_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigEquipAttributeWord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigEquipAttributeWord)
  return false;
#undef DO_
}

void ConfigEquipAttributeWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigEquipAttributeWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 attr_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attr_id(), output);
  }

  // required bytes interval = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->interval(), output);
  }

  // required bytes float = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->float_(), output);
  }

  // required float perfect_value = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->perfect_value(), output);
  }

  // required int32 unlock_level = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unlock_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigEquipAttributeWord)
}

::google::protobuf::uint8* ConfigEquipAttributeWord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigEquipAttributeWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 attr_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attr_id(), target);
  }

  // required bytes interval = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->interval(), target);
  }

  // required bytes float = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->float_(), target);
  }

  // required float perfect_value = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->perfect_value(), target);
  }

  // required int32 unlock_level = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unlock_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigEquipAttributeWord)
  return target;
}

size_t ConfigEquipAttributeWord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigEquipAttributeWord)
  size_t total_size = 0;

  if (has_interval()) {
    // required bytes interval = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->interval());
  }

  if (has_float_()) {
    // required bytes float = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->float_());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_attr_id()) {
    // required int32 attr_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attr_id());
  }

  if (has_perfect_value()) {
    // required float perfect_value = 6;
    total_size += 1 + 4;
  }

  if (has_unlock_level()) {
    // required int32 unlock_level = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unlock_level());
  }

  return total_size;
}
size_t ConfigEquipAttributeWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigEquipAttributeWord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes interval = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->interval());

    // required bytes float = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->float_());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 attr_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attr_id());

    // required float perfect_value = 6;
    total_size += 1 + 4;

    // required int32 unlock_level = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unlock_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigEquipAttributeWord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigEquipAttributeWord)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigEquipAttributeWord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigEquipAttributeWord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigEquipAttributeWord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigEquipAttributeWord)
    MergeFrom(*source);
  }
}

void ConfigEquipAttributeWord::MergeFrom(const ConfigEquipAttributeWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigEquipAttributeWord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_interval(from.interval());
    }
    if (cached_has_bits & 0x00000002u) {
      set_float_(from.float_());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      attr_id_ = from.attr_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      perfect_value_ = from.perfect_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      unlock_level_ = from.unlock_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigEquipAttributeWord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigEquipAttributeWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigEquipAttributeWord::CopyFrom(const ConfigEquipAttributeWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigEquipAttributeWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEquipAttributeWord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void ConfigEquipAttributeWord::Swap(ConfigEquipAttributeWord* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigEquipAttributeWord* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigEquipAttributeWord::UnsafeArenaSwap(ConfigEquipAttributeWord* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigEquipAttributeWord::InternalSwap(ConfigEquipAttributeWord* other) {
  using std::swap;
  interval_.Swap(&other->interval_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  float__.Swap(&other->float__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(attr_id_, other->attr_id_);
  swap(perfect_value_, other->perfect_value_);
  swap(unlock_level_, other->unlock_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigEquipAttributeWord::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigEquipRefineCost::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigEquipRefineCost::kStarFieldNumber;
const int ConfigEquipRefineCost::kCostFieldNumber;
const int ConfigEquipRefineCost::kSuccessProbabilityFieldNumber;
const int ConfigEquipRefineCost::kDiamondCostFieldNumber;
const int ConfigEquipRefineCost::kDiamondSuccessProbabilityFieldNumber;
const int ConfigEquipRefineCost::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigEquipRefineCost::ConfigEquipRefineCost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipRefineCost.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigEquipRefineCost)
}
ConfigEquipRefineCost::ConfigEquipRefineCost(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipRefineCost.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigEquipRefineCost)
}
ConfigEquipRefineCost::ConfigEquipRefineCost(const ConfigEquipRefineCost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  ::memcpy(&star_, &from.star_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&star_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigEquipRefineCost)
}

void ConfigEquipRefineCost::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&star_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&star_)) + sizeof(limit_));
}

ConfigEquipRefineCost::~ConfigEquipRefineCost() {
  // @@protoc_insertion_point(destructor:db.ConfigEquipRefineCost)
  SharedDtor();
}

void ConfigEquipRefineCost::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigEquipRefineCost::ArenaDtor(void* object) {
  ConfigEquipRefineCost* _this = reinterpret_cast< ConfigEquipRefineCost* >(object);
  (void)_this;
}
void ConfigEquipRefineCost::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigEquipRefineCost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigEquipRefineCost::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigEquipRefineCost& ConfigEquipRefineCost::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipRefineCost.base);
  return *internal_default_instance();
}


void ConfigEquipRefineCost::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigEquipRefineCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cost_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 62u) {
    ::memset(&star_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&star_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigEquipRefineCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigEquipRefineCost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 star = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float success_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_success_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &success_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 diamond_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_diamond_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float diamond_success_probability = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_diamond_success_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diamond_success_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigEquipRefineCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigEquipRefineCost)
  return false;
#undef DO_
}

void ConfigEquipRefineCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigEquipRefineCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 star = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->star(), output);
  }

  // required bytes cost = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cost(), output);
  }

  // required float success_probability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->success_probability(), output);
  }

  // required int32 diamond_cost = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->diamond_cost(), output);
  }

  // required float diamond_success_probability = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->diamond_success_probability(), output);
  }

  // required int32 limit = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigEquipRefineCost)
}

::google::protobuf::uint8* ConfigEquipRefineCost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigEquipRefineCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 star = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->star(), target);
  }

  // required bytes cost = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cost(), target);
  }

  // required float success_probability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->success_probability(), target);
  }

  // required int32 diamond_cost = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diamond_cost(), target);
  }

  // required float diamond_success_probability = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->diamond_success_probability(), target);
  }

  // required int32 limit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigEquipRefineCost)
  return target;
}

size_t ConfigEquipRefineCost::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigEquipRefineCost)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_star()) {
    // required int32 star = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_success_probability()) {
    // required float success_probability = 3;
    total_size += 1 + 4;
  }

  if (has_diamond_cost()) {
    // required int32 diamond_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond_cost());
  }

  if (has_diamond_success_probability()) {
    // required float diamond_success_probability = 5;
    total_size += 1 + 4;
  }

  if (has_limit()) {
    // required int32 limit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  return total_size;
}
size_t ConfigEquipRefineCost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigEquipRefineCost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required int32 star = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required float success_probability = 3;
    total_size += 1 + 4;

    // required int32 diamond_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond_cost());

    // required float diamond_success_probability = 5;
    total_size += 1 + 4;

    // required int32 limit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigEquipRefineCost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigEquipRefineCost)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigEquipRefineCost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigEquipRefineCost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigEquipRefineCost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigEquipRefineCost)
    MergeFrom(*source);
  }
}

void ConfigEquipRefineCost::MergeFrom(const ConfigEquipRefineCost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigEquipRefineCost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_probability_ = from.success_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      diamond_cost_ = from.diamond_cost_;
    }
    if (cached_has_bits & 0x00000010u) {
      diamond_success_probability_ = from.diamond_success_probability_;
    }
    if (cached_has_bits & 0x00000020u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigEquipRefineCost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigEquipRefineCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigEquipRefineCost::CopyFrom(const ConfigEquipRefineCost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigEquipRefineCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEquipRefineCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigEquipRefineCost::Swap(ConfigEquipRefineCost* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigEquipRefineCost* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigEquipRefineCost::UnsafeArenaSwap(ConfigEquipRefineCost* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigEquipRefineCost::InternalSwap(ConfigEquipRefineCost* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(star_, other->star_);
  swap(success_probability_, other->success_probability_);
  swap(diamond_cost_, other->diamond_cost_);
  swap(diamond_success_probability_, other->diamond_success_probability_);
  swap(limit_, other->limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigEquipRefineCost::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigEquipDecompose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigEquipDecompose::kStarFieldNumber;
const int ConfigEquipDecompose::kQualityFieldNumber;
const int ConfigEquipDecompose::kDecomposeGetFieldNumber;
const int ConfigEquipDecompose::kSkillInfluenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigEquipDecompose::ConfigEquipDecompose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipDecompose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigEquipDecompose)
}
ConfigEquipDecompose::ConfigEquipDecompose(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipDecompose.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigEquipDecompose)
}
ConfigEquipDecompose::ConfigEquipDecompose(const ConfigEquipDecompose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  decompose_get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_decompose_get()) {
    decompose_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decompose_get(),
      GetArenaNoVirtual());
  }
  skill_influence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skill_influence()) {
    skill_influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_influence(),
      GetArenaNoVirtual());
  }
  ::memcpy(&star_, &from.star_,
    static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&star_)) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigEquipDecompose)
}

void ConfigEquipDecompose::SharedCtor() {
  decompose_get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_influence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&star_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&star_)) + sizeof(quality_));
}

ConfigEquipDecompose::~ConfigEquipDecompose() {
  // @@protoc_insertion_point(destructor:db.ConfigEquipDecompose)
  SharedDtor();
}

void ConfigEquipDecompose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  decompose_get_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skill_influence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigEquipDecompose::ArenaDtor(void* object) {
  ConfigEquipDecompose* _this = reinterpret_cast< ConfigEquipDecompose* >(object);
  (void)_this;
}
void ConfigEquipDecompose::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigEquipDecompose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigEquipDecompose::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigEquipDecompose& ConfigEquipDecompose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipDecompose.base);
  return *internal_default_instance();
}


void ConfigEquipDecompose::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigEquipDecompose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      decompose_get_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      skill_influence_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&star_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_) -
        reinterpret_cast<char*>(&star_)) + sizeof(quality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigEquipDecompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigEquipDecompose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 star = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes decompose_get = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_decompose_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes skill_influence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_influence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigEquipDecompose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigEquipDecompose)
  return false;
#undef DO_
}

void ConfigEquipDecompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigEquipDecompose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 star = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->star(), output);
  }

  // required int32 quality = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // required bytes decompose_get = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->decompose_get(), output);
  }

  // required bytes skill_influence = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->skill_influence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigEquipDecompose)
}

::google::protobuf::uint8* ConfigEquipDecompose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigEquipDecompose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 star = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->star(), target);
  }

  // required int32 quality = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // required bytes decompose_get = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->decompose_get(), target);
  }

  // required bytes skill_influence = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->skill_influence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigEquipDecompose)
  return target;
}

size_t ConfigEquipDecompose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigEquipDecompose)
  size_t total_size = 0;

  if (has_decompose_get()) {
    // required bytes decompose_get = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->decompose_get());
  }

  if (has_skill_influence()) {
    // required bytes skill_influence = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_influence());
  }

  if (has_star()) {
    // required int32 star = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_quality()) {
    // required int32 quality = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  return total_size;
}
size_t ConfigEquipDecompose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigEquipDecompose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes decompose_get = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->decompose_get());

    // required bytes skill_influence = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_influence());

    // required int32 star = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 quality = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigEquipDecompose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigEquipDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigEquipDecompose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigEquipDecompose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigEquipDecompose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigEquipDecompose)
    MergeFrom(*source);
  }
}

void ConfigEquipDecompose::MergeFrom(const ConfigEquipDecompose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigEquipDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_decompose_get(from.decompose_get());
    }
    if (cached_has_bits & 0x00000002u) {
      set_skill_influence(from.skill_influence());
    }
    if (cached_has_bits & 0x00000004u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000008u) {
      quality_ = from.quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigEquipDecompose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigEquipDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigEquipDecompose::CopyFrom(const ConfigEquipDecompose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigEquipDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEquipDecompose::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigEquipDecompose::Swap(ConfigEquipDecompose* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigEquipDecompose* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigEquipDecompose::UnsafeArenaSwap(ConfigEquipDecompose* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigEquipDecompose::InternalSwap(ConfigEquipDecompose* other) {
  using std::swap;
  decompose_get_.Swap(&other->decompose_get_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skill_influence_.Swap(&other->skill_influence_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(star_, other->star_);
  swap(quality_, other->quality_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigEquipDecompose::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigEquipDecomposeCost::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigEquipDecomposeCost::kIdFieldNumber;
const int ConfigEquipDecomposeCost::kCostFieldNumber;
const int ConfigEquipDecomposeCost::kSuccessProbabilityFieldNumber;
const int ConfigEquipDecomposeCost::kAddRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigEquipDecomposeCost::ConfigEquipDecomposeCost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipDecomposeCost.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigEquipDecomposeCost)
}
ConfigEquipDecomposeCost::ConfigEquipDecomposeCost(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipDecomposeCost.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigEquipDecomposeCost)
}
ConfigEquipDecomposeCost::ConfigEquipDecomposeCost(const ConfigEquipDecomposeCost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_ratio_) -
    reinterpret_cast<char*>(&id_)) + sizeof(add_ratio_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigEquipDecomposeCost)
}

void ConfigEquipDecomposeCost::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_ratio_) -
      reinterpret_cast<char*>(&id_)) + sizeof(add_ratio_));
}

ConfigEquipDecomposeCost::~ConfigEquipDecomposeCost() {
  // @@protoc_insertion_point(destructor:db.ConfigEquipDecomposeCost)
  SharedDtor();
}

void ConfigEquipDecomposeCost::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigEquipDecomposeCost::ArenaDtor(void* object) {
  ConfigEquipDecomposeCost* _this = reinterpret_cast< ConfigEquipDecomposeCost* >(object);
  (void)_this;
}
void ConfigEquipDecomposeCost::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigEquipDecomposeCost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigEquipDecomposeCost::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigEquipDecomposeCost& ConfigEquipDecomposeCost::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEquipDecomposeCost.base);
  return *internal_default_instance();
}


void ConfigEquipDecomposeCost::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigEquipDecomposeCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cost_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&add_ratio_) -
        reinterpret_cast<char*>(&id_)) + sizeof(add_ratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigEquipDecomposeCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigEquipDecomposeCost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float success_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_success_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &success_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float add_ratio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_add_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &add_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigEquipDecomposeCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigEquipDecomposeCost)
  return false;
#undef DO_
}

void ConfigEquipDecomposeCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigEquipDecomposeCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes cost = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cost(), output);
  }

  // required float success_probability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->success_probability(), output);
  }

  // required float add_ratio = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->add_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigEquipDecomposeCost)
}

::google::protobuf::uint8* ConfigEquipDecomposeCost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigEquipDecomposeCost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes cost = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cost(), target);
  }

  // required float success_probability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->success_probability(), target);
  }

  // required float add_ratio = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->add_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigEquipDecomposeCost)
  return target;
}

size_t ConfigEquipDecomposeCost::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigEquipDecomposeCost)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_success_probability()) {
    // required float success_probability = 3;
    total_size += 1 + 4;
  }

  if (has_add_ratio()) {
    // required float add_ratio = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ConfigEquipDecomposeCost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigEquipDecomposeCost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float success_probability = 3;
    total_size += 1 + 4;

    // required float add_ratio = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigEquipDecomposeCost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigEquipDecomposeCost)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigEquipDecomposeCost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigEquipDecomposeCost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigEquipDecomposeCost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigEquipDecomposeCost)
    MergeFrom(*source);
  }
}

void ConfigEquipDecomposeCost::MergeFrom(const ConfigEquipDecomposeCost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigEquipDecomposeCost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_probability_ = from.success_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      add_ratio_ = from.add_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigEquipDecomposeCost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigEquipDecomposeCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigEquipDecomposeCost::CopyFrom(const ConfigEquipDecomposeCost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigEquipDecomposeCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEquipDecomposeCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigEquipDecomposeCost::Swap(ConfigEquipDecomposeCost* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigEquipDecomposeCost* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigEquipDecomposeCost::UnsafeArenaSwap(ConfigEquipDecomposeCost* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigEquipDecomposeCost::InternalSwap(ConfigEquipDecomposeCost* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(success_probability_, other->success_probability_);
  swap(add_ratio_, other->add_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigEquipDecomposeCost::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigSpecialEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigSpecialEvent::kIdFieldNumber;
const int ConfigSpecialEvent::kTriggerFieldNumber;
const int ConfigSpecialEvent::kTriggerParamFieldNumber;
const int ConfigSpecialEvent::kConditionFieldNumber;
const int ConfigSpecialEvent::kConditionParamFieldNumber;
const int ConfigSpecialEvent::kTriggerTimesFieldNumber;
const int ConfigSpecialEvent::kRewardFieldNumber;
const int ConfigSpecialEvent::kFirstRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigSpecialEvent::ConfigSpecialEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigSpecialEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigSpecialEvent)
}
ConfigSpecialEvent::ConfigSpecialEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSpecialEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigSpecialEvent)
}
ConfigSpecialEvent::ConfigSpecialEvent(const ConfigSpecialEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trigger_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_param()) {
    trigger_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_param(),
      GetArenaNoVirtual());
  }
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  first_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first_reward()) {
    first_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_times_) -
    reinterpret_cast<char*>(&id_)) + sizeof(trigger_times_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigSpecialEvent)
}

void ConfigSpecialEvent::SharedCtor() {
  trigger_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_times_) -
      reinterpret_cast<char*>(&id_)) + sizeof(trigger_times_));
}

ConfigSpecialEvent::~ConfigSpecialEvent() {
  // @@protoc_insertion_point(destructor:db.ConfigSpecialEvent)
  SharedDtor();
}

void ConfigSpecialEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  trigger_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigSpecialEvent::ArenaDtor(void* object) {
  ConfigSpecialEvent* _this = reinterpret_cast< ConfigSpecialEvent* >(object);
  (void)_this;
}
void ConfigSpecialEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigSpecialEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigSpecialEvent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigSpecialEvent& ConfigSpecialEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigSpecialEvent.base);
  return *internal_default_instance();
}


void ConfigSpecialEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigSpecialEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      trigger_param_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      first_reward_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_times_) -
        reinterpret_cast<char*>(&id_)) + sizeof(trigger_times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigSpecialEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigSpecialEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 trigger = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trigger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 condition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_condition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 condition_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_condition_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 trigger_times = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_trigger_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes first_reward = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigSpecialEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigSpecialEvent)
  return false;
#undef DO_
}

void ConfigSpecialEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigSpecialEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 trigger = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trigger(), output);
  }

  // required bytes trigger_param = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->trigger_param(), output);
  }

  // required int32 condition = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->condition(), output);
  }

  // required int32 condition_param = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->condition_param(), output);
  }

  // required int32 trigger_times = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->trigger_times(), output);
  }

  // required bytes reward = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->reward(), output);
  }

  // required bytes first_reward = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->first_reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigSpecialEvent)
}

::google::protobuf::uint8* ConfigSpecialEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigSpecialEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 trigger = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trigger(), target);
  }

  // required bytes trigger_param = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->trigger_param(), target);
  }

  // required int32 condition = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->condition(), target);
  }

  // required int32 condition_param = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->condition_param(), target);
  }

  // required int32 trigger_times = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->trigger_times(), target);
  }

  // required bytes reward = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->reward(), target);
  }

  // required bytes first_reward = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->first_reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigSpecialEvent)
  return target;
}

size_t ConfigSpecialEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigSpecialEvent)
  size_t total_size = 0;

  if (has_trigger_param()) {
    // required bytes trigger_param = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_param());
  }

  if (has_reward()) {
    // required bytes reward = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_first_reward()) {
    // required bytes first_reward = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_reward());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_trigger()) {
    // required int32 trigger = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger());
  }

  if (has_condition()) {
    // required int32 condition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition());
  }

  if (has_condition_param()) {
    // required int32 condition_param = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition_param());
  }

  if (has_trigger_times()) {
    // required int32 trigger_times = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_times());
  }

  return total_size;
}
size_t ConfigSpecialEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigSpecialEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes trigger_param = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_param());

    // required bytes reward = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required bytes first_reward = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_reward());

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int32 trigger = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger());

    // required int32 condition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition());

    // required int32 condition_param = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->condition_param());

    // required int32 trigger_times = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_times());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigSpecialEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigSpecialEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigSpecialEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigSpecialEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigSpecialEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigSpecialEvent)
    MergeFrom(*source);
  }
}

void ConfigSpecialEvent::MergeFrom(const ConfigSpecialEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigSpecialEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_trigger_param(from.trigger_param());
    }
    if (cached_has_bits & 0x00000002u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000004u) {
      set_first_reward(from.first_reward());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      trigger_ = from.trigger_;
    }
    if (cached_has_bits & 0x00000020u) {
      condition_ = from.condition_;
    }
    if (cached_has_bits & 0x00000040u) {
      condition_param_ = from.condition_param_;
    }
    if (cached_has_bits & 0x00000080u) {
      trigger_times_ = from.trigger_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigSpecialEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigSpecialEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigSpecialEvent::CopyFrom(const ConfigSpecialEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigSpecialEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigSpecialEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void ConfigSpecialEvent::Swap(ConfigSpecialEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigSpecialEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigSpecialEvent::UnsafeArenaSwap(ConfigSpecialEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigSpecialEvent::InternalSwap(ConfigSpecialEvent* other) {
  using std::swap;
  trigger_param_.Swap(&other->trigger_param_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_reward_.Swap(&other->first_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(trigger_, other->trigger_);
  swap(condition_, other->condition_);
  swap(condition_param_, other->condition_param_);
  swap(trigger_times_, other->trigger_times_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigSpecialEvent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigCardPractice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigCardPractice::kIdFieldNumber;
const int ConfigCardPractice::kLevelFieldNumber;
const int ConfigCardPractice::kCostFieldNumber;
const int ConfigCardPractice::kNeedStarFieldNumber;
const int ConfigCardPractice::kNeedLevelFieldNumber;
const int ConfigCardPractice::kAttributeAddFieldNumber;
const int ConfigCardPractice::kTalentLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigCardPractice::ConfigCardPractice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardPractice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigCardPractice)
}
ConfigCardPractice::ConfigCardPractice(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardPractice.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigCardPractice)
}
ConfigCardPractice::ConfigCardPractice(const ConfigCardPractice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attribute_add()) {
    attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_add(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&talent_level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(talent_level_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigCardPractice)
}

void ConfigCardPractice::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&talent_level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(talent_level_));
}

ConfigCardPractice::~ConfigCardPractice() {
  // @@protoc_insertion_point(destructor:db.ConfigCardPractice)
  SharedDtor();
}

void ConfigCardPractice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigCardPractice::ArenaDtor(void* object) {
  ConfigCardPractice* _this = reinterpret_cast< ConfigCardPractice* >(object);
  (void)_this;
}
void ConfigCardPractice::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigCardPractice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigCardPractice::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigCardPractice& ConfigCardPractice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigCardPractice.base);
  return *internal_default_instance();
}


void ConfigCardPractice::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigCardPractice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_add_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&talent_level_) -
        reinterpret_cast<char*>(&id_)) + sizeof(talent_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigCardPractice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigCardPractice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_star = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_need_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_need_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attribute_add = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attribute_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 talent_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_talent_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigCardPractice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigCardPractice)
  return false;
#undef DO_
}

void ConfigCardPractice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigCardPractice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required bytes cost = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cost(), output);
  }

  // required int32 need_star = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->need_star(), output);
  }

  // required int32 need_level = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->need_level(), output);
  }

  // required bytes attribute_add = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->attribute_add(), output);
  }

  // required int32 talent_level = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->talent_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigCardPractice)
}

::google::protobuf::uint8* ConfigCardPractice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigCardPractice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required bytes cost = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cost(), target);
  }

  // required int32 need_star = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->need_star(), target);
  }

  // required int32 need_level = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->need_level(), target);
  }

  // required bytes attribute_add = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->attribute_add(), target);
  }

  // required int32 talent_level = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->talent_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigCardPractice)
  return target;
}

size_t ConfigCardPractice::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigCardPractice)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_attribute_add()) {
    // required bytes attribute_add = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute_add());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_need_star()) {
    // required int32 need_star = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_star());
  }

  if (has_need_level()) {
    // required int32 need_level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());
  }

  if (has_talent_level()) {
    // required int32 talent_level = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->talent_level());
  }

  return total_size;
}
size_t ConfigCardPractice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigCardPractice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required bytes attribute_add = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute_add());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 need_star = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_star());

    // required int32 need_level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_level());

    // required int32 talent_level = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->talent_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigCardPractice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigCardPractice)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigCardPractice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigCardPractice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigCardPractice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigCardPractice)
    MergeFrom(*source);
  }
}

void ConfigCardPractice::MergeFrom(const ConfigCardPractice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigCardPractice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_attribute_add(from.attribute_add());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      need_star_ = from.need_star_;
    }
    if (cached_has_bits & 0x00000020u) {
      need_level_ = from.need_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      talent_level_ = from.talent_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigCardPractice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigCardPractice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigCardPractice::CopyFrom(const ConfigCardPractice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigCardPractice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigCardPractice::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void ConfigCardPractice::Swap(ConfigCardPractice* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigCardPractice* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigCardPractice::UnsafeArenaSwap(ConfigCardPractice* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigCardPractice::InternalSwap(ConfigCardPractice* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attribute_add_.Swap(&other->attribute_add_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(need_star_, other->need_star_);
  swap(need_level_, other->need_level_);
  swap(talent_level_, other->talent_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigCardPractice::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigGhostShip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigGhostShip::kIdFieldNumber;
const int ConfigGhostShip::kTypeFieldNumber;
const int ConfigGhostShip::kInitialStateFieldNumber;
const int ConfigGhostShip::kUnlockStageFieldNumber;
const int ConfigGhostShip::kMatchFieldNumber;
const int ConfigGhostShip::kBossGroupFieldNumber;
const int ConfigGhostShip::kRewardFieldNumber;
const int ConfigGhostShip::kBuffGetFieldNumber;
const int ConfigGhostShip::kMonsterBuffFieldNumber;
const int ConfigGhostShip::kMapModelFieldNumber;
const int ConfigGhostShip::kSpecialRewardFieldNumber;
const int ConfigGhostShip::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigGhostShip::ConfigGhostShip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigGhostShip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigGhostShip)
}
ConfigGhostShip::ConfigGhostShip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigGhostShip.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigGhostShip)
}
ConfigGhostShip::ConfigGhostShip(const ConfigGhostShip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unlock_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_stage()) {
    unlock_stage_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_stage(),
      GetArenaNoVirtual());
  }
  match_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match()) {
    match_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match(),
      GetArenaNoVirtual());
  }
  boss_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_boss_group()) {
    boss_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boss_group(),
      GetArenaNoVirtual());
  }
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  buff_get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buff_get()) {
    buff_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buff_get(),
      GetArenaNoVirtual());
  }
  monster_buff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_monster_buff()) {
    monster_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monster_buff(),
      GetArenaNoVirtual());
  }
  special_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_special_reward()) {
    special_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigGhostShip)
}

void ConfigGhostShip::SharedCtor() {
  unlock_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boss_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buff_get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monster_buff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rank_));
}

ConfigGhostShip::~ConfigGhostShip() {
  // @@protoc_insertion_point(destructor:db.ConfigGhostShip)
  SharedDtor();
}

void ConfigGhostShip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  unlock_stage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boss_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buff_get_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monster_buff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigGhostShip::ArenaDtor(void* object) {
  ConfigGhostShip* _this = reinterpret_cast< ConfigGhostShip* >(object);
  (void)_this;
}
void ConfigGhostShip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigGhostShip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigGhostShip::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigGhostShip& ConfigGhostShip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigGhostShip.base);
  return *internal_default_instance();
}


void ConfigGhostShip::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigGhostShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      unlock_stage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      match_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      boss_group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      buff_get_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      monster_buff_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      special_reward_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  if (cached_has_bits & 3840u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&type_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigGhostShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigGhostShip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 initial_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_initial_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes unlock_stage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unlock_stage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes match = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes boss_group = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_boss_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes buff_get = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buff_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes monster_buff = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_monster_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 map_model = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_map_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes special_reward = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_special_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rank = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigGhostShip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigGhostShip)
  return false;
#undef DO_
}

void ConfigGhostShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigGhostShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 initial_state = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->initial_state(), output);
  }

  // required bytes unlock_stage = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->unlock_stage(), output);
  }

  // required bytes match = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->match(), output);
  }

  // required bytes boss_group = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->boss_group(), output);
  }

  // required bytes reward = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->reward(), output);
  }

  // required bytes buff_get = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->buff_get(), output);
  }

  // required bytes monster_buff = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->monster_buff(), output);
  }

  // required int32 map_model = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->map_model(), output);
  }

  // required bytes special_reward = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->special_reward(), output);
  }

  // required int32 rank = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigGhostShip)
}

::google::protobuf::uint8* ConfigGhostShip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigGhostShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 initial_state = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->initial_state(), target);
  }

  // required bytes unlock_stage = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->unlock_stage(), target);
  }

  // required bytes match = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->match(), target);
  }

  // required bytes boss_group = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->boss_group(), target);
  }

  // required bytes reward = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->reward(), target);
  }

  // required bytes buff_get = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->buff_get(), target);
  }

  // required bytes monster_buff = 9;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->monster_buff(), target);
  }

  // required int32 map_model = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->map_model(), target);
  }

  // required bytes special_reward = 11;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->special_reward(), target);
  }

  // required int32 rank = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigGhostShip)
  return target;
}

size_t ConfigGhostShip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigGhostShip)
  size_t total_size = 0;

  if (has_unlock_stage()) {
    // required bytes unlock_stage = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_stage());
  }

  if (has_match()) {
    // required bytes match = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match());
  }

  if (has_boss_group()) {
    // required bytes boss_group = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->boss_group());
  }

  if (has_reward()) {
    // required bytes reward = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_buff_get()) {
    // required bytes buff_get = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buff_get());
  }

  if (has_monster_buff()) {
    // required bytes monster_buff = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monster_buff());
  }

  if (has_special_reward()) {
    // required bytes special_reward = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_initial_state()) {
    // required int32 initial_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initial_state());
  }

  if (has_map_model()) {
    // required int32 map_model = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_model());
  }

  if (has_rank()) {
    // required int32 rank = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  return total_size;
}
size_t ConfigGhostShip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigGhostShip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required bytes unlock_stage = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_stage());

    // required bytes match = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match());

    // required bytes boss_group = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->boss_group());

    // required bytes reward = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required bytes buff_get = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buff_get());

    // required bytes monster_buff = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monster_buff());

    // required bytes special_reward = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 initial_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initial_state());

    // required int32 map_model = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_model());

    // required int32 rank = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigGhostShip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigGhostShip)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigGhostShip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigGhostShip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigGhostShip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigGhostShip)
    MergeFrom(*source);
  }
}

void ConfigGhostShip::MergeFrom(const ConfigGhostShip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigGhostShip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_unlock_stage(from.unlock_stage());
    }
    if (cached_has_bits & 0x00000002u) {
      set_match(from.match());
    }
    if (cached_has_bits & 0x00000004u) {
      set_boss_group(from.boss_group());
    }
    if (cached_has_bits & 0x00000008u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000010u) {
      set_buff_get(from.buff_get());
    }
    if (cached_has_bits & 0x00000020u) {
      set_monster_buff(from.monster_buff());
    }
    if (cached_has_bits & 0x00000040u) {
      set_special_reward(from.special_reward());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      initial_state_ = from.initial_state_;
    }
    if (cached_has_bits & 0x00000400u) {
      map_model_ = from.map_model_;
    }
    if (cached_has_bits & 0x00000800u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigGhostShip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigGhostShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigGhostShip::CopyFrom(const ConfigGhostShip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigGhostShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGhostShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void ConfigGhostShip::Swap(ConfigGhostShip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigGhostShip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigGhostShip::UnsafeArenaSwap(ConfigGhostShip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigGhostShip::InternalSwap(ConfigGhostShip* other) {
  using std::swap;
  unlock_stage_.Swap(&other->unlock_stage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_.Swap(&other->match_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  boss_group_.Swap(&other->boss_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buff_get_.Swap(&other->buff_get_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  monster_buff_.Swap(&other->monster_buff_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  special_reward_.Swap(&other->special_reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(initial_state_, other->initial_state_);
  swap(map_model_, other->map_model_);
  swap(rank_, other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigGhostShip::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFacilityGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFacilityGroup::kIdFieldNumber;
const int ConfigFacilityGroup::kContainFieldNumber;
const int ConfigFacilityGroup::kEffectFieldNumber;
const int ConfigFacilityGroup::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFacilityGroup::ConfigFacilityGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFacilityGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFacilityGroup)
}
ConfigFacilityGroup::ConfigFacilityGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFacilityGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFacilityGroup)
}
ConfigFacilityGroup::ConfigFacilityGroup(const ConfigFacilityGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contain()) {
    contain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contain(),
      GetArenaNoVirtual());
  }
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param()) {
    param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_) -
    reinterpret_cast<char*>(&id_)) + sizeof(effect_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFacilityGroup)
}

void ConfigFacilityGroup::SharedCtor() {
  contain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_) -
      reinterpret_cast<char*>(&id_)) + sizeof(effect_));
}

ConfigFacilityGroup::~ConfigFacilityGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigFacilityGroup)
  SharedDtor();
}

void ConfigFacilityGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  contain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFacilityGroup::ArenaDtor(void* object) {
  ConfigFacilityGroup* _this = reinterpret_cast< ConfigFacilityGroup* >(object);
  (void)_this;
}
void ConfigFacilityGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFacilityGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFacilityGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFacilityGroup& ConfigFacilityGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFacilityGroup.base);
  return *internal_default_instance();
}


void ConfigFacilityGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFacilityGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      contain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      param_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effect_) -
        reinterpret_cast<char*>(&id_)) + sizeof(effect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFacilityGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFacilityGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes contain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 effect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_effect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFacilityGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFacilityGroup)
  return false;
#undef DO_
}

void ConfigFacilityGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFacilityGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes contain = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contain(), output);
  }

  // required int32 effect = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effect(), output);
  }

  // required bytes param = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFacilityGroup)
}

::google::protobuf::uint8* ConfigFacilityGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFacilityGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes contain = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contain(), target);
  }

  // required int32 effect = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effect(), target);
  }

  // required bytes param = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFacilityGroup)
  return target;
}

size_t ConfigFacilityGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFacilityGroup)
  size_t total_size = 0;

  if (has_contain()) {
    // required bytes contain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->contain());
  }

  if (has_param()) {
    // required bytes param = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->param());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_effect()) {
    // required int32 effect = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect());
  }

  return total_size;
}
size_t ConfigFacilityGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFacilityGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes contain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->contain());

    // required bytes param = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->param());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 effect = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFacilityGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFacilityGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFacilityGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFacilityGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFacilityGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFacilityGroup)
    MergeFrom(*source);
  }
}

void ConfigFacilityGroup::MergeFrom(const ConfigFacilityGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFacilityGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_contain(from.contain());
    }
    if (cached_has_bits & 0x00000002u) {
      set_param(from.param());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      effect_ = from.effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFacilityGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFacilityGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFacilityGroup::CopyFrom(const ConfigFacilityGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFacilityGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFacilityGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigFacilityGroup::Swap(ConfigFacilityGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFacilityGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFacilityGroup::UnsafeArenaSwap(ConfigFacilityGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFacilityGroup::InternalSwap(ConfigFacilityGroup* other) {
  using std::swap;
  contain_.Swap(&other->contain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  param_.Swap(&other->param_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(effect_, other->effect_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFacilityGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigRankingScore::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRankingScore::kIdFieldNumber;
const int ConfigRankingScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRankingScore::ConfigRankingScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingScore.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigRankingScore)
}
ConfigRankingScore::ConfigRankingScore(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingScore.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigRankingScore)
}
ConfigRankingScore::ConfigRankingScore(const ConfigRankingScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_score()) {
    score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.score(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigRankingScore)
}

void ConfigRankingScore::SharedCtor() {
  score_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigRankingScore::~ConfigRankingScore() {
  // @@protoc_insertion_point(destructor:db.ConfigRankingScore)
  SharedDtor();
}

void ConfigRankingScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  score_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigRankingScore::ArenaDtor(void* object) {
  ConfigRankingScore* _this = reinterpret_cast< ConfigRankingScore* >(object);
  (void)_this;
}
void ConfigRankingScore::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigRankingScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigRankingScore::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigRankingScore& ConfigRankingScore::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingScore.base);
  return *internal_default_instance();
}


void ConfigRankingScore::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigRankingScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    score_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigRankingScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigRankingScore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigRankingScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigRankingScore)
  return false;
#undef DO_
}

void ConfigRankingScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigRankingScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigRankingScore)
}

::google::protobuf::uint8* ConfigRankingScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigRankingScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes score = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigRankingScore)
  return target;
}

size_t ConfigRankingScore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigRankingScore)
  size_t total_size = 0;

  if (has_score()) {
    // required bytes score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->score());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigRankingScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigRankingScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->score());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRankingScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigRankingScore)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRankingScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRankingScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigRankingScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigRankingScore)
    MergeFrom(*source);
  }
}

void ConfigRankingScore::MergeFrom(const ConfigRankingScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigRankingScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_score(from.score());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigRankingScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigRankingScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRankingScore::CopyFrom(const ConfigRankingScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigRankingScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRankingScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConfigRankingScore::Swap(ConfigRankingScore* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigRankingScore* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigRankingScore::UnsafeArenaSwap(ConfigRankingScore* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigRankingScore::InternalSwap(ConfigRankingScore* other) {
  using std::swap;
  score_.Swap(&other->score_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigRankingScore::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigRankingBattleReward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRankingBattleReward::kIdFieldNumber;
const int ConfigRankingBattleReward::kComboFieldNumber;
const int ConfigRankingBattleReward::kScoreUpFieldNumber;
const int ConfigRankingBattleReward::kScoreDownFieldNumber;
const int ConfigRankingBattleReward::kRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRankingBattleReward::ConfigRankingBattleReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingBattleReward.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigRankingBattleReward)
}
ConfigRankingBattleReward::ConfigRankingBattleReward(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingBattleReward.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigRankingBattleReward)
}
ConfigRankingBattleReward::ConfigRankingBattleReward(const ConfigRankingBattleReward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_down_) -
    reinterpret_cast<char*>(&id_)) + sizeof(score_down_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigRankingBattleReward)
}

void ConfigRankingBattleReward::SharedCtor() {
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_down_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_down_));
}

ConfigRankingBattleReward::~ConfigRankingBattleReward() {
  // @@protoc_insertion_point(destructor:db.ConfigRankingBattleReward)
  SharedDtor();
}

void ConfigRankingBattleReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigRankingBattleReward::ArenaDtor(void* object) {
  ConfigRankingBattleReward* _this = reinterpret_cast< ConfigRankingBattleReward* >(object);
  (void)_this;
}
void ConfigRankingBattleReward::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigRankingBattleReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigRankingBattleReward::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigRankingBattleReward& ConfigRankingBattleReward::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRankingBattleReward.base);
  return *internal_default_instance();
}


void ConfigRankingBattleReward::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigRankingBattleReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reward_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_down_) -
        reinterpret_cast<char*>(&id_)) + sizeof(score_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigRankingBattleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigRankingBattleReward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 combo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_combo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 score_up = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_score_up();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 score_down = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_score_down();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigRankingBattleReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigRankingBattleReward)
  return false;
#undef DO_
}

void ConfigRankingBattleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigRankingBattleReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 combo = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->combo(), output);
  }

  // required int32 score_up = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score_up(), output);
  }

  // required int32 score_down = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score_down(), output);
  }

  // required bytes reward = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->reward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigRankingBattleReward)
}

::google::protobuf::uint8* ConfigRankingBattleReward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigRankingBattleReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 combo = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->combo(), target);
  }

  // required int32 score_up = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score_up(), target);
  }

  // required int32 score_down = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score_down(), target);
  }

  // required bytes reward = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->reward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigRankingBattleReward)
  return target;
}

size_t ConfigRankingBattleReward::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigRankingBattleReward)
  size_t total_size = 0;

  if (has_reward()) {
    // required bytes reward = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_combo()) {
    // required int32 combo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combo());
  }

  if (has_score_up()) {
    // required int32 score_up = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score_up());
  }

  if (has_score_down()) {
    // required int32 score_down = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score_down());
  }

  return total_size;
}
size_t ConfigRankingBattleReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigRankingBattleReward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes reward = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 combo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combo());

    // required int32 score_up = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score_up());

    // required int32 score_down = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score_down());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRankingBattleReward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigRankingBattleReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRankingBattleReward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRankingBattleReward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigRankingBattleReward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigRankingBattleReward)
    MergeFrom(*source);
  }
}

void ConfigRankingBattleReward::MergeFrom(const ConfigRankingBattleReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigRankingBattleReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      combo_ = from.combo_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_up_ = from.score_up_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_down_ = from.score_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigRankingBattleReward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigRankingBattleReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRankingBattleReward::CopyFrom(const ConfigRankingBattleReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigRankingBattleReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRankingBattleReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ConfigRankingBattleReward::Swap(ConfigRankingBattleReward* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigRankingBattleReward* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigRankingBattleReward::UnsafeArenaSwap(ConfigRankingBattleReward* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigRankingBattleReward::InternalSwap(ConfigRankingBattleReward* other) {
  using std::swap;
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(combo_, other->combo_);
  swap(score_up_, other->score_up_);
  swap(score_down_, other->score_down_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigRankingBattleReward::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigEasterEgg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigEasterEgg::kIdFieldNumber;
const int ConfigEasterEgg::kTypeFieldNumber;
const int ConfigEasterEgg::kNameFieldNumber;
const int ConfigEasterEgg::kChoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigEasterEgg::ConfigEasterEgg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigEasterEgg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigEasterEgg)
}
ConfigEasterEgg::ConfigEasterEgg(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEasterEgg.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigEasterEgg)
}
ConfigEasterEgg::ConfigEasterEgg(const ConfigEasterEgg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  choice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_choice()) {
    choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.choice(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigEasterEgg)
}

void ConfigEasterEgg::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  choice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

ConfigEasterEgg::~ConfigEasterEgg() {
  // @@protoc_insertion_point(destructor:db.ConfigEasterEgg)
  SharedDtor();
}

void ConfigEasterEgg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  choice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigEasterEgg::ArenaDtor(void* object) {
  ConfigEasterEgg* _this = reinterpret_cast< ConfigEasterEgg* >(object);
  (void)_this;
}
void ConfigEasterEgg::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigEasterEgg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigEasterEgg::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigEasterEgg& ConfigEasterEgg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigEasterEgg.base);
  return *internal_default_instance();
}


void ConfigEasterEgg::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigEasterEgg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      choice_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigEasterEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigEasterEgg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes choice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_choice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigEasterEgg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigEasterEgg)
  return false;
#undef DO_
}

void ConfigEasterEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigEasterEgg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes choice = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->choice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigEasterEgg)
}

::google::protobuf::uint8* ConfigEasterEgg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigEasterEgg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes choice = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->choice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigEasterEgg)
  return target;
}

size_t ConfigEasterEgg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigEasterEgg)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_choice()) {
    // required bytes choice = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->choice());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ConfigEasterEgg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigEasterEgg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes choice = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->choice());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigEasterEgg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigEasterEgg)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigEasterEgg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigEasterEgg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigEasterEgg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigEasterEgg)
    MergeFrom(*source);
  }
}

void ConfigEasterEgg::MergeFrom(const ConfigEasterEgg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigEasterEgg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_choice(from.choice());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigEasterEgg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigEasterEgg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigEasterEgg::CopyFrom(const ConfigEasterEgg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigEasterEgg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigEasterEgg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigEasterEgg::Swap(ConfigEasterEgg* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigEasterEgg* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigEasterEgg::UnsafeArenaSwap(ConfigEasterEgg* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigEasterEgg::InternalSwap(ConfigEasterEgg* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  choice_.Swap(&other->choice_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigEasterEgg::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigShipEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigShipEvent::kIdFieldNumber;
const int ConfigShipEvent::kTypeFieldNumber;
const int ConfigShipEvent::kNeedSecondsFieldNumber;
const int ConfigShipEvent::kNeedLevelFieldNumber;
const int ConfigShipEvent::kNeedModelFieldNumber;
const int ConfigShipEvent::kNeedRoomFieldNumber;
const int ConfigShipEvent::kNeedFacilityFieldNumber;
const int ConfigShipEvent::kPreTaskFieldNumber;
const int ConfigShipEvent::kRegionFieldNumber;
const int ConfigShipEvent::kProbabilityFieldNumber;
const int ConfigShipEvent::kLimitNumFieldNumber;
const int ConfigShipEvent::kEnemyFieldNumber;
const int ConfigShipEvent::kExculdeFieldNumber;
const int ConfigShipEvent::kChoiceFieldNumber;
const int ConfigShipEvent::kUntreatedCostFieldNumber;
const int ConfigShipEvent::kEffectFieldNumber;
const int ConfigShipEvent::kDurationFieldNumber;
const int ConfigShipEvent::kHappenLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigShipEvent::ConfigShipEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigShipEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigShipEvent)
}
ConfigShipEvent::ConfigShipEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigShipEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigShipEvent)
}
ConfigShipEvent::ConfigShipEvent(const ConfigShipEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  need_seconds_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_need_seconds()) {
    need_seconds_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.need_seconds(),
      GetArenaNoVirtual());
  }
  need_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_need_level()) {
    need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.need_level(),
      GetArenaNoVirtual());
  }
  need_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_need_room()) {
    need_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.need_room(),
      GetArenaNoVirtual());
  }
  need_facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_need_facility()) {
    need_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.need_facility(),
      GetArenaNoVirtual());
  }
  pre_task_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pre_task()) {
    pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pre_task(),
      GetArenaNoVirtual());
  }
  enemy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enemy()) {
    enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enemy(),
      GetArenaNoVirtual());
  }
  choice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_choice()) {
    choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.choice(),
      GetArenaNoVirtual());
  }
  untreated_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_untreated_cost()) {
    untreated_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.untreated_cost(),
      GetArenaNoVirtual());
  }
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_effect()) {
    effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effect(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&happen_limit_) -
    reinterpret_cast<char*>(&id_)) + sizeof(happen_limit_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigShipEvent)
}

void ConfigShipEvent::SharedCtor() {
  need_seconds_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_facility_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_task_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enemy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  choice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  untreated_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&happen_limit_) -
      reinterpret_cast<char*>(&id_)) + sizeof(happen_limit_));
}

ConfigShipEvent::~ConfigShipEvent() {
  // @@protoc_insertion_point(destructor:db.ConfigShipEvent)
  SharedDtor();
}

void ConfigShipEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  need_seconds_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_facility_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pre_task_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enemy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  choice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  untreated_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigShipEvent::ArenaDtor(void* object) {
  ConfigShipEvent* _this = reinterpret_cast< ConfigShipEvent* >(object);
  (void)_this;
}
void ConfigShipEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigShipEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigShipEvent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigShipEvent& ConfigShipEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigShipEvent.base);
  return *internal_default_instance();
}


void ConfigShipEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigShipEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      need_seconds_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      need_level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      need_room_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      need_facility_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      pre_task_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      enemy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      choice_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      untreated_cost_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    effect_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exculde_) -
        reinterpret_cast<char*>(&id_)) + sizeof(exculde_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&happen_limit_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(happen_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigShipEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigShipEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes need_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_need_seconds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes need_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_need_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_model = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_need_model();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes need_room = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_need_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes need_facility = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_need_facility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pre_task = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pre_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 region = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float probability = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 limit_num = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_limit_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes enemy = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enemy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exculde = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_exculde();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exculde_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes choice = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_choice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes untreated_cost = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_untreated_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes effect = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 duration = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 happen_limit = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_happen_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &happen_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigShipEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigShipEvent)
  return false;
#undef DO_
}

void ConfigShipEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigShipEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes need_seconds = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->need_seconds(), output);
  }

  // required bytes need_level = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->need_level(), output);
  }

  // required int32 need_model = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->need_model(), output);
  }

  // required bytes need_room = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->need_room(), output);
  }

  // required bytes need_facility = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->need_facility(), output);
  }

  // required bytes pre_task = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->pre_task(), output);
  }

  // required int32 region = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->region(), output);
  }

  // required float probability = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->probability(), output);
  }

  // required int32 limit_num = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->limit_num(), output);
  }

  // required bytes enemy = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->enemy(), output);
  }

  // required int32 exculde = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->exculde(), output);
  }

  // required bytes choice = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->choice(), output);
  }

  // required bytes untreated_cost = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->untreated_cost(), output);
  }

  // required bytes effect = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->effect(), output);
  }

  // required int32 duration = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->duration(), output);
  }

  // required int32 happen_limit = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->happen_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigShipEvent)
}

::google::protobuf::uint8* ConfigShipEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigShipEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes need_seconds = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->need_seconds(), target);
  }

  // required bytes need_level = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->need_level(), target);
  }

  // required int32 need_model = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->need_model(), target);
  }

  // required bytes need_room = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->need_room(), target);
  }

  // required bytes need_facility = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->need_facility(), target);
  }

  // required bytes pre_task = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->pre_task(), target);
  }

  // required int32 region = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->region(), target);
  }

  // required float probability = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->probability(), target);
  }

  // required int32 limit_num = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->limit_num(), target);
  }

  // required bytes enemy = 12;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->enemy(), target);
  }

  // required int32 exculde = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->exculde(), target);
  }

  // required bytes choice = 14;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->choice(), target);
  }

  // required bytes untreated_cost = 15;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->untreated_cost(), target);
  }

  // required bytes effect = 16;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->effect(), target);
  }

  // required int32 duration = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->duration(), target);
  }

  // required int32 happen_limit = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->happen_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigShipEvent)
  return target;
}

size_t ConfigShipEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigShipEvent)
  size_t total_size = 0;

  if (has_need_seconds()) {
    // required bytes need_seconds = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_seconds());
  }

  if (has_need_level()) {
    // required bytes need_level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_level());
  }

  if (has_need_room()) {
    // required bytes need_room = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_room());
  }

  if (has_need_facility()) {
    // required bytes need_facility = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_facility());
  }

  if (has_pre_task()) {
    // required bytes pre_task = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_task());
  }

  if (has_enemy()) {
    // required bytes enemy = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->enemy());
  }

  if (has_choice()) {
    // required bytes choice = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->choice());
  }

  if (has_untreated_cost()) {
    // required bytes untreated_cost = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->untreated_cost());
  }

  if (has_effect()) {
    // required bytes effect = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->effect());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_need_model()) {
    // required int32 need_model = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_model());
  }

  if (has_region()) {
    // required int32 region = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region());
  }

  if (has_probability()) {
    // required float probability = 10;
    total_size += 1 + 4;
  }

  if (has_limit_num()) {
    // required int32 limit_num = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_num());
  }

  if (has_exculde()) {
    // required int32 exculde = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exculde());
  }

  if (has_duration()) {
    // required int32 duration = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  if (has_happen_limit()) {
    // required int32 happen_limit = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->happen_limit());
  }

  return total_size;
}
size_t ConfigShipEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigShipEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required bytes need_seconds = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_seconds());

    // required bytes need_level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_level());

    // required bytes need_room = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_room());

    // required bytes need_facility = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_facility());

    // required bytes pre_task = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_task());

    // required bytes enemy = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->enemy());

    // required bytes choice = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->choice());

    // required bytes untreated_cost = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->untreated_cost());

    // required bytes effect = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->effect());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 need_model = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_model());

    // required int32 region = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region());

    // required float probability = 10;
    total_size += 1 + 4;

    // required int32 limit_num = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_num());

    // required int32 exculde = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exculde());

    // required int32 duration = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());

    // required int32 happen_limit = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->happen_limit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigShipEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigShipEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigShipEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigShipEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigShipEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigShipEvent)
    MergeFrom(*source);
  }
}

void ConfigShipEvent::MergeFrom(const ConfigShipEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigShipEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_need_seconds(from.need_seconds());
    }
    if (cached_has_bits & 0x00000002u) {
      set_need_level(from.need_level());
    }
    if (cached_has_bits & 0x00000004u) {
      set_need_room(from.need_room());
    }
    if (cached_has_bits & 0x00000008u) {
      set_need_facility(from.need_facility());
    }
    if (cached_has_bits & 0x00000010u) {
      set_pre_task(from.pre_task());
    }
    if (cached_has_bits & 0x00000020u) {
      set_enemy(from.enemy());
    }
    if (cached_has_bits & 0x00000040u) {
      set_choice(from.choice());
    }
    if (cached_has_bits & 0x00000080u) {
      set_untreated_cost(from.untreated_cost());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_effect(from.effect());
    }
    if (cached_has_bits & 0x00000200u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000800u) {
      need_model_ = from.need_model_;
    }
    if (cached_has_bits & 0x00001000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00002000u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00004000u) {
      limit_num_ = from.limit_num_;
    }
    if (cached_has_bits & 0x00008000u) {
      exculde_ = from.exculde_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00020000u) {
      happen_limit_ = from.happen_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigShipEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigShipEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigShipEvent::CopyFrom(const ConfigShipEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigShipEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigShipEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  return true;
}

void ConfigShipEvent::Swap(ConfigShipEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigShipEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigShipEvent::UnsafeArenaSwap(ConfigShipEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigShipEvent::InternalSwap(ConfigShipEvent* other) {
  using std::swap;
  need_seconds_.Swap(&other->need_seconds_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  need_level_.Swap(&other->need_level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  need_room_.Swap(&other->need_room_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  need_facility_.Swap(&other->need_facility_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pre_task_.Swap(&other->pre_task_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enemy_.Swap(&other->enemy_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  choice_.Swap(&other->choice_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  untreated_cost_.Swap(&other->untreated_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effect_.Swap(&other->effect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(need_model_, other->need_model_);
  swap(region_, other->region_);
  swap(probability_, other->probability_);
  swap(limit_num_, other->limit_num_);
  swap(exculde_, other->exculde_);
  swap(duration_, other->duration_);
  swap(happen_limit_, other->happen_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigShipEvent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDailyGift::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDailyGift::kIdFieldNumber;
const int ConfigDailyGift::kRewardFieldNumber;
const int ConfigDailyGift::kTimeIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDailyGift::ConfigDailyGift()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDailyGift.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDailyGift)
}
ConfigDailyGift::ConfigDailyGift(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDailyGift.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDailyGift)
}
ConfigDailyGift::ConfigDailyGift(const ConfigDailyGift& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  time_interval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_time_interval()) {
    time_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_interval(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigDailyGift)
}

void ConfigDailyGift::SharedCtor() {
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_interval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigDailyGift::~ConfigDailyGift() {
  // @@protoc_insertion_point(destructor:db.ConfigDailyGift)
  SharedDtor();
}

void ConfigDailyGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_interval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDailyGift::ArenaDtor(void* object) {
  ConfigDailyGift* _this = reinterpret_cast< ConfigDailyGift* >(object);
  (void)_this;
}
void ConfigDailyGift::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDailyGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDailyGift::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDailyGift& ConfigDailyGift::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDailyGift.base);
  return *internal_default_instance();
}


void ConfigDailyGift::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDailyGift)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      time_interval_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDailyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDailyGift)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes time_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_time_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDailyGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDailyGift)
  return false;
#undef DO_
}

void ConfigDailyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDailyGift)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes reward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reward(), output);
  }

  // required bytes time_interval = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->time_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDailyGift)
}

::google::protobuf::uint8* ConfigDailyGift::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDailyGift)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes reward = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reward(), target);
  }

  // required bytes time_interval = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->time_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDailyGift)
  return target;
}

size_t ConfigDailyGift::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDailyGift)
  size_t total_size = 0;

  if (has_reward()) {
    // required bytes reward = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_time_interval()) {
    // required bytes time_interval = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->time_interval());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigDailyGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDailyGift)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes reward = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required bytes time_interval = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->time_interval());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDailyGift::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDailyGift)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDailyGift* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDailyGift>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDailyGift)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDailyGift)
    MergeFrom(*source);
  }
}

void ConfigDailyGift::MergeFrom(const ConfigDailyGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDailyGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000002u) {
      set_time_interval(from.time_interval());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDailyGift::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDailyGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDailyGift::CopyFrom(const ConfigDailyGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDailyGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDailyGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigDailyGift::Swap(ConfigDailyGift* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDailyGift* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDailyGift::UnsafeArenaSwap(ConfigDailyGift* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDailyGift::InternalSwap(ConfigDailyGift* other) {
  using std::swap;
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_interval_.Swap(&other->time_interval_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDailyGift::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigNavigationEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigNavigationEvent::kIdFieldNumber;
const int ConfigNavigationEvent::kTypeFieldNumber;
const int ConfigNavigationEvent::kLevelFieldNumber;
const int ConfigNavigationEvent::kDealCostFieldNumber;
const int ConfigNavigationEvent::kIgnoreCostFieldNumber;
const int ConfigNavigationEvent::kEnemyFieldNumber;
const int ConfigNavigationEvent::kModelIdFieldNumber;
const int ConfigNavigationEvent::kDropFieldNumber;
const int ConfigNavigationEvent::kRoomEffectFieldNumber;
const int ConfigNavigationEvent::kProbabilityFieldNumber;
const int ConfigNavigationEvent::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigNavigationEvent::ConfigNavigationEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigNavigationEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigNavigationEvent)
}
ConfigNavigationEvent::ConfigNavigationEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigNavigationEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigNavigationEvent)
}
ConfigNavigationEvent::ConfigNavigationEvent(const ConfigNavigationEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level()) {
    level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level(),
      GetArenaNoVirtual());
  }
  deal_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deal_cost()) {
    deal_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deal_cost(),
      GetArenaNoVirtual());
  }
  ignore_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ignore_cost()) {
    ignore_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ignore_cost(),
      GetArenaNoVirtual());
  }
  enemy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enemy()) {
    enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enemy(),
      GetArenaNoVirtual());
  }
  drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop()) {
    drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop(),
      GetArenaNoVirtual());
  }
  room_effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room_effect()) {
    room_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_effect(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&id_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigNavigationEvent)
}

void ConfigNavigationEvent::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deal_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ignore_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enemy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&id_)) + sizeof(duration_));
}

ConfigNavigationEvent::~ConfigNavigationEvent() {
  // @@protoc_insertion_point(destructor:db.ConfigNavigationEvent)
  SharedDtor();
}

void ConfigNavigationEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deal_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ignore_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enemy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigNavigationEvent::ArenaDtor(void* object) {
  ConfigNavigationEvent* _this = reinterpret_cast< ConfigNavigationEvent* >(object);
  (void)_this;
}
void ConfigNavigationEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigNavigationEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigNavigationEvent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigNavigationEvent& ConfigNavigationEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigNavigationEvent.base);
  return *internal_default_instance();
}


void ConfigNavigationEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigNavigationEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      deal_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ignore_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      enemy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      drop_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      room_effect_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&model_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&model_id_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigNavigationEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigNavigationEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes deal_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deal_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ignore_cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ignore_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes enemy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enemy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 model_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_model_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes room_effect = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float probability = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 duration = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigNavigationEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigNavigationEvent)
  return false;
#undef DO_
}

void ConfigNavigationEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigNavigationEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes level = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->level(), output);
  }

  // required bytes deal_cost = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->deal_cost(), output);
  }

  // required bytes ignore_cost = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->ignore_cost(), output);
  }

  // required bytes enemy = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->enemy(), output);
  }

  // required int32 model_id = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->model_id(), output);
  }

  // required bytes drop = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->drop(), output);
  }

  // required bytes room_effect = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->room_effect(), output);
  }

  // required float probability = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->probability(), output);
  }

  // required int32 duration = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigNavigationEvent)
}

::google::protobuf::uint8* ConfigNavigationEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigNavigationEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes level = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->level(), target);
  }

  // required bytes deal_cost = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->deal_cost(), target);
  }

  // required bytes ignore_cost = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ignore_cost(), target);
  }

  // required bytes enemy = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->enemy(), target);
  }

  // required int32 model_id = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->model_id(), target);
  }

  // required bytes drop = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->drop(), target);
  }

  // required bytes room_effect = 9;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->room_effect(), target);
  }

  // required float probability = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->probability(), target);
  }

  // required int32 duration = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigNavigationEvent)
  return target;
}

size_t ConfigNavigationEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigNavigationEvent)
  size_t total_size = 0;

  if (has_level()) {
    // required bytes level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level());
  }

  if (has_deal_cost()) {
    // required bytes deal_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deal_cost());
  }

  if (has_ignore_cost()) {
    // required bytes ignore_cost = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ignore_cost());
  }

  if (has_enemy()) {
    // required bytes enemy = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->enemy());
  }

  if (has_drop()) {
    // required bytes drop = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop());
  }

  if (has_room_effect()) {
    // required bytes room_effect = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room_effect());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_model_id()) {
    // required int32 model_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  if (has_probability()) {
    // required float probability = 10;
    total_size += 1 + 4;
  }

  if (has_duration()) {
    // required int32 duration = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  return total_size;
}
size_t ConfigNavigationEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigNavigationEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required bytes level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level());

    // required bytes deal_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deal_cost());

    // required bytes ignore_cost = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ignore_cost());

    // required bytes enemy = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->enemy());

    // required bytes drop = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop());

    // required bytes room_effect = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room_effect());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 model_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());

    // required float probability = 10;
    total_size += 1 + 4;

    // required int32 duration = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigNavigationEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigNavigationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigNavigationEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigNavigationEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigNavigationEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigNavigationEvent)
    MergeFrom(*source);
  }
}

void ConfigNavigationEvent::MergeFrom(const ConfigNavigationEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigNavigationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_level(from.level());
    }
    if (cached_has_bits & 0x00000002u) {
      set_deal_cost(from.deal_cost());
    }
    if (cached_has_bits & 0x00000004u) {
      set_ignore_cost(from.ignore_cost());
    }
    if (cached_has_bits & 0x00000008u) {
      set_enemy(from.enemy());
    }
    if (cached_has_bits & 0x00000010u) {
      set_drop(from.drop());
    }
    if (cached_has_bits & 0x00000020u) {
      set_room_effect(from.room_effect());
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000400u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigNavigationEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigNavigationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNavigationEvent::CopyFrom(const ConfigNavigationEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigNavigationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNavigationEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void ConfigNavigationEvent::Swap(ConfigNavigationEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigNavigationEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigNavigationEvent::UnsafeArenaSwap(ConfigNavigationEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigNavigationEvent::InternalSwap(ConfigNavigationEvent* other) {
  using std::swap;
  level_.Swap(&other->level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deal_cost_.Swap(&other->deal_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ignore_cost_.Swap(&other->ignore_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enemy_.Swap(&other->enemy_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_.Swap(&other->drop_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  room_effect_.Swap(&other->room_effect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(model_id_, other->model_id_);
  swap(probability_, other->probability_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigNavigationEvent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDungeonAltar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDungeonAltar::kIdFieldNumber;
const int ConfigDungeonAltar::kNameFieldNumber;
const int ConfigDungeonAltar::kRepairCostFieldNumber;
const int ConfigDungeonAltar::kDestoryCostFieldNumber;
const int ConfigDungeonAltar::kDropFieldNumber;
const int ConfigDungeonAltar::kAdjunctFieldNumber;
const int ConfigDungeonAltar::kAdjunctTypeFieldNumber;
const int ConfigDungeonAltar::kAdjunctSkillFieldNumber;
const int ConfigDungeonAltar::kAdjunctLevelUpCostFieldNumber;
const int ConfigDungeonAltar::kAdjunctSkillUpCostFieldNumber;
const int ConfigDungeonAltar::kAdjunctReviveCostFieldNumber;
const int ConfigDungeonAltar::kAdjunctCureCostFieldNumber;
const int ConfigDungeonAltar::kSpecialSkillFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDungeonAltar::ConfigDungeonAltar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonAltar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDungeonAltar)
}
ConfigDungeonAltar::ConfigDungeonAltar(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonAltar.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDungeonAltar)
}
ConfigDungeonAltar::ConfigDungeonAltar(const ConfigDungeonAltar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  repair_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_repair_cost()) {
    repair_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repair_cost(),
      GetArenaNoVirtual());
  }
  destory_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destory_cost()) {
    destory_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destory_cost(),
      GetArenaNoVirtual());
  }
  drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop()) {
    drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop(),
      GetArenaNoVirtual());
  }
  adjunct_skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adjunct_skill()) {
    adjunct_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adjunct_skill(),
      GetArenaNoVirtual());
  }
  adjunct_level_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adjunct_level_up_cost()) {
    adjunct_level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adjunct_level_up_cost(),
      GetArenaNoVirtual());
  }
  adjunct_skill_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adjunct_skill_up_cost()) {
    adjunct_skill_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adjunct_skill_up_cost(),
      GetArenaNoVirtual());
  }
  adjunct_revive_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adjunct_revive_cost()) {
    adjunct_revive_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adjunct_revive_cost(),
      GetArenaNoVirtual());
  }
  adjunct_cure_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adjunct_cure_cost()) {
    adjunct_cure_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adjunct_cure_cost(),
      GetArenaNoVirtual());
  }
  special_skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_special_skill()) {
    special_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_skill(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&adjunct_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(adjunct_type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigDungeonAltar)
}

void ConfigDungeonAltar::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repair_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destory_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_level_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_skill_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_revive_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_cure_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adjunct_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(adjunct_type_));
}

ConfigDungeonAltar::~ConfigDungeonAltar() {
  // @@protoc_insertion_point(destructor:db.ConfigDungeonAltar)
  SharedDtor();
}

void ConfigDungeonAltar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repair_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destory_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_skill_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_level_up_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_skill_up_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_revive_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_cure_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_skill_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDungeonAltar::ArenaDtor(void* object) {
  ConfigDungeonAltar* _this = reinterpret_cast< ConfigDungeonAltar* >(object);
  (void)_this;
}
void ConfigDungeonAltar::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDungeonAltar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDungeonAltar::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDungeonAltar& ConfigDungeonAltar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonAltar.base);
  return *internal_default_instance();
}


void ConfigDungeonAltar::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDungeonAltar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      repair_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      destory_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      drop_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      adjunct_skill_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      adjunct_level_up_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      adjunct_skill_up_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      adjunct_revive_cost_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      adjunct_cure_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      special_skill_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 7168u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adjunct_type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(adjunct_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDungeonAltar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDungeonAltar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes repair_cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_repair_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes destory_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_destory_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 adjunct = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_adjunct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adjunct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 adjunct_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_adjunct_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adjunct_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes adjunct_skill = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adjunct_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes adjunct_level_up_cost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adjunct_level_up_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes adjunct_skill_up_cost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adjunct_skill_up_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes adjunct_revive_cost = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adjunct_revive_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes adjunct_cure_cost = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adjunct_cure_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes special_skill = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_special_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDungeonAltar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDungeonAltar)
  return false;
#undef DO_
}

void ConfigDungeonAltar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDungeonAltar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes repair_cost = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->repair_cost(), output);
  }

  // required bytes destory_cost = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->destory_cost(), output);
  }

  // required bytes drop = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->drop(), output);
  }

  // required int32 adjunct = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adjunct(), output);
  }

  // required int32 adjunct_type = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adjunct_type(), output);
  }

  // required bytes adjunct_skill = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->adjunct_skill(), output);
  }

  // required bytes adjunct_level_up_cost = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->adjunct_level_up_cost(), output);
  }

  // required bytes adjunct_skill_up_cost = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->adjunct_skill_up_cost(), output);
  }

  // required bytes adjunct_revive_cost = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->adjunct_revive_cost(), output);
  }

  // required bytes adjunct_cure_cost = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->adjunct_cure_cost(), output);
  }

  // required bytes special_skill = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->special_skill(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDungeonAltar)
}

::google::protobuf::uint8* ConfigDungeonAltar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDungeonAltar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes repair_cost = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->repair_cost(), target);
  }

  // required bytes destory_cost = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->destory_cost(), target);
  }

  // required bytes drop = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->drop(), target);
  }

  // required int32 adjunct = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adjunct(), target);
  }

  // required int32 adjunct_type = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adjunct_type(), target);
  }

  // required bytes adjunct_skill = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->adjunct_skill(), target);
  }

  // required bytes adjunct_level_up_cost = 9;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->adjunct_level_up_cost(), target);
  }

  // required bytes adjunct_skill_up_cost = 10;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->adjunct_skill_up_cost(), target);
  }

  // required bytes adjunct_revive_cost = 11;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->adjunct_revive_cost(), target);
  }

  // required bytes adjunct_cure_cost = 12;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->adjunct_cure_cost(), target);
  }

  // required bytes special_skill = 13;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->special_skill(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDungeonAltar)
  return target;
}

size_t ConfigDungeonAltar::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDungeonAltar)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_repair_cost()) {
    // required bytes repair_cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->repair_cost());
  }

  if (has_destory_cost()) {
    // required bytes destory_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->destory_cost());
  }

  if (has_drop()) {
    // required bytes drop = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop());
  }

  if (has_adjunct_skill()) {
    // required bytes adjunct_skill = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_skill());
  }

  if (has_adjunct_level_up_cost()) {
    // required bytes adjunct_level_up_cost = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_level_up_cost());
  }

  if (has_adjunct_skill_up_cost()) {
    // required bytes adjunct_skill_up_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_skill_up_cost());
  }

  if (has_adjunct_revive_cost()) {
    // required bytes adjunct_revive_cost = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_revive_cost());
  }

  if (has_adjunct_cure_cost()) {
    // required bytes adjunct_cure_cost = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_cure_cost());
  }

  if (has_special_skill()) {
    // required bytes special_skill = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_skill());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_adjunct()) {
    // required int32 adjunct = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adjunct());
  }

  if (has_adjunct_type()) {
    // required int32 adjunct_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adjunct_type());
  }

  return total_size;
}
size_t ConfigDungeonAltar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDungeonAltar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes repair_cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->repair_cost());

    // required bytes destory_cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->destory_cost());

    // required bytes drop = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop());

    // required bytes adjunct_skill = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_skill());

    // required bytes adjunct_level_up_cost = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_level_up_cost());

    // required bytes adjunct_skill_up_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_skill_up_cost());

    // required bytes adjunct_revive_cost = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_revive_cost());

    // required bytes adjunct_cure_cost = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct_cure_cost());

    // required bytes special_skill = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->special_skill());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 adjunct = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adjunct());

    // required int32 adjunct_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adjunct_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDungeonAltar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDungeonAltar)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDungeonAltar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDungeonAltar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDungeonAltar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDungeonAltar)
    MergeFrom(*source);
  }
}

void ConfigDungeonAltar::MergeFrom(const ConfigDungeonAltar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDungeonAltar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_repair_cost(from.repair_cost());
    }
    if (cached_has_bits & 0x00000004u) {
      set_destory_cost(from.destory_cost());
    }
    if (cached_has_bits & 0x00000008u) {
      set_drop(from.drop());
    }
    if (cached_has_bits & 0x00000010u) {
      set_adjunct_skill(from.adjunct_skill());
    }
    if (cached_has_bits & 0x00000020u) {
      set_adjunct_level_up_cost(from.adjunct_level_up_cost());
    }
    if (cached_has_bits & 0x00000040u) {
      set_adjunct_skill_up_cost(from.adjunct_skill_up_cost());
    }
    if (cached_has_bits & 0x00000080u) {
      set_adjunct_revive_cost(from.adjunct_revive_cost());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      set_adjunct_cure_cost(from.adjunct_cure_cost());
    }
    if (cached_has_bits & 0x00000200u) {
      set_special_skill(from.special_skill());
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      adjunct_ = from.adjunct_;
    }
    if (cached_has_bits & 0x00001000u) {
      adjunct_type_ = from.adjunct_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDungeonAltar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDungeonAltar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDungeonAltar::CopyFrom(const ConfigDungeonAltar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDungeonAltar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDungeonAltar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void ConfigDungeonAltar::Swap(ConfigDungeonAltar* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDungeonAltar* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDungeonAltar::UnsafeArenaSwap(ConfigDungeonAltar* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDungeonAltar::InternalSwap(ConfigDungeonAltar* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  repair_cost_.Swap(&other->repair_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destory_cost_.Swap(&other->destory_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_.Swap(&other->drop_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  adjunct_skill_.Swap(&other->adjunct_skill_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  adjunct_level_up_cost_.Swap(&other->adjunct_level_up_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  adjunct_skill_up_cost_.Swap(&other->adjunct_skill_up_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  adjunct_revive_cost_.Swap(&other->adjunct_revive_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  adjunct_cure_cost_.Swap(&other->adjunct_cure_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  special_skill_.Swap(&other->special_skill_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(adjunct_, other->adjunct_);
  swap(adjunct_type_, other->adjunct_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDungeonAltar::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigRobot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRobot::kLevelFieldNumber;
const int ConfigRobot::kNumFieldNumber;
const int ConfigRobot::kScoreFieldNumber;
const int ConfigRobot::kCaptainLevelFieldNumber;
const int ConfigRobot::kSailorNumInJjcFieldNumber;
const int ConfigRobot::kSailorInJjcFieldNumber;
const int ConfigRobot::kSailorLevelFieldNumber;
const int ConfigRobot::kSailorStarFieldNumber;
const int ConfigRobot::kShipModelFieldNumber;
const int ConfigRobot::kSailorPracticeFieldNumber;
const int ConfigRobot::kSailorNumInShipFieldNumber;
const int ConfigRobot::kSailorInShipFieldNumber;
const int ConfigRobot::kEquipQualityFieldNumber;
const int ConfigRobot::kItemsFieldNumber;
const int ConfigRobot::kInvadeScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRobot::ConfigRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigRobot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigRobot)
}
ConfigRobot::ConfigRobot(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRobot.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigRobot)
}
ConfigRobot::ConfigRobot(const ConfigRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_score()) {
    score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.score(),
      GetArenaNoVirtual());
  }
  captain_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_captain_level()) {
    captain_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captain_level(),
      GetArenaNoVirtual());
  }
  sailor_num_in_jjc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sailor_num_in_jjc()) {
    sailor_num_in_jjc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sailor_num_in_jjc(),
      GetArenaNoVirtual());
  }
  sailor_in_jjc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sailor_in_jjc()) {
    sailor_in_jjc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sailor_in_jjc(),
      GetArenaNoVirtual());
  }
  sailor_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sailor_level()) {
    sailor_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sailor_level(),
      GetArenaNoVirtual());
  }
  sailor_star_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sailor_star()) {
    sailor_star_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sailor_star(),
      GetArenaNoVirtual());
  }
  ship_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ship_model()) {
    ship_model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ship_model(),
      GetArenaNoVirtual());
  }
  sailor_practice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sailor_practice()) {
    sailor_practice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sailor_practice(),
      GetArenaNoVirtual());
  }
  sailor_num_in_ship_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sailor_num_in_ship()) {
    sailor_num_in_ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sailor_num_in_ship(),
      GetArenaNoVirtual());
  }
  sailor_in_ship_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sailor_in_ship()) {
    sailor_in_ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sailor_in_ship(),
      GetArenaNoVirtual());
  }
  equip_quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_equip_quality()) {
    equip_quality_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.equip_quality(),
      GetArenaNoVirtual());
  }
  items_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_items()) {
    items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items(),
      GetArenaNoVirtual());
  }
  invade_score_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invade_score()) {
    invade_score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invade_score(),
      GetArenaNoVirtual());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&level_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigRobot)
}

void ConfigRobot::SharedCtor() {
  score_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captain_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_num_in_jjc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_in_jjc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_star_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_practice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_num_in_ship_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_in_ship_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  equip_quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invade_score_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&level_)) + sizeof(num_));
}

ConfigRobot::~ConfigRobot() {
  // @@protoc_insertion_point(destructor:db.ConfigRobot)
  SharedDtor();
}

void ConfigRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  score_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captain_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_num_in_jjc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_in_jjc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_star_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_practice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_num_in_ship_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sailor_in_ship_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  equip_quality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invade_score_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigRobot::ArenaDtor(void* object) {
  ConfigRobot* _this = reinterpret_cast< ConfigRobot* >(object);
  (void)_this;
}
void ConfigRobot::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigRobot::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigRobot& ConfigRobot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRobot.base);
  return *internal_default_instance();
}


void ConfigRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      score_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      captain_level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sailor_num_in_jjc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      sailor_in_jjc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      sailor_level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      sailor_star_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      ship_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      sailor_practice_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      sailor_num_in_ship_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      sailor_in_ship_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      equip_quality_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      items_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      invade_score_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 24576u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&level_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigRobot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes captain_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_captain_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sailor_num_in_jjc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sailor_num_in_jjc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sailor_in_jjc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sailor_in_jjc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sailor_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sailor_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sailor_star = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sailor_star()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ship_model = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ship_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sailor_practice = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sailor_practice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sailor_num_in_ship = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sailor_num_in_ship()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sailor_in_ship = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sailor_in_ship()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes equip_quality = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_equip_quality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes items = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes invade_score = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invade_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigRobot)
  return false;
#undef DO_
}

void ConfigRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // required bytes score = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->score(), output);
  }

  // required bytes captain_level = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->captain_level(), output);
  }

  // required bytes sailor_num_in_jjc = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sailor_num_in_jjc(), output);
  }

  // required bytes sailor_in_jjc = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sailor_in_jjc(), output);
  }

  // required bytes sailor_level = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->sailor_level(), output);
  }

  // required bytes sailor_star = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sailor_star(), output);
  }

  // required bytes ship_model = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->ship_model(), output);
  }

  // required bytes sailor_practice = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->sailor_practice(), output);
  }

  // required bytes sailor_num_in_ship = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->sailor_num_in_ship(), output);
  }

  // required bytes sailor_in_ship = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->sailor_in_ship(), output);
  }

  // required bytes equip_quality = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->equip_quality(), output);
  }

  // required bytes items = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->items(), output);
  }

  // required bytes invade_score = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->invade_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigRobot)
}

::google::protobuf::uint8* ConfigRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // required bytes score = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->score(), target);
  }

  // required bytes captain_level = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->captain_level(), target);
  }

  // required bytes sailor_num_in_jjc = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sailor_num_in_jjc(), target);
  }

  // required bytes sailor_in_jjc = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sailor_in_jjc(), target);
  }

  // required bytes sailor_level = 7;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->sailor_level(), target);
  }

  // required bytes sailor_star = 8;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sailor_star(), target);
  }

  // required bytes ship_model = 9;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->ship_model(), target);
  }

  // required bytes sailor_practice = 10;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->sailor_practice(), target);
  }

  // required bytes sailor_num_in_ship = 11;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->sailor_num_in_ship(), target);
  }

  // required bytes sailor_in_ship = 12;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sailor_in_ship(), target);
  }

  // required bytes equip_quality = 13;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->equip_quality(), target);
  }

  // required bytes items = 14;
  if (cached_has_bits & 0x00000800u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->items(), target);
  }

  // required bytes invade_score = 15;
  if (cached_has_bits & 0x00001000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->invade_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigRobot)
  return target;
}

size_t ConfigRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigRobot)
  size_t total_size = 0;

  if (has_score()) {
    // required bytes score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->score());
  }

  if (has_captain_level()) {
    // required bytes captain_level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->captain_level());
  }

  if (has_sailor_num_in_jjc()) {
    // required bytes sailor_num_in_jjc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_num_in_jjc());
  }

  if (has_sailor_in_jjc()) {
    // required bytes sailor_in_jjc = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_in_jjc());
  }

  if (has_sailor_level()) {
    // required bytes sailor_level = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_level());
  }

  if (has_sailor_star()) {
    // required bytes sailor_star = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_star());
  }

  if (has_ship_model()) {
    // required bytes ship_model = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ship_model());
  }

  if (has_sailor_practice()) {
    // required bytes sailor_practice = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_practice());
  }

  if (has_sailor_num_in_ship()) {
    // required bytes sailor_num_in_ship = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_num_in_ship());
  }

  if (has_sailor_in_ship()) {
    // required bytes sailor_in_ship = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_in_ship());
  }

  if (has_equip_quality()) {
    // required bytes equip_quality = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->equip_quality());
  }

  if (has_items()) {
    // required bytes items = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->items());
  }

  if (has_invade_score()) {
    // required bytes invade_score = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->invade_score());
  }

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_num()) {
    // required int32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  return total_size;
}
size_t ConfigRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigRobot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00007fff) ^ 0x00007fff) == 0) {  // All required fields are present.
    // required bytes score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->score());

    // required bytes captain_level = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->captain_level());

    // required bytes sailor_num_in_jjc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_num_in_jjc());

    // required bytes sailor_in_jjc = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_in_jjc());

    // required bytes sailor_level = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_level());

    // required bytes sailor_star = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_star());

    // required bytes ship_model = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ship_model());

    // required bytes sailor_practice = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_practice());

    // required bytes sailor_num_in_ship = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_num_in_ship());

    // required bytes sailor_in_ship = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sailor_in_ship());

    // required bytes equip_quality = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->equip_quality());

    // required bytes items = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->items());

    // required bytes invade_score = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->invade_score());

    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigRobot)
    MergeFrom(*source);
  }
}

void ConfigRobot::MergeFrom(const ConfigRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_score(from.score());
    }
    if (cached_has_bits & 0x00000002u) {
      set_captain_level(from.captain_level());
    }
    if (cached_has_bits & 0x00000004u) {
      set_sailor_num_in_jjc(from.sailor_num_in_jjc());
    }
    if (cached_has_bits & 0x00000008u) {
      set_sailor_in_jjc(from.sailor_in_jjc());
    }
    if (cached_has_bits & 0x00000010u) {
      set_sailor_level(from.sailor_level());
    }
    if (cached_has_bits & 0x00000020u) {
      set_sailor_star(from.sailor_star());
    }
    if (cached_has_bits & 0x00000040u) {
      set_ship_model(from.ship_model());
    }
    if (cached_has_bits & 0x00000080u) {
      set_sailor_practice(from.sailor_practice());
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      set_sailor_num_in_ship(from.sailor_num_in_ship());
    }
    if (cached_has_bits & 0x00000200u) {
      set_sailor_in_ship(from.sailor_in_ship());
    }
    if (cached_has_bits & 0x00000400u) {
      set_equip_quality(from.equip_quality());
    }
    if (cached_has_bits & 0x00000800u) {
      set_items(from.items());
    }
    if (cached_has_bits & 0x00001000u) {
      set_invade_score(from.invade_score());
    }
    if (cached_has_bits & 0x00002000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00004000u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRobot::CopyFrom(const ConfigRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  return true;
}

void ConfigRobot::Swap(ConfigRobot* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigRobot* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigRobot::UnsafeArenaSwap(ConfigRobot* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigRobot::InternalSwap(ConfigRobot* other) {
  using std::swap;
  score_.Swap(&other->score_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  captain_level_.Swap(&other->captain_level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sailor_num_in_jjc_.Swap(&other->sailor_num_in_jjc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sailor_in_jjc_.Swap(&other->sailor_in_jjc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sailor_level_.Swap(&other->sailor_level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sailor_star_.Swap(&other->sailor_star_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ship_model_.Swap(&other->ship_model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sailor_practice_.Swap(&other->sailor_practice_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sailor_num_in_ship_.Swap(&other->sailor_num_in_ship_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sailor_in_ship_.Swap(&other->sailor_in_ship_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  equip_quality_.Swap(&other->equip_quality_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  items_.Swap(&other->items_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invade_score_.Swap(&other->invade_score_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigRobot::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigBeacon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigBeacon::kLevelFieldNumber;
const int ConfigBeacon::kLevelUpCostFieldNumber;
const int ConfigBeacon::kLevelUpTimeFieldNumber;
const int ConfigBeacon::kExploreScopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigBeacon::ConfigBeacon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeacon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigBeacon)
}
ConfigBeacon::ConfigBeacon(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeacon.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigBeacon)
}
ConfigBeacon::ConfigBeacon(const ConfigBeacon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_up_cost()) {
    level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_up_cost(),
      GetArenaNoVirtual());
  }
  explore_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_explore_scope()) {
    explore_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explore_scope(),
      GetArenaNoVirtual());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_up_time_) -
    reinterpret_cast<char*>(&level_)) + sizeof(level_up_time_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigBeacon)
}

void ConfigBeacon::SharedCtor() {
  level_up_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explore_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_up_time_) -
      reinterpret_cast<char*>(&level_)) + sizeof(level_up_time_));
}

ConfigBeacon::~ConfigBeacon() {
  // @@protoc_insertion_point(destructor:db.ConfigBeacon)
  SharedDtor();
}

void ConfigBeacon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  level_up_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explore_scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigBeacon::ArenaDtor(void* object) {
  ConfigBeacon* _this = reinterpret_cast< ConfigBeacon* >(object);
  (void)_this;
}
void ConfigBeacon::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigBeacon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigBeacon::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigBeacon& ConfigBeacon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeacon.base);
  return *internal_default_instance();
}


void ConfigBeacon::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigBeacon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      level_up_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      explore_scope_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_up_time_) -
        reinterpret_cast<char*>(&level_)) + sizeof(level_up_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigBeacon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigBeacon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level_up_cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_up_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level_up_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level_up_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_up_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes explore_scope = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_explore_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigBeacon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigBeacon)
  return false;
#undef DO_
}

void ConfigBeacon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigBeacon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required bytes level_up_cost = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->level_up_cost(), output);
  }

  // required int32 level_up_time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level_up_time(), output);
  }

  // required bytes explore_scope = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->explore_scope(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigBeacon)
}

::google::protobuf::uint8* ConfigBeacon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigBeacon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required bytes level_up_cost = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->level_up_cost(), target);
  }

  // required int32 level_up_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level_up_time(), target);
  }

  // required bytes explore_scope = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->explore_scope(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigBeacon)
  return target;
}

size_t ConfigBeacon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigBeacon)
  size_t total_size = 0;

  if (has_level_up_cost()) {
    // required bytes level_up_cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_cost());
  }

  if (has_explore_scope()) {
    // required bytes explore_scope = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->explore_scope());
  }

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_level_up_time()) {
    // required int32 level_up_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_time());
  }

  return total_size;
}
size_t ConfigBeacon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigBeacon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes level_up_cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_up_cost());

    // required bytes explore_scope = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->explore_scope());

    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 level_up_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_up_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigBeacon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigBeacon)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigBeacon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigBeacon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigBeacon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigBeacon)
    MergeFrom(*source);
  }
}

void ConfigBeacon::MergeFrom(const ConfigBeacon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigBeacon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_level_up_cost(from.level_up_cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_explore_scope(from.explore_scope());
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_up_time_ = from.level_up_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigBeacon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigBeacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigBeacon::CopyFrom(const ConfigBeacon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigBeacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigBeacon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigBeacon::Swap(ConfigBeacon* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigBeacon* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigBeacon::UnsafeArenaSwap(ConfigBeacon* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigBeacon::InternalSwap(ConfigBeacon* other) {
  using std::swap;
  level_up_cost_.Swap(&other->level_up_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explore_scope_.Swap(&other->explore_scope_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(level_up_time_, other->level_up_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigBeacon::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMaelstromTile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMaelstromTile::kIdFieldNumber;
const int ConfigMaelstromTile::kEventFieldNumber;
const int ConfigMaelstromTile::kOilCostFieldNumber;
const int ConfigMaelstromTile::kEventNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMaelstromTile::ConfigMaelstromTile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstromTile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMaelstromTile)
}
ConfigMaelstromTile::ConfigMaelstromTile(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstromTile.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMaelstromTile)
}
ConfigMaelstromTile::ConfigMaelstromTile(const ConfigMaelstromTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event()) {
    event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(event_num_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigMaelstromTile)
}

void ConfigMaelstromTile::SharedCtor() {
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(event_num_));
}

ConfigMaelstromTile::~ConfigMaelstromTile() {
  // @@protoc_insertion_point(destructor:db.ConfigMaelstromTile)
  SharedDtor();
}

void ConfigMaelstromTile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigMaelstromTile::ArenaDtor(void* object) {
  ConfigMaelstromTile* _this = reinterpret_cast< ConfigMaelstromTile* >(object);
  (void)_this;
}
void ConfigMaelstromTile::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMaelstromTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMaelstromTile::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMaelstromTile& ConfigMaelstromTile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstromTile.base);
  return *internal_default_instance();
}


void ConfigMaelstromTile::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMaelstromTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_num_) -
        reinterpret_cast<char*>(&id_)) + sizeof(event_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMaelstromTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMaelstromTile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 oil_cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_oil_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oil_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 event_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_event_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMaelstromTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMaelstromTile)
  return false;
#undef DO_
}

void ConfigMaelstromTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMaelstromTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->event(), output);
  }

  // required int32 oil_cost = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oil_cost(), output);
  }

  // required int32 event_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMaelstromTile)
}

::google::protobuf::uint8* ConfigMaelstromTile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMaelstromTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes event = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->event(), target);
  }

  // required int32 oil_cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oil_cost(), target);
  }

  // required int32 event_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMaelstromTile)
  return target;
}

size_t ConfigMaelstromTile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigMaelstromTile)
  size_t total_size = 0;

  if (has_event()) {
    // required bytes event = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_oil_cost()) {
    // required int32 oil_cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oil_cost());
  }

  if (has_event_num()) {
    // required int32 event_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_num());
  }

  return total_size;
}
size_t ConfigMaelstromTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMaelstromTile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes event = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 oil_cost = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oil_cost());

    // required int32 event_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMaelstromTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMaelstromTile)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMaelstromTile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMaelstromTile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMaelstromTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMaelstromTile)
    MergeFrom(*source);
  }
}

void ConfigMaelstromTile::MergeFrom(const ConfigMaelstromTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMaelstromTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_event(from.event());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      oil_cost_ = from.oil_cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_num_ = from.event_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigMaelstromTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMaelstromTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMaelstromTile::CopyFrom(const ConfigMaelstromTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMaelstromTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMaelstromTile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigMaelstromTile::Swap(ConfigMaelstromTile* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMaelstromTile* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMaelstromTile::UnsafeArenaSwap(ConfigMaelstromTile* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMaelstromTile::InternalSwap(ConfigMaelstromTile* other) {
  using std::swap;
  event_.Swap(&other->event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(oil_cost_, other->oil_cost_);
  swap(event_num_, other->event_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMaelstromTile::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMaelstrom::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMaelstrom::kIdFieldNumber;
const int ConfigMaelstrom::kMapSizeFieldNumber;
const int ConfigMaelstrom::kMapFieldNumber;
const int ConfigMaelstrom::kGuildIslandPosFieldNumber;
const int ConfigMaelstrom::kGuildIslandSizeFieldNumber;
const int ConfigMaelstrom::kOilWellPosFieldNumber;
const int ConfigMaelstrom::kOilWellSizeFieldNumber;
const int ConfigMaelstrom::kOilIdFieldNumber;
const int ConfigMaelstrom::kOilOutputFieldNumber;
const int ConfigMaelstrom::kOilReservesFieldNumber;
const int ConfigMaelstrom::kShipOilReservesFieldNumber;
const int ConfigMaelstrom::kRepairSecondsFieldNumber;
const int ConfigMaelstrom::kEventRefreshTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMaelstrom::ConfigMaelstrom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstrom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMaelstrom)
}
ConfigMaelstrom::ConfigMaelstrom(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstrom.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMaelstrom)
}
ConfigMaelstrom::ConfigMaelstrom(const ConfigMaelstrom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_size()) {
    map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_size(),
      GetArenaNoVirtual());
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map(),
      GetArenaNoVirtual());
  }
  guild_island_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_island_pos()) {
    guild_island_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_island_pos(),
      GetArenaNoVirtual());
  }
  guild_island_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_island_size()) {
    guild_island_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_island_size(),
      GetArenaNoVirtual());
  }
  oil_well_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oil_well_pos()) {
    oil_well_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oil_well_pos(),
      GetArenaNoVirtual());
  }
  oil_well_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oil_well_size()) {
    oil_well_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oil_well_size(),
      GetArenaNoVirtual());
  }
  event_refresh_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_refresh_time()) {
    event_refresh_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_refresh_time(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&repair_seconds_) -
    reinterpret_cast<char*>(&id_)) + sizeof(repair_seconds_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigMaelstrom)
}

void ConfigMaelstrom::SharedCtor() {
  map_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_island_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_island_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oil_well_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oil_well_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_refresh_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repair_seconds_) -
      reinterpret_cast<char*>(&id_)) + sizeof(repair_seconds_));
}

ConfigMaelstrom::~ConfigMaelstrom() {
  // @@protoc_insertion_point(destructor:db.ConfigMaelstrom)
  SharedDtor();
}

void ConfigMaelstrom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  map_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_island_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_island_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oil_well_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oil_well_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_refresh_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigMaelstrom::ArenaDtor(void* object) {
  ConfigMaelstrom* _this = reinterpret_cast< ConfigMaelstrom* >(object);
  (void)_this;
}
void ConfigMaelstrom::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMaelstrom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMaelstrom::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMaelstrom& ConfigMaelstrom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstrom.base);
  return *internal_default_instance();
}


void ConfigMaelstrom::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMaelstrom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      map_size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      guild_island_pos_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      guild_island_size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      oil_well_pos_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      oil_well_size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      event_refresh_time_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  if (cached_has_bits & 7936u) {
    ::memset(&oil_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&repair_seconds_) -
        reinterpret_cast<char*>(&oil_id_)) + sizeof(repair_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMaelstrom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMaelstrom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes map_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes guild_island_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_island_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes guild_island_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_island_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes oil_well_pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oil_well_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes oil_well_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oil_well_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 oil_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_oil_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oil_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 oil_output = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_oil_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oil_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 oil_reserves = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_oil_reserves();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oil_reserves_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ship_oil_reserves = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_ship_oil_reserves();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_oil_reserves_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 repair_seconds = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_repair_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repair_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes event_refresh_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_refresh_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMaelstrom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMaelstrom)
  return false;
#undef DO_
}

void ConfigMaelstrom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMaelstrom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes map_size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->map_size(), output);
  }

  // required bytes map = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->map(), output);
  }

  // required bytes guild_island_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->guild_island_pos(), output);
  }

  // required bytes guild_island_size = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->guild_island_size(), output);
  }

  // required bytes oil_well_pos = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->oil_well_pos(), output);
  }

  // required bytes oil_well_size = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->oil_well_size(), output);
  }

  // required int32 oil_id = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->oil_id(), output);
  }

  // required int32 oil_output = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->oil_output(), output);
  }

  // required int32 oil_reserves = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->oil_reserves(), output);
  }

  // required int32 ship_oil_reserves = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ship_oil_reserves(), output);
  }

  // required int32 repair_seconds = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->repair_seconds(), output);
  }

  // required bytes event_refresh_time = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->event_refresh_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMaelstrom)
}

::google::protobuf::uint8* ConfigMaelstrom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMaelstrom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes map_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->map_size(), target);
  }

  // required bytes map = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->map(), target);
  }

  // required bytes guild_island_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->guild_island_pos(), target);
  }

  // required bytes guild_island_size = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->guild_island_size(), target);
  }

  // required bytes oil_well_pos = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->oil_well_pos(), target);
  }

  // required bytes oil_well_size = 7;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->oil_well_size(), target);
  }

  // required int32 oil_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->oil_id(), target);
  }

  // required int32 oil_output = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->oil_output(), target);
  }

  // required int32 oil_reserves = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->oil_reserves(), target);
  }

  // required int32 ship_oil_reserves = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ship_oil_reserves(), target);
  }

  // required int32 repair_seconds = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->repair_seconds(), target);
  }

  // required bytes event_refresh_time = 13;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->event_refresh_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMaelstrom)
  return target;
}

size_t ConfigMaelstrom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigMaelstrom)
  size_t total_size = 0;

  if (has_map_size()) {
    // required bytes map_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_size());
  }

  if (has_map()) {
    // required bytes map = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map());
  }

  if (has_guild_island_pos()) {
    // required bytes guild_island_pos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->guild_island_pos());
  }

  if (has_guild_island_size()) {
    // required bytes guild_island_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->guild_island_size());
  }

  if (has_oil_well_pos()) {
    // required bytes oil_well_pos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->oil_well_pos());
  }

  if (has_oil_well_size()) {
    // required bytes oil_well_size = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->oil_well_size());
  }

  if (has_event_refresh_time()) {
    // required bytes event_refresh_time = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event_refresh_time());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_oil_id()) {
    // required int32 oil_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oil_id());
  }

  if (has_oil_output()) {
    // required int32 oil_output = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oil_output());
  }

  if (has_oil_reserves()) {
    // required int32 oil_reserves = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oil_reserves());
  }

  if (has_ship_oil_reserves()) {
    // required int32 ship_oil_reserves = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ship_oil_reserves());
  }

  if (has_repair_seconds()) {
    // required int32 repair_seconds = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repair_seconds());
  }

  return total_size;
}
size_t ConfigMaelstrom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMaelstrom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required bytes map_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_size());

    // required bytes map = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map());

    // required bytes guild_island_pos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->guild_island_pos());

    // required bytes guild_island_size = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->guild_island_size());

    // required bytes oil_well_pos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->oil_well_pos());

    // required bytes oil_well_size = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->oil_well_size());

    // required bytes event_refresh_time = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event_refresh_time());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 oil_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oil_id());

    // required int32 oil_output = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oil_output());

    // required int32 oil_reserves = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oil_reserves());

    // required int32 ship_oil_reserves = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ship_oil_reserves());

    // required int32 repair_seconds = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repair_seconds());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMaelstrom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMaelstrom)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMaelstrom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMaelstrom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMaelstrom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMaelstrom)
    MergeFrom(*source);
  }
}

void ConfigMaelstrom::MergeFrom(const ConfigMaelstrom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMaelstrom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_map_size(from.map_size());
    }
    if (cached_has_bits & 0x00000002u) {
      set_map(from.map());
    }
    if (cached_has_bits & 0x00000004u) {
      set_guild_island_pos(from.guild_island_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      set_guild_island_size(from.guild_island_size());
    }
    if (cached_has_bits & 0x00000010u) {
      set_oil_well_pos(from.oil_well_pos());
    }
    if (cached_has_bits & 0x00000020u) {
      set_oil_well_size(from.oil_well_size());
    }
    if (cached_has_bits & 0x00000040u) {
      set_event_refresh_time(from.event_refresh_time());
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      oil_id_ = from.oil_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      oil_output_ = from.oil_output_;
    }
    if (cached_has_bits & 0x00000400u) {
      oil_reserves_ = from.oil_reserves_;
    }
    if (cached_has_bits & 0x00000800u) {
      ship_oil_reserves_ = from.ship_oil_reserves_;
    }
    if (cached_has_bits & 0x00001000u) {
      repair_seconds_ = from.repair_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigMaelstrom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMaelstrom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMaelstrom::CopyFrom(const ConfigMaelstrom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMaelstrom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMaelstrom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void ConfigMaelstrom::Swap(ConfigMaelstrom* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMaelstrom* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMaelstrom::UnsafeArenaSwap(ConfigMaelstrom* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMaelstrom::InternalSwap(ConfigMaelstrom* other) {
  using std::swap;
  map_size_.Swap(&other->map_size_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_island_pos_.Swap(&other->guild_island_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_island_size_.Swap(&other->guild_island_size_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oil_well_pos_.Swap(&other->oil_well_pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oil_well_size_.Swap(&other->oil_well_size_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_refresh_time_.Swap(&other->event_refresh_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(oil_id_, other->oil_id_);
  swap(oil_output_, other->oil_output_);
  swap(oil_reserves_, other->oil_reserves_);
  swap(ship_oil_reserves_, other->ship_oil_reserves_);
  swap(repair_seconds_, other->repair_seconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMaelstrom::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMaelstromEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMaelstromEvent::kIdFieldNumber;
const int ConfigMaelstromEvent::kTypeFieldNumber;
const int ConfigMaelstromEvent::kNeedLevelFieldNumber;
const int ConfigMaelstromEvent::kContantFieldNumber;
const int ConfigMaelstromEvent::kRewardFieldNumber;
const int ConfigMaelstromEvent::kTriggerTimesFieldNumber;
const int ConfigMaelstromEvent::kTriggerEventFieldNumber;
const int ConfigMaelstromEvent::kExplorePointFieldNumber;
const int ConfigMaelstromEvent::kExploreLevelUpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMaelstromEvent::ConfigMaelstromEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstromEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMaelstromEvent)
}
ConfigMaelstromEvent::ConfigMaelstromEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstromEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMaelstromEvent)
}
ConfigMaelstromEvent::ConfigMaelstromEvent(const ConfigMaelstromEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  need_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_need_level()) {
    need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.need_level(),
      GetArenaNoVirtual());
  }
  contant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contant()) {
    contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contant(),
      GetArenaNoVirtual());
  }
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward()) {
    reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward(),
      GetArenaNoVirtual());
  }
  trigger_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_event()) {
    trigger_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_event(),
      GetArenaNoVirtual());
  }
  explore_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_explore_point()) {
    explore_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explore_point(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&explore_level_up_) -
    reinterpret_cast<char*>(&id_)) + sizeof(explore_level_up_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigMaelstromEvent)
}

void ConfigMaelstromEvent::SharedCtor() {
  need_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explore_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explore_level_up_) -
      reinterpret_cast<char*>(&id_)) + sizeof(explore_level_up_));
}

ConfigMaelstromEvent::~ConfigMaelstromEvent() {
  // @@protoc_insertion_point(destructor:db.ConfigMaelstromEvent)
  SharedDtor();
}

void ConfigMaelstromEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  need_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contant_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explore_point_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigMaelstromEvent::ArenaDtor(void* object) {
  ConfigMaelstromEvent* _this = reinterpret_cast< ConfigMaelstromEvent* >(object);
  (void)_this;
}
void ConfigMaelstromEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMaelstromEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMaelstromEvent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMaelstromEvent& ConfigMaelstromEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigMaelstromEvent.base);
  return *internal_default_instance();
}


void ConfigMaelstromEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMaelstromEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      need_level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      contant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      reward_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      trigger_event_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      explore_point_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_times_) -
        reinterpret_cast<char*>(&id_)) + sizeof(trigger_times_));
  }
  explore_level_up_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMaelstromEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMaelstromEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes need_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_need_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes contant = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 trigger_times = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_trigger_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger_event = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes explore_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_explore_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 explore_level_up = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_explore_level_up();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explore_level_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMaelstromEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMaelstromEvent)
  return false;
#undef DO_
}

void ConfigMaelstromEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMaelstromEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes need_level = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->need_level(), output);
  }

  // required bytes contant = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->contant(), output);
  }

  // required bytes reward = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->reward(), output);
  }

  // required int32 trigger_times = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->trigger_times(), output);
  }

  // required bytes trigger_event = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->trigger_event(), output);
  }

  // required bytes explore_point = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->explore_point(), output);
  }

  // required int32 explore_level_up = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->explore_level_up(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMaelstromEvent)
}

::google::protobuf::uint8* ConfigMaelstromEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMaelstromEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes need_level = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->need_level(), target);
  }

  // required bytes contant = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->contant(), target);
  }

  // required bytes reward = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->reward(), target);
  }

  // required int32 trigger_times = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->trigger_times(), target);
  }

  // required bytes trigger_event = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->trigger_event(), target);
  }

  // required bytes explore_point = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->explore_point(), target);
  }

  // required int32 explore_level_up = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->explore_level_up(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMaelstromEvent)
  return target;
}

size_t ConfigMaelstromEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigMaelstromEvent)
  size_t total_size = 0;

  if (has_need_level()) {
    // required bytes need_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_level());
  }

  if (has_contant()) {
    // required bytes contant = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->contant());
  }

  if (has_reward()) {
    // required bytes reward = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());
  }

  if (has_trigger_event()) {
    // required bytes trigger_event = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_event());
  }

  if (has_explore_point()) {
    // required bytes explore_point = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->explore_point());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_trigger_times()) {
    // required int32 trigger_times = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_times());
  }

  if (has_explore_level_up()) {
    // required int32 explore_level_up = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explore_level_up());
  }

  return total_size;
}
size_t ConfigMaelstromEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMaelstromEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes need_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_level());

    // required bytes contant = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->contant());

    // required bytes reward = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward());

    // required bytes trigger_event = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger_event());

    // required bytes explore_point = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->explore_point());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 trigger_times = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_times());

    // required int32 explore_level_up = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explore_level_up());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMaelstromEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMaelstromEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMaelstromEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMaelstromEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMaelstromEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMaelstromEvent)
    MergeFrom(*source);
  }
}

void ConfigMaelstromEvent::MergeFrom(const ConfigMaelstromEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMaelstromEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_need_level(from.need_level());
    }
    if (cached_has_bits & 0x00000002u) {
      set_contant(from.contant());
    }
    if (cached_has_bits & 0x00000004u) {
      set_reward(from.reward());
    }
    if (cached_has_bits & 0x00000008u) {
      set_trigger_event(from.trigger_event());
    }
    if (cached_has_bits & 0x00000010u) {
      set_explore_point(from.explore_point());
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      trigger_times_ = from.trigger_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_explore_level_up(from.explore_level_up());
  }
}

void ConfigMaelstromEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMaelstromEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMaelstromEvent::CopyFrom(const ConfigMaelstromEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMaelstromEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMaelstromEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigMaelstromEvent::Swap(ConfigMaelstromEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMaelstromEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMaelstromEvent::UnsafeArenaSwap(ConfigMaelstromEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMaelstromEvent::InternalSwap(ConfigMaelstromEvent* other) {
  using std::swap;
  need_level_.Swap(&other->need_level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contant_.Swap(&other->contant_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_.Swap(&other->reward_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_event_.Swap(&other->trigger_event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explore_point_.Swap(&other->explore_point_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(trigger_times_, other->trigger_times_);
  swap(explore_level_up_, other->explore_level_up_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMaelstromEvent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigProfession::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigProfession::kIdFieldNumber;
const int ConfigProfession::kMainAttrFieldNumber;
const int ConfigProfession::kProArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigProfession::ConfigProfession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigProfession.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigProfession)
}
ConfigProfession::ConfigProfession(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigProfession.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigProfession)
}
ConfigProfession::ConfigProfession(const ConfigProfession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pro_args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pro_args()) {
    pro_args_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pro_args(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&main_attr_) -
    reinterpret_cast<char*>(&id_)) + sizeof(main_attr_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigProfession)
}

void ConfigProfession::SharedCtor() {
  pro_args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_attr_) -
      reinterpret_cast<char*>(&id_)) + sizeof(main_attr_));
}

ConfigProfession::~ConfigProfession() {
  // @@protoc_insertion_point(destructor:db.ConfigProfession)
  SharedDtor();
}

void ConfigProfession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  pro_args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigProfession::ArenaDtor(void* object) {
  ConfigProfession* _this = reinterpret_cast< ConfigProfession* >(object);
  (void)_this;
}
void ConfigProfession::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigProfession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigProfession::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigProfession& ConfigProfession::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigProfession.base);
  return *internal_default_instance();
}


void ConfigProfession::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigProfession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pro_args_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 6u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&main_attr_) -
        reinterpret_cast<char*>(&id_)) + sizeof(main_attr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigProfession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigProfession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 main_attr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_main_attr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_attr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pro_args = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pro_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigProfession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigProfession)
  return false;
#undef DO_
}

void ConfigProfession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigProfession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 main_attr = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->main_attr(), output);
  }

  // required bytes pro_args = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pro_args(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigProfession)
}

::google::protobuf::uint8* ConfigProfession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigProfession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 main_attr = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->main_attr(), target);
  }

  // required bytes pro_args = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pro_args(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigProfession)
  return target;
}

size_t ConfigProfession::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigProfession)
  size_t total_size = 0;

  if (has_pro_args()) {
    // required bytes pro_args = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pro_args());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_main_attr()) {
    // required int32 main_attr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->main_attr());
  }

  return total_size;
}
size_t ConfigProfession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigProfession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes pro_args = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pro_args());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 main_attr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->main_attr());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigProfession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigProfession)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigProfession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigProfession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigProfession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigProfession)
    MergeFrom(*source);
  }
}

void ConfigProfession::MergeFrom(const ConfigProfession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigProfession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_pro_args(from.pro_args());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      main_attr_ = from.main_attr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigProfession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigProfession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigProfession::CopyFrom(const ConfigProfession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigProfession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigProfession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigProfession::Swap(ConfigProfession* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigProfession* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigProfession::UnsafeArenaSwap(ConfigProfession* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigProfession::InternalSwap(ConfigProfession* other) {
  using std::swap;
  pro_args_.Swap(&other->pro_args_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(main_attr_, other->main_attr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigProfession::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigBeaconTalent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigBeaconTalent::kIdFieldNumber;
const int ConfigBeaconTalent::kLevelFieldNumber;
const int ConfigBeaconTalent::kMaxLevelFieldNumber;
const int ConfigBeaconTalent::kCostFieldNumber;
const int ConfigBeaconTalent::kPreTalentFieldNumber;
const int ConfigBeaconTalent::kGetItemFieldNumber;
const int ConfigBeaconTalent::kEventRewardAddFieldNumber;
const int ConfigBeaconTalent::kPointCostDownFieldNumber;
const int ConfigBeaconTalent::kPointGetUpFieldNumber;
const int ConfigBeaconTalent::kAdjunctFieldNumber;
const int ConfigBeaconTalent::kAttributeAddFieldNumber;
const int ConfigBeaconTalent::kEnemyWeakenFieldNumber;
const int ConfigBeaconTalent::kEventWeakenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigBeaconTalent::ConfigBeaconTalent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeaconTalent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigBeaconTalent)
}
ConfigBeaconTalent::ConfigBeaconTalent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeaconTalent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigBeaconTalent)
}
ConfigBeaconTalent::ConfigBeaconTalent(const ConfigBeaconTalent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pre_talent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pre_talent()) {
    pre_talent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pre_talent(),
      GetArenaNoVirtual());
  }
  get_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_get_item()) {
    get_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.get_item(),
      GetArenaNoVirtual());
  }
  event_reward_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_reward_add()) {
    event_reward_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_reward_add(),
      GetArenaNoVirtual());
  }
  point_cost_down_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_point_cost_down()) {
    point_cost_down_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.point_cost_down(),
      GetArenaNoVirtual());
  }
  point_get_up_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_point_get_up()) {
    point_get_up_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.point_get_up(),
      GetArenaNoVirtual());
  }
  adjunct_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adjunct()) {
    adjunct_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adjunct(),
      GetArenaNoVirtual());
  }
  attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attribute_add()) {
    attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_add(),
      GetArenaNoVirtual());
  }
  enemy_weaken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enemy_weaken()) {
    enemy_weaken_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enemy_weaken(),
      GetArenaNoVirtual());
  }
  event_weaken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_weaken()) {
    event_weaken_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_weaken(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigBeaconTalent)
}

void ConfigBeaconTalent::SharedCtor() {
  pre_talent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_reward_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_cost_down_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_get_up_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enemy_weaken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_weaken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cost_));
}

ConfigBeaconTalent::~ConfigBeaconTalent() {
  // @@protoc_insertion_point(destructor:db.ConfigBeaconTalent)
  SharedDtor();
}

void ConfigBeaconTalent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  pre_talent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_reward_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_cost_down_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_get_up_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adjunct_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attribute_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enemy_weaken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_weaken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigBeaconTalent::ArenaDtor(void* object) {
  ConfigBeaconTalent* _this = reinterpret_cast< ConfigBeaconTalent* >(object);
  (void)_this;
}
void ConfigBeaconTalent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigBeaconTalent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigBeaconTalent::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigBeaconTalent& ConfigBeaconTalent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeaconTalent.base);
  return *internal_default_instance();
}


void ConfigBeaconTalent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigBeaconTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pre_talent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      get_item_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      event_reward_add_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      point_cost_down_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      point_get_up_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      adjunct_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      attribute_add_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      enemy_weaken_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    event_weaken_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 7680u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cost_) -
        reinterpret_cast<char*>(&id_)) + sizeof(cost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigBeaconTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigBeaconTalent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pre_talent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pre_talent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes get_item = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_get_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes event_reward_add = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_reward_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes point_cost_down = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_point_cost_down()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes point_get_up = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_point_get_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes adjunct = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adjunct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes attribute_add = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attribute_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes enemy_weaken = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enemy_weaken()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes event_weaken = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_weaken()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigBeaconTalent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigBeaconTalent)
  return false;
#undef DO_
}

void ConfigBeaconTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigBeaconTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 max_level = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  // required int32 cost = 4;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost(), output);
  }

  // required bytes pre_talent = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pre_talent(), output);
  }

  // required bytes get_item = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->get_item(), output);
  }

  // required bytes event_reward_add = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->event_reward_add(), output);
  }

  // required bytes point_cost_down = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->point_cost_down(), output);
  }

  // required bytes point_get_up = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->point_get_up(), output);
  }

  // required bytes adjunct = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->adjunct(), output);
  }

  // required bytes attribute_add = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->attribute_add(), output);
  }

  // required bytes enemy_weaken = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->enemy_weaken(), output);
  }

  // required bytes event_weaken = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->event_weaken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigBeaconTalent)
}

::google::protobuf::uint8* ConfigBeaconTalent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigBeaconTalent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 max_level = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  // required int32 cost = 4;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost(), target);
  }

  // required bytes pre_talent = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pre_talent(), target);
  }

  // required bytes get_item = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->get_item(), target);
  }

  // required bytes event_reward_add = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->event_reward_add(), target);
  }

  // required bytes point_cost_down = 8;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->point_cost_down(), target);
  }

  // required bytes point_get_up = 9;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->point_get_up(), target);
  }

  // required bytes adjunct = 10;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->adjunct(), target);
  }

  // required bytes attribute_add = 11;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->attribute_add(), target);
  }

  // required bytes enemy_weaken = 12;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->enemy_weaken(), target);
  }

  // required bytes event_weaken = 13;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->event_weaken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigBeaconTalent)
  return target;
}

size_t ConfigBeaconTalent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigBeaconTalent)
  size_t total_size = 0;

  if (has_pre_talent()) {
    // required bytes pre_talent = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_talent());
  }

  if (has_get_item()) {
    // required bytes get_item = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get_item());
  }

  if (has_event_reward_add()) {
    // required bytes event_reward_add = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event_reward_add());
  }

  if (has_point_cost_down()) {
    // required bytes point_cost_down = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->point_cost_down());
  }

  if (has_point_get_up()) {
    // required bytes point_get_up = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->point_get_up());
  }

  if (has_adjunct()) {
    // required bytes adjunct = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct());
  }

  if (has_attribute_add()) {
    // required bytes attribute_add = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute_add());
  }

  if (has_enemy_weaken()) {
    // required bytes enemy_weaken = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->enemy_weaken());
  }

  if (has_event_weaken()) {
    // required bytes event_weaken = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event_weaken());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_max_level()) {
    // required int32 max_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_level());
  }

  if (has_cost()) {
    // required int32 cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost());
  }

  return total_size;
}
size_t ConfigBeaconTalent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigBeaconTalent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required bytes pre_talent = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pre_talent());

    // required bytes get_item = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get_item());

    // required bytes event_reward_add = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event_reward_add());

    // required bytes point_cost_down = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->point_cost_down());

    // required bytes point_get_up = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->point_get_up());

    // required bytes adjunct = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adjunct());

    // required bytes attribute_add = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attribute_add());

    // required bytes enemy_weaken = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->enemy_weaken());

    // required bytes event_weaken = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->event_weaken());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 max_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_level());

    // required int32 cost = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigBeaconTalent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigBeaconTalent)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigBeaconTalent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigBeaconTalent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigBeaconTalent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigBeaconTalent)
    MergeFrom(*source);
  }
}

void ConfigBeaconTalent::MergeFrom(const ConfigBeaconTalent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigBeaconTalent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_pre_talent(from.pre_talent());
    }
    if (cached_has_bits & 0x00000002u) {
      set_get_item(from.get_item());
    }
    if (cached_has_bits & 0x00000004u) {
      set_event_reward_add(from.event_reward_add());
    }
    if (cached_has_bits & 0x00000008u) {
      set_point_cost_down(from.point_cost_down());
    }
    if (cached_has_bits & 0x00000010u) {
      set_point_get_up(from.point_get_up());
    }
    if (cached_has_bits & 0x00000020u) {
      set_adjunct(from.adjunct());
    }
    if (cached_has_bits & 0x00000040u) {
      set_attribute_add(from.attribute_add());
    }
    if (cached_has_bits & 0x00000080u) {
      set_enemy_weaken(from.enemy_weaken());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      set_event_weaken(from.event_weaken());
    }
    if (cached_has_bits & 0x00000200u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000400u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_level_ = from.max_level_;
    }
    if (cached_has_bits & 0x00001000u) {
      cost_ = from.cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigBeaconTalent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigBeaconTalent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigBeaconTalent::CopyFrom(const ConfigBeaconTalent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigBeaconTalent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigBeaconTalent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void ConfigBeaconTalent::Swap(ConfigBeaconTalent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigBeaconTalent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigBeaconTalent::UnsafeArenaSwap(ConfigBeaconTalent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigBeaconTalent::InternalSwap(ConfigBeaconTalent* other) {
  using std::swap;
  pre_talent_.Swap(&other->pre_talent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  get_item_.Swap(&other->get_item_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_reward_add_.Swap(&other->event_reward_add_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  point_cost_down_.Swap(&other->point_cost_down_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  point_get_up_.Swap(&other->point_get_up_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  adjunct_.Swap(&other->adjunct_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attribute_add_.Swap(&other->attribute_add_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enemy_weaken_.Swap(&other->enemy_weaken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_weaken_.Swap(&other->event_weaken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(max_level_, other->max_level_);
  swap(cost_, other->cost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigBeaconTalent::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigBeaconTalentGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigBeaconTalentGroup::kIdFieldNumber;
const int ConfigBeaconTalentGroup::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigBeaconTalentGroup::ConfigBeaconTalentGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeaconTalentGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigBeaconTalentGroup)
}
ConfigBeaconTalentGroup::ConfigBeaconTalentGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeaconTalentGroup.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigBeaconTalentGroup)
}
ConfigBeaconTalentGroup::ConfigBeaconTalentGroup(const ConfigBeaconTalentGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigBeaconTalentGroup)
}

void ConfigBeaconTalentGroup::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigBeaconTalentGroup::~ConfigBeaconTalentGroup() {
  // @@protoc_insertion_point(destructor:db.ConfigBeaconTalentGroup)
  SharedDtor();
}

void ConfigBeaconTalentGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigBeaconTalentGroup::ArenaDtor(void* object) {
  ConfigBeaconTalentGroup* _this = reinterpret_cast< ConfigBeaconTalentGroup* >(object);
  (void)_this;
}
void ConfigBeaconTalentGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigBeaconTalentGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigBeaconTalentGroup::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigBeaconTalentGroup& ConfigBeaconTalentGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigBeaconTalentGroup.base);
  return *internal_default_instance();
}


void ConfigBeaconTalentGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigBeaconTalentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigBeaconTalentGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigBeaconTalentGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigBeaconTalentGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigBeaconTalentGroup)
  return false;
#undef DO_
}

void ConfigBeaconTalentGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigBeaconTalentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigBeaconTalentGroup)
}

::google::protobuf::uint8* ConfigBeaconTalentGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigBeaconTalentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigBeaconTalentGroup)
  return target;
}

size_t ConfigBeaconTalentGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigBeaconTalentGroup)
  size_t total_size = 0;

  if (has_content()) {
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigBeaconTalentGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigBeaconTalentGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigBeaconTalentGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigBeaconTalentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigBeaconTalentGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigBeaconTalentGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigBeaconTalentGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigBeaconTalentGroup)
    MergeFrom(*source);
  }
}

void ConfigBeaconTalentGroup::MergeFrom(const ConfigBeaconTalentGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigBeaconTalentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_content(from.content());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigBeaconTalentGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigBeaconTalentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigBeaconTalentGroup::CopyFrom(const ConfigBeaconTalentGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigBeaconTalentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigBeaconTalentGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConfigBeaconTalentGroup::Swap(ConfigBeaconTalentGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigBeaconTalentGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigBeaconTalentGroup::UnsafeArenaSwap(ConfigBeaconTalentGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigBeaconTalentGroup::InternalSwap(ConfigBeaconTalentGroup* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigBeaconTalentGroup::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigDungeonChest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDungeonChest::kIdFieldNumber;
const int ConfigDungeonChest::kTypeFieldNumber;
const int ConfigDungeonChest::kMaxTimesFieldNumber;
const int ConfigDungeonChest::kProbabilityFieldNumber;
const int ConfigDungeonChest::kAddProbabilityFieldNumber;
const int ConfigDungeonChest::kCostFieldNumber;
const int ConfigDungeonChest::kCostInDungeonFieldNumber;
const int ConfigDungeonChest::kGetFieldNumber;
const int ConfigDungeonChest::kGetInDungeonFieldNumber;
const int ConfigDungeonChest::kNeedLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDungeonChest::ConfigDungeonChest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonChest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigDungeonChest)
}
ConfigDungeonChest::ConfigDungeonChest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonChest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigDungeonChest)
}
ConfigDungeonChest::ConfigDungeonChest(const ConfigDungeonChest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  cost_in_dungeon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost_in_dungeon()) {
    cost_in_dungeon_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost_in_dungeon(),
      GetArenaNoVirtual());
  }
  get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_get()) {
    get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.get(),
      GetArenaNoVirtual());
  }
  get_in_dungeon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_get_in_dungeon()) {
    get_in_dungeon_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.get_in_dungeon(),
      GetArenaNoVirtual());
  }
  need_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_need_level()) {
    need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.need_level(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_probability_) -
    reinterpret_cast<char*>(&id_)) + sizeof(add_probability_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigDungeonChest)
}

void ConfigDungeonChest::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_in_dungeon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_in_dungeon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_probability_) -
      reinterpret_cast<char*>(&id_)) + sizeof(add_probability_));
}

ConfigDungeonChest::~ConfigDungeonChest() {
  // @@protoc_insertion_point(destructor:db.ConfigDungeonChest)
  SharedDtor();
}

void ConfigDungeonChest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_in_dungeon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_in_dungeon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDungeonChest::ArenaDtor(void* object) {
  ConfigDungeonChest* _this = reinterpret_cast< ConfigDungeonChest* >(object);
  (void)_this;
}
void ConfigDungeonChest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigDungeonChest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigDungeonChest::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigDungeonChest& ConfigDungeonChest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigDungeonChest.base);
  return *internal_default_instance();
}


void ConfigDungeonChest::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigDungeonChest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cost_in_dungeon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      get_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      get_in_dungeon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      need_level_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_times_) -
        reinterpret_cast<char*>(&id_)) + sizeof(max_times_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&add_probability_) -
        reinterpret_cast<char*>(&probability_)) + sizeof(add_probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigDungeonChest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigDungeonChest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float add_probability = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_add_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &add_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost_in_dungeon = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost_in_dungeon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes get = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes get_in_dungeon = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_get_in_dungeon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes need_level = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_need_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigDungeonChest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigDungeonChest)
  return false;
#undef DO_
}

void ConfigDungeonChest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigDungeonChest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 max_times = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_times(), output);
  }

  // required float probability = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->probability(), output);
  }

  // required float add_probability = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->add_probability(), output);
  }

  // required bytes cost = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->cost(), output);
  }

  // required bytes cost_in_dungeon = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->cost_in_dungeon(), output);
  }

  // required bytes get = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->get(), output);
  }

  // required bytes get_in_dungeon = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->get_in_dungeon(), output);
  }

  // required bytes need_level = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->need_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigDungeonChest)
}

::google::protobuf::uint8* ConfigDungeonChest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigDungeonChest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 max_times = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_times(), target);
  }

  // required float probability = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->probability(), target);
  }

  // required float add_probability = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->add_probability(), target);
  }

  // required bytes cost = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->cost(), target);
  }

  // required bytes cost_in_dungeon = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->cost_in_dungeon(), target);
  }

  // required bytes get = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->get(), target);
  }

  // required bytes get_in_dungeon = 9;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->get_in_dungeon(), target);
  }

  // required bytes need_level = 10;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->need_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigDungeonChest)
  return target;
}

size_t ConfigDungeonChest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigDungeonChest)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_cost_in_dungeon()) {
    // required bytes cost_in_dungeon = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost_in_dungeon());
  }

  if (has_get()) {
    // required bytes get = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get());
  }

  if (has_get_in_dungeon()) {
    // required bytes get_in_dungeon = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get_in_dungeon());
  }

  if (has_need_level()) {
    // required bytes need_level = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_level());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_max_times()) {
    // required int32 max_times = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_times());
  }

  if (has_probability()) {
    // required float probability = 4;
    total_size += 1 + 4;
  }

  if (has_add_probability()) {
    // required float add_probability = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ConfigDungeonChest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigDungeonChest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes cost = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required bytes cost_in_dungeon = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost_in_dungeon());

    // required bytes get = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get());

    // required bytes get_in_dungeon = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get_in_dungeon());

    // required bytes need_level = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->need_level());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 max_times = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_times());

    // required float probability = 4;
    total_size += 1 + 4;

    // required float add_probability = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDungeonChest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigDungeonChest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDungeonChest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDungeonChest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigDungeonChest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigDungeonChest)
    MergeFrom(*source);
  }
}

void ConfigDungeonChest::MergeFrom(const ConfigDungeonChest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigDungeonChest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_cost_in_dungeon(from.cost_in_dungeon());
    }
    if (cached_has_bits & 0x00000004u) {
      set_get(from.get());
    }
    if (cached_has_bits & 0x00000008u) {
      set_get_in_dungeon(from.get_in_dungeon());
    }
    if (cached_has_bits & 0x00000010u) {
      set_need_level(from.need_level());
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_times_ = from.max_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000200u) {
      add_probability_ = from.add_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigDungeonChest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigDungeonChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDungeonChest::CopyFrom(const ConfigDungeonChest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigDungeonChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDungeonChest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void ConfigDungeonChest::Swap(ConfigDungeonChest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigDungeonChest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigDungeonChest::UnsafeArenaSwap(ConfigDungeonChest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigDungeonChest::InternalSwap(ConfigDungeonChest* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cost_in_dungeon_.Swap(&other->cost_in_dungeon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  get_.Swap(&other->get_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  get_in_dungeon_.Swap(&other->get_in_dungeon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  need_level_.Swap(&other->need_level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(max_times_, other->max_times_);
  swap(probability_, other->probability_);
  swap(add_probability_, other->add_probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigDungeonChest::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigGuildStore::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigGuildStore::kLevelFieldNumber;
const int ConfigGuildStore::kExtraGoodsNumFieldNumber;
const int ConfigGuildStore::kNormalGoodsFieldNumber;
const int ConfigGuildStore::kExtraGoodsFieldNumber;
const int ConfigGuildStore::kRefreshTimesFieldNumber;
const int ConfigGuildStore::kDiscountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigGuildStore::ConfigGuildStore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigGuildStore.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigGuildStore)
}
ConfigGuildStore::ConfigGuildStore(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigGuildStore.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigGuildStore)
}
ConfigGuildStore::ConfigGuildStore(const ConfigGuildStore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  normal_goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_normal_goods()) {
    normal_goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_goods(),
      GetArenaNoVirtual());
  }
  extra_goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_goods()) {
    extra_goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_goods(),
      GetArenaNoVirtual());
  }
  refresh_times_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_refresh_times()) {
    refresh_times_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refresh_times(),
      GetArenaNoVirtual());
  }
  discount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_discount()) {
    discount_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discount(),
      GetArenaNoVirtual());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_goods_num_) -
    reinterpret_cast<char*>(&level_)) + sizeof(extra_goods_num_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigGuildStore)
}

void ConfigGuildStore::SharedCtor() {
  normal_goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_goods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_times_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_goods_num_) -
      reinterpret_cast<char*>(&level_)) + sizeof(extra_goods_num_));
}

ConfigGuildStore::~ConfigGuildStore() {
  // @@protoc_insertion_point(destructor:db.ConfigGuildStore)
  SharedDtor();
}

void ConfigGuildStore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  normal_goods_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_goods_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_times_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigGuildStore::ArenaDtor(void* object) {
  ConfigGuildStore* _this = reinterpret_cast< ConfigGuildStore* >(object);
  (void)_this;
}
void ConfigGuildStore::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigGuildStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigGuildStore::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigGuildStore& ConfigGuildStore::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigGuildStore.base);
  return *internal_default_instance();
}


void ConfigGuildStore::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigGuildStore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      normal_goods_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      extra_goods_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      refresh_times_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      discount_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extra_goods_num_) -
        reinterpret_cast<char*>(&level_)) + sizeof(extra_goods_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigGuildStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigGuildStore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 extra_goods_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_extra_goods_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_goods_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes normal_goods = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normal_goods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes extra_goods = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_goods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes refresh_times = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_refresh_times()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes discount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_discount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigGuildStore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigGuildStore)
  return false;
#undef DO_
}

void ConfigGuildStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigGuildStore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 extra_goods_num = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->extra_goods_num(), output);
  }

  // required bytes normal_goods = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->normal_goods(), output);
  }

  // required bytes extra_goods = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->extra_goods(), output);
  }

  // required bytes refresh_times = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->refresh_times(), output);
  }

  // required bytes discount = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->discount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigGuildStore)
}

::google::protobuf::uint8* ConfigGuildStore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigGuildStore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 extra_goods_num = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->extra_goods_num(), target);
  }

  // required bytes normal_goods = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->normal_goods(), target);
  }

  // required bytes extra_goods = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->extra_goods(), target);
  }

  // required bytes refresh_times = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->refresh_times(), target);
  }

  // required bytes discount = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->discount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigGuildStore)
  return target;
}

size_t ConfigGuildStore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigGuildStore)
  size_t total_size = 0;

  if (has_normal_goods()) {
    // required bytes normal_goods = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->normal_goods());
  }

  if (has_extra_goods()) {
    // required bytes extra_goods = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extra_goods());
  }

  if (has_refresh_times()) {
    // required bytes refresh_times = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->refresh_times());
  }

  if (has_discount()) {
    // required bytes discount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->discount());
  }

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_extra_goods_num()) {
    // required int32 extra_goods_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->extra_goods_num());
  }

  return total_size;
}
size_t ConfigGuildStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigGuildStore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes normal_goods = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->normal_goods());

    // required bytes extra_goods = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->extra_goods());

    // required bytes refresh_times = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->refresh_times());

    // required bytes discount = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->discount());

    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 extra_goods_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->extra_goods_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigGuildStore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigGuildStore)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigGuildStore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigGuildStore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigGuildStore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigGuildStore)
    MergeFrom(*source);
  }
}

void ConfigGuildStore::MergeFrom(const ConfigGuildStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigGuildStore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_normal_goods(from.normal_goods());
    }
    if (cached_has_bits & 0x00000002u) {
      set_extra_goods(from.extra_goods());
    }
    if (cached_has_bits & 0x00000004u) {
      set_refresh_times(from.refresh_times());
    }
    if (cached_has_bits & 0x00000008u) {
      set_discount(from.discount());
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      extra_goods_num_ = from.extra_goods_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigGuildStore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigGuildStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigGuildStore::CopyFrom(const ConfigGuildStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigGuildStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGuildStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigGuildStore::Swap(ConfigGuildStore* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigGuildStore* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigGuildStore::UnsafeArenaSwap(ConfigGuildStore* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigGuildStore::InternalSwap(ConfigGuildStore* other) {
  using std::swap;
  normal_goods_.Swap(&other->normal_goods_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extra_goods_.Swap(&other->extra_goods_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  refresh_times_.Swap(&other->refresh_times_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  discount_.Swap(&other->discount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(extra_goods_num_, other->extra_goods_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigGuildStore::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigGameExchange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigGameExchange::kIdFieldNumber;
const int ConfigGameExchange::kCostFieldNumber;
const int ConfigGameExchange::kGetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigGameExchange::ConfigGameExchange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigGameExchange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigGameExchange)
}
ConfigGameExchange::ConfigGameExchange(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigGameExchange.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigGameExchange)
}
ConfigGameExchange::ConfigGameExchange(const ConfigGameExchange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cost()) {
    cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cost(),
      GetArenaNoVirtual());
  }
  get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_get()) {
    get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.get(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigGameExchange)
}

void ConfigGameExchange::SharedCtor() {
  cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigGameExchange::~ConfigGameExchange() {
  // @@protoc_insertion_point(destructor:db.ConfigGameExchange)
  SharedDtor();
}

void ConfigGameExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  get_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigGameExchange::ArenaDtor(void* object) {
  ConfigGameExchange* _this = reinterpret_cast< ConfigGameExchange* >(object);
  (void)_this;
}
void ConfigGameExchange::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigGameExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigGameExchange::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigGameExchange& ConfigGameExchange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigGameExchange.base);
  return *internal_default_instance();
}


void ConfigGameExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigGameExchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      get_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigGameExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigGameExchange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes get = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigGameExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigGameExchange)
  return false;
#undef DO_
}

void ConfigGameExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigGameExchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes cost = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cost(), output);
  }

  // required bytes get = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->get(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigGameExchange)
}

::google::protobuf::uint8* ConfigGameExchange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigGameExchange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes cost = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cost(), target);
  }

  // required bytes get = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->get(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigGameExchange)
  return target;
}

size_t ConfigGameExchange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigGameExchange)
  size_t total_size = 0;

  if (has_cost()) {
    // required bytes cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());
  }

  if (has_get()) {
    // required bytes get = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigGameExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigGameExchange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes cost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cost());

    // required bytes get = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->get());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigGameExchange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigGameExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigGameExchange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigGameExchange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigGameExchange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigGameExchange)
    MergeFrom(*source);
  }
}

void ConfigGameExchange::MergeFrom(const ConfigGameExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigGameExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_cost(from.cost());
    }
    if (cached_has_bits & 0x00000002u) {
      set_get(from.get());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigGameExchange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigGameExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigGameExchange::CopyFrom(const ConfigGameExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigGameExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGameExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigGameExchange::Swap(ConfigGameExchange* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigGameExchange* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigGameExchange::UnsafeArenaSwap(ConfigGameExchange* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigGameExchange::InternalSwap(ConfigGameExchange* other) {
  using std::swap;
  cost_.Swap(&other->cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  get_.Swap(&other->get_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigGameExchange::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigName::kIdFieldNumber;
const int ConfigName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigName::ConfigName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigName.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigName)
}
ConfigName::ConfigName(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigName.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigName)
}
ConfigName::ConfigName(const ConfigName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigName)
}

void ConfigName::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ConfigName::~ConfigName() {
  // @@protoc_insertion_point(destructor:db.ConfigName)
  SharedDtor();
}

void ConfigName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigName::ArenaDtor(void* object) {
  ConfigName* _this = reinterpret_cast< ConfigName* >(object);
  (void)_this;
}
void ConfigName::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigName::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigName& ConfigName::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigName.base);
  return *internal_default_instance();
}


void ConfigName::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigName)
  return false;
#undef DO_
}

void ConfigName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigName)
}

::google::protobuf::uint8* ConfigName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigName)
  return target;
}

size_t ConfigName::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigName)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ConfigName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigName)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigName)
    MergeFrom(*source);
  }
}

void ConfigName::MergeFrom(const ConfigName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigName::CopyFrom(const ConfigName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ConfigName::Swap(ConfigName* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigName* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigName::UnsafeArenaSwap(ConfigName* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigName::InternalSwap(ConfigName* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigName::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigFirstname::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigFirstname::kIdFieldNumber;
const int ConfigFirstname::kTypeFieldNumber;
const int ConfigFirstname::kNameFieldNumber;
const int ConfigFirstname::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigFirstname::ConfigFirstname()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigFirstname.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigFirstname)
}
ConfigFirstname::ConfigFirstname(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFirstname.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigFirstname)
}
ConfigFirstname::ConfigFirstname(const ConfigFirstname& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&id_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigFirstname)
}

void ConfigFirstname::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&id_)) + sizeof(order_));
}

ConfigFirstname::~ConfigFirstname() {
  // @@protoc_insertion_point(destructor:db.ConfigFirstname)
  SharedDtor();
}

void ConfigFirstname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigFirstname::ArenaDtor(void* object) {
  ConfigFirstname* _this = reinterpret_cast< ConfigFirstname* >(object);
  (void)_this;
}
void ConfigFirstname::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigFirstname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigFirstname::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigFirstname& ConfigFirstname::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigFirstname.base);
  return *internal_default_instance();
}


void ConfigFirstname::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigFirstname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&id_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigFirstname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigFirstname)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 order = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigFirstname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigFirstname)
  return false;
#undef DO_
}

void ConfigFirstname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigFirstname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required int32 order = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->order(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigFirstname)
}

::google::protobuf::uint8* ConfigFirstname::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigFirstname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 order = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->order(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigFirstname)
  return target;
}

size_t ConfigFirstname::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigFirstname)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_order()) {
    // required int32 order = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());
  }

  return total_size;
}
size_t ConfigFirstname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigFirstname)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 order = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigFirstname::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigFirstname)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigFirstname* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigFirstname>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigFirstname)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigFirstname)
    MergeFrom(*source);
  }
}

void ConfigFirstname::MergeFrom(const ConfigFirstname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigFirstname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigFirstname::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigFirstname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigFirstname::CopyFrom(const ConfigFirstname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigFirstname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigFirstname::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigFirstname::Swap(ConfigFirstname* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigFirstname* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigFirstname::UnsafeArenaSwap(ConfigFirstname* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigFirstname::InternalSwap(ConfigFirstname* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(order_, other->order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigFirstname::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigLastname::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigLastname::kIdFieldNumber;
const int ConfigLastname::kTypeFieldNumber;
const int ConfigLastname::kNameFieldNumber;
const int ConfigLastname::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigLastname::ConfigLastname()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigLastname.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigLastname)
}
ConfigLastname::ConfigLastname(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigLastname.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigLastname)
}
ConfigLastname::ConfigLastname(const ConfigLastname& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&id_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigLastname)
}

void ConfigLastname::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&id_)) + sizeof(order_));
}

ConfigLastname::~ConfigLastname() {
  // @@protoc_insertion_point(destructor:db.ConfigLastname)
  SharedDtor();
}

void ConfigLastname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigLastname::ArenaDtor(void* object) {
  ConfigLastname* _this = reinterpret_cast< ConfigLastname* >(object);
  (void)_this;
}
void ConfigLastname::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigLastname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigLastname::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigLastname& ConfigLastname::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigLastname.base);
  return *internal_default_instance();
}


void ConfigLastname::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigLastname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&id_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigLastname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigLastname)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 order = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigLastname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigLastname)
  return false;
#undef DO_
}

void ConfigLastname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigLastname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required int32 order = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->order(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigLastname)
}

::google::protobuf::uint8* ConfigLastname::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigLastname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 order = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->order(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigLastname)
  return target;
}

size_t ConfigLastname::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigLastname)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_order()) {
    // required int32 order = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());
  }

  return total_size;
}
size_t ConfigLastname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigLastname)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 order = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigLastname::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigLastname)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigLastname* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigLastname>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigLastname)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigLastname)
    MergeFrom(*source);
  }
}

void ConfigLastname::MergeFrom(const ConfigLastname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigLastname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigLastname::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigLastname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigLastname::CopyFrom(const ConfigLastname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigLastname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigLastname::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigLastname::Swap(ConfigLastname* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigLastname* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigLastname::UnsafeArenaSwap(ConfigLastname* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigLastname::InternalSwap(ConfigLastname* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(order_, other->order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigLastname::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPlayerInvade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPlayerInvade::kMatchScoreFieldNumber;
const int ConfigPlayerInvade::kMatchRemainFieldNumber;
const int ConfigPlayerInvade::kRefreshTimesFieldNumber;
const int ConfigPlayerInvade::kEntrysFieldNumber;
const int ConfigPlayerInvade::kDefendTimeFieldNumber;
const int ConfigPlayerInvade::kWinRoomFieldNumber;
const int ConfigPlayerInvade::kRevengeTimeFieldNumber;
const int ConfigPlayerInvade::kRewardRatioFieldNumber;
const int ConfigPlayerInvade::kExtraRewardRatioFieldNumber;
const int ConfigPlayerInvade::kInvadeCostFieldNumber;
const int ConfigPlayerInvade::kRecordRemainTimeFieldNumber;
const int ConfigPlayerInvade::kRoomEffectFieldNumber;
const int ConfigPlayerInvade::kDropLimitFieldNumber;
const int ConfigPlayerInvade::kDropLimitOnceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPlayerInvade::ConfigPlayerInvade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigPlayerInvade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPlayerInvade)
}
ConfigPlayerInvade::ConfigPlayerInvade(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPlayerInvade.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPlayerInvade)
}
ConfigPlayerInvade::ConfigPlayerInvade(const ConfigPlayerInvade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_score_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_score()) {
    match_score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_score(),
      GetArenaNoVirtual());
  }
  refresh_times_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_refresh_times()) {
    refresh_times_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refresh_times(),
      GetArenaNoVirtual());
  }
  entrys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entrys()) {
    entrys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entrys(),
      GetArenaNoVirtual());
  }
  defend_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_defend_time()) {
    defend_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defend_time(),
      GetArenaNoVirtual());
  }
  win_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_win_room()) {
    win_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.win_room(),
      GetArenaNoVirtual());
  }
  reward_ratio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward_ratio()) {
    reward_ratio_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward_ratio(),
      GetArenaNoVirtual());
  }
  invade_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invade_cost()) {
    invade_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invade_cost(),
      GetArenaNoVirtual());
  }
  room_effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room_effect()) {
    room_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_effect(),
      GetArenaNoVirtual());
  }
  drop_limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_limit()) {
    drop_limit_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_limit(),
      GetArenaNoVirtual());
  }
  drop_limit_once_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_limit_once()) {
    drop_limit_once_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_limit_once(),
      GetArenaNoVirtual());
  }
  ::memcpy(&match_remain_, &from.match_remain_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_remain_time_) -
    reinterpret_cast<char*>(&match_remain_)) + sizeof(record_remain_time_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigPlayerInvade)
}

void ConfigPlayerInvade::SharedCtor() {
  match_score_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_times_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entrys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defend_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  win_room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_ratio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invade_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_limit_once_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_remain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_remain_time_) -
      reinterpret_cast<char*>(&match_remain_)) + sizeof(record_remain_time_));
}

ConfigPlayerInvade::~ConfigPlayerInvade() {
  // @@protoc_insertion_point(destructor:db.ConfigPlayerInvade)
  SharedDtor();
}

void ConfigPlayerInvade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  match_score_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_times_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entrys_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defend_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  win_room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_ratio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invade_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_limit_once_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigPlayerInvade::ArenaDtor(void* object) {
  ConfigPlayerInvade* _this = reinterpret_cast< ConfigPlayerInvade* >(object);
  (void)_this;
}
void ConfigPlayerInvade::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPlayerInvade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPlayerInvade::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPlayerInvade& ConfigPlayerInvade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigPlayerInvade.base);
  return *internal_default_instance();
}


void ConfigPlayerInvade::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPlayerInvade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      match_score_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      refresh_times_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      entrys_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      defend_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      win_room_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      reward_ratio_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      invade_cost_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      room_effect_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      drop_limit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      drop_limit_once_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 15360u) {
    ::memset(&match_remain_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&record_remain_time_) -
        reinterpret_cast<char*>(&match_remain_)) + sizeof(record_remain_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPlayerInvade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPlayerInvade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes match_score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 match_remain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_match_remain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_remain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes refresh_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_refresh_times()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes entrys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entrys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes defend_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_defend_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes win_room = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_win_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 revenge_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_revenge_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revenge_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reward_ratio = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float extra_reward_ratio = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_extra_reward_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &extra_reward_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes invade_cost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invade_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 record_remain_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_record_remain_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_remain_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes room_effect = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop_limit = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop_limit_once = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_limit_once()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPlayerInvade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPlayerInvade)
  return false;
#undef DO_
}

void ConfigPlayerInvade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPlayerInvade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes match_score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->match_score(), output);
  }

  // required int32 match_remain = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_remain(), output);
  }

  // required bytes refresh_times = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->refresh_times(), output);
  }

  // required bytes entrys = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->entrys(), output);
  }

  // required bytes defend_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->defend_time(), output);
  }

  // required bytes win_room = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->win_room(), output);
  }

  // required int32 revenge_time = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->revenge_time(), output);
  }

  // required bytes reward_ratio = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->reward_ratio(), output);
  }

  // required float extra_reward_ratio = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->extra_reward_ratio(), output);
  }

  // required bytes invade_cost = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->invade_cost(), output);
  }

  // required int32 record_remain_time = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->record_remain_time(), output);
  }

  // required bytes room_effect = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->room_effect(), output);
  }

  // required bytes drop_limit = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->drop_limit(), output);
  }

  // required bytes drop_limit_once = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->drop_limit_once(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPlayerInvade)
}

::google::protobuf::uint8* ConfigPlayerInvade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPlayerInvade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes match_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->match_score(), target);
  }

  // required int32 match_remain = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_remain(), target);
  }

  // required bytes refresh_times = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->refresh_times(), target);
  }

  // required bytes entrys = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->entrys(), target);
  }

  // required bytes defend_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->defend_time(), target);
  }

  // required bytes win_room = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->win_room(), target);
  }

  // required int32 revenge_time = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->revenge_time(), target);
  }

  // required bytes reward_ratio = 8;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->reward_ratio(), target);
  }

  // required float extra_reward_ratio = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->extra_reward_ratio(), target);
  }

  // required bytes invade_cost = 10;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->invade_cost(), target);
  }

  // required int32 record_remain_time = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->record_remain_time(), target);
  }

  // required bytes room_effect = 12;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->room_effect(), target);
  }

  // required bytes drop_limit = 13;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->drop_limit(), target);
  }

  // required bytes drop_limit_once = 14;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->drop_limit_once(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPlayerInvade)
  return target;
}

size_t ConfigPlayerInvade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigPlayerInvade)
  size_t total_size = 0;

  if (has_match_score()) {
    // required bytes match_score = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_score());
  }

  if (has_refresh_times()) {
    // required bytes refresh_times = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->refresh_times());
  }

  if (has_entrys()) {
    // required bytes entrys = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entrys());
  }

  if (has_defend_time()) {
    // required bytes defend_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->defend_time());
  }

  if (has_win_room()) {
    // required bytes win_room = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->win_room());
  }

  if (has_reward_ratio()) {
    // required bytes reward_ratio = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward_ratio());
  }

  if (has_invade_cost()) {
    // required bytes invade_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->invade_cost());
  }

  if (has_room_effect()) {
    // required bytes room_effect = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room_effect());
  }

  if (has_drop_limit()) {
    // required bytes drop_limit = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_limit());
  }

  if (has_drop_limit_once()) {
    // required bytes drop_limit_once = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_limit_once());
  }

  if (has_match_remain()) {
    // required int32 match_remain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->match_remain());
  }

  if (has_revenge_time()) {
    // required int32 revenge_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->revenge_time());
  }

  if (has_extra_reward_ratio()) {
    // required float extra_reward_ratio = 9;
    total_size += 1 + 4;
  }

  if (has_record_remain_time()) {
    // required int32 record_remain_time = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->record_remain_time());
  }

  return total_size;
}
size_t ConfigPlayerInvade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPlayerInvade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required bytes match_score = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_score());

    // required bytes refresh_times = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->refresh_times());

    // required bytes entrys = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entrys());

    // required bytes defend_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->defend_time());

    // required bytes win_room = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->win_room());

    // required bytes reward_ratio = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reward_ratio());

    // required bytes invade_cost = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->invade_cost());

    // required bytes room_effect = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room_effect());

    // required bytes drop_limit = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_limit());

    // required bytes drop_limit_once = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_limit_once());

    // required int32 match_remain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->match_remain());

    // required int32 revenge_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->revenge_time());

    // required float extra_reward_ratio = 9;
    total_size += 1 + 4;

    // required int32 record_remain_time = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->record_remain_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPlayerInvade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPlayerInvade)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPlayerInvade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPlayerInvade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPlayerInvade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPlayerInvade)
    MergeFrom(*source);
  }
}

void ConfigPlayerInvade::MergeFrom(const ConfigPlayerInvade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPlayerInvade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_match_score(from.match_score());
    }
    if (cached_has_bits & 0x00000002u) {
      set_refresh_times(from.refresh_times());
    }
    if (cached_has_bits & 0x00000004u) {
      set_entrys(from.entrys());
    }
    if (cached_has_bits & 0x00000008u) {
      set_defend_time(from.defend_time());
    }
    if (cached_has_bits & 0x00000010u) {
      set_win_room(from.win_room());
    }
    if (cached_has_bits & 0x00000020u) {
      set_reward_ratio(from.reward_ratio());
    }
    if (cached_has_bits & 0x00000040u) {
      set_invade_cost(from.invade_cost());
    }
    if (cached_has_bits & 0x00000080u) {
      set_room_effect(from.room_effect());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      set_drop_limit(from.drop_limit());
    }
    if (cached_has_bits & 0x00000200u) {
      set_drop_limit_once(from.drop_limit_once());
    }
    if (cached_has_bits & 0x00000400u) {
      match_remain_ = from.match_remain_;
    }
    if (cached_has_bits & 0x00000800u) {
      revenge_time_ = from.revenge_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      extra_reward_ratio_ = from.extra_reward_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      record_remain_time_ = from.record_remain_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigPlayerInvade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPlayerInvade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPlayerInvade::CopyFrom(const ConfigPlayerInvade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPlayerInvade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPlayerInvade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  return true;
}

void ConfigPlayerInvade::Swap(ConfigPlayerInvade* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPlayerInvade* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPlayerInvade::UnsafeArenaSwap(ConfigPlayerInvade* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPlayerInvade::InternalSwap(ConfigPlayerInvade* other) {
  using std::swap;
  match_score_.Swap(&other->match_score_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  refresh_times_.Swap(&other->refresh_times_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entrys_.Swap(&other->entrys_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  defend_time_.Swap(&other->defend_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  win_room_.Swap(&other->win_room_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_ratio_.Swap(&other->reward_ratio_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invade_cost_.Swap(&other->invade_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  room_effect_.Swap(&other->room_effect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_limit_.Swap(&other->drop_limit_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drop_limit_once_.Swap(&other->drop_limit_once_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_remain_, other->match_remain_);
  swap(revenge_time_, other->revenge_time_);
  swap(extra_reward_ratio_, other->extra_reward_ratio_);
  swap(record_remain_time_, other->record_remain_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPlayerInvade::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigRoomModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRoomModel::kIdFieldNumber;
const int ConfigRoomModel::kTypeFieldNumber;
const int ConfigRoomModel::kSizeFieldNumber;
const int ConfigRoomModel::kShapeFieldNumber;
const int ConfigRoomModel::kUnlockCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRoomModel::ConfigRoomModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcConfig_2eproto::scc_info_ConfigRoomModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigRoomModel)
}
ConfigRoomModel::ConfigRoomModel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRoomModel.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigRoomModel)
}
ConfigRoomModel::ConfigRoomModel(const ConfigRoomModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_size()) {
    size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.size(),
      GetArenaNoVirtual());
  }
  shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shape()) {
    shape_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shape(),
      GetArenaNoVirtual());
  }
  unlock_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_cost()) {
    unlock_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_cost(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigRoomModel)
}

void ConfigRoomModel::SharedCtor() {
  size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_cost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

ConfigRoomModel::~ConfigRoomModel() {
  // @@protoc_insertion_point(destructor:db.ConfigRoomModel)
  SharedDtor();
}

void ConfigRoomModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_cost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigRoomModel::ArenaDtor(void* object) {
  ConfigRoomModel* _this = reinterpret_cast< ConfigRoomModel* >(object);
  (void)_this;
}
void ConfigRoomModel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigRoomModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigRoomModel::descriptor() {
  ::protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigRoomModel& ConfigRoomModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcConfig_2eproto::scc_info_ConfigRoomModel.base);
  return *internal_default_instance();
}


void ConfigRoomModel::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigRoomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      shape_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      unlock_cost_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigRoomModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigRoomModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes shape = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes unlock_cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unlock_cost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigRoomModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigRoomModel)
  return false;
#undef DO_
}

void ConfigRoomModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigRoomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bytes size = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->size(), output);
  }

  // required bytes shape = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->shape(), output);
  }

  // required bytes unlock_cost = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->unlock_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigRoomModel)
}

::google::protobuf::uint8* ConfigRoomModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigRoomModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bytes size = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->size(), target);
  }

  // required bytes shape = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->shape(), target);
  }

  // required bytes unlock_cost = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->unlock_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigRoomModel)
  return target;
}

size_t ConfigRoomModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigRoomModel)
  size_t total_size = 0;

  if (has_size()) {
    // required bytes size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->size());
  }

  if (has_shape()) {
    // required bytes shape = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->shape());
  }

  if (has_unlock_cost()) {
    // required bytes unlock_cost = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_cost());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ConfigRoomModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigRoomModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->size());

    // required bytes shape = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->shape());

    // required bytes unlock_cost = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_cost());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRoomModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigRoomModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRoomModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRoomModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigRoomModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigRoomModel)
    MergeFrom(*source);
  }
}

void ConfigRoomModel::MergeFrom(const ConfigRoomModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigRoomModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_size(from.size());
    }
    if (cached_has_bits & 0x00000002u) {
      set_shape(from.shape());
    }
    if (cached_has_bits & 0x00000004u) {
      set_unlock_cost(from.unlock_cost());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigRoomModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigRoomModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRoomModel::CopyFrom(const ConfigRoomModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigRoomModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRoomModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ConfigRoomModel::Swap(ConfigRoomModel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigRoomModel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigRoomModel::UnsafeArenaSwap(ConfigRoomModel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigRoomModel::InternalSwap(ConfigRoomModel* other) {
  using std::swap;
  size_.Swap(&other->size_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shape_.Swap(&other->shape_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unlock_cost_.Swap(&other->unlock_cost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigRoomModel::GetMetadata() const {
  protobuf_StoredProcConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcConfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFacility* Arena::CreateMaybeMessage< ::db::ConfigFacility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFacility >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigItem* Arena::CreateMaybeMessage< ::db::ConfigItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCard* Arena::CreateMaybeMessage< ::db::ConfigCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCardStrengthen* Arena::CreateMaybeMessage< ::db::ConfigCardStrengthen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCardStrengthen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigLevel* Arena::CreateMaybeMessage< ::db::ConfigLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigLevel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigModel* Arena::CreateMaybeMessage< ::db::ConfigModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigModel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPlace* Arena::CreateMaybeMessage< ::db::ConfigPlace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPlace >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigSceneInfo* Arena::CreateMaybeMessage< ::db::ConfigSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigSceneInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigExploreEvent* Arena::CreateMaybeMessage< ::db::ConfigExploreEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigExploreEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigBaseRoom* Arena::CreateMaybeMessage< ::db::ConfigBaseRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigBaseRoom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFormula* Arena::CreateMaybeMessage< ::db::ConfigFormula >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFormula >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigShopping* Arena::CreateMaybeMessage< ::db::ConfigShopping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigShopping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCardAttribute* Arena::CreateMaybeMessage< ::db::ConfigCardAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCardAttribute >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCardEquip* Arena::CreateMaybeMessage< ::db::ConfigCardEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCardEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCardEquipStrengthen* Arena::CreateMaybeMessage< ::db::ConfigCardEquipStrengthen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCardEquipStrengthen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCardLevel* Arena::CreateMaybeMessage< ::db::ConfigCardLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCardLevel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigWanted* Arena::CreateMaybeMessage< ::db::ConfigWanted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigWanted >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigTask* Arena::CreateMaybeMessage< ::db::ConfigTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigTaskStep* Arena::CreateMaybeMessage< ::db::ConfigTaskStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigTaskStep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigNpc* Arena::CreateMaybeMessage< ::db::ConfigNpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigNpc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigAchievement* Arena::CreateMaybeMessage< ::db::ConfigAchievement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigAchievement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigAchievementTask* Arena::CreateMaybeMessage< ::db::ConfigAchievementTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigAchievementTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigSystemTask* Arena::CreateMaybeMessage< ::db::ConfigSystemTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigSystemTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigRandomGift* Arena::CreateMaybeMessage< ::db::ConfigRandomGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigRandomGift >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDungeonEvent* Arena::CreateMaybeMessage< ::db::ConfigDungeonEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDungeonEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDungeonContentGroup* Arena::CreateMaybeMessage< ::db::ConfigDungeonContentGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDungeonContentGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigEnemy* Arena::CreateMaybeMessage< ::db::ConfigEnemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigEnemy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigEnemyEvent* Arena::CreateMaybeMessage< ::db::ConfigEnemyEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigEnemyEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigEnemyGroup* Arena::CreateMaybeMessage< ::db::ConfigEnemyGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigEnemyGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFightItem* Arena::CreateMaybeMessage< ::db::ConfigFightItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFightItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFightMachine* Arena::CreateMaybeMessage< ::db::ConfigFightMachine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFightMachine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDungeonTalent* Arena::CreateMaybeMessage< ::db::ConfigDungeonTalent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDungeonTalent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDungeonTalentTree* Arena::CreateMaybeMessage< ::db::ConfigDungeonTalentTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDungeonTalentTree >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDungeonStoreGroup* Arena::CreateMaybeMessage< ::db::ConfigDungeonStoreGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDungeonStoreGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMachineExchange* Arena::CreateMaybeMessage< ::db::ConfigMachineExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMachineExchange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMachineExchangeGroup* Arena::CreateMaybeMessage< ::db::ConfigMachineExchangeGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMachineExchangeGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPveMapModel* Arena::CreateMaybeMessage< ::db::ConfigPveMapModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPveMapModel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPveRoomModel* Arena::CreateMaybeMessage< ::db::ConfigPveRoomModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPveRoomModel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigChest* Arena::CreateMaybeMessage< ::db::ConfigChest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigChest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDropItemGroup* Arena::CreateMaybeMessage< ::db::ConfigDropItemGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDropItemGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigLottery* Arena::CreateMaybeMessage< ::db::ConfigLottery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigLottery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigSecretRoom* Arena::CreateMaybeMessage< ::db::ConfigSecretRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigSecretRoom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigSecretRoomGroup* Arena::CreateMaybeMessage< ::db::ConfigSecretRoomGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigSecretRoomGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFarmSkillLevel* Arena::CreateMaybeMessage< ::db::ConfigFarmSkillLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFarmSkillLevel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigSkill* Arena::CreateMaybeMessage< ::db::ConfigSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigSkill >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFightRandomGroup* Arena::CreateMaybeMessage< ::db::ConfigFightRandomGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFightRandomGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigNpcFight* Arena::CreateMaybeMessage< ::db::ConfigNpcFight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigNpcFight >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPvePlayerDrop* Arena::CreateMaybeMessage< ::db::ConfigPvePlayerDrop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPvePlayerDrop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCardTalent* Arena::CreateMaybeMessage< ::db::ConfigCardTalent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCardTalent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigShoppingVitality* Arena::CreateMaybeMessage< ::db::ConfigShoppingVitality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigShoppingVitality >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigRankingReward* Arena::CreateMaybeMessage< ::db::ConfigRankingReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigRankingReward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFightElementConnect* Arena::CreateMaybeMessage< ::db::ConfigFightElementConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFightElementConnect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigWildIslandLevel* Arena::CreateMaybeMessage< ::db::ConfigWildIslandLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigWildIslandLevel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigBusinessman* Arena::CreateMaybeMessage< ::db::ConfigBusinessman >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigBusinessman >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigSkillRandom* Arena::CreateMaybeMessage< ::db::ConfigSkillRandom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigSkillRandom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigEquipAttributeWord* Arena::CreateMaybeMessage< ::db::ConfigEquipAttributeWord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigEquipAttributeWord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigEquipRefineCost* Arena::CreateMaybeMessage< ::db::ConfigEquipRefineCost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigEquipRefineCost >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigEquipDecompose* Arena::CreateMaybeMessage< ::db::ConfigEquipDecompose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigEquipDecompose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigEquipDecomposeCost* Arena::CreateMaybeMessage< ::db::ConfigEquipDecomposeCost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigEquipDecomposeCost >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigSpecialEvent* Arena::CreateMaybeMessage< ::db::ConfigSpecialEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigSpecialEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigCardPractice* Arena::CreateMaybeMessage< ::db::ConfigCardPractice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigCardPractice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigGhostShip* Arena::CreateMaybeMessage< ::db::ConfigGhostShip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigGhostShip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFacilityGroup* Arena::CreateMaybeMessage< ::db::ConfigFacilityGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFacilityGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigRankingScore* Arena::CreateMaybeMessage< ::db::ConfigRankingScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigRankingScore >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigRankingBattleReward* Arena::CreateMaybeMessage< ::db::ConfigRankingBattleReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigRankingBattleReward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigEasterEgg* Arena::CreateMaybeMessage< ::db::ConfigEasterEgg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigEasterEgg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigShipEvent* Arena::CreateMaybeMessage< ::db::ConfigShipEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigShipEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDailyGift* Arena::CreateMaybeMessage< ::db::ConfigDailyGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDailyGift >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigNavigationEvent* Arena::CreateMaybeMessage< ::db::ConfigNavigationEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigNavigationEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDungeonAltar* Arena::CreateMaybeMessage< ::db::ConfigDungeonAltar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDungeonAltar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigRobot* Arena::CreateMaybeMessage< ::db::ConfigRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigRobot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigBeacon* Arena::CreateMaybeMessage< ::db::ConfigBeacon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigBeacon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMaelstromTile* Arena::CreateMaybeMessage< ::db::ConfigMaelstromTile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMaelstromTile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMaelstrom* Arena::CreateMaybeMessage< ::db::ConfigMaelstrom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMaelstrom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMaelstromEvent* Arena::CreateMaybeMessage< ::db::ConfigMaelstromEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMaelstromEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigProfession* Arena::CreateMaybeMessage< ::db::ConfigProfession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigProfession >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigBeaconTalent* Arena::CreateMaybeMessage< ::db::ConfigBeaconTalent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigBeaconTalent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigBeaconTalentGroup* Arena::CreateMaybeMessage< ::db::ConfigBeaconTalentGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigBeaconTalentGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigDungeonChest* Arena::CreateMaybeMessage< ::db::ConfigDungeonChest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigDungeonChest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigGuildStore* Arena::CreateMaybeMessage< ::db::ConfigGuildStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigGuildStore >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigGameExchange* Arena::CreateMaybeMessage< ::db::ConfigGameExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigGameExchange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigName* Arena::CreateMaybeMessage< ::db::ConfigName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigName >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigFirstname* Arena::CreateMaybeMessage< ::db::ConfigFirstname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigFirstname >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigLastname* Arena::CreateMaybeMessage< ::db::ConfigLastname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigLastname >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPlayerInvade* Arena::CreateMaybeMessage< ::db::ConfigPlayerInvade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPlayerInvade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigRoomModel* Arena::CreateMaybeMessage< ::db::ConfigRoomModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigRoomModel >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
