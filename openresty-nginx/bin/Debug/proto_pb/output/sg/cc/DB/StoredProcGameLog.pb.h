// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcGameLog.proto

#ifndef PROTOBUF_INCLUDED_StoredProcGameLog_2eproto
#define PROTOBUF_INCLUDED_StoredProcGameLog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcGameLog_2eproto 

namespace protobuf_StoredProcGameLog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_StoredProcGameLog_2eproto
namespace db {
class LogGameResource;
class LogGameResourceDefaultTypeInternal;
extern LogGameResourceDefaultTypeInternal _LogGameResource_default_instance_;
class LogGameShip;
class LogGameShipDefaultTypeInternal;
extern LogGameShipDefaultTypeInternal _LogGameShip_default_instance_;
class proc_log_game_resource;
class proc_log_game_resourceDefaultTypeInternal;
extern proc_log_game_resourceDefaultTypeInternal _proc_log_game_resource_default_instance_;
class proc_log_game_resource_Parameter;
class proc_log_game_resource_ParameterDefaultTypeInternal;
extern proc_log_game_resource_ParameterDefaultTypeInternal _proc_log_game_resource_Parameter_default_instance_;
class proc_log_game_resource_ReturnRecord;
class proc_log_game_resource_ReturnRecordDefaultTypeInternal;
extern proc_log_game_resource_ReturnRecordDefaultTypeInternal _proc_log_game_resource_ReturnRecord_default_instance_;
class proc_log_game_ship;
class proc_log_game_shipDefaultTypeInternal;
extern proc_log_game_shipDefaultTypeInternal _proc_log_game_ship_default_instance_;
class proc_log_game_ship_Parameter;
class proc_log_game_ship_ParameterDefaultTypeInternal;
extern proc_log_game_ship_ParameterDefaultTypeInternal _proc_log_game_ship_Parameter_default_instance_;
class proc_log_game_ship_ReturnRecord;
class proc_log_game_ship_ReturnRecordDefaultTypeInternal;
extern proc_log_game_ship_ReturnRecordDefaultTypeInternal _proc_log_game_ship_ReturnRecord_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::LogGameResource* Arena::CreateMaybeMessage<::db::LogGameResource>(Arena*);
template<> ::db::LogGameShip* Arena::CreateMaybeMessage<::db::LogGameShip>(Arena*);
template<> ::db::proc_log_game_resource* Arena::CreateMaybeMessage<::db::proc_log_game_resource>(Arena*);
template<> ::db::proc_log_game_resource_Parameter* Arena::CreateMaybeMessage<::db::proc_log_game_resource_Parameter>(Arena*);
template<> ::db::proc_log_game_resource_ReturnRecord* Arena::CreateMaybeMessage<::db::proc_log_game_resource_ReturnRecord>(Arena*);
template<> ::db::proc_log_game_ship* Arena::CreateMaybeMessage<::db::proc_log_game_ship>(Arena*);
template<> ::db::proc_log_game_ship_Parameter* Arena::CreateMaybeMessage<::db::proc_log_game_ship_Parameter>(Arena*);
template<> ::db::proc_log_game_ship_ReturnRecord* Arena::CreateMaybeMessage<::db::proc_log_game_ship_ReturnRecord>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

enum LogGameResource_ACTION_TYPE {
  LogGameResource_ACTION_TYPE_DUMP = 0,
  LogGameResource_ACTION_TYPE_COST_SUPPLY = 1,
  LogGameResource_ACTION_TYPE_COST_STAGE = 2,
  LogGameResource_ACTION_TYPE_COST_BUILD = 3,
  LogGameResource_ACTION_TYPE_COST_REPAIR = 4,
  LogGameResource_ACTION_TYPE_COST_REFORM = 5,
  LogGameResource_ACTION_TYPE_COST_EXTEND = 6,
  LogGameResource_ACTION_TYPE_COST_DISCARD = 7,
  LogGameResource_ACTION_TYPE_COST_SHOP = 8,
  LogGameResource_ACTION_TYPE_COST_ENGAGE = 9,
  LogGameResource_ACTION_TYPE_NEWBIE = 11,
  LogGameResource_ACTION_TYPE_AUTOMATIC_FARMER = 12,
  LogGameResource_ACTION_TYPE_EXPEDITION = 13,
  LogGameResource_ACTION_TYPE_BATTLE = 14,
  LogGameResource_ACTION_TYPE_DRILL = 15,
  LogGameResource_ACTION_TYPE_STRIKE = 16,
  LogGameResource_ACTION_TYPE_STRIKE_JUNK = 17,
  LogGameResource_ACTION_TYPE_QUEST = 18,
  LogGameResource_ACTION_TYPE_DATING = 19,
  LogGameResource_ACTION_TYPE_STAGE_GATHER = 21,
  LogGameResource_ACTION_TYPE_STAGE_STORAGE_GATHER = 22,
  LogGameResource_ACTION_TYPE_ITEM_GATHER = 23,
  LogGameResource_ACTION_TYPE_SHOP_GATHER = 24,
  LogGameResource_ACTION_TYPE_GAME_INVITE_GATHER = 25,
  LogGameResource_ACTION_TYPE_MAILBOX_GATHER = 26,
  LogGameResource_ACTION_TYPE_GM_GATHER = 27,
  LogGameResource_ACTION_TYPE_CHARGE_POINT_GATHER = 31,
  LogGameResource_ACTION_TYPE_GIFTBAG_ROLE_LEVELUP_GATHER = 32,
  LogGameResource_ACTION_TYPE_GIFTBAG_ROLE_SIGNIN_GATHER = 33,
  LogGameResource_ACTION_TYPE_RECYCLE_SHIP = 41,
  LogGameResource_ACTION_TYPE_RECYCLE_EQUIP = 42
};
bool LogGameResource_ACTION_TYPE_IsValid(int value);
const LogGameResource_ACTION_TYPE LogGameResource_ACTION_TYPE_ACTION_TYPE_MIN = LogGameResource_ACTION_TYPE_DUMP;
const LogGameResource_ACTION_TYPE LogGameResource_ACTION_TYPE_ACTION_TYPE_MAX = LogGameResource_ACTION_TYPE_RECYCLE_EQUIP;
const int LogGameResource_ACTION_TYPE_ACTION_TYPE_ARRAYSIZE = LogGameResource_ACTION_TYPE_ACTION_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogGameResource_ACTION_TYPE_descriptor();
inline const ::std::string& LogGameResource_ACTION_TYPE_Name(LogGameResource_ACTION_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogGameResource_ACTION_TYPE_descriptor(), value);
}
inline bool LogGameResource_ACTION_TYPE_Parse(
    const ::std::string& name, LogGameResource_ACTION_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogGameResource_ACTION_TYPE>(
    LogGameResource_ACTION_TYPE_descriptor(), name, value);
}
enum LogGameShip_ACTION_TYPE {
  LogGameShip_ACTION_TYPE_DUMP = 0,
  LogGameShip_ACTION_TYPE_CREATE_NEWBIE = 1,
  LogGameShip_ACTION_TYPE_CREATE_DROP = 2,
  LogGameShip_ACTION_TYPE_CREATE_BUILD = 3,
  LogGameShip_ACTION_TYPE_RECYCLE = 4,
  LogGameShip_ACTION_TYPE_BATTLE = 11,
  LogGameShip_ACTION_TYPE_DRILL = 12,
  LogGameShip_ACTION_TYPE_STRIKE = 13,
  LogGameShip_ACTION_TYPE_SUPPLY = 14,
  LogGameShip_ACTION_TYPE_REPAIR = 15,
  LogGameShip_ACTION_TYPE_EXPEDITION = 16,
  LogGameShip_ACTION_TYPE_STRENGTHEN = 17,
  LogGameShip_ACTION_TYPE_REFORM = 18,
  LogGameShip_ACTION_TYPE_EXP = 21,
  LogGameShip_ACTION_TYPE_AFFINITY = 22,
  LogGameShip_ACTION_TYPE_ENGAGEMENT = 23,
  LogGameShip_ACTION_TYPE_HP = 24,
  LogGameShip_ACTION_TYPE_WORK_PLACE = 25,
  LogGameShip_ACTION_TYPE_PROTECT = 26,
  LogGameShip_ACTION_TYPE_ENGAGE = 27
};
bool LogGameShip_ACTION_TYPE_IsValid(int value);
const LogGameShip_ACTION_TYPE LogGameShip_ACTION_TYPE_ACTION_TYPE_MIN = LogGameShip_ACTION_TYPE_DUMP;
const LogGameShip_ACTION_TYPE LogGameShip_ACTION_TYPE_ACTION_TYPE_MAX = LogGameShip_ACTION_TYPE_ENGAGE;
const int LogGameShip_ACTION_TYPE_ACTION_TYPE_ARRAYSIZE = LogGameShip_ACTION_TYPE_ACTION_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogGameShip_ACTION_TYPE_descriptor();
inline const ::std::string& LogGameShip_ACTION_TYPE_Name(LogGameShip_ACTION_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogGameShip_ACTION_TYPE_descriptor(), value);
}
inline bool LogGameShip_ACTION_TYPE_Parse(
    const ::std::string& name, LogGameShip_ACTION_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogGameShip_ACTION_TYPE>(
    LogGameShip_ACTION_TYPE_descriptor(), name, value);
}
// ===================================================================

class LogGameResource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.LogGameResource) */ {
 public:
  LogGameResource();
  virtual ~LogGameResource();

  LogGameResource(const LogGameResource& from);

  inline LogGameResource& operator=(const LogGameResource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogGameResource(LogGameResource&& from) noexcept
    : LogGameResource() {
    *this = ::std::move(from);
  }

  inline LogGameResource& operator=(LogGameResource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGameResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogGameResource* internal_default_instance() {
    return reinterpret_cast<const LogGameResource*>(
               &_LogGameResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(LogGameResource* other);
  void Swap(LogGameResource* other);
  friend void swap(LogGameResource& a, LogGameResource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogGameResource* New() const final {
    return CreateMaybeMessage<LogGameResource>(NULL);
  }

  LogGameResource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogGameResource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogGameResource& from);
  void MergeFrom(const LogGameResource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGameResource* other);
  protected:
  explicit LogGameResource(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogGameResource_ACTION_TYPE ACTION_TYPE;
  static const ACTION_TYPE DUMP =
    LogGameResource_ACTION_TYPE_DUMP;
  static const ACTION_TYPE COST_SUPPLY =
    LogGameResource_ACTION_TYPE_COST_SUPPLY;
  static const ACTION_TYPE COST_STAGE =
    LogGameResource_ACTION_TYPE_COST_STAGE;
  static const ACTION_TYPE COST_BUILD =
    LogGameResource_ACTION_TYPE_COST_BUILD;
  static const ACTION_TYPE COST_REPAIR =
    LogGameResource_ACTION_TYPE_COST_REPAIR;
  static const ACTION_TYPE COST_REFORM =
    LogGameResource_ACTION_TYPE_COST_REFORM;
  static const ACTION_TYPE COST_EXTEND =
    LogGameResource_ACTION_TYPE_COST_EXTEND;
  static const ACTION_TYPE COST_DISCARD =
    LogGameResource_ACTION_TYPE_COST_DISCARD;
  static const ACTION_TYPE COST_SHOP =
    LogGameResource_ACTION_TYPE_COST_SHOP;
  static const ACTION_TYPE COST_ENGAGE =
    LogGameResource_ACTION_TYPE_COST_ENGAGE;
  static const ACTION_TYPE NEWBIE =
    LogGameResource_ACTION_TYPE_NEWBIE;
  static const ACTION_TYPE AUTOMATIC_FARMER =
    LogGameResource_ACTION_TYPE_AUTOMATIC_FARMER;
  static const ACTION_TYPE EXPEDITION =
    LogGameResource_ACTION_TYPE_EXPEDITION;
  static const ACTION_TYPE BATTLE =
    LogGameResource_ACTION_TYPE_BATTLE;
  static const ACTION_TYPE DRILL =
    LogGameResource_ACTION_TYPE_DRILL;
  static const ACTION_TYPE STRIKE =
    LogGameResource_ACTION_TYPE_STRIKE;
  static const ACTION_TYPE STRIKE_JUNK =
    LogGameResource_ACTION_TYPE_STRIKE_JUNK;
  static const ACTION_TYPE QUEST =
    LogGameResource_ACTION_TYPE_QUEST;
  static const ACTION_TYPE DATING =
    LogGameResource_ACTION_TYPE_DATING;
  static const ACTION_TYPE STAGE_GATHER =
    LogGameResource_ACTION_TYPE_STAGE_GATHER;
  static const ACTION_TYPE STAGE_STORAGE_GATHER =
    LogGameResource_ACTION_TYPE_STAGE_STORAGE_GATHER;
  static const ACTION_TYPE ITEM_GATHER =
    LogGameResource_ACTION_TYPE_ITEM_GATHER;
  static const ACTION_TYPE SHOP_GATHER =
    LogGameResource_ACTION_TYPE_SHOP_GATHER;
  static const ACTION_TYPE GAME_INVITE_GATHER =
    LogGameResource_ACTION_TYPE_GAME_INVITE_GATHER;
  static const ACTION_TYPE MAILBOX_GATHER =
    LogGameResource_ACTION_TYPE_MAILBOX_GATHER;
  static const ACTION_TYPE GM_GATHER =
    LogGameResource_ACTION_TYPE_GM_GATHER;
  static const ACTION_TYPE CHARGE_POINT_GATHER =
    LogGameResource_ACTION_TYPE_CHARGE_POINT_GATHER;
  static const ACTION_TYPE GIFTBAG_ROLE_LEVELUP_GATHER =
    LogGameResource_ACTION_TYPE_GIFTBAG_ROLE_LEVELUP_GATHER;
  static const ACTION_TYPE GIFTBAG_ROLE_SIGNIN_GATHER =
    LogGameResource_ACTION_TYPE_GIFTBAG_ROLE_SIGNIN_GATHER;
  static const ACTION_TYPE RECYCLE_SHIP =
    LogGameResource_ACTION_TYPE_RECYCLE_SHIP;
  static const ACTION_TYPE RECYCLE_EQUIP =
    LogGameResource_ACTION_TYPE_RECYCLE_EQUIP;
  static inline bool ACTION_TYPE_IsValid(int value) {
    return LogGameResource_ACTION_TYPE_IsValid(value);
  }
  static const ACTION_TYPE ACTION_TYPE_MIN =
    LogGameResource_ACTION_TYPE_ACTION_TYPE_MIN;
  static const ACTION_TYPE ACTION_TYPE_MAX =
    LogGameResource_ACTION_TYPE_ACTION_TYPE_MAX;
  static const int ACTION_TYPE_ARRAYSIZE =
    LogGameResource_ACTION_TYPE_ACTION_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ACTION_TYPE_descriptor() {
    return LogGameResource_ACTION_TYPE_descriptor();
  }
  static inline const ::std::string& ACTION_TYPE_Name(ACTION_TYPE value) {
    return LogGameResource_ACTION_TYPE_Name(value);
  }
  static inline bool ACTION_TYPE_Parse(const ::std::string& name,
      ACTION_TYPE* value) {
    return LogGameResource_ACTION_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes userid = 5;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 5;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes nick = 6;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 6;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required uint64 subid = 1;
  bool has_subid() const;
  void clear_subid();
  static const int kSubidFieldNumber = 1;
  ::google::protobuf::uint64 subid() const;
  void set_subid(::google::protobuf::uint64 value);

  // required sfixed64 action_time = 2;
  bool has_action_time() const;
  void clear_action_time();
  static const int kActionTimeFieldNumber = 2;
  ::google::protobuf::int64 action_time() const;
  void set_action_time(::google::protobuf::int64 value);

  // required .db.LogGameResource.ACTION_TYPE action_type = 3;
  bool has_action_type() const;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 3;
  ::db::LogGameResource_ACTION_TYPE action_type() const;
  void set_action_type(::db::LogGameResource_ACTION_TYPE value);

  // required int32 entry_id = 4;
  bool has_entry_id() const;
  void clear_entry_id();
  static const int kEntryIdFieldNumber = 4;
  ::google::protobuf::int32 entry_id() const;
  void set_entry_id(::google::protobuf::int32 value);

  // optional uint64 diamond = 11;
  bool has_diamond() const;
  void clear_diamond();
  static const int kDiamondFieldNumber = 11;
  ::google::protobuf::uint64 diamond() const;
  void set_diamond(::google::protobuf::uint64 value);

  // optional int32 fuel = 21;
  bool has_fuel() const;
  void clear_fuel();
  static const int kFuelFieldNumber = 21;
  ::google::protobuf::int32 fuel() const;
  void set_fuel(::google::protobuf::int32 value);

  // optional int32 ammo = 22;
  bool has_ammo() const;
  void clear_ammo();
  static const int kAmmoFieldNumber = 22;
  ::google::protobuf::int32 ammo() const;
  void set_ammo(::google::protobuf::int32 value);

  // optional int32 metal = 23;
  bool has_metal() const;
  void clear_metal();
  static const int kMetalFieldNumber = 23;
  ::google::protobuf::int32 metal() const;
  void set_metal(::google::protobuf::int32 value);

  // optional int32 titanium = 24;
  bool has_titanium() const;
  void clear_titanium();
  static const int kTitaniumFieldNumber = 24;
  ::google::protobuf::int32 titanium() const;
  void set_titanium(::google::protobuf::int32 value);

  // optional uint64 res_typeid = 31;
  bool has_res_typeid() const;
  void clear_res_typeid();
  static const int kResTypeidFieldNumber = 31;
  ::google::protobuf::uint64 res_typeid() const;
  void set_res_typeid(::google::protobuf::uint64 value);

  // optional int32 res_num = 32;
  bool has_res_num() const;
  void clear_res_num();
  static const int kResNumFieldNumber = 32;
  ::google::protobuf::int32 res_num() const;
  void set_res_num(::google::protobuf::int32 value);

  // optional int32 res_num_add = 33;
  bool has_res_num_add() const;
  void clear_res_num_add();
  static const int kResNumAddFieldNumber = 33;
  ::google::protobuf::int32 res_num_add() const;
  void set_res_num_add(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.LogGameResource)
 private:
  void set_has_subid();
  void clear_has_subid();
  void set_has_action_time();
  void clear_has_action_time();
  void set_has_action_type();
  void clear_has_action_type();
  void set_has_entry_id();
  void clear_has_entry_id();
  void set_has_userid();
  void clear_has_userid();
  void set_has_nick();
  void clear_has_nick();
  void set_has_diamond();
  void clear_has_diamond();
  void set_has_fuel();
  void clear_has_fuel();
  void set_has_ammo();
  void clear_has_ammo();
  void set_has_metal();
  void clear_has_metal();
  void set_has_titanium();
  void clear_has_titanium();
  void set_has_res_typeid();
  void clear_has_res_typeid();
  void set_has_res_num();
  void clear_has_res_num();
  void set_has_res_num_add();
  void clear_has_res_num_add();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::uint64 subid_;
  ::google::protobuf::int64 action_time_;
  int action_type_;
  ::google::protobuf::int32 entry_id_;
  ::google::protobuf::uint64 diamond_;
  ::google::protobuf::int32 fuel_;
  ::google::protobuf::int32 ammo_;
  ::google::protobuf::int32 metal_;
  ::google::protobuf::int32 titanium_;
  ::google::protobuf::uint64 res_typeid_;
  ::google::protobuf::int32 res_num_;
  ::google::protobuf::int32 res_num_add_;
  friend struct ::protobuf_StoredProcGameLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_log_game_resource_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_log_game_resource.Parameter) */ {
 public:
  proc_log_game_resource_Parameter();
  virtual ~proc_log_game_resource_Parameter();

  proc_log_game_resource_Parameter(const proc_log_game_resource_Parameter& from);

  inline proc_log_game_resource_Parameter& operator=(const proc_log_game_resource_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_log_game_resource_Parameter(proc_log_game_resource_Parameter&& from) noexcept
    : proc_log_game_resource_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_log_game_resource_Parameter& operator=(proc_log_game_resource_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_log_game_resource_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_log_game_resource_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_log_game_resource_Parameter*>(
               &_proc_log_game_resource_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(proc_log_game_resource_Parameter* other);
  void Swap(proc_log_game_resource_Parameter* other);
  friend void swap(proc_log_game_resource_Parameter& a, proc_log_game_resource_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_log_game_resource_Parameter* New() const final {
    return CreateMaybeMessage<proc_log_game_resource_Parameter>(NULL);
  }

  proc_log_game_resource_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_log_game_resource_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_log_game_resource_Parameter& from);
  void MergeFrom(const proc_log_game_resource_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_log_game_resource_Parameter* other);
  protected:
  explicit proc_log_game_resource_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.LogGameResource p_log = 1;
  bool has_p_log() const;
  void clear_p_log();
  static const int kPLogFieldNumber = 1;
  private:
  const ::db::LogGameResource& _internal_p_log() const;
  public:
  const ::db::LogGameResource& p_log() const;
  ::db::LogGameResource* release_p_log();
  ::db::LogGameResource* mutable_p_log();
  void set_allocated_p_log(::db::LogGameResource* p_log);
  void unsafe_arena_set_allocated_p_log(
      ::db::LogGameResource* p_log);
  ::db::LogGameResource* unsafe_arena_release_p_log();

  // @@protoc_insertion_point(class_scope:db.proc_log_game_resource.Parameter)
 private:
  void set_has_p_log();
  void clear_has_p_log();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::LogGameResource* p_log_;
  friend struct ::protobuf_StoredProcGameLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_log_game_resource_ReturnRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_log_game_resource.ReturnRecord) */ {
 public:
  proc_log_game_resource_ReturnRecord();
  virtual ~proc_log_game_resource_ReturnRecord();

  proc_log_game_resource_ReturnRecord(const proc_log_game_resource_ReturnRecord& from);

  inline proc_log_game_resource_ReturnRecord& operator=(const proc_log_game_resource_ReturnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_log_game_resource_ReturnRecord(proc_log_game_resource_ReturnRecord&& from) noexcept
    : proc_log_game_resource_ReturnRecord() {
    *this = ::std::move(from);
  }

  inline proc_log_game_resource_ReturnRecord& operator=(proc_log_game_resource_ReturnRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_log_game_resource_ReturnRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_log_game_resource_ReturnRecord* internal_default_instance() {
    return reinterpret_cast<const proc_log_game_resource_ReturnRecord*>(
               &_proc_log_game_resource_ReturnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(proc_log_game_resource_ReturnRecord* other);
  void Swap(proc_log_game_resource_ReturnRecord* other);
  friend void swap(proc_log_game_resource_ReturnRecord& a, proc_log_game_resource_ReturnRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_log_game_resource_ReturnRecord* New() const final {
    return CreateMaybeMessage<proc_log_game_resource_ReturnRecord>(NULL);
  }

  proc_log_game_resource_ReturnRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_log_game_resource_ReturnRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_log_game_resource_ReturnRecord& from);
  void MergeFrom(const proc_log_game_resource_ReturnRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_log_game_resource_ReturnRecord* other);
  protected:
  explicit proc_log_game_resource_ReturnRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.proc_log_game_resource.ReturnRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_StoredProcGameLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_log_game_resource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_log_game_resource) */ {
 public:
  proc_log_game_resource();
  virtual ~proc_log_game_resource();

  proc_log_game_resource(const proc_log_game_resource& from);

  inline proc_log_game_resource& operator=(const proc_log_game_resource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_log_game_resource(proc_log_game_resource&& from) noexcept
    : proc_log_game_resource() {
    *this = ::std::move(from);
  }

  inline proc_log_game_resource& operator=(proc_log_game_resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_log_game_resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_log_game_resource* internal_default_instance() {
    return reinterpret_cast<const proc_log_game_resource*>(
               &_proc_log_game_resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(proc_log_game_resource* other);
  void Swap(proc_log_game_resource* other);
  friend void swap(proc_log_game_resource& a, proc_log_game_resource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_log_game_resource* New() const final {
    return CreateMaybeMessage<proc_log_game_resource>(NULL);
  }

  proc_log_game_resource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_log_game_resource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_log_game_resource& from);
  void MergeFrom(const proc_log_game_resource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_log_game_resource* other);
  protected:
  explicit proc_log_game_resource(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_log_game_resource_Parameter Parameter;
  typedef proc_log_game_resource_ReturnRecord ReturnRecord;

  // accessors -------------------------------------------------------

  // repeated .db.proc_log_game_resource.ReturnRecord return_record_list = 2;
  int return_record_list_size() const;
  void clear_return_record_list();
  static const int kReturnRecordListFieldNumber = 2;
  ::db::proc_log_game_resource_ReturnRecord* mutable_return_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_resource_ReturnRecord >*
      mutable_return_record_list();
  const ::db::proc_log_game_resource_ReturnRecord& return_record_list(int index) const;
  ::db::proc_log_game_resource_ReturnRecord* add_return_record_list();
  const ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_resource_ReturnRecord >&
      return_record_list() const;

  // optional .db.proc_log_game_resource.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_log_game_resource_Parameter& _internal_param() const;
  public:
  const ::db::proc_log_game_resource_Parameter& param() const;
  ::db::proc_log_game_resource_Parameter* release_param();
  ::db::proc_log_game_resource_Parameter* mutable_param();
  void set_allocated_param(::db::proc_log_game_resource_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_log_game_resource_Parameter* param);
  ::db::proc_log_game_resource_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_log_game_resource)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_resource_ReturnRecord > return_record_list_;
  ::db::proc_log_game_resource_Parameter* param_;
  friend struct ::protobuf_StoredProcGameLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogGameShip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.LogGameShip) */ {
 public:
  LogGameShip();
  virtual ~LogGameShip();

  LogGameShip(const LogGameShip& from);

  inline LogGameShip& operator=(const LogGameShip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogGameShip(LogGameShip&& from) noexcept
    : LogGameShip() {
    *this = ::std::move(from);
  }

  inline LogGameShip& operator=(LogGameShip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGameShip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogGameShip* internal_default_instance() {
    return reinterpret_cast<const LogGameShip*>(
               &_LogGameShip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(LogGameShip* other);
  void Swap(LogGameShip* other);
  friend void swap(LogGameShip& a, LogGameShip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogGameShip* New() const final {
    return CreateMaybeMessage<LogGameShip>(NULL);
  }

  LogGameShip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogGameShip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogGameShip& from);
  void MergeFrom(const LogGameShip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGameShip* other);
  protected:
  explicit LogGameShip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogGameShip_ACTION_TYPE ACTION_TYPE;
  static const ACTION_TYPE DUMP =
    LogGameShip_ACTION_TYPE_DUMP;
  static const ACTION_TYPE CREATE_NEWBIE =
    LogGameShip_ACTION_TYPE_CREATE_NEWBIE;
  static const ACTION_TYPE CREATE_DROP =
    LogGameShip_ACTION_TYPE_CREATE_DROP;
  static const ACTION_TYPE CREATE_BUILD =
    LogGameShip_ACTION_TYPE_CREATE_BUILD;
  static const ACTION_TYPE RECYCLE =
    LogGameShip_ACTION_TYPE_RECYCLE;
  static const ACTION_TYPE BATTLE =
    LogGameShip_ACTION_TYPE_BATTLE;
  static const ACTION_TYPE DRILL =
    LogGameShip_ACTION_TYPE_DRILL;
  static const ACTION_TYPE STRIKE =
    LogGameShip_ACTION_TYPE_STRIKE;
  static const ACTION_TYPE SUPPLY =
    LogGameShip_ACTION_TYPE_SUPPLY;
  static const ACTION_TYPE REPAIR =
    LogGameShip_ACTION_TYPE_REPAIR;
  static const ACTION_TYPE EXPEDITION =
    LogGameShip_ACTION_TYPE_EXPEDITION;
  static const ACTION_TYPE STRENGTHEN =
    LogGameShip_ACTION_TYPE_STRENGTHEN;
  static const ACTION_TYPE REFORM =
    LogGameShip_ACTION_TYPE_REFORM;
  static const ACTION_TYPE EXP =
    LogGameShip_ACTION_TYPE_EXP;
  static const ACTION_TYPE AFFINITY =
    LogGameShip_ACTION_TYPE_AFFINITY;
  static const ACTION_TYPE ENGAGEMENT =
    LogGameShip_ACTION_TYPE_ENGAGEMENT;
  static const ACTION_TYPE HP =
    LogGameShip_ACTION_TYPE_HP;
  static const ACTION_TYPE WORK_PLACE =
    LogGameShip_ACTION_TYPE_WORK_PLACE;
  static const ACTION_TYPE PROTECT =
    LogGameShip_ACTION_TYPE_PROTECT;
  static const ACTION_TYPE ENGAGE =
    LogGameShip_ACTION_TYPE_ENGAGE;
  static inline bool ACTION_TYPE_IsValid(int value) {
    return LogGameShip_ACTION_TYPE_IsValid(value);
  }
  static const ACTION_TYPE ACTION_TYPE_MIN =
    LogGameShip_ACTION_TYPE_ACTION_TYPE_MIN;
  static const ACTION_TYPE ACTION_TYPE_MAX =
    LogGameShip_ACTION_TYPE_ACTION_TYPE_MAX;
  static const int ACTION_TYPE_ARRAYSIZE =
    LogGameShip_ACTION_TYPE_ACTION_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ACTION_TYPE_descriptor() {
    return LogGameShip_ACTION_TYPE_descriptor();
  }
  static inline const ::std::string& ACTION_TYPE_Name(ACTION_TYPE value) {
    return LogGameShip_ACTION_TYPE_Name(value);
  }
  static inline bool ACTION_TYPE_Parse(const ::std::string& name,
      ACTION_TYPE* value) {
    return LogGameShip_ACTION_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes userid = 5;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 5;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes nick = 6;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 6;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required uint64 subid = 1;
  bool has_subid() const;
  void clear_subid();
  static const int kSubidFieldNumber = 1;
  ::google::protobuf::uint64 subid() const;
  void set_subid(::google::protobuf::uint64 value);

  // required sfixed64 action_time = 2;
  bool has_action_time() const;
  void clear_action_time();
  static const int kActionTimeFieldNumber = 2;
  ::google::protobuf::int64 action_time() const;
  void set_action_time(::google::protobuf::int64 value);

  // required .db.LogGameShip.ACTION_TYPE action_type = 3;
  bool has_action_type() const;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 3;
  ::db::LogGameShip_ACTION_TYPE action_type() const;
  void set_action_type(::db::LogGameShip_ACTION_TYPE value);

  // required int32 entry_id = 4;
  bool has_entry_id() const;
  void clear_entry_id();
  static const int kEntryIdFieldNumber = 4;
  ::google::protobuf::int32 entry_id() const;
  void set_entry_id(::google::protobuf::int32 value);

  // required uint64 typeid = 12;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 12;
  ::google::protobuf::uint64 typeid_() const;
  void set_typeid_(::google::protobuf::uint64 value);

  // required int32 sn = 11;
  bool has_sn() const;
  void clear_sn();
  static const int kSnFieldNumber = 11;
  ::google::protobuf::int32 sn() const;
  void set_sn(::google::protobuf::int32 value);

  // required int32 level = 13;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 13;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 exp = 14;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 14;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // required int32 affinity = 15;
  bool has_affinity() const;
  void clear_affinity();
  static const int kAffinityFieldNumber = 15;
  ::google::protobuf::int32 affinity() const;
  void set_affinity(::google::protobuf::int32 value);

  // required int32 affinity_exp = 16;
  bool has_affinity_exp() const;
  void clear_affinity_exp();
  static const int kAffinityExpFieldNumber = 16;
  ::google::protobuf::int32 affinity_exp() const;
  void set_affinity_exp(::google::protobuf::int32 value);

  // required int32 engagement = 17;
  bool has_engagement() const;
  void clear_engagement();
  static const int kEngagementFieldNumber = 17;
  ::google::protobuf::int32 engagement() const;
  void set_engagement(::google::protobuf::int32 value);

  // optional int32 laser_add = 21;
  bool has_laser_add() const;
  void clear_laser_add();
  static const int kLaserAddFieldNumber = 21;
  ::google::protobuf::int32 laser_add() const;
  void set_laser_add(::google::protobuf::int32 value);

  // optional int32 livefire_add = 22;
  bool has_livefire_add() const;
  void clear_livefire_add();
  static const int kLivefireAddFieldNumber = 22;
  ::google::protobuf::int32 livefire_add() const;
  void set_livefire_add(::google::protobuf::int32 value);

  // optional int32 protect = 42;
  bool has_protect() const;
  void clear_protect();
  static const int kProtectFieldNumber = 42;
  ::google::protobuf::int32 protect() const;
  void set_protect(::google::protobuf::int32 value);

  // optional int32 defense_add = 23;
  bool has_defense_add() const;
  void clear_defense_add();
  static const int kDefenseAddFieldNumber = 23;
  ::google::protobuf::int32 defense_add() const;
  void set_defense_add(::google::protobuf::int32 value);

  // optional int32 intercept_add = 24;
  bool has_intercept_add() const;
  void clear_intercept_add();
  static const int kInterceptAddFieldNumber = 24;
  ::google::protobuf::int32 intercept_add() const;
  void set_intercept_add(::google::protobuf::int32 value);

  // optional int32 hp = 31;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 31;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // optional float fuel_ratio = 32;
  bool has_fuel_ratio() const;
  void clear_fuel_ratio();
  static const int kFuelRatioFieldNumber = 32;
  float fuel_ratio() const;
  void set_fuel_ratio(float value);

  // optional float ammo_ratio = 33;
  bool has_ammo_ratio() const;
  void clear_ammo_ratio();
  static const int kAmmoRatioFieldNumber = 33;
  float ammo_ratio() const;
  void set_ammo_ratio(float value);

  // optional int32 workplace = 41;
  bool has_workplace() const;
  void clear_workplace();
  static const int kWorkplaceFieldNumber = 41;
  ::google::protobuf::int32 workplace() const;
  void set_workplace(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.LogGameShip)
 private:
  void set_has_subid();
  void clear_has_subid();
  void set_has_action_time();
  void clear_has_action_time();
  void set_has_action_type();
  void clear_has_action_type();
  void set_has_entry_id();
  void clear_has_entry_id();
  void set_has_userid();
  void clear_has_userid();
  void set_has_nick();
  void clear_has_nick();
  void set_has_sn();
  void clear_has_sn();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_level();
  void clear_has_level();
  void set_has_exp();
  void clear_has_exp();
  void set_has_affinity();
  void clear_has_affinity();
  void set_has_affinity_exp();
  void clear_has_affinity_exp();
  void set_has_engagement();
  void clear_has_engagement();
  void set_has_laser_add();
  void clear_has_laser_add();
  void set_has_livefire_add();
  void clear_has_livefire_add();
  void set_has_defense_add();
  void clear_has_defense_add();
  void set_has_intercept_add();
  void clear_has_intercept_add();
  void set_has_hp();
  void clear_has_hp();
  void set_has_fuel_ratio();
  void clear_has_fuel_ratio();
  void set_has_ammo_ratio();
  void clear_has_ammo_ratio();
  void set_has_workplace();
  void clear_has_workplace();
  void set_has_protect();
  void clear_has_protect();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::uint64 subid_;
  ::google::protobuf::int64 action_time_;
  int action_type_;
  ::google::protobuf::int32 entry_id_;
  ::google::protobuf::uint64 typeid__;
  ::google::protobuf::int32 sn_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 affinity_;
  ::google::protobuf::int32 affinity_exp_;
  ::google::protobuf::int32 engagement_;
  ::google::protobuf::int32 laser_add_;
  ::google::protobuf::int32 livefire_add_;
  ::google::protobuf::int32 protect_;
  ::google::protobuf::int32 defense_add_;
  ::google::protobuf::int32 intercept_add_;
  ::google::protobuf::int32 hp_;
  float fuel_ratio_;
  float ammo_ratio_;
  ::google::protobuf::int32 workplace_;
  friend struct ::protobuf_StoredProcGameLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_log_game_ship_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_log_game_ship.Parameter) */ {
 public:
  proc_log_game_ship_Parameter();
  virtual ~proc_log_game_ship_Parameter();

  proc_log_game_ship_Parameter(const proc_log_game_ship_Parameter& from);

  inline proc_log_game_ship_Parameter& operator=(const proc_log_game_ship_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_log_game_ship_Parameter(proc_log_game_ship_Parameter&& from) noexcept
    : proc_log_game_ship_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_log_game_ship_Parameter& operator=(proc_log_game_ship_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_log_game_ship_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_log_game_ship_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_log_game_ship_Parameter*>(
               &_proc_log_game_ship_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(proc_log_game_ship_Parameter* other);
  void Swap(proc_log_game_ship_Parameter* other);
  friend void swap(proc_log_game_ship_Parameter& a, proc_log_game_ship_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_log_game_ship_Parameter* New() const final {
    return CreateMaybeMessage<proc_log_game_ship_Parameter>(NULL);
  }

  proc_log_game_ship_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_log_game_ship_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_log_game_ship_Parameter& from);
  void MergeFrom(const proc_log_game_ship_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_log_game_ship_Parameter* other);
  protected:
  explicit proc_log_game_ship_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.LogGameShip p_log = 1;
  bool has_p_log() const;
  void clear_p_log();
  static const int kPLogFieldNumber = 1;
  private:
  const ::db::LogGameShip& _internal_p_log() const;
  public:
  const ::db::LogGameShip& p_log() const;
  ::db::LogGameShip* release_p_log();
  ::db::LogGameShip* mutable_p_log();
  void set_allocated_p_log(::db::LogGameShip* p_log);
  void unsafe_arena_set_allocated_p_log(
      ::db::LogGameShip* p_log);
  ::db::LogGameShip* unsafe_arena_release_p_log();

  // @@protoc_insertion_point(class_scope:db.proc_log_game_ship.Parameter)
 private:
  void set_has_p_log();
  void clear_has_p_log();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::LogGameShip* p_log_;
  friend struct ::protobuf_StoredProcGameLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_log_game_ship_ReturnRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_log_game_ship.ReturnRecord) */ {
 public:
  proc_log_game_ship_ReturnRecord();
  virtual ~proc_log_game_ship_ReturnRecord();

  proc_log_game_ship_ReturnRecord(const proc_log_game_ship_ReturnRecord& from);

  inline proc_log_game_ship_ReturnRecord& operator=(const proc_log_game_ship_ReturnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_log_game_ship_ReturnRecord(proc_log_game_ship_ReturnRecord&& from) noexcept
    : proc_log_game_ship_ReturnRecord() {
    *this = ::std::move(from);
  }

  inline proc_log_game_ship_ReturnRecord& operator=(proc_log_game_ship_ReturnRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_log_game_ship_ReturnRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_log_game_ship_ReturnRecord* internal_default_instance() {
    return reinterpret_cast<const proc_log_game_ship_ReturnRecord*>(
               &_proc_log_game_ship_ReturnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(proc_log_game_ship_ReturnRecord* other);
  void Swap(proc_log_game_ship_ReturnRecord* other);
  friend void swap(proc_log_game_ship_ReturnRecord& a, proc_log_game_ship_ReturnRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_log_game_ship_ReturnRecord* New() const final {
    return CreateMaybeMessage<proc_log_game_ship_ReturnRecord>(NULL);
  }

  proc_log_game_ship_ReturnRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_log_game_ship_ReturnRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_log_game_ship_ReturnRecord& from);
  void MergeFrom(const proc_log_game_ship_ReturnRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_log_game_ship_ReturnRecord* other);
  protected:
  explicit proc_log_game_ship_ReturnRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.proc_log_game_ship.ReturnRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_StoredProcGameLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_log_game_ship : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_log_game_ship) */ {
 public:
  proc_log_game_ship();
  virtual ~proc_log_game_ship();

  proc_log_game_ship(const proc_log_game_ship& from);

  inline proc_log_game_ship& operator=(const proc_log_game_ship& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_log_game_ship(proc_log_game_ship&& from) noexcept
    : proc_log_game_ship() {
    *this = ::std::move(from);
  }

  inline proc_log_game_ship& operator=(proc_log_game_ship&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_log_game_ship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_log_game_ship* internal_default_instance() {
    return reinterpret_cast<const proc_log_game_ship*>(
               &_proc_log_game_ship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(proc_log_game_ship* other);
  void Swap(proc_log_game_ship* other);
  friend void swap(proc_log_game_ship& a, proc_log_game_ship& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_log_game_ship* New() const final {
    return CreateMaybeMessage<proc_log_game_ship>(NULL);
  }

  proc_log_game_ship* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_log_game_ship>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_log_game_ship& from);
  void MergeFrom(const proc_log_game_ship& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_log_game_ship* other);
  protected:
  explicit proc_log_game_ship(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_log_game_ship_Parameter Parameter;
  typedef proc_log_game_ship_ReturnRecord ReturnRecord;

  // accessors -------------------------------------------------------

  // repeated .db.proc_log_game_ship.ReturnRecord return_record_list = 2;
  int return_record_list_size() const;
  void clear_return_record_list();
  static const int kReturnRecordListFieldNumber = 2;
  ::db::proc_log_game_ship_ReturnRecord* mutable_return_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_ship_ReturnRecord >*
      mutable_return_record_list();
  const ::db::proc_log_game_ship_ReturnRecord& return_record_list(int index) const;
  ::db::proc_log_game_ship_ReturnRecord* add_return_record_list();
  const ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_ship_ReturnRecord >&
      return_record_list() const;

  // optional .db.proc_log_game_ship.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_log_game_ship_Parameter& _internal_param() const;
  public:
  const ::db::proc_log_game_ship_Parameter& param() const;
  ::db::proc_log_game_ship_Parameter* release_param();
  ::db::proc_log_game_ship_Parameter* mutable_param();
  void set_allocated_param(::db::proc_log_game_ship_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_log_game_ship_Parameter* param);
  ::db::proc_log_game_ship_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_log_game_ship)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_ship_ReturnRecord > return_record_list_;
  ::db::proc_log_game_ship_Parameter* param_;
  friend struct ::protobuf_StoredProcGameLog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogGameResource

// required uint64 subid = 1;
inline bool LogGameResource::has_subid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogGameResource::set_has_subid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogGameResource::clear_has_subid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogGameResource::clear_subid() {
  subid_ = GOOGLE_ULONGLONG(0);
  clear_has_subid();
}
inline ::google::protobuf::uint64 LogGameResource::subid() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.subid)
  return subid_;
}
inline void LogGameResource::set_subid(::google::protobuf::uint64 value) {
  set_has_subid();
  subid_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.subid)
}

// required sfixed64 action_time = 2;
inline bool LogGameResource::has_action_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogGameResource::set_has_action_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogGameResource::clear_has_action_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogGameResource::clear_action_time() {
  action_time_ = GOOGLE_LONGLONG(0);
  clear_has_action_time();
}
inline ::google::protobuf::int64 LogGameResource::action_time() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.action_time)
  return action_time_;
}
inline void LogGameResource::set_action_time(::google::protobuf::int64 value) {
  set_has_action_time();
  action_time_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.action_time)
}

// required .db.LogGameResource.ACTION_TYPE action_type = 3;
inline bool LogGameResource::has_action_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogGameResource::set_has_action_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogGameResource::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogGameResource::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::db::LogGameResource_ACTION_TYPE LogGameResource::action_type() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.action_type)
  return static_cast< ::db::LogGameResource_ACTION_TYPE >(action_type_);
}
inline void LogGameResource::set_action_type(::db::LogGameResource_ACTION_TYPE value) {
  assert(::db::LogGameResource_ACTION_TYPE_IsValid(value));
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.action_type)
}

// required int32 entry_id = 4;
inline bool LogGameResource::has_entry_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogGameResource::set_has_entry_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogGameResource::clear_has_entry_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogGameResource::clear_entry_id() {
  entry_id_ = 0;
  clear_has_entry_id();
}
inline ::google::protobuf::int32 LogGameResource::entry_id() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.entry_id)
  return entry_id_;
}
inline void LogGameResource::set_entry_id(::google::protobuf::int32 value) {
  set_has_entry_id();
  entry_id_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.entry_id)
}

// required bytes userid = 5;
inline bool LogGameResource::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogGameResource::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogGameResource::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogGameResource::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& LogGameResource::userid() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.userid)
  return userid_.Get();
}
inline void LogGameResource::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.LogGameResource.userid)
}
#if LANG_CXX11
inline void LogGameResource::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.LogGameResource.userid)
}
#endif
inline void LogGameResource::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.LogGameResource.userid)
}
inline void LogGameResource::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.LogGameResource.userid)
}
inline ::std::string* LogGameResource::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.LogGameResource.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogGameResource::release_userid() {
  // @@protoc_insertion_point(field_release:db.LogGameResource.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogGameResource::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.LogGameResource.userid)
}
inline ::std::string* LogGameResource::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.LogGameResource.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogGameResource::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.LogGameResource.userid)
}

// required bytes nick = 6;
inline bool LogGameResource::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogGameResource::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogGameResource::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogGameResource::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& LogGameResource::nick() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.nick)
  return nick_.Get();
}
inline void LogGameResource::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.LogGameResource.nick)
}
#if LANG_CXX11
inline void LogGameResource::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.LogGameResource.nick)
}
#endif
inline void LogGameResource::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.LogGameResource.nick)
}
inline void LogGameResource::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.LogGameResource.nick)
}
inline ::std::string* LogGameResource::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:db.LogGameResource.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogGameResource::release_nick() {
  // @@protoc_insertion_point(field_release:db.LogGameResource.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogGameResource::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.LogGameResource.nick)
}
inline ::std::string* LogGameResource::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.LogGameResource.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogGameResource::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.LogGameResource.nick)
}

// optional uint64 diamond = 11;
inline bool LogGameResource::has_diamond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogGameResource::set_has_diamond() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogGameResource::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogGameResource::clear_diamond() {
  diamond_ = GOOGLE_ULONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::uint64 LogGameResource::diamond() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.diamond)
  return diamond_;
}
inline void LogGameResource::set_diamond(::google::protobuf::uint64 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.diamond)
}

// optional int32 fuel = 21;
inline bool LogGameResource::has_fuel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogGameResource::set_has_fuel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogGameResource::clear_has_fuel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogGameResource::clear_fuel() {
  fuel_ = 0;
  clear_has_fuel();
}
inline ::google::protobuf::int32 LogGameResource::fuel() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.fuel)
  return fuel_;
}
inline void LogGameResource::set_fuel(::google::protobuf::int32 value) {
  set_has_fuel();
  fuel_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.fuel)
}

// optional int32 ammo = 22;
inline bool LogGameResource::has_ammo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogGameResource::set_has_ammo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogGameResource::clear_has_ammo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogGameResource::clear_ammo() {
  ammo_ = 0;
  clear_has_ammo();
}
inline ::google::protobuf::int32 LogGameResource::ammo() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.ammo)
  return ammo_;
}
inline void LogGameResource::set_ammo(::google::protobuf::int32 value) {
  set_has_ammo();
  ammo_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.ammo)
}

// optional int32 metal = 23;
inline bool LogGameResource::has_metal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogGameResource::set_has_metal() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogGameResource::clear_has_metal() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogGameResource::clear_metal() {
  metal_ = 0;
  clear_has_metal();
}
inline ::google::protobuf::int32 LogGameResource::metal() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.metal)
  return metal_;
}
inline void LogGameResource::set_metal(::google::protobuf::int32 value) {
  set_has_metal();
  metal_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.metal)
}

// optional int32 titanium = 24;
inline bool LogGameResource::has_titanium() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogGameResource::set_has_titanium() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogGameResource::clear_has_titanium() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogGameResource::clear_titanium() {
  titanium_ = 0;
  clear_has_titanium();
}
inline ::google::protobuf::int32 LogGameResource::titanium() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.titanium)
  return titanium_;
}
inline void LogGameResource::set_titanium(::google::protobuf::int32 value) {
  set_has_titanium();
  titanium_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.titanium)
}

// optional uint64 res_typeid = 31;
inline bool LogGameResource::has_res_typeid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogGameResource::set_has_res_typeid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogGameResource::clear_has_res_typeid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogGameResource::clear_res_typeid() {
  res_typeid_ = GOOGLE_ULONGLONG(0);
  clear_has_res_typeid();
}
inline ::google::protobuf::uint64 LogGameResource::res_typeid() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.res_typeid)
  return res_typeid_;
}
inline void LogGameResource::set_res_typeid(::google::protobuf::uint64 value) {
  set_has_res_typeid();
  res_typeid_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.res_typeid)
}

// optional int32 res_num = 32;
inline bool LogGameResource::has_res_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogGameResource::set_has_res_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogGameResource::clear_has_res_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogGameResource::clear_res_num() {
  res_num_ = 0;
  clear_has_res_num();
}
inline ::google::protobuf::int32 LogGameResource::res_num() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.res_num)
  return res_num_;
}
inline void LogGameResource::set_res_num(::google::protobuf::int32 value) {
  set_has_res_num();
  res_num_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.res_num)
}

// optional int32 res_num_add = 33;
inline bool LogGameResource::has_res_num_add() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogGameResource::set_has_res_num_add() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogGameResource::clear_has_res_num_add() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogGameResource::clear_res_num_add() {
  res_num_add_ = 0;
  clear_has_res_num_add();
}
inline ::google::protobuf::int32 LogGameResource::res_num_add() const {
  // @@protoc_insertion_point(field_get:db.LogGameResource.res_num_add)
  return res_num_add_;
}
inline void LogGameResource::set_res_num_add(::google::protobuf::int32 value) {
  set_has_res_num_add();
  res_num_add_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameResource.res_num_add)
}

// -------------------------------------------------------------------

// proc_log_game_resource_Parameter

// required .db.LogGameResource p_log = 1;
inline bool proc_log_game_resource_Parameter::has_p_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_log_game_resource_Parameter::set_has_p_log() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_log_game_resource_Parameter::clear_has_p_log() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_log_game_resource_Parameter::clear_p_log() {
  if (p_log_ != NULL) p_log_->Clear();
  clear_has_p_log();
}
inline const ::db::LogGameResource& proc_log_game_resource_Parameter::_internal_p_log() const {
  return *p_log_;
}
inline const ::db::LogGameResource& proc_log_game_resource_Parameter::p_log() const {
  const ::db::LogGameResource* p = p_log_;
  // @@protoc_insertion_point(field_get:db.proc_log_game_resource.Parameter.p_log)
  return p != NULL ? *p : *reinterpret_cast<const ::db::LogGameResource*>(
      &::db::_LogGameResource_default_instance_);
}
inline ::db::LogGameResource* proc_log_game_resource_Parameter::release_p_log() {
  // @@protoc_insertion_point(field_release:db.proc_log_game_resource.Parameter.p_log)
  clear_has_p_log();
  ::db::LogGameResource* temp = p_log_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  p_log_ = NULL;
  return temp;
}
inline ::db::LogGameResource* proc_log_game_resource_Parameter::unsafe_arena_release_p_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_log_game_resource.Parameter.p_log)
  clear_has_p_log();
  ::db::LogGameResource* temp = p_log_;
  p_log_ = NULL;
  return temp;
}
inline ::db::LogGameResource* proc_log_game_resource_Parameter::mutable_p_log() {
  set_has_p_log();
  if (p_log_ == NULL) {
    auto* p = CreateMaybeMessage<::db::LogGameResource>(GetArenaNoVirtual());
    p_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_log_game_resource.Parameter.p_log)
  return p_log_;
}
inline void proc_log_game_resource_Parameter::set_allocated_p_log(::db::LogGameResource* p_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_log_;
  }
  if (p_log) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(p_log);
    if (message_arena != submessage_arena) {
      p_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_log, submessage_arena);
    }
    set_has_p_log();
  } else {
    clear_has_p_log();
  }
  p_log_ = p_log;
  // @@protoc_insertion_point(field_set_allocated:db.proc_log_game_resource.Parameter.p_log)
}

// -------------------------------------------------------------------

// proc_log_game_resource_ReturnRecord

// -------------------------------------------------------------------

// proc_log_game_resource

// optional .db.proc_log_game_resource.Parameter param = 1;
inline bool proc_log_game_resource::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_log_game_resource::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_log_game_resource::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_log_game_resource::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_log_game_resource_Parameter& proc_log_game_resource::_internal_param() const {
  return *param_;
}
inline const ::db::proc_log_game_resource_Parameter& proc_log_game_resource::param() const {
  const ::db::proc_log_game_resource_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_log_game_resource.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_log_game_resource_Parameter*>(
      &::db::_proc_log_game_resource_Parameter_default_instance_);
}
inline ::db::proc_log_game_resource_Parameter* proc_log_game_resource::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_log_game_resource.param)
  clear_has_param();
  ::db::proc_log_game_resource_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_log_game_resource_Parameter* proc_log_game_resource::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_log_game_resource.param)
  clear_has_param();
  ::db::proc_log_game_resource_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_log_game_resource_Parameter* proc_log_game_resource::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_log_game_resource_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_log_game_resource.param)
  return param_;
}
inline void proc_log_game_resource::set_allocated_param(::db::proc_log_game_resource_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_log_game_resource.param)
}

// repeated .db.proc_log_game_resource.ReturnRecord return_record_list = 2;
inline int proc_log_game_resource::return_record_list_size() const {
  return return_record_list_.size();
}
inline void proc_log_game_resource::clear_return_record_list() {
  return_record_list_.Clear();
}
inline ::db::proc_log_game_resource_ReturnRecord* proc_log_game_resource::mutable_return_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.proc_log_game_resource.return_record_list)
  return return_record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_resource_ReturnRecord >*
proc_log_game_resource::mutable_return_record_list() {
  // @@protoc_insertion_point(field_mutable_list:db.proc_log_game_resource.return_record_list)
  return &return_record_list_;
}
inline const ::db::proc_log_game_resource_ReturnRecord& proc_log_game_resource::return_record_list(int index) const {
  // @@protoc_insertion_point(field_get:db.proc_log_game_resource.return_record_list)
  return return_record_list_.Get(index);
}
inline ::db::proc_log_game_resource_ReturnRecord* proc_log_game_resource::add_return_record_list() {
  // @@protoc_insertion_point(field_add:db.proc_log_game_resource.return_record_list)
  return return_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_resource_ReturnRecord >&
proc_log_game_resource::return_record_list() const {
  // @@protoc_insertion_point(field_list:db.proc_log_game_resource.return_record_list)
  return return_record_list_;
}

// -------------------------------------------------------------------

// LogGameShip

// required uint64 subid = 1;
inline bool LogGameShip::has_subid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogGameShip::set_has_subid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogGameShip::clear_has_subid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogGameShip::clear_subid() {
  subid_ = GOOGLE_ULONGLONG(0);
  clear_has_subid();
}
inline ::google::protobuf::uint64 LogGameShip::subid() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.subid)
  return subid_;
}
inline void LogGameShip::set_subid(::google::protobuf::uint64 value) {
  set_has_subid();
  subid_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.subid)
}

// required sfixed64 action_time = 2;
inline bool LogGameShip::has_action_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogGameShip::set_has_action_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogGameShip::clear_has_action_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogGameShip::clear_action_time() {
  action_time_ = GOOGLE_LONGLONG(0);
  clear_has_action_time();
}
inline ::google::protobuf::int64 LogGameShip::action_time() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.action_time)
  return action_time_;
}
inline void LogGameShip::set_action_time(::google::protobuf::int64 value) {
  set_has_action_time();
  action_time_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.action_time)
}

// required .db.LogGameShip.ACTION_TYPE action_type = 3;
inline bool LogGameShip::has_action_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogGameShip::set_has_action_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogGameShip::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogGameShip::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::db::LogGameShip_ACTION_TYPE LogGameShip::action_type() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.action_type)
  return static_cast< ::db::LogGameShip_ACTION_TYPE >(action_type_);
}
inline void LogGameShip::set_action_type(::db::LogGameShip_ACTION_TYPE value) {
  assert(::db::LogGameShip_ACTION_TYPE_IsValid(value));
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.action_type)
}

// required int32 entry_id = 4;
inline bool LogGameShip::has_entry_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogGameShip::set_has_entry_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogGameShip::clear_has_entry_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogGameShip::clear_entry_id() {
  entry_id_ = 0;
  clear_has_entry_id();
}
inline ::google::protobuf::int32 LogGameShip::entry_id() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.entry_id)
  return entry_id_;
}
inline void LogGameShip::set_entry_id(::google::protobuf::int32 value) {
  set_has_entry_id();
  entry_id_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.entry_id)
}

// required bytes userid = 5;
inline bool LogGameShip::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogGameShip::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogGameShip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogGameShip::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& LogGameShip::userid() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.userid)
  return userid_.Get();
}
inline void LogGameShip::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.LogGameShip.userid)
}
#if LANG_CXX11
inline void LogGameShip::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.LogGameShip.userid)
}
#endif
inline void LogGameShip::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.LogGameShip.userid)
}
inline void LogGameShip::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.LogGameShip.userid)
}
inline ::std::string* LogGameShip::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.LogGameShip.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogGameShip::release_userid() {
  // @@protoc_insertion_point(field_release:db.LogGameShip.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogGameShip::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.LogGameShip.userid)
}
inline ::std::string* LogGameShip::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.LogGameShip.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogGameShip::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.LogGameShip.userid)
}

// required bytes nick = 6;
inline bool LogGameShip::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogGameShip::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogGameShip::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogGameShip::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& LogGameShip::nick() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.nick)
  return nick_.Get();
}
inline void LogGameShip::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.LogGameShip.nick)
}
#if LANG_CXX11
inline void LogGameShip::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.LogGameShip.nick)
}
#endif
inline void LogGameShip::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.LogGameShip.nick)
}
inline void LogGameShip::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.LogGameShip.nick)
}
inline ::std::string* LogGameShip::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:db.LogGameShip.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogGameShip::release_nick() {
  // @@protoc_insertion_point(field_release:db.LogGameShip.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogGameShip::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.LogGameShip.nick)
}
inline ::std::string* LogGameShip::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.LogGameShip.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogGameShip::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.LogGameShip.nick)
}

// required int32 sn = 11;
inline bool LogGameShip::has_sn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogGameShip::set_has_sn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogGameShip::clear_has_sn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogGameShip::clear_sn() {
  sn_ = 0;
  clear_has_sn();
}
inline ::google::protobuf::int32 LogGameShip::sn() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.sn)
  return sn_;
}
inline void LogGameShip::set_sn(::google::protobuf::int32 value) {
  set_has_sn();
  sn_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.sn)
}

// required uint64 typeid = 12;
inline bool LogGameShip::has_typeid_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogGameShip::set_has_typeid_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogGameShip::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogGameShip::clear_typeid_() {
  typeid__ = GOOGLE_ULONGLONG(0);
  clear_has_typeid_();
}
inline ::google::protobuf::uint64 LogGameShip::typeid_() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.typeid)
  return typeid__;
}
inline void LogGameShip::set_typeid_(::google::protobuf::uint64 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.typeid)
}

// required int32 level = 13;
inline bool LogGameShip::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogGameShip::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogGameShip::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogGameShip::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 LogGameShip::level() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.level)
  return level_;
}
inline void LogGameShip::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.level)
}

// required int32 exp = 14;
inline bool LogGameShip::has_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogGameShip::set_has_exp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogGameShip::clear_has_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogGameShip::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 LogGameShip::exp() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.exp)
  return exp_;
}
inline void LogGameShip::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.exp)
}

// required int32 affinity = 15;
inline bool LogGameShip::has_affinity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogGameShip::set_has_affinity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogGameShip::clear_has_affinity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogGameShip::clear_affinity() {
  affinity_ = 0;
  clear_has_affinity();
}
inline ::google::protobuf::int32 LogGameShip::affinity() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.affinity)
  return affinity_;
}
inline void LogGameShip::set_affinity(::google::protobuf::int32 value) {
  set_has_affinity();
  affinity_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.affinity)
}

// required int32 affinity_exp = 16;
inline bool LogGameShip::has_affinity_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogGameShip::set_has_affinity_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogGameShip::clear_has_affinity_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogGameShip::clear_affinity_exp() {
  affinity_exp_ = 0;
  clear_has_affinity_exp();
}
inline ::google::protobuf::int32 LogGameShip::affinity_exp() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.affinity_exp)
  return affinity_exp_;
}
inline void LogGameShip::set_affinity_exp(::google::protobuf::int32 value) {
  set_has_affinity_exp();
  affinity_exp_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.affinity_exp)
}

// required int32 engagement = 17;
inline bool LogGameShip::has_engagement() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogGameShip::set_has_engagement() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogGameShip::clear_has_engagement() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogGameShip::clear_engagement() {
  engagement_ = 0;
  clear_has_engagement();
}
inline ::google::protobuf::int32 LogGameShip::engagement() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.engagement)
  return engagement_;
}
inline void LogGameShip::set_engagement(::google::protobuf::int32 value) {
  set_has_engagement();
  engagement_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.engagement)
}

// optional int32 laser_add = 21;
inline bool LogGameShip::has_laser_add() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogGameShip::set_has_laser_add() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogGameShip::clear_has_laser_add() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogGameShip::clear_laser_add() {
  laser_add_ = 0;
  clear_has_laser_add();
}
inline ::google::protobuf::int32 LogGameShip::laser_add() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.laser_add)
  return laser_add_;
}
inline void LogGameShip::set_laser_add(::google::protobuf::int32 value) {
  set_has_laser_add();
  laser_add_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.laser_add)
}

// optional int32 livefire_add = 22;
inline bool LogGameShip::has_livefire_add() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LogGameShip::set_has_livefire_add() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LogGameShip::clear_has_livefire_add() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LogGameShip::clear_livefire_add() {
  livefire_add_ = 0;
  clear_has_livefire_add();
}
inline ::google::protobuf::int32 LogGameShip::livefire_add() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.livefire_add)
  return livefire_add_;
}
inline void LogGameShip::set_livefire_add(::google::protobuf::int32 value) {
  set_has_livefire_add();
  livefire_add_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.livefire_add)
}

// optional int32 defense_add = 23;
inline bool LogGameShip::has_defense_add() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LogGameShip::set_has_defense_add() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LogGameShip::clear_has_defense_add() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LogGameShip::clear_defense_add() {
  defense_add_ = 0;
  clear_has_defense_add();
}
inline ::google::protobuf::int32 LogGameShip::defense_add() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.defense_add)
  return defense_add_;
}
inline void LogGameShip::set_defense_add(::google::protobuf::int32 value) {
  set_has_defense_add();
  defense_add_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.defense_add)
}

// optional int32 intercept_add = 24;
inline bool LogGameShip::has_intercept_add() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LogGameShip::set_has_intercept_add() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LogGameShip::clear_has_intercept_add() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LogGameShip::clear_intercept_add() {
  intercept_add_ = 0;
  clear_has_intercept_add();
}
inline ::google::protobuf::int32 LogGameShip::intercept_add() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.intercept_add)
  return intercept_add_;
}
inline void LogGameShip::set_intercept_add(::google::protobuf::int32 value) {
  set_has_intercept_add();
  intercept_add_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.intercept_add)
}

// optional int32 hp = 31;
inline bool LogGameShip::has_hp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LogGameShip::set_has_hp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LogGameShip::clear_has_hp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LogGameShip::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 LogGameShip::hp() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.hp)
  return hp_;
}
inline void LogGameShip::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.hp)
}

// optional float fuel_ratio = 32;
inline bool LogGameShip::has_fuel_ratio() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LogGameShip::set_has_fuel_ratio() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LogGameShip::clear_has_fuel_ratio() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LogGameShip::clear_fuel_ratio() {
  fuel_ratio_ = 0;
  clear_has_fuel_ratio();
}
inline float LogGameShip::fuel_ratio() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.fuel_ratio)
  return fuel_ratio_;
}
inline void LogGameShip::set_fuel_ratio(float value) {
  set_has_fuel_ratio();
  fuel_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.fuel_ratio)
}

// optional float ammo_ratio = 33;
inline bool LogGameShip::has_ammo_ratio() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LogGameShip::set_has_ammo_ratio() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LogGameShip::clear_has_ammo_ratio() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LogGameShip::clear_ammo_ratio() {
  ammo_ratio_ = 0;
  clear_has_ammo_ratio();
}
inline float LogGameShip::ammo_ratio() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.ammo_ratio)
  return ammo_ratio_;
}
inline void LogGameShip::set_ammo_ratio(float value) {
  set_has_ammo_ratio();
  ammo_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.ammo_ratio)
}

// optional int32 workplace = 41;
inline bool LogGameShip::has_workplace() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LogGameShip::set_has_workplace() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LogGameShip::clear_has_workplace() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LogGameShip::clear_workplace() {
  workplace_ = 0;
  clear_has_workplace();
}
inline ::google::protobuf::int32 LogGameShip::workplace() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.workplace)
  return workplace_;
}
inline void LogGameShip::set_workplace(::google::protobuf::int32 value) {
  set_has_workplace();
  workplace_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.workplace)
}

// optional int32 protect = 42;
inline bool LogGameShip::has_protect() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LogGameShip::set_has_protect() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LogGameShip::clear_has_protect() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LogGameShip::clear_protect() {
  protect_ = 0;
  clear_has_protect();
}
inline ::google::protobuf::int32 LogGameShip::protect() const {
  // @@protoc_insertion_point(field_get:db.LogGameShip.protect)
  return protect_;
}
inline void LogGameShip::set_protect(::google::protobuf::int32 value) {
  set_has_protect();
  protect_ = value;
  // @@protoc_insertion_point(field_set:db.LogGameShip.protect)
}

// -------------------------------------------------------------------

// proc_log_game_ship_Parameter

// required .db.LogGameShip p_log = 1;
inline bool proc_log_game_ship_Parameter::has_p_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_log_game_ship_Parameter::set_has_p_log() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_log_game_ship_Parameter::clear_has_p_log() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_log_game_ship_Parameter::clear_p_log() {
  if (p_log_ != NULL) p_log_->Clear();
  clear_has_p_log();
}
inline const ::db::LogGameShip& proc_log_game_ship_Parameter::_internal_p_log() const {
  return *p_log_;
}
inline const ::db::LogGameShip& proc_log_game_ship_Parameter::p_log() const {
  const ::db::LogGameShip* p = p_log_;
  // @@protoc_insertion_point(field_get:db.proc_log_game_ship.Parameter.p_log)
  return p != NULL ? *p : *reinterpret_cast<const ::db::LogGameShip*>(
      &::db::_LogGameShip_default_instance_);
}
inline ::db::LogGameShip* proc_log_game_ship_Parameter::release_p_log() {
  // @@protoc_insertion_point(field_release:db.proc_log_game_ship.Parameter.p_log)
  clear_has_p_log();
  ::db::LogGameShip* temp = p_log_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  p_log_ = NULL;
  return temp;
}
inline ::db::LogGameShip* proc_log_game_ship_Parameter::unsafe_arena_release_p_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_log_game_ship.Parameter.p_log)
  clear_has_p_log();
  ::db::LogGameShip* temp = p_log_;
  p_log_ = NULL;
  return temp;
}
inline ::db::LogGameShip* proc_log_game_ship_Parameter::mutable_p_log() {
  set_has_p_log();
  if (p_log_ == NULL) {
    auto* p = CreateMaybeMessage<::db::LogGameShip>(GetArenaNoVirtual());
    p_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_log_game_ship.Parameter.p_log)
  return p_log_;
}
inline void proc_log_game_ship_Parameter::set_allocated_p_log(::db::LogGameShip* p_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_log_;
  }
  if (p_log) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(p_log);
    if (message_arena != submessage_arena) {
      p_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_log, submessage_arena);
    }
    set_has_p_log();
  } else {
    clear_has_p_log();
  }
  p_log_ = p_log;
  // @@protoc_insertion_point(field_set_allocated:db.proc_log_game_ship.Parameter.p_log)
}

// -------------------------------------------------------------------

// proc_log_game_ship_ReturnRecord

// -------------------------------------------------------------------

// proc_log_game_ship

// optional .db.proc_log_game_ship.Parameter param = 1;
inline bool proc_log_game_ship::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_log_game_ship::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_log_game_ship::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_log_game_ship::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_log_game_ship_Parameter& proc_log_game_ship::_internal_param() const {
  return *param_;
}
inline const ::db::proc_log_game_ship_Parameter& proc_log_game_ship::param() const {
  const ::db::proc_log_game_ship_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_log_game_ship.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_log_game_ship_Parameter*>(
      &::db::_proc_log_game_ship_Parameter_default_instance_);
}
inline ::db::proc_log_game_ship_Parameter* proc_log_game_ship::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_log_game_ship.param)
  clear_has_param();
  ::db::proc_log_game_ship_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_log_game_ship_Parameter* proc_log_game_ship::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_log_game_ship.param)
  clear_has_param();
  ::db::proc_log_game_ship_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_log_game_ship_Parameter* proc_log_game_ship::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_log_game_ship_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_log_game_ship.param)
  return param_;
}
inline void proc_log_game_ship::set_allocated_param(::db::proc_log_game_ship_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_log_game_ship.param)
}

// repeated .db.proc_log_game_ship.ReturnRecord return_record_list = 2;
inline int proc_log_game_ship::return_record_list_size() const {
  return return_record_list_.size();
}
inline void proc_log_game_ship::clear_return_record_list() {
  return_record_list_.Clear();
}
inline ::db::proc_log_game_ship_ReturnRecord* proc_log_game_ship::mutable_return_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.proc_log_game_ship.return_record_list)
  return return_record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_ship_ReturnRecord >*
proc_log_game_ship::mutable_return_record_list() {
  // @@protoc_insertion_point(field_mutable_list:db.proc_log_game_ship.return_record_list)
  return &return_record_list_;
}
inline const ::db::proc_log_game_ship_ReturnRecord& proc_log_game_ship::return_record_list(int index) const {
  // @@protoc_insertion_point(field_get:db.proc_log_game_ship.return_record_list)
  return return_record_list_.Get(index);
}
inline ::db::proc_log_game_ship_ReturnRecord* proc_log_game_ship::add_return_record_list() {
  // @@protoc_insertion_point(field_add:db.proc_log_game_ship.return_record_list)
  return return_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::proc_log_game_ship_ReturnRecord >&
proc_log_game_ship::return_record_list() const {
  // @@protoc_insertion_point(field_list:db.proc_log_game_ship.return_record_list)
  return return_record_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::db::LogGameResource_ACTION_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db::LogGameResource_ACTION_TYPE>() {
  return ::db::LogGameResource_ACTION_TYPE_descriptor();
}
template <> struct is_proto_enum< ::db::LogGameShip_ACTION_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db::LogGameShip_ACTION_TYPE>() {
  return ::db::LogGameShip_ACTION_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_StoredProcGameLog_2eproto
