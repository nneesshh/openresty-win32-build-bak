// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcMap.proto

#ifndef PROTOBUF_INCLUDED_StoredProcMap_2eproto
#define PROTOBUF_INCLUDED_StoredProcMap_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcMap_2eproto 

namespace protobuf_StoredProcMap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[20];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_StoredProcMap_2eproto
namespace db {
class ConfigMap;
class ConfigMapDefaultTypeInternal;
extern ConfigMapDefaultTypeInternal _ConfigMap_default_instance_;
class ConfigMapArea;
class ConfigMapAreaDefaultTypeInternal;
extern ConfigMapAreaDefaultTypeInternal _ConfigMapArea_default_instance_;
class ConfigMapAreaList;
class ConfigMapAreaListDefaultTypeInternal;
extern ConfigMapAreaListDefaultTypeInternal _ConfigMapAreaList_default_instance_;
class ConfigMapEntry;
class ConfigMapEntryDefaultTypeInternal;
extern ConfigMapEntryDefaultTypeInternal _ConfigMapEntry_default_instance_;
class ConfigMapEntryList;
class ConfigMapEntryListDefaultTypeInternal;
extern ConfigMapEntryListDefaultTypeInternal _ConfigMapEntryList_default_instance_;
class ConfigMapList;
class ConfigMapListDefaultTypeInternal;
extern ConfigMapListDefaultTypeInternal _ConfigMapList_default_instance_;
class ConfigPirateShip;
class ConfigPirateShipDefaultTypeInternal;
extern ConfigPirateShipDefaultTypeInternal _ConfigPirateShip_default_instance_;
class ConfigPirateShipList;
class ConfigPirateShipListDefaultTypeInternal;
extern ConfigPirateShipListDefaultTypeInternal _ConfigPirateShipList_default_instance_;
class ConfigWildIsland;
class ConfigWildIslandDefaultTypeInternal;
extern ConfigWildIslandDefaultTypeInternal _ConfigWildIsland_default_instance_;
class ConfigWildIslandList;
class ConfigWildIslandListDefaultTypeInternal;
extern ConfigWildIslandListDefaultTypeInternal _ConfigWildIslandList_default_instance_;
class GameGroupMember;
class GameGroupMemberDefaultTypeInternal;
extern GameGroupMemberDefaultTypeInternal _GameGroupMember_default_instance_;
class GameGroupWildIsland;
class GameGroupWildIslandDefaultTypeInternal;
extern GameGroupWildIslandDefaultTypeInternal _GameGroupWildIsland_default_instance_;
class UserFarmSkillExpGen;
class UserFarmSkillExpGenDefaultTypeInternal;
extern UserFarmSkillExpGenDefaultTypeInternal _UserFarmSkillExpGen_default_instance_;
class UserMapArea;
class UserMapAreaDefaultTypeInternal;
extern UserMapAreaDefaultTypeInternal _UserMapArea_default_instance_;
class UserMapEntry;
class UserMapEntryDefaultTypeInternal;
extern UserMapEntryDefaultTypeInternal _UserMapEntry_default_instance_;
class UserPirateShip;
class UserPirateShipDefaultTypeInternal;
extern UserPirateShipDefaultTypeInternal _UserPirateShip_default_instance_;
class UserStatsMapEntry;
class UserStatsMapEntryDefaultTypeInternal;
extern UserStatsMapEntryDefaultTypeInternal _UserStatsMapEntry_default_instance_;
class UserStatsWildIslandGather;
class UserStatsWildIslandGatherDefaultTypeInternal;
extern UserStatsWildIslandGatherDefaultTypeInternal _UserStatsWildIslandGather_default_instance_;
class UserWildIsland;
class UserWildIslandDefaultTypeInternal;
extern UserWildIslandDefaultTypeInternal _UserWildIsland_default_instance_;
class WildIslandDetail;
class WildIslandDetailDefaultTypeInternal;
extern WildIslandDetailDefaultTypeInternal _WildIslandDetail_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::ConfigMap* Arena::CreateMaybeMessage<::db::ConfigMap>(Arena*);
template<> ::db::ConfigMapArea* Arena::CreateMaybeMessage<::db::ConfigMapArea>(Arena*);
template<> ::db::ConfigMapAreaList* Arena::CreateMaybeMessage<::db::ConfigMapAreaList>(Arena*);
template<> ::db::ConfigMapEntry* Arena::CreateMaybeMessage<::db::ConfigMapEntry>(Arena*);
template<> ::db::ConfigMapEntryList* Arena::CreateMaybeMessage<::db::ConfigMapEntryList>(Arena*);
template<> ::db::ConfigMapList* Arena::CreateMaybeMessage<::db::ConfigMapList>(Arena*);
template<> ::db::ConfigPirateShip* Arena::CreateMaybeMessage<::db::ConfigPirateShip>(Arena*);
template<> ::db::ConfigPirateShipList* Arena::CreateMaybeMessage<::db::ConfigPirateShipList>(Arena*);
template<> ::db::ConfigWildIsland* Arena::CreateMaybeMessage<::db::ConfigWildIsland>(Arena*);
template<> ::db::ConfigWildIslandList* Arena::CreateMaybeMessage<::db::ConfigWildIslandList>(Arena*);
template<> ::db::GameGroupMember* Arena::CreateMaybeMessage<::db::GameGroupMember>(Arena*);
template<> ::db::GameGroupWildIsland* Arena::CreateMaybeMessage<::db::GameGroupWildIsland>(Arena*);
template<> ::db::UserFarmSkillExpGen* Arena::CreateMaybeMessage<::db::UserFarmSkillExpGen>(Arena*);
template<> ::db::UserMapArea* Arena::CreateMaybeMessage<::db::UserMapArea>(Arena*);
template<> ::db::UserMapEntry* Arena::CreateMaybeMessage<::db::UserMapEntry>(Arena*);
template<> ::db::UserPirateShip* Arena::CreateMaybeMessage<::db::UserPirateShip>(Arena*);
template<> ::db::UserStatsMapEntry* Arena::CreateMaybeMessage<::db::UserStatsMapEntry>(Arena*);
template<> ::db::UserStatsWildIslandGather* Arena::CreateMaybeMessage<::db::UserStatsWildIslandGather>(Arena*);
template<> ::db::UserWildIsland* Arena::CreateMaybeMessage<::db::UserWildIsland>(Arena*);
template<> ::db::WildIslandDetail* Arena::CreateMaybeMessage<::db::WildIslandDetail>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class ConfigMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMap) */ {
 public:
  ConfigMap();
  virtual ~ConfigMap();

  ConfigMap(const ConfigMap& from);

  inline ConfigMap& operator=(const ConfigMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMap(ConfigMap&& from) noexcept
    : ConfigMap() {
    *this = ::std::move(from);
  }

  inline ConfigMap& operator=(ConfigMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMap* internal_default_instance() {
    return reinterpret_cast<const ConfigMap*>(
               &_ConfigMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ConfigMap* other);
  void Swap(ConfigMap* other);
  friend void swap(ConfigMap& a, ConfigMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMap* New() const final {
    return CreateMaybeMessage<ConfigMap>(NULL);
  }

  ConfigMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMap& from);
  void MergeFrom(const ConfigMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMap* other);
  protected:
  explicit ConfigMap(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 group_island_total_num = 2;
  bool has_group_island_total_num() const;
  void clear_group_island_total_num();
  static const int kGroupIslandTotalNumFieldNumber = 2;
  ::google::protobuf::int32 group_island_total_num() const;
  void set_group_island_total_num(::google::protobuf::int32 value);

  // required int32 group_island_user_capacity = 3;
  bool has_group_island_user_capacity() const;
  void clear_group_island_user_capacity();
  static const int kGroupIslandUserCapacityFieldNumber = 3;
  ::google::protobuf::int32 group_island_user_capacity() const;
  void set_group_island_user_capacity(::google::protobuf::int32 value);

  // required int32 group_island_user_capacity_add = 4;
  bool has_group_island_user_capacity_add() const;
  void clear_group_island_user_capacity_add();
  static const int kGroupIslandUserCapacityAddFieldNumber = 4;
  ::google::protobuf::int32 group_island_user_capacity_add() const;
  void set_group_island_user_capacity_add(::google::protobuf::int32 value);

  // required int32 group_island_occupy_protect_time = 5;
  bool has_group_island_occupy_protect_time() const;
  void clear_group_island_occupy_protect_time();
  static const int kGroupIslandOccupyProtectTimeFieldNumber = 5;
  ::google::protobuf::int32 group_island_occupy_protect_time() const;
  void set_group_island_occupy_protect_time(::google::protobuf::int32 value);

  // required int32 group_island_occupy_num_max = 6;
  bool has_group_island_occupy_num_max() const;
  void clear_group_island_occupy_num_max();
  static const int kGroupIslandOccupyNumMaxFieldNumber = 6;
  ::google::protobuf::int32 group_island_occupy_num_max() const;
  void set_group_island_occupy_num_max(::google::protobuf::int32 value);

  // required int32 gather_period = 11;
  bool has_gather_period() const;
  void clear_gather_period();
  static const int kGatherPeriodFieldNumber = 11;
  ::google::protobuf::int32 gather_period() const;
  void set_gather_period(::google::protobuf::int32 value);

  // required int32 gather_aggregate_period = 12;
  bool has_gather_aggregate_period() const;
  void clear_gather_aggregate_period();
  static const int kGatherAggregatePeriodFieldNumber = 12;
  ::google::protobuf::int32 gather_aggregate_period() const;
  void set_gather_aggregate_period(::google::protobuf::int32 value);

  // required int32 harvest_interval = 13;
  bool has_harvest_interval() const;
  void clear_harvest_interval();
  static const int kHarvestIntervalFieldNumber = 13;
  ::google::protobuf::int32 harvest_interval() const;
  void set_harvest_interval(::google::protobuf::int32 value);

  // required int32 farm_skill_exp_period = 14;
  bool has_farm_skill_exp_period() const;
  void clear_farm_skill_exp_period();
  static const int kFarmSkillExpPeriodFieldNumber = 14;
  ::google::protobuf::int32 farm_skill_exp_period() const;
  void set_farm_skill_exp_period(::google::protobuf::int32 value);

  // required int32 player_ship_navigate_timeout = 32;
  bool has_player_ship_navigate_timeout() const;
  void clear_player_ship_navigate_timeout();
  static const int kPlayerShipNavigateTimeoutFieldNumber = 32;
  ::google::protobuf::int32 player_ship_navigate_timeout() const;
  void set_player_ship_navigate_timeout(::google::protobuf::int32 value);

  // required int32 pvp_loot_num_max = 21;
  bool has_pvp_loot_num_max() const;
  void clear_pvp_loot_num_max();
  static const int kPvpLootNumMaxFieldNumber = 21;
  ::google::protobuf::int32 pvp_loot_num_max() const;
  void set_pvp_loot_num_max(::google::protobuf::int32 value);

  // required int32 pvp_loot_timeout = 22;
  bool has_pvp_loot_timeout() const;
  void clear_pvp_loot_timeout();
  static const int kPvpLootTimeoutFieldNumber = 22;
  ::google::protobuf::int32 pvp_loot_timeout() const;
  void set_pvp_loot_timeout(::google::protobuf::int32 value);

  // required float pvp_loot_ratio = 23;
  bool has_pvp_loot_ratio() const;
  void clear_pvp_loot_ratio();
  static const int kPvpLootRatioFieldNumber = 23;
  float pvp_loot_ratio() const;
  void set_pvp_loot_ratio(float value);

  // required int32 player_ship_refresh_timeout = 31;
  bool has_player_ship_refresh_timeout() const;
  void clear_player_ship_refresh_timeout();
  static const int kPlayerShipRefreshTimeoutFieldNumber = 31;
  ::google::protobuf::int32 player_ship_refresh_timeout() const;
  void set_player_ship_refresh_timeout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigMap)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_group_island_total_num();
  void clear_has_group_island_total_num();
  void set_has_group_island_user_capacity();
  void clear_has_group_island_user_capacity();
  void set_has_group_island_user_capacity_add();
  void clear_has_group_island_user_capacity_add();
  void set_has_group_island_occupy_protect_time();
  void clear_has_group_island_occupy_protect_time();
  void set_has_group_island_occupy_num_max();
  void clear_has_group_island_occupy_num_max();
  void set_has_gather_period();
  void clear_has_gather_period();
  void set_has_gather_aggregate_period();
  void clear_has_gather_aggregate_period();
  void set_has_harvest_interval();
  void clear_has_harvest_interval();
  void set_has_farm_skill_exp_period();
  void clear_has_farm_skill_exp_period();
  void set_has_pvp_loot_num_max();
  void clear_has_pvp_loot_num_max();
  void set_has_pvp_loot_timeout();
  void clear_has_pvp_loot_timeout();
  void set_has_pvp_loot_ratio();
  void clear_has_pvp_loot_ratio();
  void set_has_player_ship_refresh_timeout();
  void clear_has_player_ship_refresh_timeout();
  void set_has_player_ship_navigate_timeout();
  void clear_has_player_ship_navigate_timeout();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 group_island_total_num_;
  ::google::protobuf::int32 group_island_user_capacity_;
  ::google::protobuf::int32 group_island_user_capacity_add_;
  ::google::protobuf::int32 group_island_occupy_protect_time_;
  ::google::protobuf::int32 group_island_occupy_num_max_;
  ::google::protobuf::int32 gather_period_;
  ::google::protobuf::int32 gather_aggregate_period_;
  ::google::protobuf::int32 harvest_interval_;
  ::google::protobuf::int32 farm_skill_exp_period_;
  ::google::protobuf::int32 player_ship_navigate_timeout_;
  ::google::protobuf::int32 pvp_loot_num_max_;
  ::google::protobuf::int32 pvp_loot_timeout_;
  float pvp_loot_ratio_;
  ::google::protobuf::int32 player_ship_refresh_timeout_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMapList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMapList) */ {
 public:
  ConfigMapList();
  virtual ~ConfigMapList();

  ConfigMapList(const ConfigMapList& from);

  inline ConfigMapList& operator=(const ConfigMapList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMapList(ConfigMapList&& from) noexcept
    : ConfigMapList() {
    *this = ::std::move(from);
  }

  inline ConfigMapList& operator=(ConfigMapList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMapList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMapList* internal_default_instance() {
    return reinterpret_cast<const ConfigMapList*>(
               &_ConfigMapList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ConfigMapList* other);
  void Swap(ConfigMapList* other);
  friend void swap(ConfigMapList& a, ConfigMapList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMapList* New() const final {
    return CreateMaybeMessage<ConfigMapList>(NULL);
  }

  ConfigMapList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMapList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMapList& from);
  void MergeFrom(const ConfigMapList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMapList* other);
  protected:
  explicit ConfigMapList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db.ConfigMap list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::db::ConfigMap* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::ConfigMap >*
      mutable_list();
  const ::db::ConfigMap& list(int index) const;
  ::db::ConfigMap* add_list();
  const ::google::protobuf::RepeatedPtrField< ::db::ConfigMap >&
      list() const;

  // @@protoc_insertion_point(class_scope:db.ConfigMapList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::ConfigMap > list_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMapArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMapArea) */ {
 public:
  ConfigMapArea();
  virtual ~ConfigMapArea();

  ConfigMapArea(const ConfigMapArea& from);

  inline ConfigMapArea& operator=(const ConfigMapArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMapArea(ConfigMapArea&& from) noexcept
    : ConfigMapArea() {
    *this = ::std::move(from);
  }

  inline ConfigMapArea& operator=(ConfigMapArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMapArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMapArea* internal_default_instance() {
    return reinterpret_cast<const ConfigMapArea*>(
               &_ConfigMapArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ConfigMapArea* other);
  void Swap(ConfigMapArea* other);
  friend void swap(ConfigMapArea& a, ConfigMapArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMapArea* New() const final {
    return CreateMaybeMessage<ConfigMapArea>(NULL);
  }

  ConfigMapArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMapArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMapArea& from);
  void MergeFrom(const ConfigMapArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMapArea* other);
  protected:
  explicit ConfigMapArea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes cond = 5;
  bool has_cond() const;
  void clear_cond();
  static const int kCondFieldNumber = 5;
  const ::std::string& cond() const;
  void set_cond(const ::std::string& value);
  #if LANG_CXX11
  void set_cond(::std::string&& value);
  #endif
  void set_cond(const char* value);
  void set_cond(const void* value, size_t size);
  ::std::string* mutable_cond();
  ::std::string* release_cond();
  void set_allocated_cond(::std::string* cond);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cond();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cond(
      ::std::string* cond);

  // required bytes unlock_entries = 8;
  bool has_unlock_entries() const;
  void clear_unlock_entries();
  static const int kUnlockEntriesFieldNumber = 8;
  const ::std::string& unlock_entries() const;
  void set_unlock_entries(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_entries(::std::string&& value);
  #endif
  void set_unlock_entries(const char* value);
  void set_unlock_entries(const void* value, size_t size);
  ::std::string* mutable_unlock_entries();
  ::std::string* release_unlock_entries();
  void set_allocated_unlock_entries(::std::string* unlock_entries);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_entries();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_entries(
      ::std::string* unlock_entries);

  // required bytes front_lock = 9;
  bool has_front_lock() const;
  void clear_front_lock();
  static const int kFrontLockFieldNumber = 9;
  const ::std::string& front_lock() const;
  void set_front_lock(const ::std::string& value);
  #if LANG_CXX11
  void set_front_lock(::std::string&& value);
  #endif
  void set_front_lock(const char* value);
  void set_front_lock(const void* value, size_t size);
  ::std::string* mutable_front_lock();
  ::std::string* release_front_lock();
  void set_allocated_front_lock(::std::string* front_lock);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_front_lock();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_front_lock(
      ::std::string* front_lock);

  // required int32 areaid = 1;
  bool has_areaid() const;
  void clear_areaid();
  static const int kAreaidFieldNumber = 1;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // required int32 tile_blockid = 3;
  bool has_tile_blockid() const;
  void clear_tile_blockid();
  static const int kTileBlockidFieldNumber = 3;
  ::google::protobuf::int32 tile_blockid() const;
  void set_tile_blockid(::google::protobuf::int32 value);

  // required int32 is_lock = 4;
  bool has_is_lock() const;
  void clear_is_lock();
  static const int kIsLockFieldNumber = 4;
  ::google::protobuf::int32 is_lock() const;
  void set_is_lock(::google::protobuf::int32 value);

  // required int32 unlock_type = 6;
  bool has_unlock_type() const;
  void clear_unlock_type();
  static const int kUnlockTypeFieldNumber = 6;
  ::google::protobuf::int32 unlock_type() const;
  void set_unlock_type(::google::protobuf::int32 value);

  // required int32 unlock_cost = 7;
  bool has_unlock_cost() const;
  void clear_unlock_cost();
  static const int kUnlockCostFieldNumber = 7;
  ::google::protobuf::int32 unlock_cost() const;
  void set_unlock_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigMapArea)
 private:
  void set_has_areaid();
  void clear_has_areaid();
  void set_has_name();
  void clear_has_name();
  void set_has_tile_blockid();
  void clear_has_tile_blockid();
  void set_has_is_lock();
  void clear_has_is_lock();
  void set_has_cond();
  void clear_has_cond();
  void set_has_unlock_type();
  void clear_has_unlock_type();
  void set_has_unlock_cost();
  void clear_has_unlock_cost();
  void set_has_unlock_entries();
  void clear_has_unlock_entries();
  void set_has_front_lock();
  void clear_has_front_lock();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cond_;
  ::google::protobuf::internal::ArenaStringPtr unlock_entries_;
  ::google::protobuf::internal::ArenaStringPtr front_lock_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 tile_blockid_;
  ::google::protobuf::int32 is_lock_;
  ::google::protobuf::int32 unlock_type_;
  ::google::protobuf::int32 unlock_cost_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMapAreaList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMapAreaList) */ {
 public:
  ConfigMapAreaList();
  virtual ~ConfigMapAreaList();

  ConfigMapAreaList(const ConfigMapAreaList& from);

  inline ConfigMapAreaList& operator=(const ConfigMapAreaList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMapAreaList(ConfigMapAreaList&& from) noexcept
    : ConfigMapAreaList() {
    *this = ::std::move(from);
  }

  inline ConfigMapAreaList& operator=(ConfigMapAreaList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMapAreaList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMapAreaList* internal_default_instance() {
    return reinterpret_cast<const ConfigMapAreaList*>(
               &_ConfigMapAreaList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ConfigMapAreaList* other);
  void Swap(ConfigMapAreaList* other);
  friend void swap(ConfigMapAreaList& a, ConfigMapAreaList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMapAreaList* New() const final {
    return CreateMaybeMessage<ConfigMapAreaList>(NULL);
  }

  ConfigMapAreaList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMapAreaList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMapAreaList& from);
  void MergeFrom(const ConfigMapAreaList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMapAreaList* other);
  protected:
  explicit ConfigMapAreaList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db.ConfigMapArea list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::db::ConfigMapArea* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::ConfigMapArea >*
      mutable_list();
  const ::db::ConfigMapArea& list(int index) const;
  ::db::ConfigMapArea* add_list();
  const ::google::protobuf::RepeatedPtrField< ::db::ConfigMapArea >&
      list() const;

  // @@protoc_insertion_point(class_scope:db.ConfigMapAreaList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::ConfigMapArea > list_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMapEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMapEntry) */ {
 public:
  ConfigMapEntry();
  virtual ~ConfigMapEntry();

  ConfigMapEntry(const ConfigMapEntry& from);

  inline ConfigMapEntry& operator=(const ConfigMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMapEntry(ConfigMapEntry&& from) noexcept
    : ConfigMapEntry() {
    *this = ::std::move(from);
  }

  inline ConfigMapEntry& operator=(ConfigMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMapEntry* internal_default_instance() {
    return reinterpret_cast<const ConfigMapEntry*>(
               &_ConfigMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ConfigMapEntry* other);
  void Swap(ConfigMapEntry* other);
  friend void swap(ConfigMapEntry& a, ConfigMapEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMapEntry* New() const final {
    return CreateMaybeMessage<ConfigMapEntry>(NULL);
  }

  ConfigMapEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMapEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMapEntry& from);
  void MergeFrom(const ConfigMapEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMapEntry* other);
  protected:
  explicit ConfigMapEntry(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes desc = 3;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_desc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      ::std::string* desc);

  // required bytes easter_egg = 9;
  bool has_easter_egg() const;
  void clear_easter_egg();
  static const int kEasterEggFieldNumber = 9;
  const ::std::string& easter_egg() const;
  void set_easter_egg(const ::std::string& value);
  #if LANG_CXX11
  void set_easter_egg(::std::string&& value);
  #endif
  void set_easter_egg(const char* value);
  void set_easter_egg(const void* value, size_t size);
  ::std::string* mutable_easter_egg();
  ::std::string* release_easter_egg();
  void set_allocated_easter_egg(::std::string* easter_egg);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_easter_egg();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_easter_egg(
      ::std::string* easter_egg);

  // required uint64 entryid = 1;
  bool has_entryid() const;
  void clear_entryid();
  static const int kEntryidFieldNumber = 1;
  ::google::protobuf::uint64 entryid() const;
  void set_entryid(::google::protobuf::uint64 value);

  // required int32 island_type = 4;
  bool has_island_type() const;
  void clear_island_type();
  static const int kIslandTypeFieldNumber = 4;
  ::google::protobuf::int32 island_type() const;
  void set_island_type(::google::protobuf::int32 value);

  // required int32 island_id = 5;
  bool has_island_id() const;
  void clear_island_id();
  static const int kIslandIdFieldNumber = 5;
  ::google::protobuf::int32 island_id() const;
  void set_island_id(::google::protobuf::int32 value);

  // required int32 need_key = 6;
  bool has_need_key() const;
  void clear_need_key();
  static const int kNeedKeyFieldNumber = 6;
  ::google::protobuf::int32 need_key() const;
  void set_need_key(::google::protobuf::int32 value);

  // required int32 pos_x = 7;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 7;
  ::google::protobuf::int32 pos_x() const;
  void set_pos_x(::google::protobuf::int32 value);

  // required int32 pos_y = 8;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 8;
  ::google::protobuf::int32 pos_y() const;
  void set_pos_y(::google::protobuf::int32 value);

  // required int32 first_easter_egg = 10;
  bool has_first_easter_egg() const;
  void clear_first_easter_egg();
  static const int kFirstEasterEggFieldNumber = 10;
  ::google::protobuf::int32 first_easter_egg() const;
  void set_first_easter_egg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigMapEntry)
 private:
  void set_has_entryid();
  void clear_has_entryid();
  void set_has_name();
  void clear_has_name();
  void set_has_desc();
  void clear_has_desc();
  void set_has_island_type();
  void clear_has_island_type();
  void set_has_island_id();
  void clear_has_island_id();
  void set_has_need_key();
  void clear_has_need_key();
  void set_has_pos_x();
  void clear_has_pos_x();
  void set_has_pos_y();
  void clear_has_pos_y();
  void set_has_easter_egg();
  void clear_has_easter_egg();
  void set_has_first_easter_egg();
  void clear_has_first_easter_egg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr easter_egg_;
  ::google::protobuf::uint64 entryid_;
  ::google::protobuf::int32 island_type_;
  ::google::protobuf::int32 island_id_;
  ::google::protobuf::int32 need_key_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  ::google::protobuf::int32 first_easter_egg_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMapEntryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMapEntryList) */ {
 public:
  ConfigMapEntryList();
  virtual ~ConfigMapEntryList();

  ConfigMapEntryList(const ConfigMapEntryList& from);

  inline ConfigMapEntryList& operator=(const ConfigMapEntryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMapEntryList(ConfigMapEntryList&& from) noexcept
    : ConfigMapEntryList() {
    *this = ::std::move(from);
  }

  inline ConfigMapEntryList& operator=(ConfigMapEntryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMapEntryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMapEntryList* internal_default_instance() {
    return reinterpret_cast<const ConfigMapEntryList*>(
               &_ConfigMapEntryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(ConfigMapEntryList* other);
  void Swap(ConfigMapEntryList* other);
  friend void swap(ConfigMapEntryList& a, ConfigMapEntryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMapEntryList* New() const final {
    return CreateMaybeMessage<ConfigMapEntryList>(NULL);
  }

  ConfigMapEntryList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMapEntryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMapEntryList& from);
  void MergeFrom(const ConfigMapEntryList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMapEntryList* other);
  protected:
  explicit ConfigMapEntryList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db.ConfigMapEntry list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::db::ConfigMapEntry* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::ConfigMapEntry >*
      mutable_list();
  const ::db::ConfigMapEntry& list(int index) const;
  ::db::ConfigMapEntry* add_list();
  const ::google::protobuf::RepeatedPtrField< ::db::ConfigMapEntry >&
      list() const;

  // @@protoc_insertion_point(class_scope:db.ConfigMapEntryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::ConfigMapEntry > list_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigPirateShip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigPirateShip) */ {
 public:
  ConfigPirateShip();
  virtual ~ConfigPirateShip();

  ConfigPirateShip(const ConfigPirateShip& from);

  inline ConfigPirateShip& operator=(const ConfigPirateShip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigPirateShip(ConfigPirateShip&& from) noexcept
    : ConfigPirateShip() {
    *this = ::std::move(from);
  }

  inline ConfigPirateShip& operator=(ConfigPirateShip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigPirateShip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPirateShip* internal_default_instance() {
    return reinterpret_cast<const ConfigPirateShip*>(
               &_ConfigPirateShip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(ConfigPirateShip* other);
  void Swap(ConfigPirateShip* other);
  friend void swap(ConfigPirateShip& a, ConfigPirateShip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigPirateShip* New() const final {
    return CreateMaybeMessage<ConfigPirateShip>(NULL);
  }

  ConfigPirateShip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPirateShip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigPirateShip& from);
  void MergeFrom(const ConfigPirateShip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPirateShip* other);
  protected:
  explicit ConfigPirateShip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes refreshtime = 2;
  bool has_refreshtime() const;
  void clear_refreshtime();
  static const int kRefreshtimeFieldNumber = 2;
  const ::std::string& refreshtime() const;
  void set_refreshtime(const ::std::string& value);
  #if LANG_CXX11
  void set_refreshtime(::std::string&& value);
  #endif
  void set_refreshtime(const char* value);
  void set_refreshtime(const void* value, size_t size);
  ::std::string* mutable_refreshtime();
  ::std::string* release_refreshtime();
  void set_allocated_refreshtime(::std::string* refreshtime);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_refreshtime();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_refreshtime(
      ::std::string* refreshtime);

  // required bytes entries = 11;
  bool has_entries() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 11;
  const ::std::string& entries() const;
  void set_entries(const ::std::string& value);
  #if LANG_CXX11
  void set_entries(::std::string&& value);
  #endif
  void set_entries(const char* value);
  void set_entries(const void* value, size_t size);
  ::std::string* mutable_entries();
  ::std::string* release_entries();
  void set_allocated_entries(::std::string* entries);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_entries();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entries(
      ::std::string* entries);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 fight_num = 3;
  bool has_fight_num() const;
  void clear_fight_num();
  static const int kFightNumFieldNumber = 3;
  ::google::protobuf::int32 fight_num() const;
  void set_fight_num(::google::protobuf::int32 value);

  // required int32 vitality_cost = 12;
  bool has_vitality_cost() const;
  void clear_vitality_cost();
  static const int kVitalityCostFieldNumber = 12;
  ::google::protobuf::int32 vitality_cost() const;
  void set_vitality_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigPirateShip)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_refreshtime();
  void clear_has_refreshtime();
  void set_has_fight_num();
  void clear_has_fight_num();
  void set_has_entries();
  void clear_has_entries();
  void set_has_vitality_cost();
  void clear_has_vitality_cost();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr refreshtime_;
  ::google::protobuf::internal::ArenaStringPtr entries_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 fight_num_;
  ::google::protobuf::int32 vitality_cost_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigPirateShipList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigPirateShipList) */ {
 public:
  ConfigPirateShipList();
  virtual ~ConfigPirateShipList();

  ConfigPirateShipList(const ConfigPirateShipList& from);

  inline ConfigPirateShipList& operator=(const ConfigPirateShipList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigPirateShipList(ConfigPirateShipList&& from) noexcept
    : ConfigPirateShipList() {
    *this = ::std::move(from);
  }

  inline ConfigPirateShipList& operator=(ConfigPirateShipList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigPirateShipList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPirateShipList* internal_default_instance() {
    return reinterpret_cast<const ConfigPirateShipList*>(
               &_ConfigPirateShipList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(ConfigPirateShipList* other);
  void Swap(ConfigPirateShipList* other);
  friend void swap(ConfigPirateShipList& a, ConfigPirateShipList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigPirateShipList* New() const final {
    return CreateMaybeMessage<ConfigPirateShipList>(NULL);
  }

  ConfigPirateShipList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPirateShipList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigPirateShipList& from);
  void MergeFrom(const ConfigPirateShipList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPirateShipList* other);
  protected:
  explicit ConfigPirateShipList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db.ConfigPirateShip list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::db::ConfigPirateShip* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::ConfigPirateShip >*
      mutable_list();
  const ::db::ConfigPirateShip& list(int index) const;
  ::db::ConfigPirateShip* add_list();
  const ::google::protobuf::RepeatedPtrField< ::db::ConfigPirateShip >&
      list() const;

  // @@protoc_insertion_point(class_scope:db.ConfigPirateShipList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::ConfigPirateShip > list_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigWildIsland : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigWildIsland) */ {
 public:
  ConfigWildIsland();
  virtual ~ConfigWildIsland();

  ConfigWildIsland(const ConfigWildIsland& from);

  inline ConfigWildIsland& operator=(const ConfigWildIsland& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigWildIsland(ConfigWildIsland&& from) noexcept
    : ConfigWildIsland() {
    *this = ::std::move(from);
  }

  inline ConfigWildIsland& operator=(ConfigWildIsland&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigWildIsland& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigWildIsland* internal_default_instance() {
    return reinterpret_cast<const ConfigWildIsland*>(
               &_ConfigWildIsland_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ConfigWildIsland* other);
  void Swap(ConfigWildIsland* other);
  friend void swap(ConfigWildIsland& a, ConfigWildIsland& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigWildIsland* New() const final {
    return CreateMaybeMessage<ConfigWildIsland>(NULL);
  }

  ConfigWildIsland* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigWildIsland>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigWildIsland& from);
  void MergeFrom(const ConfigWildIsland& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigWildIsland* other);
  protected:
  explicit ConfigWildIsland(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes desc = 3;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_desc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      ::std::string* desc);

  // required bytes workshop = 11;
  bool has_workshop() const;
  void clear_workshop();
  static const int kWorkshopFieldNumber = 11;
  const ::std::string& workshop() const;
  void set_workshop(const ::std::string& value);
  #if LANG_CXX11
  void set_workshop(::std::string&& value);
  #endif
  void set_workshop(const char* value);
  void set_workshop(const void* value, size_t size);
  ::std::string* mutable_workshop();
  ::std::string* release_workshop();
  void set_allocated_workshop(::std::string* workshop);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_workshop();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workshop(
      ::std::string* workshop);

  // required bytes monster = 21;
  bool has_monster() const;
  void clear_monster();
  static const int kMonsterFieldNumber = 21;
  const ::std::string& monster() const;
  void set_monster(const ::std::string& value);
  #if LANG_CXX11
  void set_monster(::std::string&& value);
  #endif
  void set_monster(const char* value);
  void set_monster(const void* value, size_t size);
  ::std::string* mutable_monster();
  ::std::string* release_monster();
  void set_allocated_monster(::std::string* monster);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_monster();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_monster(
      ::std::string* monster);

  // required bytes statue = 22;
  bool has_statue() const;
  void clear_statue();
  static const int kStatueFieldNumber = 22;
  const ::std::string& statue() const;
  void set_statue(const ::std::string& value);
  #if LANG_CXX11
  void set_statue(::std::string&& value);
  #endif
  void set_statue(const char* value);
  void set_statue(const void* value, size_t size);
  ::std::string* mutable_statue();
  ::std::string* release_statue();
  void set_allocated_statue(::std::string* statue);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_statue();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_statue(
      ::std::string* statue);

  // required int32 islandid = 1;
  bool has_islandid() const;
  void clear_islandid();
  static const int kIslandidFieldNumber = 1;
  ::google::protobuf::int32 islandid() const;
  void set_islandid(::google::protobuf::int32 value);

  // required int32 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 gather_type = 6;
  bool has_gather_type() const;
  void clear_gather_type();
  static const int kGatherTypeFieldNumber = 6;
  ::google::protobuf::int32 gather_type() const;
  void set_gather_type(::google::protobuf::int32 value);

  // required int32 workshop_store_num = 12;
  bool has_workshop_store_num() const;
  void clear_workshop_store_num();
  static const int kWorkshopStoreNumFieldNumber = 12;
  ::google::protobuf::int32 workshop_store_num() const;
  void set_workshop_store_num(::google::protobuf::int32 value);

  // required int32 workshop_gather_num = 13;
  bool has_workshop_gather_num() const;
  void clear_workshop_gather_num();
  static const int kWorkshopGatherNumFieldNumber = 13;
  ::google::protobuf::int32 workshop_gather_num() const;
  void set_workshop_gather_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigWildIsland)
 private:
  void set_has_islandid();
  void clear_has_islandid();
  void set_has_name();
  void clear_has_name();
  void set_has_desc();
  void clear_has_desc();
  void set_has_type();
  void clear_has_type();
  void set_has_level();
  void clear_has_level();
  void set_has_gather_type();
  void clear_has_gather_type();
  void set_has_workshop();
  void clear_has_workshop();
  void set_has_workshop_store_num();
  void clear_has_workshop_store_num();
  void set_has_workshop_gather_num();
  void clear_has_workshop_gather_num();
  void set_has_monster();
  void clear_has_monster();
  void set_has_statue();
  void clear_has_statue();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr workshop_;
  ::google::protobuf::internal::ArenaStringPtr monster_;
  ::google::protobuf::internal::ArenaStringPtr statue_;
  ::google::protobuf::int32 islandid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 gather_type_;
  ::google::protobuf::int32 workshop_store_num_;
  ::google::protobuf::int32 workshop_gather_num_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigWildIslandList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigWildIslandList) */ {
 public:
  ConfigWildIslandList();
  virtual ~ConfigWildIslandList();

  ConfigWildIslandList(const ConfigWildIslandList& from);

  inline ConfigWildIslandList& operator=(const ConfigWildIslandList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigWildIslandList(ConfigWildIslandList&& from) noexcept
    : ConfigWildIslandList() {
    *this = ::std::move(from);
  }

  inline ConfigWildIslandList& operator=(ConfigWildIslandList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigWildIslandList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigWildIslandList* internal_default_instance() {
    return reinterpret_cast<const ConfigWildIslandList*>(
               &_ConfigWildIslandList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ConfigWildIslandList* other);
  void Swap(ConfigWildIslandList* other);
  friend void swap(ConfigWildIslandList& a, ConfigWildIslandList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigWildIslandList* New() const final {
    return CreateMaybeMessage<ConfigWildIslandList>(NULL);
  }

  ConfigWildIslandList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigWildIslandList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigWildIslandList& from);
  void MergeFrom(const ConfigWildIslandList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigWildIslandList* other);
  protected:
  explicit ConfigWildIslandList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db.ConfigWildIsland list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::db::ConfigWildIsland* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::ConfigWildIsland >*
      mutable_list();
  const ::db::ConfigWildIsland& list(int index) const;
  ::db::ConfigWildIsland* add_list();
  const ::google::protobuf::RepeatedPtrField< ::db::ConfigWildIsland >&
      list() const;

  // @@protoc_insertion_point(class_scope:db.ConfigWildIslandList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::ConfigWildIsland > list_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMapArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserMapArea) */ {
 public:
  UserMapArea();
  virtual ~UserMapArea();

  UserMapArea(const UserMapArea& from);

  inline UserMapArea& operator=(const UserMapArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMapArea(UserMapArea&& from) noexcept
    : UserMapArea() {
    *this = ::std::move(from);
  }

  inline UserMapArea& operator=(UserMapArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMapArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMapArea* internal_default_instance() {
    return reinterpret_cast<const UserMapArea*>(
               &_UserMapArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(UserMapArea* other);
  void Swap(UserMapArea* other);
  friend void swap(UserMapArea& a, UserMapArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMapArea* New() const final {
    return CreateMaybeMessage<UserMapArea>(NULL);
  }

  UserMapArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMapArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMapArea& from);
  void MergeFrom(const UserMapArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMapArea* other);
  protected:
  explicit UserMapArea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 areaid = 2;
  bool has_areaid() const;
  void clear_areaid();
  static const int kAreaidFieldNumber = 2;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // required int32 area_state = 3;
  bool has_area_state() const;
  void clear_area_state();
  static const int kAreaStateFieldNumber = 3;
  ::google::protobuf::int32 area_state() const;
  void set_area_state(::google::protobuf::int32 value);

  // required sfixed64 optime = 11;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 11;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserMapArea)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_areaid();
  void clear_has_areaid();
  void set_has_area_state();
  void clear_has_area_state();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int32 area_state_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMapEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserMapEntry) */ {
 public:
  UserMapEntry();
  virtual ~UserMapEntry();

  UserMapEntry(const UserMapEntry& from);

  inline UserMapEntry& operator=(const UserMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMapEntry(UserMapEntry&& from) noexcept
    : UserMapEntry() {
    *this = ::std::move(from);
  }

  inline UserMapEntry& operator=(UserMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMapEntry* internal_default_instance() {
    return reinterpret_cast<const UserMapEntry*>(
               &_UserMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(UserMapEntry* other);
  void Swap(UserMapEntry* other);
  friend void swap(UserMapEntry& a, UserMapEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMapEntry* New() const final {
    return CreateMaybeMessage<UserMapEntry>(NULL);
  }

  UserMapEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMapEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMapEntry& from);
  void MergeFrom(const UserMapEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMapEntry* other);
  protected:
  explicit UserMapEntry(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // optional bytes data = 43;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 43;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required uint64 entryid = 2;
  bool has_entryid() const;
  void clear_entryid();
  static const int kEntryidFieldNumber = 2;
  ::google::protobuf::uint64 entryid() const;
  void set_entryid(::google::protobuf::uint64 value);

  // required int32 discover_flag = 3;
  bool has_discover_flag() const;
  void clear_discover_flag();
  static const int kDiscoverFlagFieldNumber = 3;
  ::google::protobuf::int32 discover_flag() const;
  void set_discover_flag(::google::protobuf::int32 value);

  // required int32 block_flag = 4;
  bool has_block_flag() const;
  void clear_block_flag();
  static const int kBlockFlagFieldNumber = 4;
  ::google::protobuf::int32 block_flag() const;
  void set_block_flag(::google::protobuf::int32 value);

  // required uint64 groupid = 5;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 5;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // required int32 stage_hint = 11;
  bool has_stage_hint() const;
  void clear_stage_hint();
  static const int kStageHintFieldNumber = 11;
  ::google::protobuf::int32 stage_hint() const;
  void set_stage_hint(::google::protobuf::int32 value);

  // required int32 stage_hint2 = 12;
  bool has_stage_hint2() const;
  void clear_stage_hint2();
  static const int kStageHint2FieldNumber = 12;
  ::google::protobuf::int32 stage_hint2() const;
  void set_stage_hint2(::google::protobuf::int32 value);

  // required uint64 stage_monsterid = 13;
  bool has_stage_monsterid() const;
  void clear_stage_monsterid();
  static const int kStageMonsteridFieldNumber = 13;
  ::google::protobuf::uint64 stage_monsterid() const;
  void set_stage_monsterid(::google::protobuf::uint64 value);

  // required sfixed64 stage_refreshtime = 14;
  bool has_stage_refreshtime() const;
  void clear_stage_refreshtime();
  static const int kStageRefreshtimeFieldNumber = 14;
  ::google::protobuf::int64 stage_refreshtime() const;
  void set_stage_refreshtime(::google::protobuf::int64 value);

  // required int32 ownership_flag = 21;
  bool has_ownership_flag() const;
  void clear_ownership_flag();
  static const int kOwnershipFlagFieldNumber = 21;
  ::google::protobuf::int32 ownership_flag() const;
  void set_ownership_flag(::google::protobuf::int32 value);

  // required float ownership_storage = 22;
  bool has_ownership_storage() const;
  void clear_ownership_storage();
  static const int kOwnershipStorageFieldNumber = 22;
  float ownership_storage() const;
  void set_ownership_storage(float value);

  // optional int32 type = 40;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 40;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required float ownership_gather_per_min = 23;
  bool has_ownership_gather_per_min() const;
  void clear_ownership_gather_per_min();
  static const int kOwnershipGatherPerMinFieldNumber = 23;
  float ownership_gather_per_min() const;
  void set_ownership_gather_per_min(float value);

  // required float ownership_gather_add_ratio = 24;
  bool has_ownership_gather_add_ratio() const;
  void clear_ownership_gather_add_ratio();
  static const int kOwnershipGatherAddRatioFieldNumber = 24;
  float ownership_gather_add_ratio() const;
  void set_ownership_gather_add_ratio(float value);

  // required sfixed64 ownership_gather_time = 25;
  bool has_ownership_gather_time() const;
  void clear_ownership_gather_time();
  static const int kOwnershipGatherTimeFieldNumber = 25;
  ::google::protobuf::int64 ownership_gather_time() const;
  void set_ownership_gather_time(::google::protobuf::int64 value);

  // required sfixed64 ownership_deadline = 26;
  bool has_ownership_deadline() const;
  void clear_ownership_deadline();
  static const int kOwnershipDeadlineFieldNumber = 26;
  ::google::protobuf::int64 ownership_deadline() const;
  void set_ownership_deadline(::google::protobuf::int64 value);

  // required sfixed64 ownership_farm_skill_exp_time = 27;
  bool has_ownership_farm_skill_exp_time() const;
  void clear_ownership_farm_skill_exp_time();
  static const int kOwnershipFarmSkillExpTimeFieldNumber = 27;
  ::google::protobuf::int64 ownership_farm_skill_exp_time() const;
  void set_ownership_farm_skill_exp_time(::google::protobuf::int64 value);

  // required sfixed64 optime = 31;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 31;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // optional int64 ownerid = 41;
  bool has_ownerid() const;
  void clear_ownerid();
  static const int kOwneridFieldNumber = 41;
  ::google::protobuf::int64 ownerid() const;
  void set_ownerid(::google::protobuf::int64 value);

  // optional sfixed64 refresh_time = 42;
  bool has_refresh_time() const;
  void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 42;
  ::google::protobuf::int64 refresh_time() const;
  void set_refresh_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserMapEntry)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_entryid();
  void clear_has_entryid();
  void set_has_discover_flag();
  void clear_has_discover_flag();
  void set_has_block_flag();
  void clear_has_block_flag();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_stage_hint();
  void clear_has_stage_hint();
  void set_has_stage_hint2();
  void clear_has_stage_hint2();
  void set_has_stage_monsterid();
  void clear_has_stage_monsterid();
  void set_has_stage_refreshtime();
  void clear_has_stage_refreshtime();
  void set_has_ownership_flag();
  void clear_has_ownership_flag();
  void set_has_ownership_storage();
  void clear_has_ownership_storage();
  void set_has_ownership_gather_per_min();
  void clear_has_ownership_gather_per_min();
  void set_has_ownership_gather_add_ratio();
  void clear_has_ownership_gather_add_ratio();
  void set_has_ownership_gather_time();
  void clear_has_ownership_gather_time();
  void set_has_ownership_deadline();
  void clear_has_ownership_deadline();
  void set_has_ownership_farm_skill_exp_time();
  void clear_has_ownership_farm_skill_exp_time();
  void set_has_optime();
  void clear_has_optime();
  void set_has_type();
  void clear_has_type();
  void set_has_ownerid();
  void clear_has_ownerid();
  void set_has_refresh_time();
  void clear_has_refresh_time();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 entryid_;
  ::google::protobuf::int32 discover_flag_;
  ::google::protobuf::int32 block_flag_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 stage_hint_;
  ::google::protobuf::int32 stage_hint2_;
  ::google::protobuf::uint64 stage_monsterid_;
  ::google::protobuf::int64 stage_refreshtime_;
  ::google::protobuf::int32 ownership_flag_;
  float ownership_storage_;
  ::google::protobuf::int32 type_;
  float ownership_gather_per_min_;
  float ownership_gather_add_ratio_;
  ::google::protobuf::int64 ownership_gather_time_;
  ::google::protobuf::int64 ownership_deadline_;
  ::google::protobuf::int64 ownership_farm_skill_exp_time_;
  ::google::protobuf::int64 optime_;
  ::google::protobuf::int64 ownerid_;
  ::google::protobuf::int64 refresh_time_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserFarmSkillExpGen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserFarmSkillExpGen) */ {
 public:
  UserFarmSkillExpGen();
  virtual ~UserFarmSkillExpGen();

  UserFarmSkillExpGen(const UserFarmSkillExpGen& from);

  inline UserFarmSkillExpGen& operator=(const UserFarmSkillExpGen& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserFarmSkillExpGen(UserFarmSkillExpGen&& from) noexcept
    : UserFarmSkillExpGen() {
    *this = ::std::move(from);
  }

  inline UserFarmSkillExpGen& operator=(UserFarmSkillExpGen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFarmSkillExpGen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFarmSkillExpGen* internal_default_instance() {
    return reinterpret_cast<const UserFarmSkillExpGen*>(
               &_UserFarmSkillExpGen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(UserFarmSkillExpGen* other);
  void Swap(UserFarmSkillExpGen* other);
  friend void swap(UserFarmSkillExpGen& a, UserFarmSkillExpGen& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserFarmSkillExpGen* New() const final {
    return CreateMaybeMessage<UserFarmSkillExpGen>(NULL);
  }

  UserFarmSkillExpGen* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserFarmSkillExpGen>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserFarmSkillExpGen& from);
  void MergeFrom(const UserFarmSkillExpGen& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFarmSkillExpGen* other);
  protected:
  explicit UserFarmSkillExpGen(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required uint64 entryid = 3;
  bool has_entryid() const;
  void clear_entryid();
  static const int kEntryidFieldNumber = 3;
  ::google::protobuf::uint64 entryid() const;
  void set_entryid(::google::protobuf::uint64 value);

  // required int32 cardid = 2;
  bool has_cardid() const;
  void clear_cardid();
  static const int kCardidFieldNumber = 2;
  ::google::protobuf::int32 cardid() const;
  void set_cardid(::google::protobuf::int32 value);

  // required float exp = 4;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 4;
  float exp() const;
  void set_exp(float value);

  // @@protoc_insertion_point(class_scope:db.UserFarmSkillExpGen)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_cardid();
  void clear_has_cardid();
  void set_has_entryid();
  void clear_has_entryid();
  void set_has_exp();
  void clear_has_exp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::uint64 entryid_;
  ::google::protobuf::int32 cardid_;
  float exp_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserStatsMapEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserStatsMapEntry) */ {
 public:
  UserStatsMapEntry();
  virtual ~UserStatsMapEntry();

  UserStatsMapEntry(const UserStatsMapEntry& from);

  inline UserStatsMapEntry& operator=(const UserStatsMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserStatsMapEntry(UserStatsMapEntry&& from) noexcept
    : UserStatsMapEntry() {
    *this = ::std::move(from);
  }

  inline UserStatsMapEntry& operator=(UserStatsMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStatsMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStatsMapEntry* internal_default_instance() {
    return reinterpret_cast<const UserStatsMapEntry*>(
               &_UserStatsMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(UserStatsMapEntry* other);
  void Swap(UserStatsMapEntry* other);
  friend void swap(UserStatsMapEntry& a, UserStatsMapEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserStatsMapEntry* New() const final {
    return CreateMaybeMessage<UserStatsMapEntry>(NULL);
  }

  UserStatsMapEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserStatsMapEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserStatsMapEntry& from);
  void MergeFrom(const UserStatsMapEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStatsMapEntry* other);
  protected:
  explicit UserStatsMapEntry(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required sfixed64 wild_island_gather_time = 11;
  bool has_wild_island_gather_time() const;
  void clear_wild_island_gather_time();
  static const int kWildIslandGatherTimeFieldNumber = 11;
  ::google::protobuf::int64 wild_island_gather_time() const;
  void set_wild_island_gather_time(::google::protobuf::int64 value);

  // required sfixed64 wild_island_harvest_time1 = 12;
  bool has_wild_island_harvest_time1() const;
  void clear_wild_island_harvest_time1();
  static const int kWildIslandHarvestTime1FieldNumber = 12;
  ::google::protobuf::int64 wild_island_harvest_time1() const;
  void set_wild_island_harvest_time1(::google::protobuf::int64 value);

  // required sfixed64 wild_island_harvest_time2 = 13;
  bool has_wild_island_harvest_time2() const;
  void clear_wild_island_harvest_time2();
  static const int kWildIslandHarvestTime2FieldNumber = 13;
  ::google::protobuf::int64 wild_island_harvest_time2() const;
  void set_wild_island_harvest_time2(::google::protobuf::int64 value);

  // required sfixed64 wild_island_harvest_time3 = 14;
  bool has_wild_island_harvest_time3() const;
  void clear_wild_island_harvest_time3();
  static const int kWildIslandHarvestTime3FieldNumber = 14;
  ::google::protobuf::int64 wild_island_harvest_time3() const;
  void set_wild_island_harvest_time3(::google::protobuf::int64 value);

  // required sfixed64 wild_island_harvest_time4 = 15;
  bool has_wild_island_harvest_time4() const;
  void clear_wild_island_harvest_time4();
  static const int kWildIslandHarvestTime4FieldNumber = 15;
  ::google::protobuf::int64 wild_island_harvest_time4() const;
  void set_wild_island_harvest_time4(::google::protobuf::int64 value);

  // required sfixed64 group_island_refreshtime = 21;
  bool has_group_island_refreshtime() const;
  void clear_group_island_refreshtime();
  static const int kGroupIslandRefreshtimeFieldNumber = 21;
  ::google::protobuf::int64 group_island_refreshtime() const;
  void set_group_island_refreshtime(::google::protobuf::int64 value);

  // required uint64 player_ship_entryid = 31;
  bool has_player_ship_entryid() const;
  void clear_player_ship_entryid();
  static const int kPlayerShipEntryidFieldNumber = 31;
  ::google::protobuf::uint64 player_ship_entryid() const;
  void set_player_ship_entryid(::google::protobuf::uint64 value);

  // required sfixed64 player_ship_refresh_time = 32;
  bool has_player_ship_refresh_time() const;
  void clear_player_ship_refresh_time();
  static const int kPlayerShipRefreshTimeFieldNumber = 32;
  ::google::protobuf::int64 player_ship_refresh_time() const;
  void set_player_ship_refresh_time(::google::protobuf::int64 value);

  // required sfixed64 player_ship_navigate_time = 33;
  bool has_player_ship_navigate_time() const;
  void clear_player_ship_navigate_time();
  static const int kPlayerShipNavigateTimeFieldNumber = 33;
  ::google::protobuf::int64 player_ship_navigate_time() const;
  void set_player_ship_navigate_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserStatsMapEntry)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_wild_island_gather_time();
  void clear_has_wild_island_gather_time();
  void set_has_wild_island_harvest_time1();
  void clear_has_wild_island_harvest_time1();
  void set_has_wild_island_harvest_time2();
  void clear_has_wild_island_harvest_time2();
  void set_has_wild_island_harvest_time3();
  void clear_has_wild_island_harvest_time3();
  void set_has_wild_island_harvest_time4();
  void clear_has_wild_island_harvest_time4();
  void set_has_group_island_refreshtime();
  void clear_has_group_island_refreshtime();
  void set_has_player_ship_entryid();
  void clear_has_player_ship_entryid();
  void set_has_player_ship_refresh_time();
  void clear_has_player_ship_refresh_time();
  void set_has_player_ship_navigate_time();
  void clear_has_player_ship_navigate_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 wild_island_gather_time_;
  ::google::protobuf::int64 wild_island_harvest_time1_;
  ::google::protobuf::int64 wild_island_harvest_time2_;
  ::google::protobuf::int64 wild_island_harvest_time3_;
  ::google::protobuf::int64 wild_island_harvest_time4_;
  ::google::protobuf::int64 group_island_refreshtime_;
  ::google::protobuf::uint64 player_ship_entryid_;
  ::google::protobuf::int64 player_ship_refresh_time_;
  ::google::protobuf::int64 player_ship_navigate_time_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserPirateShip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserPirateShip) */ {
 public:
  UserPirateShip();
  virtual ~UserPirateShip();

  UserPirateShip(const UserPirateShip& from);

  inline UserPirateShip& operator=(const UserPirateShip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserPirateShip(UserPirateShip&& from) noexcept
    : UserPirateShip() {
    *this = ::std::move(from);
  }

  inline UserPirateShip& operator=(UserPirateShip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPirateShip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPirateShip* internal_default_instance() {
    return reinterpret_cast<const UserPirateShip*>(
               &_UserPirateShip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(UserPirateShip* other);
  void Swap(UserPirateShip* other);
  friend void swap(UserPirateShip& a, UserPirateShip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPirateShip* New() const final {
    return CreateMaybeMessage<UserPirateShip>(NULL);
  }

  UserPirateShip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserPirateShip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserPirateShip& from);
  void MergeFrom(const UserPirateShip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPirateShip* other);
  protected:
  explicit UserPirateShip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 fight_num = 13;
  bool has_fight_num() const;
  void clear_fight_num();
  static const int kFightNumFieldNumber = 13;
  ::google::protobuf::int32 fight_num() const;
  void set_fight_num(::google::protobuf::int32 value);

  // required uint64 entryid = 11;
  bool has_entryid() const;
  void clear_entryid();
  static const int kEntryidFieldNumber = 11;
  ::google::protobuf::uint64 entryid() const;
  void set_entryid(::google::protobuf::uint64 value);

  // required sfixed64 refreshtime = 12;
  bool has_refreshtime() const;
  void clear_refreshtime();
  static const int kRefreshtimeFieldNumber = 12;
  ::google::protobuf::int64 refreshtime() const;
  void set_refreshtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserPirateShip)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_type();
  void clear_has_type();
  void set_has_entryid();
  void clear_has_entryid();
  void set_has_refreshtime();
  void clear_has_refreshtime();
  void set_has_fight_num();
  void clear_has_fight_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 fight_num_;
  ::google::protobuf::uint64 entryid_;
  ::google::protobuf::int64 refreshtime_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WildIslandDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.WildIslandDetail) */ {
 public:
  WildIslandDetail();
  virtual ~WildIslandDetail();

  WildIslandDetail(const WildIslandDetail& from);

  inline WildIslandDetail& operator=(const WildIslandDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WildIslandDetail(WildIslandDetail&& from) noexcept
    : WildIslandDetail() {
    *this = ::std::move(from);
  }

  inline WildIslandDetail& operator=(WildIslandDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const WildIslandDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WildIslandDetail* internal_default_instance() {
    return reinterpret_cast<const WildIslandDetail*>(
               &_WildIslandDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(WildIslandDetail* other);
  void Swap(WildIslandDetail* other);
  friend void swap(WildIslandDetail& a, WildIslandDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WildIslandDetail* New() const final {
    return CreateMaybeMessage<WildIslandDetail>(NULL);
  }

  WildIslandDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WildIslandDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WildIslandDetail& from);
  void MergeFrom(const WildIslandDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WildIslandDetail* other);
  protected:
  explicit WildIslandDetail(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 entryid = 1;
  bool has_entryid() const;
  void clear_entryid();
  static const int kEntryidFieldNumber = 1;
  ::google::protobuf::uint64 entryid() const;
  void set_entryid(::google::protobuf::uint64 value);

  // required int32 island_state = 2;
  bool has_island_state() const;
  void clear_island_state();
  static const int kIslandStateFieldNumber = 2;
  ::google::protobuf::int32 island_state() const;
  void set_island_state(::google::protobuf::int32 value);

  // required int32 occupier_ticketid = 3;
  bool has_occupier_ticketid() const;
  void clear_occupier_ticketid();
  static const int kOccupierTicketidFieldNumber = 3;
  ::google::protobuf::int32 occupier_ticketid() const;
  void set_occupier_ticketid(::google::protobuf::int32 value);

  // required sfixed64 occupy_time = 4;
  bool has_occupy_time() const;
  void clear_occupy_time();
  static const int kOccupyTimeFieldNumber = 4;
  ::google::protobuf::int64 occupy_time() const;
  void set_occupy_time(::google::protobuf::int64 value);

  // required sfixed64 refreshtime = 5;
  bool has_refreshtime() const;
  void clear_refreshtime();
  static const int kRefreshtimeFieldNumber = 5;
  ::google::protobuf::int64 refreshtime() const;
  void set_refreshtime(::google::protobuf::int64 value);

  // required int32 workshop_grade = 11;
  bool has_workshop_grade() const;
  void clear_workshop_grade();
  static const int kWorkshopGradeFieldNumber = 11;
  ::google::protobuf::int32 workshop_grade() const;
  void set_workshop_grade(::google::protobuf::int32 value);

  // required int32 workshop_state = 12;
  bool has_workshop_state() const;
  void clear_workshop_state();
  static const int kWorkshopStateFieldNumber = 12;
  ::google::protobuf::int32 workshop_state() const;
  void set_workshop_state(::google::protobuf::int32 value);

  // required float workshop_base_ratio = 13;
  bool has_workshop_base_ratio() const;
  void clear_workshop_base_ratio();
  static const int kWorkshopBaseRatioFieldNumber = 13;
  float workshop_base_ratio() const;
  void set_workshop_base_ratio(float value);

  // required float workshop_storage = 14;
  bool has_workshop_storage() const;
  void clear_workshop_storage();
  static const int kWorkshopStorageFieldNumber = 14;
  float workshop_storage() const;
  void set_workshop_storage(float value);

  // required float workshop_gather_per_min = 15;
  bool has_workshop_gather_per_min() const;
  void clear_workshop_gather_per_min();
  static const int kWorkshopGatherPerMinFieldNumber = 15;
  float workshop_gather_per_min() const;
  void set_workshop_gather_per_min(float value);

  // required float workshop_gather_add_ratio = 16;
  bool has_workshop_gather_add_ratio() const;
  void clear_workshop_gather_add_ratio();
  static const int kWorkshopGatherAddRatioFieldNumber = 16;
  float workshop_gather_add_ratio() const;
  void set_workshop_gather_add_ratio(float value);

  // required sfixed64 workshop_gather_time = 17;
  bool has_workshop_gather_time() const;
  void clear_workshop_gather_time();
  static const int kWorkshopGatherTimeFieldNumber = 17;
  ::google::protobuf::int64 workshop_gather_time() const;
  void set_workshop_gather_time(::google::protobuf::int64 value);

  // required sfixed64 optime = 21;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 21;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.WildIslandDetail)
 private:
  void set_has_entryid();
  void clear_has_entryid();
  void set_has_island_state();
  void clear_has_island_state();
  void set_has_occupier_ticketid();
  void clear_has_occupier_ticketid();
  void set_has_occupy_time();
  void clear_has_occupy_time();
  void set_has_refreshtime();
  void clear_has_refreshtime();
  void set_has_workshop_grade();
  void clear_has_workshop_grade();
  void set_has_workshop_state();
  void clear_has_workshop_state();
  void set_has_workshop_base_ratio();
  void clear_has_workshop_base_ratio();
  void set_has_workshop_storage();
  void clear_has_workshop_storage();
  void set_has_workshop_gather_per_min();
  void clear_has_workshop_gather_per_min();
  void set_has_workshop_gather_add_ratio();
  void clear_has_workshop_gather_add_ratio();
  void set_has_workshop_gather_time();
  void clear_has_workshop_gather_time();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 entryid_;
  ::google::protobuf::int32 island_state_;
  ::google::protobuf::int32 occupier_ticketid_;
  ::google::protobuf::int64 occupy_time_;
  ::google::protobuf::int64 refreshtime_;
  ::google::protobuf::int32 workshop_grade_;
  ::google::protobuf::int32 workshop_state_;
  float workshop_base_ratio_;
  float workshop_storage_;
  float workshop_gather_per_min_;
  float workshop_gather_add_ratio_;
  ::google::protobuf::int64 workshop_gather_time_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameGroupWildIsland : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GameGroupWildIsland) */ {
 public:
  GameGroupWildIsland();
  virtual ~GameGroupWildIsland();

  GameGroupWildIsland(const GameGroupWildIsland& from);

  inline GameGroupWildIsland& operator=(const GameGroupWildIsland& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameGroupWildIsland(GameGroupWildIsland&& from) noexcept
    : GameGroupWildIsland() {
    *this = ::std::move(from);
  }

  inline GameGroupWildIsland& operator=(GameGroupWildIsland&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameGroupWildIsland& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameGroupWildIsland* internal_default_instance() {
    return reinterpret_cast<const GameGroupWildIsland*>(
               &_GameGroupWildIsland_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(GameGroupWildIsland* other);
  void Swap(GameGroupWildIsland* other);
  friend void swap(GameGroupWildIsland& a, GameGroupWildIsland& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameGroupWildIsland* New() const final {
    return CreateMaybeMessage<GameGroupWildIsland>(NULL);
  }

  GameGroupWildIsland* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameGroupWildIsland>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameGroupWildIsland& from);
  void MergeFrom(const GameGroupWildIsland& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameGroupWildIsland* other);
  protected:
  explicit GameGroupWildIsland(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.WildIslandDetail detail = 2;
  bool has_detail() const;
  void clear_detail();
  static const int kDetailFieldNumber = 2;
  private:
  const ::db::WildIslandDetail& _internal_detail() const;
  public:
  const ::db::WildIslandDetail& detail() const;
  ::db::WildIslandDetail* release_detail();
  ::db::WildIslandDetail* mutable_detail();
  void set_allocated_detail(::db::WildIslandDetail* detail);
  void unsafe_arena_set_allocated_detail(
      ::db::WildIslandDetail* detail);
  ::db::WildIslandDetail* unsafe_arena_release_detail();

  // required uint64 groupid = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:db.GameGroupWildIsland)
 private:
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_detail();
  void clear_has_detail();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::WildIslandDetail* detail_;
  ::google::protobuf::uint64 groupid_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameGroupMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GameGroupMember) */ {
 public:
  GameGroupMember();
  virtual ~GameGroupMember();

  GameGroupMember(const GameGroupMember& from);

  inline GameGroupMember& operator=(const GameGroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameGroupMember(GameGroupMember&& from) noexcept
    : GameGroupMember() {
    *this = ::std::move(from);
  }

  inline GameGroupMember& operator=(GameGroupMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameGroupMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameGroupMember* internal_default_instance() {
    return reinterpret_cast<const GameGroupMember*>(
               &_GameGroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(GameGroupMember* other);
  void Swap(GameGroupMember* other);
  friend void swap(GameGroupMember& a, GameGroupMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameGroupMember* New() const final {
    return CreateMaybeMessage<GameGroupMember>(NULL);
  }

  GameGroupMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameGroupMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameGroupMember& from);
  void MergeFrom(const GameGroupMember& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameGroupMember* other);
  protected:
  explicit GameGroupMember(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // required int32 memberid = 2;
  bool has_memberid() const;
  void clear_memberid();
  static const int kMemberidFieldNumber = 2;
  ::google::protobuf::int32 memberid() const;
  void set_memberid(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 optime = 4;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 4;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.GameGroupMember)
 private:
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_memberid();
  void clear_has_memberid();
  void set_has_state();
  void clear_has_state();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 memberid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserWildIsland : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserWildIsland) */ {
 public:
  UserWildIsland();
  virtual ~UserWildIsland();

  UserWildIsland(const UserWildIsland& from);

  inline UserWildIsland& operator=(const UserWildIsland& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserWildIsland(UserWildIsland&& from) noexcept
    : UserWildIsland() {
    *this = ::std::move(from);
  }

  inline UserWildIsland& operator=(UserWildIsland&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserWildIsland& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserWildIsland* internal_default_instance() {
    return reinterpret_cast<const UserWildIsland*>(
               &_UserWildIsland_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(UserWildIsland* other);
  void Swap(UserWildIsland* other);
  friend void swap(UserWildIsland& a, UserWildIsland& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserWildIsland* New() const final {
    return CreateMaybeMessage<UserWildIsland>(NULL);
  }

  UserWildIsland* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserWildIsland>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserWildIsland& from);
  void MergeFrom(const UserWildIsland& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserWildIsland* other);
  protected:
  explicit UserWildIsland(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required .db.WildIslandDetail detail = 2;
  bool has_detail() const;
  void clear_detail();
  static const int kDetailFieldNumber = 2;
  private:
  const ::db::WildIslandDetail& _internal_detail() const;
  public:
  const ::db::WildIslandDetail& detail() const;
  ::db::WildIslandDetail* release_detail();
  ::db::WildIslandDetail* mutable_detail();
  void set_allocated_detail(::db::WildIslandDetail* detail);
  void unsafe_arena_set_allocated_detail(
      ::db::WildIslandDetail* detail);
  ::db::WildIslandDetail* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:db.UserWildIsland)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_detail();
  void clear_has_detail();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::db::WildIslandDetail* detail_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserStatsWildIslandGather : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserStatsWildIslandGather) */ {
 public:
  UserStatsWildIslandGather();
  virtual ~UserStatsWildIslandGather();

  UserStatsWildIslandGather(const UserStatsWildIslandGather& from);

  inline UserStatsWildIslandGather& operator=(const UserStatsWildIslandGather& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserStatsWildIslandGather(UserStatsWildIslandGather&& from) noexcept
    : UserStatsWildIslandGather() {
    *this = ::std::move(from);
  }

  inline UserStatsWildIslandGather& operator=(UserStatsWildIslandGather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStatsWildIslandGather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStatsWildIslandGather* internal_default_instance() {
    return reinterpret_cast<const UserStatsWildIslandGather*>(
               &_UserStatsWildIslandGather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(UserStatsWildIslandGather* other);
  void Swap(UserStatsWildIslandGather* other);
  friend void swap(UserStatsWildIslandGather& a, UserStatsWildIslandGather& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserStatsWildIslandGather* New() const final {
    return CreateMaybeMessage<UserStatsWildIslandGather>(NULL);
  }

  UserStatsWildIslandGather* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserStatsWildIslandGather>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserStatsWildIslandGather& from);
  void MergeFrom(const UserStatsWildIslandGather& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStatsWildIslandGather* other);
  protected:
  explicit UserStatsWildIslandGather(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required uint64 gatherid = 2;
  bool has_gatherid() const;
  void clear_gatherid();
  static const int kGatheridFieldNumber = 2;
  ::google::protobuf::uint64 gatherid() const;
  void set_gatherid(::google::protobuf::uint64 value);

  // required uint64 gather_resid = 4;
  bool has_gather_resid() const;
  void clear_gather_resid();
  static const int kGatherResidFieldNumber = 4;
  ::google::protobuf::uint64 gather_resid() const;
  void set_gather_resid(::google::protobuf::uint64 value);

  // required int32 gather_type = 3;
  bool has_gather_type() const;
  void clear_gather_type();
  static const int kGatherTypeFieldNumber = 3;
  ::google::protobuf::int32 gather_type() const;
  void set_gather_type(::google::protobuf::int32 value);

  // required float gather_resnum = 5;
  bool has_gather_resnum() const;
  void clear_gather_resnum();
  static const int kGatherResnumFieldNumber = 5;
  float gather_resnum() const;
  void set_gather_resnum(float value);

  // required sfixed64 gather_starttime = 7;
  bool has_gather_starttime() const;
  void clear_gather_starttime();
  static const int kGatherStarttimeFieldNumber = 7;
  ::google::protobuf::int64 gather_starttime() const;
  void set_gather_starttime(::google::protobuf::int64 value);

  // required int32 gather_state = 6;
  bool has_gather_state() const;
  void clear_gather_state();
  static const int kGatherStateFieldNumber = 6;
  ::google::protobuf::int32 gather_state() const;
  void set_gather_state(::google::protobuf::int32 value);

  // required sfixed64 optime = 11;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 11;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserStatsWildIslandGather)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_gatherid();
  void clear_has_gatherid();
  void set_has_gather_type();
  void clear_has_gather_type();
  void set_has_gather_resid();
  void clear_has_gather_resid();
  void set_has_gather_resnum();
  void clear_has_gather_resnum();
  void set_has_gather_state();
  void clear_has_gather_state();
  void set_has_gather_starttime();
  void clear_has_gather_starttime();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::uint64 gatherid_;
  ::google::protobuf::uint64 gather_resid_;
  ::google::protobuf::int32 gather_type_;
  float gather_resnum_;
  ::google::protobuf::int64 gather_starttime_;
  ::google::protobuf::int32 gather_state_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_StoredProcMap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigMap

// required int32 level = 1;
inline bool ConfigMap::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigMap::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigMap::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigMap::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigMap::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.level)
  return level_;
}
inline void ConfigMap::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.level)
}

// required int32 group_island_total_num = 2;
inline bool ConfigMap::has_group_island_total_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigMap::set_has_group_island_total_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigMap::clear_has_group_island_total_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigMap::clear_group_island_total_num() {
  group_island_total_num_ = 0;
  clear_has_group_island_total_num();
}
inline ::google::protobuf::int32 ConfigMap::group_island_total_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.group_island_total_num)
  return group_island_total_num_;
}
inline void ConfigMap::set_group_island_total_num(::google::protobuf::int32 value) {
  set_has_group_island_total_num();
  group_island_total_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.group_island_total_num)
}

// required int32 group_island_user_capacity = 3;
inline bool ConfigMap::has_group_island_user_capacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigMap::set_has_group_island_user_capacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigMap::clear_has_group_island_user_capacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigMap::clear_group_island_user_capacity() {
  group_island_user_capacity_ = 0;
  clear_has_group_island_user_capacity();
}
inline ::google::protobuf::int32 ConfigMap::group_island_user_capacity() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.group_island_user_capacity)
  return group_island_user_capacity_;
}
inline void ConfigMap::set_group_island_user_capacity(::google::protobuf::int32 value) {
  set_has_group_island_user_capacity();
  group_island_user_capacity_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.group_island_user_capacity)
}

// required int32 group_island_user_capacity_add = 4;
inline bool ConfigMap::has_group_island_user_capacity_add() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigMap::set_has_group_island_user_capacity_add() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigMap::clear_has_group_island_user_capacity_add() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigMap::clear_group_island_user_capacity_add() {
  group_island_user_capacity_add_ = 0;
  clear_has_group_island_user_capacity_add();
}
inline ::google::protobuf::int32 ConfigMap::group_island_user_capacity_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.group_island_user_capacity_add)
  return group_island_user_capacity_add_;
}
inline void ConfigMap::set_group_island_user_capacity_add(::google::protobuf::int32 value) {
  set_has_group_island_user_capacity_add();
  group_island_user_capacity_add_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.group_island_user_capacity_add)
}

// required int32 group_island_occupy_protect_time = 5;
inline bool ConfigMap::has_group_island_occupy_protect_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigMap::set_has_group_island_occupy_protect_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigMap::clear_has_group_island_occupy_protect_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigMap::clear_group_island_occupy_protect_time() {
  group_island_occupy_protect_time_ = 0;
  clear_has_group_island_occupy_protect_time();
}
inline ::google::protobuf::int32 ConfigMap::group_island_occupy_protect_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.group_island_occupy_protect_time)
  return group_island_occupy_protect_time_;
}
inline void ConfigMap::set_group_island_occupy_protect_time(::google::protobuf::int32 value) {
  set_has_group_island_occupy_protect_time();
  group_island_occupy_protect_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.group_island_occupy_protect_time)
}

// required int32 group_island_occupy_num_max = 6;
inline bool ConfigMap::has_group_island_occupy_num_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigMap::set_has_group_island_occupy_num_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigMap::clear_has_group_island_occupy_num_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigMap::clear_group_island_occupy_num_max() {
  group_island_occupy_num_max_ = 0;
  clear_has_group_island_occupy_num_max();
}
inline ::google::protobuf::int32 ConfigMap::group_island_occupy_num_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.group_island_occupy_num_max)
  return group_island_occupy_num_max_;
}
inline void ConfigMap::set_group_island_occupy_num_max(::google::protobuf::int32 value) {
  set_has_group_island_occupy_num_max();
  group_island_occupy_num_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.group_island_occupy_num_max)
}

// required int32 gather_period = 11;
inline bool ConfigMap::has_gather_period() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigMap::set_has_gather_period() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigMap::clear_has_gather_period() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigMap::clear_gather_period() {
  gather_period_ = 0;
  clear_has_gather_period();
}
inline ::google::protobuf::int32 ConfigMap::gather_period() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.gather_period)
  return gather_period_;
}
inline void ConfigMap::set_gather_period(::google::protobuf::int32 value) {
  set_has_gather_period();
  gather_period_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.gather_period)
}

// required int32 gather_aggregate_period = 12;
inline bool ConfigMap::has_gather_aggregate_period() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigMap::set_has_gather_aggregate_period() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigMap::clear_has_gather_aggregate_period() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigMap::clear_gather_aggregate_period() {
  gather_aggregate_period_ = 0;
  clear_has_gather_aggregate_period();
}
inline ::google::protobuf::int32 ConfigMap::gather_aggregate_period() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.gather_aggregate_period)
  return gather_aggregate_period_;
}
inline void ConfigMap::set_gather_aggregate_period(::google::protobuf::int32 value) {
  set_has_gather_aggregate_period();
  gather_aggregate_period_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.gather_aggregate_period)
}

// required int32 harvest_interval = 13;
inline bool ConfigMap::has_harvest_interval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigMap::set_has_harvest_interval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigMap::clear_has_harvest_interval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigMap::clear_harvest_interval() {
  harvest_interval_ = 0;
  clear_has_harvest_interval();
}
inline ::google::protobuf::int32 ConfigMap::harvest_interval() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.harvest_interval)
  return harvest_interval_;
}
inline void ConfigMap::set_harvest_interval(::google::protobuf::int32 value) {
  set_has_harvest_interval();
  harvest_interval_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.harvest_interval)
}

// required int32 farm_skill_exp_period = 14;
inline bool ConfigMap::has_farm_skill_exp_period() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigMap::set_has_farm_skill_exp_period() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigMap::clear_has_farm_skill_exp_period() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigMap::clear_farm_skill_exp_period() {
  farm_skill_exp_period_ = 0;
  clear_has_farm_skill_exp_period();
}
inline ::google::protobuf::int32 ConfigMap::farm_skill_exp_period() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.farm_skill_exp_period)
  return farm_skill_exp_period_;
}
inline void ConfigMap::set_farm_skill_exp_period(::google::protobuf::int32 value) {
  set_has_farm_skill_exp_period();
  farm_skill_exp_period_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.farm_skill_exp_period)
}

// required int32 pvp_loot_num_max = 21;
inline bool ConfigMap::has_pvp_loot_num_max() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigMap::set_has_pvp_loot_num_max() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigMap::clear_has_pvp_loot_num_max() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigMap::clear_pvp_loot_num_max() {
  pvp_loot_num_max_ = 0;
  clear_has_pvp_loot_num_max();
}
inline ::google::protobuf::int32 ConfigMap::pvp_loot_num_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.pvp_loot_num_max)
  return pvp_loot_num_max_;
}
inline void ConfigMap::set_pvp_loot_num_max(::google::protobuf::int32 value) {
  set_has_pvp_loot_num_max();
  pvp_loot_num_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.pvp_loot_num_max)
}

// required int32 pvp_loot_timeout = 22;
inline bool ConfigMap::has_pvp_loot_timeout() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigMap::set_has_pvp_loot_timeout() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigMap::clear_has_pvp_loot_timeout() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigMap::clear_pvp_loot_timeout() {
  pvp_loot_timeout_ = 0;
  clear_has_pvp_loot_timeout();
}
inline ::google::protobuf::int32 ConfigMap::pvp_loot_timeout() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.pvp_loot_timeout)
  return pvp_loot_timeout_;
}
inline void ConfigMap::set_pvp_loot_timeout(::google::protobuf::int32 value) {
  set_has_pvp_loot_timeout();
  pvp_loot_timeout_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.pvp_loot_timeout)
}

// required float pvp_loot_ratio = 23;
inline bool ConfigMap::has_pvp_loot_ratio() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigMap::set_has_pvp_loot_ratio() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigMap::clear_has_pvp_loot_ratio() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigMap::clear_pvp_loot_ratio() {
  pvp_loot_ratio_ = 0;
  clear_has_pvp_loot_ratio();
}
inline float ConfigMap::pvp_loot_ratio() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.pvp_loot_ratio)
  return pvp_loot_ratio_;
}
inline void ConfigMap::set_pvp_loot_ratio(float value) {
  set_has_pvp_loot_ratio();
  pvp_loot_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.pvp_loot_ratio)
}

// required int32 player_ship_refresh_timeout = 31;
inline bool ConfigMap::has_player_ship_refresh_timeout() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigMap::set_has_player_ship_refresh_timeout() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigMap::clear_has_player_ship_refresh_timeout() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigMap::clear_player_ship_refresh_timeout() {
  player_ship_refresh_timeout_ = 0;
  clear_has_player_ship_refresh_timeout();
}
inline ::google::protobuf::int32 ConfigMap::player_ship_refresh_timeout() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.player_ship_refresh_timeout)
  return player_ship_refresh_timeout_;
}
inline void ConfigMap::set_player_ship_refresh_timeout(::google::protobuf::int32 value) {
  set_has_player_ship_refresh_timeout();
  player_ship_refresh_timeout_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.player_ship_refresh_timeout)
}

// required int32 player_ship_navigate_timeout = 32;
inline bool ConfigMap::has_player_ship_navigate_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigMap::set_has_player_ship_navigate_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigMap::clear_has_player_ship_navigate_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigMap::clear_player_ship_navigate_timeout() {
  player_ship_navigate_timeout_ = 0;
  clear_has_player_ship_navigate_timeout();
}
inline ::google::protobuf::int32 ConfigMap::player_ship_navigate_timeout() const {
  // @@protoc_insertion_point(field_get:db.ConfigMap.player_ship_navigate_timeout)
  return player_ship_navigate_timeout_;
}
inline void ConfigMap::set_player_ship_navigate_timeout(::google::protobuf::int32 value) {
  set_has_player_ship_navigate_timeout();
  player_ship_navigate_timeout_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMap.player_ship_navigate_timeout)
}

// -------------------------------------------------------------------

// ConfigMapList

// repeated .db.ConfigMap list = 1;
inline int ConfigMapList::list_size() const {
  return list_.size();
}
inline void ConfigMapList::clear_list() {
  list_.Clear();
}
inline ::db::ConfigMap* ConfigMapList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.ConfigMapList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::ConfigMap >*
ConfigMapList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:db.ConfigMapList.list)
  return &list_;
}
inline const ::db::ConfigMap& ConfigMapList::list(int index) const {
  // @@protoc_insertion_point(field_get:db.ConfigMapList.list)
  return list_.Get(index);
}
inline ::db::ConfigMap* ConfigMapList::add_list() {
  // @@protoc_insertion_point(field_add:db.ConfigMapList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::ConfigMap >&
ConfigMapList::list() const {
  // @@protoc_insertion_point(field_list:db.ConfigMapList.list)
  return list_;
}

// -------------------------------------------------------------------

// ConfigMapArea

// required int32 areaid = 1;
inline bool ConfigMapArea::has_areaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigMapArea::set_has_areaid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigMapArea::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigMapArea::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 ConfigMapArea::areaid() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.areaid)
  return areaid_;
}
inline void ConfigMapArea::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.areaid)
}

// required bytes name = 2;
inline bool ConfigMapArea::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigMapArea::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigMapArea::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigMapArea::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigMapArea::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.name)
  return name_.Get();
}
inline void ConfigMapArea::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.name)
}
#if LANG_CXX11
inline void ConfigMapArea::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMapArea.name)
}
#endif
inline void ConfigMapArea::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMapArea.name)
}
inline void ConfigMapArea::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMapArea.name)
}
inline ::std::string* ConfigMapArea::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigMapArea.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMapArea::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigMapArea.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMapArea::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMapArea.name)
}
inline ::std::string* ConfigMapArea::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMapArea.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMapArea::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMapArea.name)
}

// required int32 tile_blockid = 3;
inline bool ConfigMapArea::has_tile_blockid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigMapArea::set_has_tile_blockid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigMapArea::clear_has_tile_blockid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigMapArea::clear_tile_blockid() {
  tile_blockid_ = 0;
  clear_has_tile_blockid();
}
inline ::google::protobuf::int32 ConfigMapArea::tile_blockid() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.tile_blockid)
  return tile_blockid_;
}
inline void ConfigMapArea::set_tile_blockid(::google::protobuf::int32 value) {
  set_has_tile_blockid();
  tile_blockid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.tile_blockid)
}

// required int32 is_lock = 4;
inline bool ConfigMapArea::has_is_lock() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigMapArea::set_has_is_lock() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigMapArea::clear_has_is_lock() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigMapArea::clear_is_lock() {
  is_lock_ = 0;
  clear_has_is_lock();
}
inline ::google::protobuf::int32 ConfigMapArea::is_lock() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.is_lock)
  return is_lock_;
}
inline void ConfigMapArea::set_is_lock(::google::protobuf::int32 value) {
  set_has_is_lock();
  is_lock_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.is_lock)
}

// required bytes cond = 5;
inline bool ConfigMapArea::has_cond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigMapArea::set_has_cond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigMapArea::clear_has_cond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigMapArea::clear_cond() {
  cond_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cond();
}
inline const ::std::string& ConfigMapArea::cond() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.cond)
  return cond_.Get();
}
inline void ConfigMapArea::set_cond(const ::std::string& value) {
  set_has_cond();
  cond_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.cond)
}
#if LANG_CXX11
inline void ConfigMapArea::set_cond(::std::string&& value) {
  set_has_cond();
  cond_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMapArea.cond)
}
#endif
inline void ConfigMapArea::set_cond(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cond();
  cond_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMapArea.cond)
}
inline void ConfigMapArea::set_cond(const void* value,
    size_t size) {
  set_has_cond();
  cond_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMapArea.cond)
}
inline ::std::string* ConfigMapArea::mutable_cond() {
  set_has_cond();
  // @@protoc_insertion_point(field_mutable:db.ConfigMapArea.cond)
  return cond_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMapArea::release_cond() {
  // @@protoc_insertion_point(field_release:db.ConfigMapArea.cond)
  if (!has_cond()) {
    return NULL;
  }
  clear_has_cond();
  return cond_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMapArea::set_allocated_cond(::std::string* cond) {
  if (cond != NULL) {
    set_has_cond();
  } else {
    clear_has_cond();
  }
  cond_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cond,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMapArea.cond)
}
inline ::std::string* ConfigMapArea::unsafe_arena_release_cond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMapArea.cond)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cond();
  return cond_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMapArea::unsafe_arena_set_allocated_cond(
    ::std::string* cond) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cond != NULL) {
    set_has_cond();
  } else {
    clear_has_cond();
  }
  cond_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cond, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMapArea.cond)
}

// required int32 unlock_type = 6;
inline bool ConfigMapArea::has_unlock_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigMapArea::set_has_unlock_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigMapArea::clear_has_unlock_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigMapArea::clear_unlock_type() {
  unlock_type_ = 0;
  clear_has_unlock_type();
}
inline ::google::protobuf::int32 ConfigMapArea::unlock_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.unlock_type)
  return unlock_type_;
}
inline void ConfigMapArea::set_unlock_type(::google::protobuf::int32 value) {
  set_has_unlock_type();
  unlock_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.unlock_type)
}

// required int32 unlock_cost = 7;
inline bool ConfigMapArea::has_unlock_cost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigMapArea::set_has_unlock_cost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigMapArea::clear_has_unlock_cost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigMapArea::clear_unlock_cost() {
  unlock_cost_ = 0;
  clear_has_unlock_cost();
}
inline ::google::protobuf::int32 ConfigMapArea::unlock_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.unlock_cost)
  return unlock_cost_;
}
inline void ConfigMapArea::set_unlock_cost(::google::protobuf::int32 value) {
  set_has_unlock_cost();
  unlock_cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.unlock_cost)
}

// required bytes unlock_entries = 8;
inline bool ConfigMapArea::has_unlock_entries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigMapArea::set_has_unlock_entries() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigMapArea::clear_has_unlock_entries() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigMapArea::clear_unlock_entries() {
  unlock_entries_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_entries();
}
inline const ::std::string& ConfigMapArea::unlock_entries() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.unlock_entries)
  return unlock_entries_.Get();
}
inline void ConfigMapArea::set_unlock_entries(const ::std::string& value) {
  set_has_unlock_entries();
  unlock_entries_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.unlock_entries)
}
#if LANG_CXX11
inline void ConfigMapArea::set_unlock_entries(::std::string&& value) {
  set_has_unlock_entries();
  unlock_entries_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMapArea.unlock_entries)
}
#endif
inline void ConfigMapArea::set_unlock_entries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_entries();
  unlock_entries_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMapArea.unlock_entries)
}
inline void ConfigMapArea::set_unlock_entries(const void* value,
    size_t size) {
  set_has_unlock_entries();
  unlock_entries_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMapArea.unlock_entries)
}
inline ::std::string* ConfigMapArea::mutable_unlock_entries() {
  set_has_unlock_entries();
  // @@protoc_insertion_point(field_mutable:db.ConfigMapArea.unlock_entries)
  return unlock_entries_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMapArea::release_unlock_entries() {
  // @@protoc_insertion_point(field_release:db.ConfigMapArea.unlock_entries)
  if (!has_unlock_entries()) {
    return NULL;
  }
  clear_has_unlock_entries();
  return unlock_entries_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMapArea::set_allocated_unlock_entries(::std::string* unlock_entries) {
  if (unlock_entries != NULL) {
    set_has_unlock_entries();
  } else {
    clear_has_unlock_entries();
  }
  unlock_entries_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_entries,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMapArea.unlock_entries)
}
inline ::std::string* ConfigMapArea::unsafe_arena_release_unlock_entries() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMapArea.unlock_entries)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_entries();
  return unlock_entries_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMapArea::unsafe_arena_set_allocated_unlock_entries(
    ::std::string* unlock_entries) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_entries != NULL) {
    set_has_unlock_entries();
  } else {
    clear_has_unlock_entries();
  }
  unlock_entries_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_entries, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMapArea.unlock_entries)
}

// required bytes front_lock = 9;
inline bool ConfigMapArea::has_front_lock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigMapArea::set_has_front_lock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigMapArea::clear_has_front_lock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigMapArea::clear_front_lock() {
  front_lock_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_front_lock();
}
inline const ::std::string& ConfigMapArea::front_lock() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapArea.front_lock)
  return front_lock_.Get();
}
inline void ConfigMapArea::set_front_lock(const ::std::string& value) {
  set_has_front_lock();
  front_lock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMapArea.front_lock)
}
#if LANG_CXX11
inline void ConfigMapArea::set_front_lock(::std::string&& value) {
  set_has_front_lock();
  front_lock_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMapArea.front_lock)
}
#endif
inline void ConfigMapArea::set_front_lock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_front_lock();
  front_lock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMapArea.front_lock)
}
inline void ConfigMapArea::set_front_lock(const void* value,
    size_t size) {
  set_has_front_lock();
  front_lock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMapArea.front_lock)
}
inline ::std::string* ConfigMapArea::mutable_front_lock() {
  set_has_front_lock();
  // @@protoc_insertion_point(field_mutable:db.ConfigMapArea.front_lock)
  return front_lock_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMapArea::release_front_lock() {
  // @@protoc_insertion_point(field_release:db.ConfigMapArea.front_lock)
  if (!has_front_lock()) {
    return NULL;
  }
  clear_has_front_lock();
  return front_lock_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMapArea::set_allocated_front_lock(::std::string* front_lock) {
  if (front_lock != NULL) {
    set_has_front_lock();
  } else {
    clear_has_front_lock();
  }
  front_lock_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), front_lock,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMapArea.front_lock)
}
inline ::std::string* ConfigMapArea::unsafe_arena_release_front_lock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMapArea.front_lock)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_front_lock();
  return front_lock_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMapArea::unsafe_arena_set_allocated_front_lock(
    ::std::string* front_lock) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (front_lock != NULL) {
    set_has_front_lock();
  } else {
    clear_has_front_lock();
  }
  front_lock_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      front_lock, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMapArea.front_lock)
}

// -------------------------------------------------------------------

// ConfigMapAreaList

// repeated .db.ConfigMapArea list = 1;
inline int ConfigMapAreaList::list_size() const {
  return list_.size();
}
inline void ConfigMapAreaList::clear_list() {
  list_.Clear();
}
inline ::db::ConfigMapArea* ConfigMapAreaList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.ConfigMapAreaList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::ConfigMapArea >*
ConfigMapAreaList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:db.ConfigMapAreaList.list)
  return &list_;
}
inline const ::db::ConfigMapArea& ConfigMapAreaList::list(int index) const {
  // @@protoc_insertion_point(field_get:db.ConfigMapAreaList.list)
  return list_.Get(index);
}
inline ::db::ConfigMapArea* ConfigMapAreaList::add_list() {
  // @@protoc_insertion_point(field_add:db.ConfigMapAreaList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::ConfigMapArea >&
ConfigMapAreaList::list() const {
  // @@protoc_insertion_point(field_list:db.ConfigMapAreaList.list)
  return list_;
}

// -------------------------------------------------------------------

// ConfigMapEntry

// required uint64 entryid = 1;
inline bool ConfigMapEntry::has_entryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigMapEntry::set_has_entryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigMapEntry::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigMapEntry::clear_entryid() {
  entryid_ = GOOGLE_ULONGLONG(0);
  clear_has_entryid();
}
inline ::google::protobuf::uint64 ConfigMapEntry::entryid() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.entryid)
  return entryid_;
}
inline void ConfigMapEntry::set_entryid(::google::protobuf::uint64 value) {
  set_has_entryid();
  entryid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.entryid)
}

// required bytes name = 2;
inline bool ConfigMapEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigMapEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigMapEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigMapEntry::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigMapEntry::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.name)
  return name_.Get();
}
inline void ConfigMapEntry::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.name)
}
#if LANG_CXX11
inline void ConfigMapEntry::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMapEntry.name)
}
#endif
inline void ConfigMapEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMapEntry.name)
}
inline void ConfigMapEntry::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMapEntry.name)
}
inline ::std::string* ConfigMapEntry::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigMapEntry.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMapEntry::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigMapEntry.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMapEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMapEntry.name)
}
inline ::std::string* ConfigMapEntry::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMapEntry.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMapEntry::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMapEntry.name)
}

// required bytes desc = 3;
inline bool ConfigMapEntry::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigMapEntry::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigMapEntry::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigMapEntry::clear_desc() {
  desc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_desc();
}
inline const ::std::string& ConfigMapEntry::desc() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.desc)
  return desc_.Get();
}
inline void ConfigMapEntry::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.desc)
}
#if LANG_CXX11
inline void ConfigMapEntry::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMapEntry.desc)
}
#endif
inline void ConfigMapEntry::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMapEntry.desc)
}
inline void ConfigMapEntry::set_desc(const void* value,
    size_t size) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMapEntry.desc)
}
inline ::std::string* ConfigMapEntry::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:db.ConfigMapEntry.desc)
  return desc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMapEntry::release_desc() {
  // @@protoc_insertion_point(field_release:db.ConfigMapEntry.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMapEntry::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMapEntry.desc)
}
inline ::std::string* ConfigMapEntry::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMapEntry.desc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_desc();
  return desc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMapEntry::unsafe_arena_set_allocated_desc(
    ::std::string* desc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      desc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMapEntry.desc)
}

// required int32 island_type = 4;
inline bool ConfigMapEntry::has_island_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigMapEntry::set_has_island_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigMapEntry::clear_has_island_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigMapEntry::clear_island_type() {
  island_type_ = 0;
  clear_has_island_type();
}
inline ::google::protobuf::int32 ConfigMapEntry::island_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.island_type)
  return island_type_;
}
inline void ConfigMapEntry::set_island_type(::google::protobuf::int32 value) {
  set_has_island_type();
  island_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.island_type)
}

// required int32 island_id = 5;
inline bool ConfigMapEntry::has_island_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigMapEntry::set_has_island_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigMapEntry::clear_has_island_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigMapEntry::clear_island_id() {
  island_id_ = 0;
  clear_has_island_id();
}
inline ::google::protobuf::int32 ConfigMapEntry::island_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.island_id)
  return island_id_;
}
inline void ConfigMapEntry::set_island_id(::google::protobuf::int32 value) {
  set_has_island_id();
  island_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.island_id)
}

// required int32 need_key = 6;
inline bool ConfigMapEntry::has_need_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigMapEntry::set_has_need_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigMapEntry::clear_has_need_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigMapEntry::clear_need_key() {
  need_key_ = 0;
  clear_has_need_key();
}
inline ::google::protobuf::int32 ConfigMapEntry::need_key() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.need_key)
  return need_key_;
}
inline void ConfigMapEntry::set_need_key(::google::protobuf::int32 value) {
  set_has_need_key();
  need_key_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.need_key)
}

// required int32 pos_x = 7;
inline bool ConfigMapEntry::has_pos_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigMapEntry::set_has_pos_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigMapEntry::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigMapEntry::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 ConfigMapEntry::pos_x() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.pos_x)
  return pos_x_;
}
inline void ConfigMapEntry::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.pos_x)
}

// required int32 pos_y = 8;
inline bool ConfigMapEntry::has_pos_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigMapEntry::set_has_pos_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigMapEntry::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigMapEntry::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 ConfigMapEntry::pos_y() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.pos_y)
  return pos_y_;
}
inline void ConfigMapEntry::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.pos_y)
}

// required bytes easter_egg = 9;
inline bool ConfigMapEntry::has_easter_egg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigMapEntry::set_has_easter_egg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigMapEntry::clear_has_easter_egg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigMapEntry::clear_easter_egg() {
  easter_egg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_easter_egg();
}
inline const ::std::string& ConfigMapEntry::easter_egg() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.easter_egg)
  return easter_egg_.Get();
}
inline void ConfigMapEntry::set_easter_egg(const ::std::string& value) {
  set_has_easter_egg();
  easter_egg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.easter_egg)
}
#if LANG_CXX11
inline void ConfigMapEntry::set_easter_egg(::std::string&& value) {
  set_has_easter_egg();
  easter_egg_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMapEntry.easter_egg)
}
#endif
inline void ConfigMapEntry::set_easter_egg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_easter_egg();
  easter_egg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMapEntry.easter_egg)
}
inline void ConfigMapEntry::set_easter_egg(const void* value,
    size_t size) {
  set_has_easter_egg();
  easter_egg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMapEntry.easter_egg)
}
inline ::std::string* ConfigMapEntry::mutable_easter_egg() {
  set_has_easter_egg();
  // @@protoc_insertion_point(field_mutable:db.ConfigMapEntry.easter_egg)
  return easter_egg_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMapEntry::release_easter_egg() {
  // @@protoc_insertion_point(field_release:db.ConfigMapEntry.easter_egg)
  if (!has_easter_egg()) {
    return NULL;
  }
  clear_has_easter_egg();
  return easter_egg_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMapEntry::set_allocated_easter_egg(::std::string* easter_egg) {
  if (easter_egg != NULL) {
    set_has_easter_egg();
  } else {
    clear_has_easter_egg();
  }
  easter_egg_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), easter_egg,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMapEntry.easter_egg)
}
inline ::std::string* ConfigMapEntry::unsafe_arena_release_easter_egg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMapEntry.easter_egg)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_easter_egg();
  return easter_egg_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMapEntry::unsafe_arena_set_allocated_easter_egg(
    ::std::string* easter_egg) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (easter_egg != NULL) {
    set_has_easter_egg();
  } else {
    clear_has_easter_egg();
  }
  easter_egg_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      easter_egg, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMapEntry.easter_egg)
}

// required int32 first_easter_egg = 10;
inline bool ConfigMapEntry::has_first_easter_egg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigMapEntry::set_has_first_easter_egg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigMapEntry::clear_has_first_easter_egg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigMapEntry::clear_first_easter_egg() {
  first_easter_egg_ = 0;
  clear_has_first_easter_egg();
}
inline ::google::protobuf::int32 ConfigMapEntry::first_easter_egg() const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntry.first_easter_egg)
  return first_easter_egg_;
}
inline void ConfigMapEntry::set_first_easter_egg(::google::protobuf::int32 value) {
  set_has_first_easter_egg();
  first_easter_egg_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMapEntry.first_easter_egg)
}

// -------------------------------------------------------------------

// ConfigMapEntryList

// repeated .db.ConfigMapEntry list = 1;
inline int ConfigMapEntryList::list_size() const {
  return list_.size();
}
inline void ConfigMapEntryList::clear_list() {
  list_.Clear();
}
inline ::db::ConfigMapEntry* ConfigMapEntryList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.ConfigMapEntryList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::ConfigMapEntry >*
ConfigMapEntryList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:db.ConfigMapEntryList.list)
  return &list_;
}
inline const ::db::ConfigMapEntry& ConfigMapEntryList::list(int index) const {
  // @@protoc_insertion_point(field_get:db.ConfigMapEntryList.list)
  return list_.Get(index);
}
inline ::db::ConfigMapEntry* ConfigMapEntryList::add_list() {
  // @@protoc_insertion_point(field_add:db.ConfigMapEntryList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::ConfigMapEntry >&
ConfigMapEntryList::list() const {
  // @@protoc_insertion_point(field_list:db.ConfigMapEntryList.list)
  return list_;
}

// -------------------------------------------------------------------

// ConfigPirateShip

// required int32 type = 1;
inline bool ConfigPirateShip::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigPirateShip::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigPirateShip::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigPirateShip::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigPirateShip::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigPirateShip.type)
  return type_;
}
inline void ConfigPirateShip::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPirateShip.type)
}

// required bytes refreshtime = 2;
inline bool ConfigPirateShip::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigPirateShip::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigPirateShip::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigPirateShip::clear_refreshtime() {
  refreshtime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_refreshtime();
}
inline const ::std::string& ConfigPirateShip::refreshtime() const {
  // @@protoc_insertion_point(field_get:db.ConfigPirateShip.refreshtime)
  return refreshtime_.Get();
}
inline void ConfigPirateShip::set_refreshtime(const ::std::string& value) {
  set_has_refreshtime();
  refreshtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPirateShip.refreshtime)
}
#if LANG_CXX11
inline void ConfigPirateShip::set_refreshtime(::std::string&& value) {
  set_has_refreshtime();
  refreshtime_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPirateShip.refreshtime)
}
#endif
inline void ConfigPirateShip::set_refreshtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_refreshtime();
  refreshtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPirateShip.refreshtime)
}
inline void ConfigPirateShip::set_refreshtime(const void* value,
    size_t size) {
  set_has_refreshtime();
  refreshtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPirateShip.refreshtime)
}
inline ::std::string* ConfigPirateShip::mutable_refreshtime() {
  set_has_refreshtime();
  // @@protoc_insertion_point(field_mutable:db.ConfigPirateShip.refreshtime)
  return refreshtime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPirateShip::release_refreshtime() {
  // @@protoc_insertion_point(field_release:db.ConfigPirateShip.refreshtime)
  if (!has_refreshtime()) {
    return NULL;
  }
  clear_has_refreshtime();
  return refreshtime_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPirateShip::set_allocated_refreshtime(::std::string* refreshtime) {
  if (refreshtime != NULL) {
    set_has_refreshtime();
  } else {
    clear_has_refreshtime();
  }
  refreshtime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refreshtime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPirateShip.refreshtime)
}
inline ::std::string* ConfigPirateShip::unsafe_arena_release_refreshtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPirateShip.refreshtime)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_refreshtime();
  return refreshtime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPirateShip::unsafe_arena_set_allocated_refreshtime(
    ::std::string* refreshtime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (refreshtime != NULL) {
    set_has_refreshtime();
  } else {
    clear_has_refreshtime();
  }
  refreshtime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      refreshtime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPirateShip.refreshtime)
}

// required int32 fight_num = 3;
inline bool ConfigPirateShip::has_fight_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigPirateShip::set_has_fight_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigPirateShip::clear_has_fight_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigPirateShip::clear_fight_num() {
  fight_num_ = 0;
  clear_has_fight_num();
}
inline ::google::protobuf::int32 ConfigPirateShip::fight_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigPirateShip.fight_num)
  return fight_num_;
}
inline void ConfigPirateShip::set_fight_num(::google::protobuf::int32 value) {
  set_has_fight_num();
  fight_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPirateShip.fight_num)
}

// required bytes entries = 11;
inline bool ConfigPirateShip::has_entries() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigPirateShip::set_has_entries() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigPirateShip::clear_has_entries() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigPirateShip::clear_entries() {
  entries_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_entries();
}
inline const ::std::string& ConfigPirateShip::entries() const {
  // @@protoc_insertion_point(field_get:db.ConfigPirateShip.entries)
  return entries_.Get();
}
inline void ConfigPirateShip::set_entries(const ::std::string& value) {
  set_has_entries();
  entries_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPirateShip.entries)
}
#if LANG_CXX11
inline void ConfigPirateShip::set_entries(::std::string&& value) {
  set_has_entries();
  entries_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPirateShip.entries)
}
#endif
inline void ConfigPirateShip::set_entries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entries();
  entries_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPirateShip.entries)
}
inline void ConfigPirateShip::set_entries(const void* value,
    size_t size) {
  set_has_entries();
  entries_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPirateShip.entries)
}
inline ::std::string* ConfigPirateShip::mutable_entries() {
  set_has_entries();
  // @@protoc_insertion_point(field_mutable:db.ConfigPirateShip.entries)
  return entries_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPirateShip::release_entries() {
  // @@protoc_insertion_point(field_release:db.ConfigPirateShip.entries)
  if (!has_entries()) {
    return NULL;
  }
  clear_has_entries();
  return entries_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPirateShip::set_allocated_entries(::std::string* entries) {
  if (entries != NULL) {
    set_has_entries();
  } else {
    clear_has_entries();
  }
  entries_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entries,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPirateShip.entries)
}
inline ::std::string* ConfigPirateShip::unsafe_arena_release_entries() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPirateShip.entries)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_entries();
  return entries_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPirateShip::unsafe_arena_set_allocated_entries(
    ::std::string* entries) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (entries != NULL) {
    set_has_entries();
  } else {
    clear_has_entries();
  }
  entries_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      entries, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPirateShip.entries)
}

// required int32 vitality_cost = 12;
inline bool ConfigPirateShip::has_vitality_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigPirateShip::set_has_vitality_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigPirateShip::clear_has_vitality_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigPirateShip::clear_vitality_cost() {
  vitality_cost_ = 0;
  clear_has_vitality_cost();
}
inline ::google::protobuf::int32 ConfigPirateShip::vitality_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigPirateShip.vitality_cost)
  return vitality_cost_;
}
inline void ConfigPirateShip::set_vitality_cost(::google::protobuf::int32 value) {
  set_has_vitality_cost();
  vitality_cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPirateShip.vitality_cost)
}

// -------------------------------------------------------------------

// ConfigPirateShipList

// repeated .db.ConfigPirateShip list = 1;
inline int ConfigPirateShipList::list_size() const {
  return list_.size();
}
inline void ConfigPirateShipList::clear_list() {
  list_.Clear();
}
inline ::db::ConfigPirateShip* ConfigPirateShipList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.ConfigPirateShipList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::ConfigPirateShip >*
ConfigPirateShipList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:db.ConfigPirateShipList.list)
  return &list_;
}
inline const ::db::ConfigPirateShip& ConfigPirateShipList::list(int index) const {
  // @@protoc_insertion_point(field_get:db.ConfigPirateShipList.list)
  return list_.Get(index);
}
inline ::db::ConfigPirateShip* ConfigPirateShipList::add_list() {
  // @@protoc_insertion_point(field_add:db.ConfigPirateShipList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::ConfigPirateShip >&
ConfigPirateShipList::list() const {
  // @@protoc_insertion_point(field_list:db.ConfigPirateShipList.list)
  return list_;
}

// -------------------------------------------------------------------

// ConfigWildIsland

// required int32 islandid = 1;
inline bool ConfigWildIsland::has_islandid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigWildIsland::set_has_islandid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigWildIsland::clear_has_islandid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigWildIsland::clear_islandid() {
  islandid_ = 0;
  clear_has_islandid();
}
inline ::google::protobuf::int32 ConfigWildIsland::islandid() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.islandid)
  return islandid_;
}
inline void ConfigWildIsland::set_islandid(::google::protobuf::int32 value) {
  set_has_islandid();
  islandid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.islandid)
}

// required bytes name = 2;
inline bool ConfigWildIsland::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigWildIsland::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigWildIsland::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigWildIsland::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigWildIsland::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.name)
  return name_.Get();
}
inline void ConfigWildIsland::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.name)
}
#if LANG_CXX11
inline void ConfigWildIsland::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWildIsland.name)
}
#endif
inline void ConfigWildIsland::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWildIsland.name)
}
inline void ConfigWildIsland::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWildIsland.name)
}
inline ::std::string* ConfigWildIsland::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIsland.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWildIsland::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigWildIsland.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWildIsland::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWildIsland.name)
}
inline ::std::string* ConfigWildIsland::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWildIsland.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWildIsland::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWildIsland.name)
}

// required bytes desc = 3;
inline bool ConfigWildIsland::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigWildIsland::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigWildIsland::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigWildIsland::clear_desc() {
  desc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_desc();
}
inline const ::std::string& ConfigWildIsland::desc() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.desc)
  return desc_.Get();
}
inline void ConfigWildIsland::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.desc)
}
#if LANG_CXX11
inline void ConfigWildIsland::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWildIsland.desc)
}
#endif
inline void ConfigWildIsland::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWildIsland.desc)
}
inline void ConfigWildIsland::set_desc(const void* value,
    size_t size) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWildIsland.desc)
}
inline ::std::string* ConfigWildIsland::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIsland.desc)
  return desc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWildIsland::release_desc() {
  // @@protoc_insertion_point(field_release:db.ConfigWildIsland.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWildIsland::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWildIsland.desc)
}
inline ::std::string* ConfigWildIsland::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWildIsland.desc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_desc();
  return desc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWildIsland::unsafe_arena_set_allocated_desc(
    ::std::string* desc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      desc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWildIsland.desc)
}

// required int32 type = 4;
inline bool ConfigWildIsland::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigWildIsland::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigWildIsland::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigWildIsland::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigWildIsland::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.type)
  return type_;
}
inline void ConfigWildIsland::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.type)
}

// required int32 level = 5;
inline bool ConfigWildIsland::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigWildIsland::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigWildIsland::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigWildIsland::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigWildIsland::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.level)
  return level_;
}
inline void ConfigWildIsland::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.level)
}

// required int32 gather_type = 6;
inline bool ConfigWildIsland::has_gather_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigWildIsland::set_has_gather_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigWildIsland::clear_has_gather_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigWildIsland::clear_gather_type() {
  gather_type_ = 0;
  clear_has_gather_type();
}
inline ::google::protobuf::int32 ConfigWildIsland::gather_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.gather_type)
  return gather_type_;
}
inline void ConfigWildIsland::set_gather_type(::google::protobuf::int32 value) {
  set_has_gather_type();
  gather_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.gather_type)
}

// required bytes workshop = 11;
inline bool ConfigWildIsland::has_workshop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigWildIsland::set_has_workshop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigWildIsland::clear_has_workshop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigWildIsland::clear_workshop() {
  workshop_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_workshop();
}
inline const ::std::string& ConfigWildIsland::workshop() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.workshop)
  return workshop_.Get();
}
inline void ConfigWildIsland::set_workshop(const ::std::string& value) {
  set_has_workshop();
  workshop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.workshop)
}
#if LANG_CXX11
inline void ConfigWildIsland::set_workshop(::std::string&& value) {
  set_has_workshop();
  workshop_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWildIsland.workshop)
}
#endif
inline void ConfigWildIsland::set_workshop(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_workshop();
  workshop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWildIsland.workshop)
}
inline void ConfigWildIsland::set_workshop(const void* value,
    size_t size) {
  set_has_workshop();
  workshop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWildIsland.workshop)
}
inline ::std::string* ConfigWildIsland::mutable_workshop() {
  set_has_workshop();
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIsland.workshop)
  return workshop_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWildIsland::release_workshop() {
  // @@protoc_insertion_point(field_release:db.ConfigWildIsland.workshop)
  if (!has_workshop()) {
    return NULL;
  }
  clear_has_workshop();
  return workshop_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWildIsland::set_allocated_workshop(::std::string* workshop) {
  if (workshop != NULL) {
    set_has_workshop();
  } else {
    clear_has_workshop();
  }
  workshop_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workshop,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWildIsland.workshop)
}
inline ::std::string* ConfigWildIsland::unsafe_arena_release_workshop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWildIsland.workshop)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_workshop();
  return workshop_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWildIsland::unsafe_arena_set_allocated_workshop(
    ::std::string* workshop) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (workshop != NULL) {
    set_has_workshop();
  } else {
    clear_has_workshop();
  }
  workshop_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      workshop, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWildIsland.workshop)
}

// required int32 workshop_store_num = 12;
inline bool ConfigWildIsland::has_workshop_store_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigWildIsland::set_has_workshop_store_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigWildIsland::clear_has_workshop_store_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigWildIsland::clear_workshop_store_num() {
  workshop_store_num_ = 0;
  clear_has_workshop_store_num();
}
inline ::google::protobuf::int32 ConfigWildIsland::workshop_store_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.workshop_store_num)
  return workshop_store_num_;
}
inline void ConfigWildIsland::set_workshop_store_num(::google::protobuf::int32 value) {
  set_has_workshop_store_num();
  workshop_store_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.workshop_store_num)
}

// required int32 workshop_gather_num = 13;
inline bool ConfigWildIsland::has_workshop_gather_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigWildIsland::set_has_workshop_gather_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigWildIsland::clear_has_workshop_gather_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigWildIsland::clear_workshop_gather_num() {
  workshop_gather_num_ = 0;
  clear_has_workshop_gather_num();
}
inline ::google::protobuf::int32 ConfigWildIsland::workshop_gather_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.workshop_gather_num)
  return workshop_gather_num_;
}
inline void ConfigWildIsland::set_workshop_gather_num(::google::protobuf::int32 value) {
  set_has_workshop_gather_num();
  workshop_gather_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.workshop_gather_num)
}

// required bytes monster = 21;
inline bool ConfigWildIsland::has_monster() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigWildIsland::set_has_monster() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigWildIsland::clear_has_monster() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigWildIsland::clear_monster() {
  monster_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_monster();
}
inline const ::std::string& ConfigWildIsland::monster() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.monster)
  return monster_.Get();
}
inline void ConfigWildIsland::set_monster(const ::std::string& value) {
  set_has_monster();
  monster_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.monster)
}
#if LANG_CXX11
inline void ConfigWildIsland::set_monster(::std::string&& value) {
  set_has_monster();
  monster_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWildIsland.monster)
}
#endif
inline void ConfigWildIsland::set_monster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_monster();
  monster_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWildIsland.monster)
}
inline void ConfigWildIsland::set_monster(const void* value,
    size_t size) {
  set_has_monster();
  monster_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWildIsland.monster)
}
inline ::std::string* ConfigWildIsland::mutable_monster() {
  set_has_monster();
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIsland.monster)
  return monster_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWildIsland::release_monster() {
  // @@protoc_insertion_point(field_release:db.ConfigWildIsland.monster)
  if (!has_monster()) {
    return NULL;
  }
  clear_has_monster();
  return monster_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWildIsland::set_allocated_monster(::std::string* monster) {
  if (monster != NULL) {
    set_has_monster();
  } else {
    clear_has_monster();
  }
  monster_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monster,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWildIsland.monster)
}
inline ::std::string* ConfigWildIsland::unsafe_arena_release_monster() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWildIsland.monster)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_monster();
  return monster_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWildIsland::unsafe_arena_set_allocated_monster(
    ::std::string* monster) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (monster != NULL) {
    set_has_monster();
  } else {
    clear_has_monster();
  }
  monster_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      monster, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWildIsland.monster)
}

// required bytes statue = 22;
inline bool ConfigWildIsland::has_statue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigWildIsland::set_has_statue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigWildIsland::clear_has_statue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigWildIsland::clear_statue() {
  statue_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_statue();
}
inline const ::std::string& ConfigWildIsland::statue() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIsland.statue)
  return statue_.Get();
}
inline void ConfigWildIsland::set_statue(const ::std::string& value) {
  set_has_statue();
  statue_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWildIsland.statue)
}
#if LANG_CXX11
inline void ConfigWildIsland::set_statue(::std::string&& value) {
  set_has_statue();
  statue_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWildIsland.statue)
}
#endif
inline void ConfigWildIsland::set_statue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_statue();
  statue_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWildIsland.statue)
}
inline void ConfigWildIsland::set_statue(const void* value,
    size_t size) {
  set_has_statue();
  statue_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWildIsland.statue)
}
inline ::std::string* ConfigWildIsland::mutable_statue() {
  set_has_statue();
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIsland.statue)
  return statue_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWildIsland::release_statue() {
  // @@protoc_insertion_point(field_release:db.ConfigWildIsland.statue)
  if (!has_statue()) {
    return NULL;
  }
  clear_has_statue();
  return statue_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWildIsland::set_allocated_statue(::std::string* statue) {
  if (statue != NULL) {
    set_has_statue();
  } else {
    clear_has_statue();
  }
  statue_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statue,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWildIsland.statue)
}
inline ::std::string* ConfigWildIsland::unsafe_arena_release_statue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWildIsland.statue)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_statue();
  return statue_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWildIsland::unsafe_arena_set_allocated_statue(
    ::std::string* statue) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (statue != NULL) {
    set_has_statue();
  } else {
    clear_has_statue();
  }
  statue_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      statue, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWildIsland.statue)
}

// -------------------------------------------------------------------

// ConfigWildIslandList

// repeated .db.ConfigWildIsland list = 1;
inline int ConfigWildIslandList::list_size() const {
  return list_.size();
}
inline void ConfigWildIslandList::clear_list() {
  list_.Clear();
}
inline ::db::ConfigWildIsland* ConfigWildIslandList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIslandList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::ConfigWildIsland >*
ConfigWildIslandList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:db.ConfigWildIslandList.list)
  return &list_;
}
inline const ::db::ConfigWildIsland& ConfigWildIslandList::list(int index) const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandList.list)
  return list_.Get(index);
}
inline ::db::ConfigWildIsland* ConfigWildIslandList::add_list() {
  // @@protoc_insertion_point(field_add:db.ConfigWildIslandList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::ConfigWildIsland >&
ConfigWildIslandList::list() const {
  // @@protoc_insertion_point(field_list:db.ConfigWildIslandList.list)
  return list_;
}

// -------------------------------------------------------------------

// UserMapArea

// required bytes userid = 1;
inline bool UserMapArea::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMapArea::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMapArea::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMapArea::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserMapArea::userid() const {
  // @@protoc_insertion_point(field_get:db.UserMapArea.userid)
  return userid_.Get();
}
inline void UserMapArea::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMapArea.userid)
}
#if LANG_CXX11
inline void UserMapArea::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMapArea.userid)
}
#endif
inline void UserMapArea::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMapArea.userid)
}
inline void UserMapArea::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMapArea.userid)
}
inline ::std::string* UserMapArea::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserMapArea.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMapArea::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserMapArea.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMapArea::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMapArea.userid)
}
inline ::std::string* UserMapArea::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMapArea.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMapArea::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMapArea.userid)
}

// required int32 areaid = 2;
inline bool UserMapArea::has_areaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMapArea::set_has_areaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMapArea::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMapArea::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 UserMapArea::areaid() const {
  // @@protoc_insertion_point(field_get:db.UserMapArea.areaid)
  return areaid_;
}
inline void UserMapArea::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapArea.areaid)
}

// required int32 area_state = 3;
inline bool UserMapArea::has_area_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMapArea::set_has_area_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMapArea::clear_has_area_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMapArea::clear_area_state() {
  area_state_ = 0;
  clear_has_area_state();
}
inline ::google::protobuf::int32 UserMapArea::area_state() const {
  // @@protoc_insertion_point(field_get:db.UserMapArea.area_state)
  return area_state_;
}
inline void UserMapArea::set_area_state(::google::protobuf::int32 value) {
  set_has_area_state();
  area_state_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapArea.area_state)
}

// required sfixed64 optime = 11;
inline bool UserMapArea::has_optime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMapArea::set_has_optime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMapArea::clear_has_optime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMapArea::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 UserMapArea::optime() const {
  // @@protoc_insertion_point(field_get:db.UserMapArea.optime)
  return optime_;
}
inline void UserMapArea::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapArea.optime)
}

// -------------------------------------------------------------------

// UserMapEntry

// required bytes userid = 1;
inline bool UserMapEntry::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMapEntry::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMapEntry::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMapEntry::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserMapEntry::userid() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.userid)
  return userid_.Get();
}
inline void UserMapEntry::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMapEntry.userid)
}
#if LANG_CXX11
inline void UserMapEntry::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMapEntry.userid)
}
#endif
inline void UserMapEntry::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMapEntry.userid)
}
inline void UserMapEntry::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMapEntry.userid)
}
inline ::std::string* UserMapEntry::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserMapEntry.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMapEntry::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserMapEntry.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMapEntry::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMapEntry.userid)
}
inline ::std::string* UserMapEntry::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMapEntry.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMapEntry::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMapEntry.userid)
}

// required uint64 entryid = 2;
inline bool UserMapEntry::has_entryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMapEntry::set_has_entryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMapEntry::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMapEntry::clear_entryid() {
  entryid_ = GOOGLE_ULONGLONG(0);
  clear_has_entryid();
}
inline ::google::protobuf::uint64 UserMapEntry::entryid() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.entryid)
  return entryid_;
}
inline void UserMapEntry::set_entryid(::google::protobuf::uint64 value) {
  set_has_entryid();
  entryid_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.entryid)
}

// required int32 discover_flag = 3;
inline bool UserMapEntry::has_discover_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMapEntry::set_has_discover_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMapEntry::clear_has_discover_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMapEntry::clear_discover_flag() {
  discover_flag_ = 0;
  clear_has_discover_flag();
}
inline ::google::protobuf::int32 UserMapEntry::discover_flag() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.discover_flag)
  return discover_flag_;
}
inline void UserMapEntry::set_discover_flag(::google::protobuf::int32 value) {
  set_has_discover_flag();
  discover_flag_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.discover_flag)
}

// required int32 block_flag = 4;
inline bool UserMapEntry::has_block_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMapEntry::set_has_block_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMapEntry::clear_has_block_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMapEntry::clear_block_flag() {
  block_flag_ = 0;
  clear_has_block_flag();
}
inline ::google::protobuf::int32 UserMapEntry::block_flag() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.block_flag)
  return block_flag_;
}
inline void UserMapEntry::set_block_flag(::google::protobuf::int32 value) {
  set_has_block_flag();
  block_flag_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.block_flag)
}

// required uint64 groupid = 5;
inline bool UserMapEntry::has_groupid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserMapEntry::set_has_groupid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserMapEntry::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserMapEntry::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 UserMapEntry::groupid() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.groupid)
  return groupid_;
}
inline void UserMapEntry::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.groupid)
}

// required int32 stage_hint = 11;
inline bool UserMapEntry::has_stage_hint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserMapEntry::set_has_stage_hint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserMapEntry::clear_has_stage_hint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserMapEntry::clear_stage_hint() {
  stage_hint_ = 0;
  clear_has_stage_hint();
}
inline ::google::protobuf::int32 UserMapEntry::stage_hint() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.stage_hint)
  return stage_hint_;
}
inline void UserMapEntry::set_stage_hint(::google::protobuf::int32 value) {
  set_has_stage_hint();
  stage_hint_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.stage_hint)
}

// required int32 stage_hint2 = 12;
inline bool UserMapEntry::has_stage_hint2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserMapEntry::set_has_stage_hint2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserMapEntry::clear_has_stage_hint2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserMapEntry::clear_stage_hint2() {
  stage_hint2_ = 0;
  clear_has_stage_hint2();
}
inline ::google::protobuf::int32 UserMapEntry::stage_hint2() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.stage_hint2)
  return stage_hint2_;
}
inline void UserMapEntry::set_stage_hint2(::google::protobuf::int32 value) {
  set_has_stage_hint2();
  stage_hint2_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.stage_hint2)
}

// required uint64 stage_monsterid = 13;
inline bool UserMapEntry::has_stage_monsterid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserMapEntry::set_has_stage_monsterid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserMapEntry::clear_has_stage_monsterid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserMapEntry::clear_stage_monsterid() {
  stage_monsterid_ = GOOGLE_ULONGLONG(0);
  clear_has_stage_monsterid();
}
inline ::google::protobuf::uint64 UserMapEntry::stage_monsterid() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.stage_monsterid)
  return stage_monsterid_;
}
inline void UserMapEntry::set_stage_monsterid(::google::protobuf::uint64 value) {
  set_has_stage_monsterid();
  stage_monsterid_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.stage_monsterid)
}

// required sfixed64 stage_refreshtime = 14;
inline bool UserMapEntry::has_stage_refreshtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserMapEntry::set_has_stage_refreshtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserMapEntry::clear_has_stage_refreshtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserMapEntry::clear_stage_refreshtime() {
  stage_refreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_stage_refreshtime();
}
inline ::google::protobuf::int64 UserMapEntry::stage_refreshtime() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.stage_refreshtime)
  return stage_refreshtime_;
}
inline void UserMapEntry::set_stage_refreshtime(::google::protobuf::int64 value) {
  set_has_stage_refreshtime();
  stage_refreshtime_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.stage_refreshtime)
}

// required int32 ownership_flag = 21;
inline bool UserMapEntry::has_ownership_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserMapEntry::set_has_ownership_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserMapEntry::clear_has_ownership_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserMapEntry::clear_ownership_flag() {
  ownership_flag_ = 0;
  clear_has_ownership_flag();
}
inline ::google::protobuf::int32 UserMapEntry::ownership_flag() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.ownership_flag)
  return ownership_flag_;
}
inline void UserMapEntry::set_ownership_flag(::google::protobuf::int32 value) {
  set_has_ownership_flag();
  ownership_flag_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.ownership_flag)
}

// required float ownership_storage = 22;
inline bool UserMapEntry::has_ownership_storage() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserMapEntry::set_has_ownership_storage() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserMapEntry::clear_has_ownership_storage() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserMapEntry::clear_ownership_storage() {
  ownership_storage_ = 0;
  clear_has_ownership_storage();
}
inline float UserMapEntry::ownership_storage() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.ownership_storage)
  return ownership_storage_;
}
inline void UserMapEntry::set_ownership_storage(float value) {
  set_has_ownership_storage();
  ownership_storage_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.ownership_storage)
}

// required float ownership_gather_per_min = 23;
inline bool UserMapEntry::has_ownership_gather_per_min() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserMapEntry::set_has_ownership_gather_per_min() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserMapEntry::clear_has_ownership_gather_per_min() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserMapEntry::clear_ownership_gather_per_min() {
  ownership_gather_per_min_ = 0;
  clear_has_ownership_gather_per_min();
}
inline float UserMapEntry::ownership_gather_per_min() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.ownership_gather_per_min)
  return ownership_gather_per_min_;
}
inline void UserMapEntry::set_ownership_gather_per_min(float value) {
  set_has_ownership_gather_per_min();
  ownership_gather_per_min_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.ownership_gather_per_min)
}

// required float ownership_gather_add_ratio = 24;
inline bool UserMapEntry::has_ownership_gather_add_ratio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserMapEntry::set_has_ownership_gather_add_ratio() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserMapEntry::clear_has_ownership_gather_add_ratio() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserMapEntry::clear_ownership_gather_add_ratio() {
  ownership_gather_add_ratio_ = 0;
  clear_has_ownership_gather_add_ratio();
}
inline float UserMapEntry::ownership_gather_add_ratio() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.ownership_gather_add_ratio)
  return ownership_gather_add_ratio_;
}
inline void UserMapEntry::set_ownership_gather_add_ratio(float value) {
  set_has_ownership_gather_add_ratio();
  ownership_gather_add_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.ownership_gather_add_ratio)
}

// required sfixed64 ownership_gather_time = 25;
inline bool UserMapEntry::has_ownership_gather_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserMapEntry::set_has_ownership_gather_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserMapEntry::clear_has_ownership_gather_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserMapEntry::clear_ownership_gather_time() {
  ownership_gather_time_ = GOOGLE_LONGLONG(0);
  clear_has_ownership_gather_time();
}
inline ::google::protobuf::int64 UserMapEntry::ownership_gather_time() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.ownership_gather_time)
  return ownership_gather_time_;
}
inline void UserMapEntry::set_ownership_gather_time(::google::protobuf::int64 value) {
  set_has_ownership_gather_time();
  ownership_gather_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.ownership_gather_time)
}

// required sfixed64 ownership_deadline = 26;
inline bool UserMapEntry::has_ownership_deadline() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserMapEntry::set_has_ownership_deadline() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserMapEntry::clear_has_ownership_deadline() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserMapEntry::clear_ownership_deadline() {
  ownership_deadline_ = GOOGLE_LONGLONG(0);
  clear_has_ownership_deadline();
}
inline ::google::protobuf::int64 UserMapEntry::ownership_deadline() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.ownership_deadline)
  return ownership_deadline_;
}
inline void UserMapEntry::set_ownership_deadline(::google::protobuf::int64 value) {
  set_has_ownership_deadline();
  ownership_deadline_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.ownership_deadline)
}

// required sfixed64 ownership_farm_skill_exp_time = 27;
inline bool UserMapEntry::has_ownership_farm_skill_exp_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserMapEntry::set_has_ownership_farm_skill_exp_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserMapEntry::clear_has_ownership_farm_skill_exp_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserMapEntry::clear_ownership_farm_skill_exp_time() {
  ownership_farm_skill_exp_time_ = GOOGLE_LONGLONG(0);
  clear_has_ownership_farm_skill_exp_time();
}
inline ::google::protobuf::int64 UserMapEntry::ownership_farm_skill_exp_time() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.ownership_farm_skill_exp_time)
  return ownership_farm_skill_exp_time_;
}
inline void UserMapEntry::set_ownership_farm_skill_exp_time(::google::protobuf::int64 value) {
  set_has_ownership_farm_skill_exp_time();
  ownership_farm_skill_exp_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.ownership_farm_skill_exp_time)
}

// required sfixed64 optime = 31;
inline bool UserMapEntry::has_optime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserMapEntry::set_has_optime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserMapEntry::clear_has_optime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserMapEntry::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 UserMapEntry::optime() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.optime)
  return optime_;
}
inline void UserMapEntry::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.optime)
}

// optional int32 type = 40;
inline bool UserMapEntry::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserMapEntry::set_has_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserMapEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserMapEntry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserMapEntry::type() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.type)
  return type_;
}
inline void UserMapEntry::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.type)
}

// optional int64 ownerid = 41;
inline bool UserMapEntry::has_ownerid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserMapEntry::set_has_ownerid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserMapEntry::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserMapEntry::clear_ownerid() {
  ownerid_ = GOOGLE_LONGLONG(0);
  clear_has_ownerid();
}
inline ::google::protobuf::int64 UserMapEntry::ownerid() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.ownerid)
  return ownerid_;
}
inline void UserMapEntry::set_ownerid(::google::protobuf::int64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.ownerid)
}

// optional sfixed64 refresh_time = 42;
inline bool UserMapEntry::has_refresh_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserMapEntry::set_has_refresh_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserMapEntry::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserMapEntry::clear_refresh_time() {
  refresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_refresh_time();
}
inline ::google::protobuf::int64 UserMapEntry::refresh_time() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.refresh_time)
  return refresh_time_;
}
inline void UserMapEntry::set_refresh_time(::google::protobuf::int64 value) {
  set_has_refresh_time();
  refresh_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserMapEntry.refresh_time)
}

// optional bytes data = 43;
inline bool UserMapEntry::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMapEntry::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMapEntry::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMapEntry::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& UserMapEntry::data() const {
  // @@protoc_insertion_point(field_get:db.UserMapEntry.data)
  return data_.Get();
}
inline void UserMapEntry::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserMapEntry.data)
}
#if LANG_CXX11
inline void UserMapEntry::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserMapEntry.data)
}
#endif
inline void UserMapEntry::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserMapEntry.data)
}
inline void UserMapEntry::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserMapEntry.data)
}
inline ::std::string* UserMapEntry::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:db.UserMapEntry.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserMapEntry::release_data() {
  // @@protoc_insertion_point(field_release:db.UserMapEntry.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserMapEntry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserMapEntry.data)
}
inline ::std::string* UserMapEntry::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserMapEntry.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserMapEntry::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserMapEntry.data)
}

// -------------------------------------------------------------------

// UserFarmSkillExpGen

// required bytes userid = 1;
inline bool UserFarmSkillExpGen::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFarmSkillExpGen::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFarmSkillExpGen::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFarmSkillExpGen::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserFarmSkillExpGen::userid() const {
  // @@protoc_insertion_point(field_get:db.UserFarmSkillExpGen.userid)
  return userid_.Get();
}
inline void UserFarmSkillExpGen::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserFarmSkillExpGen.userid)
}
#if LANG_CXX11
inline void UserFarmSkillExpGen::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserFarmSkillExpGen.userid)
}
#endif
inline void UserFarmSkillExpGen::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserFarmSkillExpGen.userid)
}
inline void UserFarmSkillExpGen::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserFarmSkillExpGen.userid)
}
inline ::std::string* UserFarmSkillExpGen::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserFarmSkillExpGen.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserFarmSkillExpGen::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserFarmSkillExpGen.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserFarmSkillExpGen::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserFarmSkillExpGen.userid)
}
inline ::std::string* UserFarmSkillExpGen::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserFarmSkillExpGen.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserFarmSkillExpGen::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserFarmSkillExpGen.userid)
}

// required int32 cardid = 2;
inline bool UserFarmSkillExpGen::has_cardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFarmSkillExpGen::set_has_cardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFarmSkillExpGen::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFarmSkillExpGen::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
inline ::google::protobuf::int32 UserFarmSkillExpGen::cardid() const {
  // @@protoc_insertion_point(field_get:db.UserFarmSkillExpGen.cardid)
  return cardid_;
}
inline void UserFarmSkillExpGen::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
  // @@protoc_insertion_point(field_set:db.UserFarmSkillExpGen.cardid)
}

// required uint64 entryid = 3;
inline bool UserFarmSkillExpGen::has_entryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFarmSkillExpGen::set_has_entryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFarmSkillExpGen::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFarmSkillExpGen::clear_entryid() {
  entryid_ = GOOGLE_ULONGLONG(0);
  clear_has_entryid();
}
inline ::google::protobuf::uint64 UserFarmSkillExpGen::entryid() const {
  // @@protoc_insertion_point(field_get:db.UserFarmSkillExpGen.entryid)
  return entryid_;
}
inline void UserFarmSkillExpGen::set_entryid(::google::protobuf::uint64 value) {
  set_has_entryid();
  entryid_ = value;
  // @@protoc_insertion_point(field_set:db.UserFarmSkillExpGen.entryid)
}

// required float exp = 4;
inline bool UserFarmSkillExpGen::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserFarmSkillExpGen::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserFarmSkillExpGen::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserFarmSkillExpGen::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline float UserFarmSkillExpGen::exp() const {
  // @@protoc_insertion_point(field_get:db.UserFarmSkillExpGen.exp)
  return exp_;
}
inline void UserFarmSkillExpGen::set_exp(float value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:db.UserFarmSkillExpGen.exp)
}

// -------------------------------------------------------------------

// UserStatsMapEntry

// required bytes userid = 1;
inline bool UserStatsMapEntry::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStatsMapEntry::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStatsMapEntry::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStatsMapEntry::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserStatsMapEntry::userid() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.userid)
  return userid_.Get();
}
inline void UserStatsMapEntry::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.userid)
}
#if LANG_CXX11
inline void UserStatsMapEntry::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserStatsMapEntry.userid)
}
#endif
inline void UserStatsMapEntry::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserStatsMapEntry.userid)
}
inline void UserStatsMapEntry::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserStatsMapEntry.userid)
}
inline ::std::string* UserStatsMapEntry::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserStatsMapEntry.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserStatsMapEntry::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserStatsMapEntry.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserStatsMapEntry::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserStatsMapEntry.userid)
}
inline ::std::string* UserStatsMapEntry::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserStatsMapEntry.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserStatsMapEntry::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserStatsMapEntry.userid)
}

// required sfixed64 wild_island_gather_time = 11;
inline bool UserStatsMapEntry::has_wild_island_gather_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStatsMapEntry::set_has_wild_island_gather_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStatsMapEntry::clear_has_wild_island_gather_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStatsMapEntry::clear_wild_island_gather_time() {
  wild_island_gather_time_ = GOOGLE_LONGLONG(0);
  clear_has_wild_island_gather_time();
}
inline ::google::protobuf::int64 UserStatsMapEntry::wild_island_gather_time() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.wild_island_gather_time)
  return wild_island_gather_time_;
}
inline void UserStatsMapEntry::set_wild_island_gather_time(::google::protobuf::int64 value) {
  set_has_wild_island_gather_time();
  wild_island_gather_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.wild_island_gather_time)
}

// required sfixed64 wild_island_harvest_time1 = 12;
inline bool UserStatsMapEntry::has_wild_island_harvest_time1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserStatsMapEntry::set_has_wild_island_harvest_time1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserStatsMapEntry::clear_has_wild_island_harvest_time1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserStatsMapEntry::clear_wild_island_harvest_time1() {
  wild_island_harvest_time1_ = GOOGLE_LONGLONG(0);
  clear_has_wild_island_harvest_time1();
}
inline ::google::protobuf::int64 UserStatsMapEntry::wild_island_harvest_time1() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.wild_island_harvest_time1)
  return wild_island_harvest_time1_;
}
inline void UserStatsMapEntry::set_wild_island_harvest_time1(::google::protobuf::int64 value) {
  set_has_wild_island_harvest_time1();
  wild_island_harvest_time1_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.wild_island_harvest_time1)
}

// required sfixed64 wild_island_harvest_time2 = 13;
inline bool UserStatsMapEntry::has_wild_island_harvest_time2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserStatsMapEntry::set_has_wild_island_harvest_time2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserStatsMapEntry::clear_has_wild_island_harvest_time2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserStatsMapEntry::clear_wild_island_harvest_time2() {
  wild_island_harvest_time2_ = GOOGLE_LONGLONG(0);
  clear_has_wild_island_harvest_time2();
}
inline ::google::protobuf::int64 UserStatsMapEntry::wild_island_harvest_time2() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.wild_island_harvest_time2)
  return wild_island_harvest_time2_;
}
inline void UserStatsMapEntry::set_wild_island_harvest_time2(::google::protobuf::int64 value) {
  set_has_wild_island_harvest_time2();
  wild_island_harvest_time2_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.wild_island_harvest_time2)
}

// required sfixed64 wild_island_harvest_time3 = 14;
inline bool UserStatsMapEntry::has_wild_island_harvest_time3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserStatsMapEntry::set_has_wild_island_harvest_time3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserStatsMapEntry::clear_has_wild_island_harvest_time3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserStatsMapEntry::clear_wild_island_harvest_time3() {
  wild_island_harvest_time3_ = GOOGLE_LONGLONG(0);
  clear_has_wild_island_harvest_time3();
}
inline ::google::protobuf::int64 UserStatsMapEntry::wild_island_harvest_time3() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.wild_island_harvest_time3)
  return wild_island_harvest_time3_;
}
inline void UserStatsMapEntry::set_wild_island_harvest_time3(::google::protobuf::int64 value) {
  set_has_wild_island_harvest_time3();
  wild_island_harvest_time3_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.wild_island_harvest_time3)
}

// required sfixed64 wild_island_harvest_time4 = 15;
inline bool UserStatsMapEntry::has_wild_island_harvest_time4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserStatsMapEntry::set_has_wild_island_harvest_time4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserStatsMapEntry::clear_has_wild_island_harvest_time4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserStatsMapEntry::clear_wild_island_harvest_time4() {
  wild_island_harvest_time4_ = GOOGLE_LONGLONG(0);
  clear_has_wild_island_harvest_time4();
}
inline ::google::protobuf::int64 UserStatsMapEntry::wild_island_harvest_time4() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.wild_island_harvest_time4)
  return wild_island_harvest_time4_;
}
inline void UserStatsMapEntry::set_wild_island_harvest_time4(::google::protobuf::int64 value) {
  set_has_wild_island_harvest_time4();
  wild_island_harvest_time4_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.wild_island_harvest_time4)
}

// required sfixed64 group_island_refreshtime = 21;
inline bool UserStatsMapEntry::has_group_island_refreshtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserStatsMapEntry::set_has_group_island_refreshtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserStatsMapEntry::clear_has_group_island_refreshtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserStatsMapEntry::clear_group_island_refreshtime() {
  group_island_refreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_group_island_refreshtime();
}
inline ::google::protobuf::int64 UserStatsMapEntry::group_island_refreshtime() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.group_island_refreshtime)
  return group_island_refreshtime_;
}
inline void UserStatsMapEntry::set_group_island_refreshtime(::google::protobuf::int64 value) {
  set_has_group_island_refreshtime();
  group_island_refreshtime_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.group_island_refreshtime)
}

// required uint64 player_ship_entryid = 31;
inline bool UserStatsMapEntry::has_player_ship_entryid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserStatsMapEntry::set_has_player_ship_entryid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserStatsMapEntry::clear_has_player_ship_entryid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserStatsMapEntry::clear_player_ship_entryid() {
  player_ship_entryid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_ship_entryid();
}
inline ::google::protobuf::uint64 UserStatsMapEntry::player_ship_entryid() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.player_ship_entryid)
  return player_ship_entryid_;
}
inline void UserStatsMapEntry::set_player_ship_entryid(::google::protobuf::uint64 value) {
  set_has_player_ship_entryid();
  player_ship_entryid_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.player_ship_entryid)
}

// required sfixed64 player_ship_refresh_time = 32;
inline bool UserStatsMapEntry::has_player_ship_refresh_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserStatsMapEntry::set_has_player_ship_refresh_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserStatsMapEntry::clear_has_player_ship_refresh_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserStatsMapEntry::clear_player_ship_refresh_time() {
  player_ship_refresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_player_ship_refresh_time();
}
inline ::google::protobuf::int64 UserStatsMapEntry::player_ship_refresh_time() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.player_ship_refresh_time)
  return player_ship_refresh_time_;
}
inline void UserStatsMapEntry::set_player_ship_refresh_time(::google::protobuf::int64 value) {
  set_has_player_ship_refresh_time();
  player_ship_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.player_ship_refresh_time)
}

// required sfixed64 player_ship_navigate_time = 33;
inline bool UserStatsMapEntry::has_player_ship_navigate_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserStatsMapEntry::set_has_player_ship_navigate_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserStatsMapEntry::clear_has_player_ship_navigate_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserStatsMapEntry::clear_player_ship_navigate_time() {
  player_ship_navigate_time_ = GOOGLE_LONGLONG(0);
  clear_has_player_ship_navigate_time();
}
inline ::google::protobuf::int64 UserStatsMapEntry::player_ship_navigate_time() const {
  // @@protoc_insertion_point(field_get:db.UserStatsMapEntry.player_ship_navigate_time)
  return player_ship_navigate_time_;
}
inline void UserStatsMapEntry::set_player_ship_navigate_time(::google::protobuf::int64 value) {
  set_has_player_ship_navigate_time();
  player_ship_navigate_time_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsMapEntry.player_ship_navigate_time)
}

// -------------------------------------------------------------------

// UserPirateShip

// required bytes userid = 1;
inline bool UserPirateShip::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPirateShip::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPirateShip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPirateShip::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserPirateShip::userid() const {
  // @@protoc_insertion_point(field_get:db.UserPirateShip.userid)
  return userid_.Get();
}
inline void UserPirateShip::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPirateShip.userid)
}
#if LANG_CXX11
inline void UserPirateShip::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPirateShip.userid)
}
#endif
inline void UserPirateShip::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPirateShip.userid)
}
inline void UserPirateShip::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPirateShip.userid)
}
inline ::std::string* UserPirateShip::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserPirateShip.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPirateShip::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserPirateShip.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPirateShip::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPirateShip.userid)
}
inline ::std::string* UserPirateShip::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPirateShip.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPirateShip::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPirateShip.userid)
}

// required int32 type = 2;
inline bool UserPirateShip::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPirateShip::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPirateShip::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPirateShip::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserPirateShip::type() const {
  // @@protoc_insertion_point(field_get:db.UserPirateShip.type)
  return type_;
}
inline void UserPirateShip::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.UserPirateShip.type)
}

// required uint64 entryid = 11;
inline bool UserPirateShip::has_entryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPirateShip::set_has_entryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPirateShip::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPirateShip::clear_entryid() {
  entryid_ = GOOGLE_ULONGLONG(0);
  clear_has_entryid();
}
inline ::google::protobuf::uint64 UserPirateShip::entryid() const {
  // @@protoc_insertion_point(field_get:db.UserPirateShip.entryid)
  return entryid_;
}
inline void UserPirateShip::set_entryid(::google::protobuf::uint64 value) {
  set_has_entryid();
  entryid_ = value;
  // @@protoc_insertion_point(field_set:db.UserPirateShip.entryid)
}

// required sfixed64 refreshtime = 12;
inline bool UserPirateShip::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserPirateShip::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserPirateShip::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserPirateShip::clear_refreshtime() {
  refreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::int64 UserPirateShip::refreshtime() const {
  // @@protoc_insertion_point(field_get:db.UserPirateShip.refreshtime)
  return refreshtime_;
}
inline void UserPirateShip::set_refreshtime(::google::protobuf::int64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:db.UserPirateShip.refreshtime)
}

// required int32 fight_num = 13;
inline bool UserPirateShip::has_fight_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPirateShip::set_has_fight_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPirateShip::clear_has_fight_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPirateShip::clear_fight_num() {
  fight_num_ = 0;
  clear_has_fight_num();
}
inline ::google::protobuf::int32 UserPirateShip::fight_num() const {
  // @@protoc_insertion_point(field_get:db.UserPirateShip.fight_num)
  return fight_num_;
}
inline void UserPirateShip::set_fight_num(::google::protobuf::int32 value) {
  set_has_fight_num();
  fight_num_ = value;
  // @@protoc_insertion_point(field_set:db.UserPirateShip.fight_num)
}

// -------------------------------------------------------------------

// WildIslandDetail

// required uint64 entryid = 1;
inline bool WildIslandDetail::has_entryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WildIslandDetail::set_has_entryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WildIslandDetail::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WildIslandDetail::clear_entryid() {
  entryid_ = GOOGLE_ULONGLONG(0);
  clear_has_entryid();
}
inline ::google::protobuf::uint64 WildIslandDetail::entryid() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.entryid)
  return entryid_;
}
inline void WildIslandDetail::set_entryid(::google::protobuf::uint64 value) {
  set_has_entryid();
  entryid_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.entryid)
}

// required int32 island_state = 2;
inline bool WildIslandDetail::has_island_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WildIslandDetail::set_has_island_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WildIslandDetail::clear_has_island_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WildIslandDetail::clear_island_state() {
  island_state_ = 0;
  clear_has_island_state();
}
inline ::google::protobuf::int32 WildIslandDetail::island_state() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.island_state)
  return island_state_;
}
inline void WildIslandDetail::set_island_state(::google::protobuf::int32 value) {
  set_has_island_state();
  island_state_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.island_state)
}

// required int32 occupier_ticketid = 3;
inline bool WildIslandDetail::has_occupier_ticketid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WildIslandDetail::set_has_occupier_ticketid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WildIslandDetail::clear_has_occupier_ticketid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WildIslandDetail::clear_occupier_ticketid() {
  occupier_ticketid_ = 0;
  clear_has_occupier_ticketid();
}
inline ::google::protobuf::int32 WildIslandDetail::occupier_ticketid() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.occupier_ticketid)
  return occupier_ticketid_;
}
inline void WildIslandDetail::set_occupier_ticketid(::google::protobuf::int32 value) {
  set_has_occupier_ticketid();
  occupier_ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.occupier_ticketid)
}

// required sfixed64 occupy_time = 4;
inline bool WildIslandDetail::has_occupy_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WildIslandDetail::set_has_occupy_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WildIslandDetail::clear_has_occupy_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WildIslandDetail::clear_occupy_time() {
  occupy_time_ = GOOGLE_LONGLONG(0);
  clear_has_occupy_time();
}
inline ::google::protobuf::int64 WildIslandDetail::occupy_time() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.occupy_time)
  return occupy_time_;
}
inline void WildIslandDetail::set_occupy_time(::google::protobuf::int64 value) {
  set_has_occupy_time();
  occupy_time_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.occupy_time)
}

// required sfixed64 refreshtime = 5;
inline bool WildIslandDetail::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WildIslandDetail::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WildIslandDetail::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WildIslandDetail::clear_refreshtime() {
  refreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::int64 WildIslandDetail::refreshtime() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.refreshtime)
  return refreshtime_;
}
inline void WildIslandDetail::set_refreshtime(::google::protobuf::int64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.refreshtime)
}

// required int32 workshop_grade = 11;
inline bool WildIslandDetail::has_workshop_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WildIslandDetail::set_has_workshop_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WildIslandDetail::clear_has_workshop_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WildIslandDetail::clear_workshop_grade() {
  workshop_grade_ = 0;
  clear_has_workshop_grade();
}
inline ::google::protobuf::int32 WildIslandDetail::workshop_grade() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.workshop_grade)
  return workshop_grade_;
}
inline void WildIslandDetail::set_workshop_grade(::google::protobuf::int32 value) {
  set_has_workshop_grade();
  workshop_grade_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.workshop_grade)
}

// required int32 workshop_state = 12;
inline bool WildIslandDetail::has_workshop_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WildIslandDetail::set_has_workshop_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WildIslandDetail::clear_has_workshop_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WildIslandDetail::clear_workshop_state() {
  workshop_state_ = 0;
  clear_has_workshop_state();
}
inline ::google::protobuf::int32 WildIslandDetail::workshop_state() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.workshop_state)
  return workshop_state_;
}
inline void WildIslandDetail::set_workshop_state(::google::protobuf::int32 value) {
  set_has_workshop_state();
  workshop_state_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.workshop_state)
}

// required float workshop_base_ratio = 13;
inline bool WildIslandDetail::has_workshop_base_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WildIslandDetail::set_has_workshop_base_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WildIslandDetail::clear_has_workshop_base_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WildIslandDetail::clear_workshop_base_ratio() {
  workshop_base_ratio_ = 0;
  clear_has_workshop_base_ratio();
}
inline float WildIslandDetail::workshop_base_ratio() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.workshop_base_ratio)
  return workshop_base_ratio_;
}
inline void WildIslandDetail::set_workshop_base_ratio(float value) {
  set_has_workshop_base_ratio();
  workshop_base_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.workshop_base_ratio)
}

// required float workshop_storage = 14;
inline bool WildIslandDetail::has_workshop_storage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WildIslandDetail::set_has_workshop_storage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WildIslandDetail::clear_has_workshop_storage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WildIslandDetail::clear_workshop_storage() {
  workshop_storage_ = 0;
  clear_has_workshop_storage();
}
inline float WildIslandDetail::workshop_storage() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.workshop_storage)
  return workshop_storage_;
}
inline void WildIslandDetail::set_workshop_storage(float value) {
  set_has_workshop_storage();
  workshop_storage_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.workshop_storage)
}

// required float workshop_gather_per_min = 15;
inline bool WildIslandDetail::has_workshop_gather_per_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WildIslandDetail::set_has_workshop_gather_per_min() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WildIslandDetail::clear_has_workshop_gather_per_min() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WildIslandDetail::clear_workshop_gather_per_min() {
  workshop_gather_per_min_ = 0;
  clear_has_workshop_gather_per_min();
}
inline float WildIslandDetail::workshop_gather_per_min() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.workshop_gather_per_min)
  return workshop_gather_per_min_;
}
inline void WildIslandDetail::set_workshop_gather_per_min(float value) {
  set_has_workshop_gather_per_min();
  workshop_gather_per_min_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.workshop_gather_per_min)
}

// required float workshop_gather_add_ratio = 16;
inline bool WildIslandDetail::has_workshop_gather_add_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WildIslandDetail::set_has_workshop_gather_add_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WildIslandDetail::clear_has_workshop_gather_add_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WildIslandDetail::clear_workshop_gather_add_ratio() {
  workshop_gather_add_ratio_ = 0;
  clear_has_workshop_gather_add_ratio();
}
inline float WildIslandDetail::workshop_gather_add_ratio() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.workshop_gather_add_ratio)
  return workshop_gather_add_ratio_;
}
inline void WildIslandDetail::set_workshop_gather_add_ratio(float value) {
  set_has_workshop_gather_add_ratio();
  workshop_gather_add_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.workshop_gather_add_ratio)
}

// required sfixed64 workshop_gather_time = 17;
inline bool WildIslandDetail::has_workshop_gather_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WildIslandDetail::set_has_workshop_gather_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WildIslandDetail::clear_has_workshop_gather_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WildIslandDetail::clear_workshop_gather_time() {
  workshop_gather_time_ = GOOGLE_LONGLONG(0);
  clear_has_workshop_gather_time();
}
inline ::google::protobuf::int64 WildIslandDetail::workshop_gather_time() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.workshop_gather_time)
  return workshop_gather_time_;
}
inline void WildIslandDetail::set_workshop_gather_time(::google::protobuf::int64 value) {
  set_has_workshop_gather_time();
  workshop_gather_time_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.workshop_gather_time)
}

// required sfixed64 optime = 21;
inline bool WildIslandDetail::has_optime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WildIslandDetail::set_has_optime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WildIslandDetail::clear_has_optime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WildIslandDetail::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 WildIslandDetail::optime() const {
  // @@protoc_insertion_point(field_get:db.WildIslandDetail.optime)
  return optime_;
}
inline void WildIslandDetail::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.WildIslandDetail.optime)
}

// -------------------------------------------------------------------

// GameGroupWildIsland

// required uint64 groupid = 1;
inline bool GameGroupWildIsland::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameGroupWildIsland::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameGroupWildIsland::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameGroupWildIsland::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GameGroupWildIsland::groupid() const {
  // @@protoc_insertion_point(field_get:db.GameGroupWildIsland.groupid)
  return groupid_;
}
inline void GameGroupWildIsland::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.GameGroupWildIsland.groupid)
}

// required .db.WildIslandDetail detail = 2;
inline bool GameGroupWildIsland::has_detail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameGroupWildIsland::set_has_detail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameGroupWildIsland::clear_has_detail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameGroupWildIsland::clear_detail() {
  if (detail_ != NULL) detail_->Clear();
  clear_has_detail();
}
inline const ::db::WildIslandDetail& GameGroupWildIsland::_internal_detail() const {
  return *detail_;
}
inline const ::db::WildIslandDetail& GameGroupWildIsland::detail() const {
  const ::db::WildIslandDetail* p = detail_;
  // @@protoc_insertion_point(field_get:db.GameGroupWildIsland.detail)
  return p != NULL ? *p : *reinterpret_cast<const ::db::WildIslandDetail*>(
      &::db::_WildIslandDetail_default_instance_);
}
inline ::db::WildIslandDetail* GameGroupWildIsland::release_detail() {
  // @@protoc_insertion_point(field_release:db.GameGroupWildIsland.detail)
  clear_has_detail();
  ::db::WildIslandDetail* temp = detail_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  detail_ = NULL;
  return temp;
}
inline ::db::WildIslandDetail* GameGroupWildIsland::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GameGroupWildIsland.detail)
  clear_has_detail();
  ::db::WildIslandDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline ::db::WildIslandDetail* GameGroupWildIsland::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) {
    auto* p = CreateMaybeMessage<::db::WildIslandDetail>(GetArenaNoVirtual());
    detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.GameGroupWildIsland.detail)
  return detail_;
}
inline void GameGroupWildIsland::set_allocated_detail(::db::WildIslandDetail* detail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete detail_;
  }
  if (detail) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(detail);
    if (message_arena != submessage_arena) {
      detail = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    set_has_detail();
  } else {
    clear_has_detail();
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:db.GameGroupWildIsland.detail)
}

// -------------------------------------------------------------------

// GameGroupMember

// required uint64 groupid = 1;
inline bool GameGroupMember::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameGroupMember::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameGroupMember::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameGroupMember::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GameGroupMember::groupid() const {
  // @@protoc_insertion_point(field_get:db.GameGroupMember.groupid)
  return groupid_;
}
inline void GameGroupMember::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.GameGroupMember.groupid)
}

// required int32 memberid = 2;
inline bool GameGroupMember::has_memberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameGroupMember::set_has_memberid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameGroupMember::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameGroupMember::clear_memberid() {
  memberid_ = 0;
  clear_has_memberid();
}
inline ::google::protobuf::int32 GameGroupMember::memberid() const {
  // @@protoc_insertion_point(field_get:db.GameGroupMember.memberid)
  return memberid_;
}
inline void GameGroupMember::set_memberid(::google::protobuf::int32 value) {
  set_has_memberid();
  memberid_ = value;
  // @@protoc_insertion_point(field_set:db.GameGroupMember.memberid)
}

// required int32 state = 3;
inline bool GameGroupMember::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameGroupMember::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameGroupMember::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameGroupMember::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GameGroupMember::state() const {
  // @@protoc_insertion_point(field_get:db.GameGroupMember.state)
  return state_;
}
inline void GameGroupMember::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.GameGroupMember.state)
}

// required sfixed64 optime = 4;
inline bool GameGroupMember::has_optime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameGroupMember::set_has_optime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameGroupMember::clear_has_optime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameGroupMember::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 GameGroupMember::optime() const {
  // @@protoc_insertion_point(field_get:db.GameGroupMember.optime)
  return optime_;
}
inline void GameGroupMember::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.GameGroupMember.optime)
}

// -------------------------------------------------------------------

// UserWildIsland

// required bytes userid = 1;
inline bool UserWildIsland::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserWildIsland::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserWildIsland::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserWildIsland::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserWildIsland::userid() const {
  // @@protoc_insertion_point(field_get:db.UserWildIsland.userid)
  return userid_.Get();
}
inline void UserWildIsland::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserWildIsland.userid)
}
#if LANG_CXX11
inline void UserWildIsland::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserWildIsland.userid)
}
#endif
inline void UserWildIsland::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserWildIsland.userid)
}
inline void UserWildIsland::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserWildIsland.userid)
}
inline ::std::string* UserWildIsland::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserWildIsland.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserWildIsland::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserWildIsland.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserWildIsland::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserWildIsland.userid)
}
inline ::std::string* UserWildIsland::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserWildIsland.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserWildIsland::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserWildIsland.userid)
}

// required .db.WildIslandDetail detail = 2;
inline bool UserWildIsland::has_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserWildIsland::set_has_detail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserWildIsland::clear_has_detail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserWildIsland::clear_detail() {
  if (detail_ != NULL) detail_->Clear();
  clear_has_detail();
}
inline const ::db::WildIslandDetail& UserWildIsland::_internal_detail() const {
  return *detail_;
}
inline const ::db::WildIslandDetail& UserWildIsland::detail() const {
  const ::db::WildIslandDetail* p = detail_;
  // @@protoc_insertion_point(field_get:db.UserWildIsland.detail)
  return p != NULL ? *p : *reinterpret_cast<const ::db::WildIslandDetail*>(
      &::db::_WildIslandDetail_default_instance_);
}
inline ::db::WildIslandDetail* UserWildIsland::release_detail() {
  // @@protoc_insertion_point(field_release:db.UserWildIsland.detail)
  clear_has_detail();
  ::db::WildIslandDetail* temp = detail_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  detail_ = NULL;
  return temp;
}
inline ::db::WildIslandDetail* UserWildIsland::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserWildIsland.detail)
  clear_has_detail();
  ::db::WildIslandDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline ::db::WildIslandDetail* UserWildIsland::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) {
    auto* p = CreateMaybeMessage<::db::WildIslandDetail>(GetArenaNoVirtual());
    detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.UserWildIsland.detail)
  return detail_;
}
inline void UserWildIsland::set_allocated_detail(::db::WildIslandDetail* detail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete detail_;
  }
  if (detail) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(detail);
    if (message_arena != submessage_arena) {
      detail = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    set_has_detail();
  } else {
    clear_has_detail();
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:db.UserWildIsland.detail)
}

// -------------------------------------------------------------------

// UserStatsWildIslandGather

// required bytes userid = 1;
inline bool UserStatsWildIslandGather::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStatsWildIslandGather::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStatsWildIslandGather::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStatsWildIslandGather::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserStatsWildIslandGather::userid() const {
  // @@protoc_insertion_point(field_get:db.UserStatsWildIslandGather.userid)
  return userid_.Get();
}
inline void UserStatsWildIslandGather::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserStatsWildIslandGather.userid)
}
#if LANG_CXX11
inline void UserStatsWildIslandGather::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserStatsWildIslandGather.userid)
}
#endif
inline void UserStatsWildIslandGather::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserStatsWildIslandGather.userid)
}
inline void UserStatsWildIslandGather::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserStatsWildIslandGather.userid)
}
inline ::std::string* UserStatsWildIslandGather::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserStatsWildIslandGather.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserStatsWildIslandGather::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserStatsWildIslandGather.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserStatsWildIslandGather::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserStatsWildIslandGather.userid)
}
inline ::std::string* UserStatsWildIslandGather::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserStatsWildIslandGather.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserStatsWildIslandGather::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserStatsWildIslandGather.userid)
}

// required uint64 gatherid = 2;
inline bool UserStatsWildIslandGather::has_gatherid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStatsWildIslandGather::set_has_gatherid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStatsWildIslandGather::clear_has_gatherid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStatsWildIslandGather::clear_gatherid() {
  gatherid_ = GOOGLE_ULONGLONG(0);
  clear_has_gatherid();
}
inline ::google::protobuf::uint64 UserStatsWildIslandGather::gatherid() const {
  // @@protoc_insertion_point(field_get:db.UserStatsWildIslandGather.gatherid)
  return gatherid_;
}
inline void UserStatsWildIslandGather::set_gatherid(::google::protobuf::uint64 value) {
  set_has_gatherid();
  gatherid_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsWildIslandGather.gatherid)
}

// required int32 gather_type = 3;
inline bool UserStatsWildIslandGather::has_gather_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserStatsWildIslandGather::set_has_gather_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserStatsWildIslandGather::clear_has_gather_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserStatsWildIslandGather::clear_gather_type() {
  gather_type_ = 0;
  clear_has_gather_type();
}
inline ::google::protobuf::int32 UserStatsWildIslandGather::gather_type() const {
  // @@protoc_insertion_point(field_get:db.UserStatsWildIslandGather.gather_type)
  return gather_type_;
}
inline void UserStatsWildIslandGather::set_gather_type(::google::protobuf::int32 value) {
  set_has_gather_type();
  gather_type_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsWildIslandGather.gather_type)
}

// required uint64 gather_resid = 4;
inline bool UserStatsWildIslandGather::has_gather_resid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserStatsWildIslandGather::set_has_gather_resid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserStatsWildIslandGather::clear_has_gather_resid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserStatsWildIslandGather::clear_gather_resid() {
  gather_resid_ = GOOGLE_ULONGLONG(0);
  clear_has_gather_resid();
}
inline ::google::protobuf::uint64 UserStatsWildIslandGather::gather_resid() const {
  // @@protoc_insertion_point(field_get:db.UserStatsWildIslandGather.gather_resid)
  return gather_resid_;
}
inline void UserStatsWildIslandGather::set_gather_resid(::google::protobuf::uint64 value) {
  set_has_gather_resid();
  gather_resid_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsWildIslandGather.gather_resid)
}

// required float gather_resnum = 5;
inline bool UserStatsWildIslandGather::has_gather_resnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserStatsWildIslandGather::set_has_gather_resnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserStatsWildIslandGather::clear_has_gather_resnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserStatsWildIslandGather::clear_gather_resnum() {
  gather_resnum_ = 0;
  clear_has_gather_resnum();
}
inline float UserStatsWildIslandGather::gather_resnum() const {
  // @@protoc_insertion_point(field_get:db.UserStatsWildIslandGather.gather_resnum)
  return gather_resnum_;
}
inline void UserStatsWildIslandGather::set_gather_resnum(float value) {
  set_has_gather_resnum();
  gather_resnum_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsWildIslandGather.gather_resnum)
}

// required int32 gather_state = 6;
inline bool UserStatsWildIslandGather::has_gather_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserStatsWildIslandGather::set_has_gather_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserStatsWildIslandGather::clear_has_gather_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserStatsWildIslandGather::clear_gather_state() {
  gather_state_ = 0;
  clear_has_gather_state();
}
inline ::google::protobuf::int32 UserStatsWildIslandGather::gather_state() const {
  // @@protoc_insertion_point(field_get:db.UserStatsWildIslandGather.gather_state)
  return gather_state_;
}
inline void UserStatsWildIslandGather::set_gather_state(::google::protobuf::int32 value) {
  set_has_gather_state();
  gather_state_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsWildIslandGather.gather_state)
}

// required sfixed64 gather_starttime = 7;
inline bool UserStatsWildIslandGather::has_gather_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserStatsWildIslandGather::set_has_gather_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserStatsWildIslandGather::clear_has_gather_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserStatsWildIslandGather::clear_gather_starttime() {
  gather_starttime_ = GOOGLE_LONGLONG(0);
  clear_has_gather_starttime();
}
inline ::google::protobuf::int64 UserStatsWildIslandGather::gather_starttime() const {
  // @@protoc_insertion_point(field_get:db.UserStatsWildIslandGather.gather_starttime)
  return gather_starttime_;
}
inline void UserStatsWildIslandGather::set_gather_starttime(::google::protobuf::int64 value) {
  set_has_gather_starttime();
  gather_starttime_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsWildIslandGather.gather_starttime)
}

// required sfixed64 optime = 11;
inline bool UserStatsWildIslandGather::has_optime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserStatsWildIslandGather::set_has_optime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserStatsWildIslandGather::clear_has_optime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserStatsWildIslandGather::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 UserStatsWildIslandGather::optime() const {
  // @@protoc_insertion_point(field_get:db.UserStatsWildIslandGather.optime)
  return optime_;
}
inline void UserStatsWildIslandGather::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.UserStatsWildIslandGather.optime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_StoredProcMap_2eproto
