// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcHunt.proto

#include "StoredProcHunt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_StoredProcHunt_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHunt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHuntFishingTool;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHunt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHuntGround;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHunt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHuntPrey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcHunt_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHuntTrap;
}  // namespace protobuf_StoredProcHunt_2eproto
namespace db {
class ConfigHuntGroundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHuntGround>
      _instance;
} _ConfigHuntGround_default_instance_;
class ConfigHuntGroundListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHuntGroundList>
      _instance;
} _ConfigHuntGroundList_default_instance_;
class ConfigHuntTrapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHuntTrap>
      _instance;
} _ConfigHuntTrap_default_instance_;
class ConfigHuntTrapListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHuntTrapList>
      _instance;
} _ConfigHuntTrapList_default_instance_;
class ConfigHuntFishingToolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHuntFishingTool>
      _instance;
} _ConfigHuntFishingTool_default_instance_;
class ConfigHuntFishingToolListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHuntFishingToolList>
      _instance;
} _ConfigHuntFishingToolList_default_instance_;
class ConfigHuntPreyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHuntPrey>
      _instance;
} _ConfigHuntPrey_default_instance_;
class ConfigHuntPreyListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigHuntPreyList>
      _instance;
} _ConfigHuntPreyList_default_instance_;
class UserHuntGroundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHuntGround>
      _instance;
} _UserHuntGround_default_instance_;
class UserHuntPreyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserHuntPrey>
      _instance;
} _UserHuntPrey_default_instance_;
}  // namespace db
namespace protobuf_StoredProcHunt_2eproto {
static void InitDefaultsConfigHuntGround() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHuntGround_default_instance_;
    new (ptr) ::db::ConfigHuntGround();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHuntGround::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHuntGround =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigHuntGround}, {}};

static void InitDefaultsConfigHuntGroundList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHuntGroundList_default_instance_;
    new (ptr) ::db::ConfigHuntGroundList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHuntGroundList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigHuntGroundList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigHuntGroundList}, {
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntGround.base,}};

static void InitDefaultsConfigHuntTrap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHuntTrap_default_instance_;
    new (ptr) ::db::ConfigHuntTrap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHuntTrap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHuntTrap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigHuntTrap}, {}};

static void InitDefaultsConfigHuntTrapList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHuntTrapList_default_instance_;
    new (ptr) ::db::ConfigHuntTrapList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHuntTrapList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigHuntTrapList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigHuntTrapList}, {
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntTrap.base,}};

static void InitDefaultsConfigHuntFishingTool() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHuntFishingTool_default_instance_;
    new (ptr) ::db::ConfigHuntFishingTool();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHuntFishingTool::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHuntFishingTool =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigHuntFishingTool}, {}};

static void InitDefaultsConfigHuntFishingToolList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHuntFishingToolList_default_instance_;
    new (ptr) ::db::ConfigHuntFishingToolList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHuntFishingToolList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigHuntFishingToolList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigHuntFishingToolList}, {
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntFishingTool.base,}};

static void InitDefaultsConfigHuntPrey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHuntPrey_default_instance_;
    new (ptr) ::db::ConfigHuntPrey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHuntPrey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigHuntPrey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigHuntPrey}, {}};

static void InitDefaultsConfigHuntPreyList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigHuntPreyList_default_instance_;
    new (ptr) ::db::ConfigHuntPreyList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigHuntPreyList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigHuntPreyList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigHuntPreyList}, {
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntPrey.base,}};

static void InitDefaultsUserHuntGround() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserHuntGround_default_instance_;
    new (ptr) ::db::UserHuntGround();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserHuntGround::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserHuntGround =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserHuntGround}, {}};

static void InitDefaultsUserHuntPrey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserHuntPrey_default_instance_;
    new (ptr) ::db::UserHuntPrey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserHuntPrey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserHuntPrey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserHuntPrey}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHuntGround.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHuntGroundList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHuntTrap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHuntTrapList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHuntFishingTool.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHuntFishingToolList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHuntPrey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigHuntPreyList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHuntGround.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserHuntPrey.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGround, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGround, groundid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGround, ground_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGround, prey_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGround, prey_hunt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGround, prey_refresh_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGround, hunt_recover_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGroundList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGroundList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntGroundList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrap, trapid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrap, size_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrap, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrap, target_group_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrapList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntTrapList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingTool, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingTool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingTool, toolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingTool, tool_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingTool, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingTool, target_group_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingToolList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingToolList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntFishingToolList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, groundid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, prey_typeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, prey_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, size_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, refresh_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPrey, drop_list_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPreyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPreyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigHuntPreyList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, groundid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, hunt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, hunt_recover_starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, hunt_recover_cd_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, hunt_recover_add_ratio1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, hunt_recover_add_ratio2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, hunt_recover_add_ratio3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntGround, growtime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, groundid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, prey_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, cfgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, cfg_groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, seqno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, task_menuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserHuntPrey, optime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::db::ConfigHuntGround)},
  { 17, 23, sizeof(::db::ConfigHuntGroundList)},
  { 24, 33, sizeof(::db::ConfigHuntTrap)},
  { 37, 43, sizeof(::db::ConfigHuntTrapList)},
  { 44, 53, sizeof(::db::ConfigHuntFishingTool)},
  { 57, 63, sizeof(::db::ConfigHuntFishingToolList)},
  { 64, 76, sizeof(::db::ConfigHuntPrey)},
  { 83, 89, sizeof(::db::ConfigHuntPreyList)},
  { 90, 105, sizeof(::db::UserHuntGround)},
  { 115, 131, sizeof(::db::UserHuntPrey)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHuntGround_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHuntGroundList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHuntTrap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHuntTrapList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHuntFishingTool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHuntFishingToolList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHuntPrey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigHuntPreyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserHuntGround_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserHuntPrey_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "StoredProcHunt.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024StoredProcHunt.proto\022\002db\"\230\001\n\020ConfigHun"
      "tGround\022\020\n\010groundid\030\001 \002(\004\022\023\n\013ground_type"
      "\030\002 \002(\005\022\020\n\010prey_num\030\003 \002(\005\022\025\n\rprey_hunt_nu"
      "m\030\004 \002(\005\022\031\n\021prey_refresh_time\030\005 \002(\005\022\031\n\021hu"
      "nt_recover_time\030\006 \002(\005\":\n\024ConfigHuntGroun"
      "dList\022\"\n\004list\030\001 \003(\0132\024.db.ConfigHuntGroun"
      "d\"Y\n\016ConfigHuntTrap\022\016\n\006trapid\030\001 \002(\005\022\021\n\ts"
      "ize_type\030\002 \002(\005\022\016\n\006itemid\030\003 \002(\004\022\024\n\014target"
      "_group\030\004 \002(\014\"6\n\022ConfigHuntTrapList\022 \n\004li"
      "st\030\001 \003(\0132\022.db.ConfigHuntTrap\"`\n\025ConfigHu"
      "ntFishingTool\022\016\n\006toolid\030\001 \002(\005\022\021\n\ttool_ty"
      "pe\030\002 \002(\005\022\016\n\006itemid\030\003 \002(\004\022\024\n\014target_group"
      "\030\004 \002(\014\"D\n\031ConfigHuntFishingToolList\022\'\n\004l"
      "ist\030\001 \003(\0132\031.db.ConfigHuntFishingTool\"\226\001\n"
      "\016ConfigHuntPrey\022\020\n\010groundid\030\001 \002(\004\022\023\n\013pre"
      "y_typeid\030\002 \002(\004\022\021\n\tprey_type\030\003 \002(\005\022\021\n\tsiz"
      "e_type\030\004 \002(\005\022\025\n\rrefresh_ratio\030\005 \002(\002\022\r\n\005l"
      "evel\030\006 \002(\005\022\021\n\tdrop_list\030\007 \002(\014\"6\n\022ConfigH"
      "untPreyList\022 \n\004list\030\001 \003(\0132\022.db.ConfigHun"
      "tPrey\"\211\002\n\016UserHuntGround\022\016\n\006userid\030\001 \002(\014"
      "\022\020\n\010groundid\030\002 \002(\004\022\r\n\005state\030\003 \002(\005\022\020\n\010hun"
      "t_num\030\004 \002(\005\022\036\n\026hunt_recover_starttime\030\005 "
      "\002(\020\022\037\n\027hunt_recover_cd_seconds\030\006 \002(\005\022\037\n\027"
      "hunt_recover_add_ratio1\030\007 \002(\002\022\037\n\027hunt_re"
      "cover_add_ratio2\030\010 \002(\002\022\037\n\027hunt_recover_a"
      "dd_ratio3\030\t \002(\002\022\020\n\010growtime\030\013 \002(\020\"\307\001\n\014Us"
      "erHuntPrey\022\016\n\006userid\030\001 \002(\014\022\020\n\010groundid\030\002"
      " \002(\004\022\n\n\002sn\030\003 \002(\005\022\021\n\tprey_type\030\004 \002(\005\022\r\n\005c"
      "fgid\030\005 \002(\004\022\023\n\013cfg_groupid\030\006 \002(\005\022\r\n\005state"
      "\030\007 \002(\005\022\017\n\007seconds\030\010 \002(\005\022\r\n\005seqno\030\t \002(\005\022\023"
      "\n\013task_menuid\030\013 \002(\005\022\016\n\006optime\030\025 \002(\020B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StoredProcHunt.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StoredProcHunt_2eproto
namespace db {

// ===================================================================

void ConfigHuntGround::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHuntGround::kGroundidFieldNumber;
const int ConfigHuntGround::kGroundTypeFieldNumber;
const int ConfigHuntGround::kPreyNumFieldNumber;
const int ConfigHuntGround::kPreyHuntNumFieldNumber;
const int ConfigHuntGround::kPreyRefreshTimeFieldNumber;
const int ConfigHuntGround::kHuntRecoverTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHuntGround::ConfigHuntGround()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntGround.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHuntGround)
}
ConfigHuntGround::ConfigHuntGround(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntGround.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHuntGround)
}
ConfigHuntGround::ConfigHuntGround(const ConfigHuntGround& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&groundid_, &from.groundid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hunt_recover_time_) -
    reinterpret_cast<char*>(&groundid_)) + sizeof(hunt_recover_time_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigHuntGround)
}

void ConfigHuntGround::SharedCtor() {
  ::memset(&groundid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hunt_recover_time_) -
      reinterpret_cast<char*>(&groundid_)) + sizeof(hunt_recover_time_));
}

ConfigHuntGround::~ConfigHuntGround() {
  // @@protoc_insertion_point(destructor:db.ConfigHuntGround)
  SharedDtor();
}

void ConfigHuntGround::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigHuntGround::ArenaDtor(void* object) {
  ConfigHuntGround* _this = reinterpret_cast< ConfigHuntGround* >(object);
  (void)_this;
}
void ConfigHuntGround::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHuntGround::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHuntGround::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHuntGround& ConfigHuntGround::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntGround.base);
  return *internal_default_instance();
}


void ConfigHuntGround::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHuntGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&groundid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hunt_recover_time_) -
        reinterpret_cast<char*>(&groundid_)) + sizeof(hunt_recover_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHuntGround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHuntGround)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groundid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groundid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groundid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ground_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ground_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ground_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 prey_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_prey_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prey_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 prey_hunt_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_prey_hunt_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prey_hunt_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 prey_refresh_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_prey_refresh_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prey_refresh_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hunt_recover_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_hunt_recover_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunt_recover_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHuntGround)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHuntGround)
  return false;
#undef DO_
}

void ConfigHuntGround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHuntGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groundid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groundid(), output);
  }

  // required int32 ground_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ground_type(), output);
  }

  // required int32 prey_num = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prey_num(), output);
  }

  // required int32 prey_hunt_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prey_hunt_num(), output);
  }

  // required int32 prey_refresh_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prey_refresh_time(), output);
  }

  // required int32 hunt_recover_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hunt_recover_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHuntGround)
}

::google::protobuf::uint8* ConfigHuntGround::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHuntGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groundid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groundid(), target);
  }

  // required int32 ground_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ground_type(), target);
  }

  // required int32 prey_num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prey_num(), target);
  }

  // required int32 prey_hunt_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prey_hunt_num(), target);
  }

  // required int32 prey_refresh_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prey_refresh_time(), target);
  }

  // required int32 hunt_recover_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hunt_recover_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHuntGround)
  return target;
}

size_t ConfigHuntGround::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigHuntGround)
  size_t total_size = 0;

  if (has_groundid()) {
    // required uint64 groundid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());
  }

  if (has_ground_type()) {
    // required int32 ground_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ground_type());
  }

  if (has_prey_num()) {
    // required int32 prey_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_num());
  }

  if (has_prey_hunt_num()) {
    // required int32 prey_hunt_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_hunt_num());
  }

  if (has_prey_refresh_time()) {
    // required int32 prey_refresh_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_refresh_time());
  }

  if (has_hunt_recover_time()) {
    // required int32 hunt_recover_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hunt_recover_time());
  }

  return total_size;
}
size_t ConfigHuntGround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHuntGround)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 groundid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());

    // required int32 ground_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ground_type());

    // required int32 prey_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_num());

    // required int32 prey_hunt_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_hunt_num());

    // required int32 prey_refresh_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_refresh_time());

    // required int32 hunt_recover_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hunt_recover_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHuntGround::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHuntGround)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHuntGround* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHuntGround>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHuntGround)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHuntGround)
    MergeFrom(*source);
  }
}

void ConfigHuntGround::MergeFrom(const ConfigHuntGround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHuntGround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      groundid_ = from.groundid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ground_type_ = from.ground_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      prey_num_ = from.prey_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      prey_hunt_num_ = from.prey_hunt_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      prey_refresh_time_ = from.prey_refresh_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      hunt_recover_time_ = from.hunt_recover_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigHuntGround::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHuntGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHuntGround::CopyFrom(const ConfigHuntGround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHuntGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHuntGround::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void ConfigHuntGround::Swap(ConfigHuntGround* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHuntGround* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHuntGround::UnsafeArenaSwap(ConfigHuntGround* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHuntGround::InternalSwap(ConfigHuntGround* other) {
  using std::swap;
  swap(groundid_, other->groundid_);
  swap(ground_type_, other->ground_type_);
  swap(prey_num_, other->prey_num_);
  swap(prey_hunt_num_, other->prey_hunt_num_);
  swap(prey_refresh_time_, other->prey_refresh_time_);
  swap(hunt_recover_time_, other->hunt_recover_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHuntGround::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHuntGroundList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHuntGroundList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHuntGroundList::ConfigHuntGroundList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntGroundList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHuntGroundList)
}
ConfigHuntGroundList::ConfigHuntGroundList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntGroundList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHuntGroundList)
}
ConfigHuntGroundList::ConfigHuntGroundList(const ConfigHuntGroundList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigHuntGroundList)
}

void ConfigHuntGroundList::SharedCtor() {
}

ConfigHuntGroundList::~ConfigHuntGroundList() {
  // @@protoc_insertion_point(destructor:db.ConfigHuntGroundList)
  SharedDtor();
}

void ConfigHuntGroundList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigHuntGroundList::ArenaDtor(void* object) {
  ConfigHuntGroundList* _this = reinterpret_cast< ConfigHuntGroundList* >(object);
  (void)_this;
}
void ConfigHuntGroundList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHuntGroundList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHuntGroundList::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHuntGroundList& ConfigHuntGroundList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntGroundList.base);
  return *internal_default_instance();
}


void ConfigHuntGroundList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHuntGroundList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHuntGroundList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHuntGroundList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigHuntGround list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHuntGroundList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHuntGroundList)
  return false;
#undef DO_
}

void ConfigHuntGroundList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHuntGroundList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHuntGround list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHuntGroundList)
}

::google::protobuf::uint8* ConfigHuntGroundList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHuntGroundList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHuntGround list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHuntGroundList)
  return target;
}

size_t ConfigHuntGroundList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHuntGroundList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigHuntGround list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHuntGroundList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHuntGroundList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHuntGroundList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHuntGroundList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHuntGroundList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHuntGroundList)
    MergeFrom(*source);
  }
}

void ConfigHuntGroundList::MergeFrom(const ConfigHuntGroundList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHuntGroundList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigHuntGroundList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHuntGroundList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHuntGroundList::CopyFrom(const ConfigHuntGroundList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHuntGroundList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHuntGroundList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigHuntGroundList::Swap(ConfigHuntGroundList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHuntGroundList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHuntGroundList::UnsafeArenaSwap(ConfigHuntGroundList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHuntGroundList::InternalSwap(ConfigHuntGroundList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHuntGroundList::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHuntTrap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHuntTrap::kTrapidFieldNumber;
const int ConfigHuntTrap::kSizeTypeFieldNumber;
const int ConfigHuntTrap::kItemidFieldNumber;
const int ConfigHuntTrap::kTargetGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHuntTrap::ConfigHuntTrap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntTrap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHuntTrap)
}
ConfigHuntTrap::ConfigHuntTrap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntTrap.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHuntTrap)
}
ConfigHuntTrap::ConfigHuntTrap(const ConfigHuntTrap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_group()) {
    target_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_group(),
      GetArenaNoVirtual());
  }
  ::memcpy(&trapid_, &from.trapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&trapid_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigHuntTrap)
}

void ConfigHuntTrap::SharedCtor() {
  target_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&trapid_)) + sizeof(itemid_));
}

ConfigHuntTrap::~ConfigHuntTrap() {
  // @@protoc_insertion_point(destructor:db.ConfigHuntTrap)
  SharedDtor();
}

void ConfigHuntTrap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  target_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigHuntTrap::ArenaDtor(void* object) {
  ConfigHuntTrap* _this = reinterpret_cast< ConfigHuntTrap* >(object);
  (void)_this;
}
void ConfigHuntTrap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHuntTrap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHuntTrap::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHuntTrap& ConfigHuntTrap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntTrap.base);
  return *internal_default_instance();
}


void ConfigHuntTrap::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHuntTrap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    target_group_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&trapid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&trapid_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHuntTrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHuntTrap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trapid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trapid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trapid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 itemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes target_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHuntTrap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHuntTrap)
  return false;
#undef DO_
}

void ConfigHuntTrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHuntTrap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trapid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trapid(), output);
  }

  // required int32 size_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size_type(), output);
  }

  // required uint64 itemid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->itemid(), output);
  }

  // required bytes target_group = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->target_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHuntTrap)
}

::google::protobuf::uint8* ConfigHuntTrap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHuntTrap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 trapid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trapid(), target);
  }

  // required int32 size_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size_type(), target);
  }

  // required uint64 itemid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->itemid(), target);
  }

  // required bytes target_group = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->target_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHuntTrap)
  return target;
}

size_t ConfigHuntTrap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigHuntTrap)
  size_t total_size = 0;

  if (has_target_group()) {
    // required bytes target_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->target_group());
  }

  if (has_trapid()) {
    // required int32 trapid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trapid());
  }

  if (has_size_type()) {
    // required int32 size_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_type());
  }

  if (has_itemid()) {
    // required uint64 itemid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());
  }

  return total_size;
}
size_t ConfigHuntTrap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHuntTrap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes target_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->target_group());

    // required int32 trapid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trapid());

    // required int32 size_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_type());

    // required uint64 itemid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHuntTrap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHuntTrap)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHuntTrap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHuntTrap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHuntTrap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHuntTrap)
    MergeFrom(*source);
  }
}

void ConfigHuntTrap::MergeFrom(const ConfigHuntTrap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHuntTrap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_target_group(from.target_group());
    }
    if (cached_has_bits & 0x00000002u) {
      trapid_ = from.trapid_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_type_ = from.size_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigHuntTrap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHuntTrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHuntTrap::CopyFrom(const ConfigHuntTrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHuntTrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHuntTrap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigHuntTrap::Swap(ConfigHuntTrap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHuntTrap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHuntTrap::UnsafeArenaSwap(ConfigHuntTrap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHuntTrap::InternalSwap(ConfigHuntTrap* other) {
  using std::swap;
  target_group_.Swap(&other->target_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trapid_, other->trapid_);
  swap(size_type_, other->size_type_);
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHuntTrap::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHuntTrapList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHuntTrapList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHuntTrapList::ConfigHuntTrapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntTrapList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHuntTrapList)
}
ConfigHuntTrapList::ConfigHuntTrapList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntTrapList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHuntTrapList)
}
ConfigHuntTrapList::ConfigHuntTrapList(const ConfigHuntTrapList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigHuntTrapList)
}

void ConfigHuntTrapList::SharedCtor() {
}

ConfigHuntTrapList::~ConfigHuntTrapList() {
  // @@protoc_insertion_point(destructor:db.ConfigHuntTrapList)
  SharedDtor();
}

void ConfigHuntTrapList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigHuntTrapList::ArenaDtor(void* object) {
  ConfigHuntTrapList* _this = reinterpret_cast< ConfigHuntTrapList* >(object);
  (void)_this;
}
void ConfigHuntTrapList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHuntTrapList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHuntTrapList::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHuntTrapList& ConfigHuntTrapList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntTrapList.base);
  return *internal_default_instance();
}


void ConfigHuntTrapList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHuntTrapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHuntTrapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHuntTrapList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigHuntTrap list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHuntTrapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHuntTrapList)
  return false;
#undef DO_
}

void ConfigHuntTrapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHuntTrapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHuntTrap list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHuntTrapList)
}

::google::protobuf::uint8* ConfigHuntTrapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHuntTrapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHuntTrap list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHuntTrapList)
  return target;
}

size_t ConfigHuntTrapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHuntTrapList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigHuntTrap list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHuntTrapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHuntTrapList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHuntTrapList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHuntTrapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHuntTrapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHuntTrapList)
    MergeFrom(*source);
  }
}

void ConfigHuntTrapList::MergeFrom(const ConfigHuntTrapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHuntTrapList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigHuntTrapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHuntTrapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHuntTrapList::CopyFrom(const ConfigHuntTrapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHuntTrapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHuntTrapList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigHuntTrapList::Swap(ConfigHuntTrapList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHuntTrapList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHuntTrapList::UnsafeArenaSwap(ConfigHuntTrapList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHuntTrapList::InternalSwap(ConfigHuntTrapList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHuntTrapList::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHuntFishingTool::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHuntFishingTool::kToolidFieldNumber;
const int ConfigHuntFishingTool::kToolTypeFieldNumber;
const int ConfigHuntFishingTool::kItemidFieldNumber;
const int ConfigHuntFishingTool::kTargetGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHuntFishingTool::ConfigHuntFishingTool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntFishingTool.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHuntFishingTool)
}
ConfigHuntFishingTool::ConfigHuntFishingTool(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntFishingTool.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHuntFishingTool)
}
ConfigHuntFishingTool::ConfigHuntFishingTool(const ConfigHuntFishingTool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_group()) {
    target_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_group(),
      GetArenaNoVirtual());
  }
  ::memcpy(&toolid_, &from.toolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&toolid_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigHuntFishingTool)
}

void ConfigHuntFishingTool::SharedCtor() {
  target_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&toolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&toolid_)) + sizeof(itemid_));
}

ConfigHuntFishingTool::~ConfigHuntFishingTool() {
  // @@protoc_insertion_point(destructor:db.ConfigHuntFishingTool)
  SharedDtor();
}

void ConfigHuntFishingTool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  target_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigHuntFishingTool::ArenaDtor(void* object) {
  ConfigHuntFishingTool* _this = reinterpret_cast< ConfigHuntFishingTool* >(object);
  (void)_this;
}
void ConfigHuntFishingTool::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHuntFishingTool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHuntFishingTool::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHuntFishingTool& ConfigHuntFishingTool::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntFishingTool.base);
  return *internal_default_instance();
}


void ConfigHuntFishingTool::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHuntFishingTool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    target_group_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&toolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&toolid_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHuntFishingTool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHuntFishingTool)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 toolid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_toolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tool_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tool_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 itemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes target_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHuntFishingTool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHuntFishingTool)
  return false;
#undef DO_
}

void ConfigHuntFishingTool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHuntFishingTool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 toolid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->toolid(), output);
  }

  // required int32 tool_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tool_type(), output);
  }

  // required uint64 itemid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->itemid(), output);
  }

  // required bytes target_group = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->target_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHuntFishingTool)
}

::google::protobuf::uint8* ConfigHuntFishingTool::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHuntFishingTool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 toolid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->toolid(), target);
  }

  // required int32 tool_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tool_type(), target);
  }

  // required uint64 itemid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->itemid(), target);
  }

  // required bytes target_group = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->target_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHuntFishingTool)
  return target;
}

size_t ConfigHuntFishingTool::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigHuntFishingTool)
  size_t total_size = 0;

  if (has_target_group()) {
    // required bytes target_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->target_group());
  }

  if (has_toolid()) {
    // required int32 toolid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toolid());
  }

  if (has_tool_type()) {
    // required int32 tool_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tool_type());
  }

  if (has_itemid()) {
    // required uint64 itemid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());
  }

  return total_size;
}
size_t ConfigHuntFishingTool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHuntFishingTool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes target_group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->target_group());

    // required int32 toolid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toolid());

    // required int32 tool_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tool_type());

    // required uint64 itemid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHuntFishingTool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHuntFishingTool)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHuntFishingTool* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHuntFishingTool>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHuntFishingTool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHuntFishingTool)
    MergeFrom(*source);
  }
}

void ConfigHuntFishingTool::MergeFrom(const ConfigHuntFishingTool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHuntFishingTool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_target_group(from.target_group());
    }
    if (cached_has_bits & 0x00000002u) {
      toolid_ = from.toolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tool_type_ = from.tool_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigHuntFishingTool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHuntFishingTool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHuntFishingTool::CopyFrom(const ConfigHuntFishingTool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHuntFishingTool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHuntFishingTool::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConfigHuntFishingTool::Swap(ConfigHuntFishingTool* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHuntFishingTool* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHuntFishingTool::UnsafeArenaSwap(ConfigHuntFishingTool* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHuntFishingTool::InternalSwap(ConfigHuntFishingTool* other) {
  using std::swap;
  target_group_.Swap(&other->target_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(toolid_, other->toolid_);
  swap(tool_type_, other->tool_type_);
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHuntFishingTool::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHuntFishingToolList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHuntFishingToolList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHuntFishingToolList::ConfigHuntFishingToolList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntFishingToolList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHuntFishingToolList)
}
ConfigHuntFishingToolList::ConfigHuntFishingToolList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntFishingToolList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHuntFishingToolList)
}
ConfigHuntFishingToolList::ConfigHuntFishingToolList(const ConfigHuntFishingToolList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigHuntFishingToolList)
}

void ConfigHuntFishingToolList::SharedCtor() {
}

ConfigHuntFishingToolList::~ConfigHuntFishingToolList() {
  // @@protoc_insertion_point(destructor:db.ConfigHuntFishingToolList)
  SharedDtor();
}

void ConfigHuntFishingToolList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigHuntFishingToolList::ArenaDtor(void* object) {
  ConfigHuntFishingToolList* _this = reinterpret_cast< ConfigHuntFishingToolList* >(object);
  (void)_this;
}
void ConfigHuntFishingToolList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHuntFishingToolList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHuntFishingToolList::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHuntFishingToolList& ConfigHuntFishingToolList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntFishingToolList.base);
  return *internal_default_instance();
}


void ConfigHuntFishingToolList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHuntFishingToolList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHuntFishingToolList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHuntFishingToolList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigHuntFishingTool list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHuntFishingToolList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHuntFishingToolList)
  return false;
#undef DO_
}

void ConfigHuntFishingToolList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHuntFishingToolList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHuntFishingTool list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHuntFishingToolList)
}

::google::protobuf::uint8* ConfigHuntFishingToolList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHuntFishingToolList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHuntFishingTool list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHuntFishingToolList)
  return target;
}

size_t ConfigHuntFishingToolList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHuntFishingToolList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigHuntFishingTool list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHuntFishingToolList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHuntFishingToolList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHuntFishingToolList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHuntFishingToolList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHuntFishingToolList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHuntFishingToolList)
    MergeFrom(*source);
  }
}

void ConfigHuntFishingToolList::MergeFrom(const ConfigHuntFishingToolList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHuntFishingToolList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigHuntFishingToolList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHuntFishingToolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHuntFishingToolList::CopyFrom(const ConfigHuntFishingToolList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHuntFishingToolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHuntFishingToolList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigHuntFishingToolList::Swap(ConfigHuntFishingToolList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHuntFishingToolList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHuntFishingToolList::UnsafeArenaSwap(ConfigHuntFishingToolList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHuntFishingToolList::InternalSwap(ConfigHuntFishingToolList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHuntFishingToolList::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHuntPrey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHuntPrey::kGroundidFieldNumber;
const int ConfigHuntPrey::kPreyTypeidFieldNumber;
const int ConfigHuntPrey::kPreyTypeFieldNumber;
const int ConfigHuntPrey::kSizeTypeFieldNumber;
const int ConfigHuntPrey::kRefreshRatioFieldNumber;
const int ConfigHuntPrey::kLevelFieldNumber;
const int ConfigHuntPrey::kDropListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHuntPrey::ConfigHuntPrey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntPrey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHuntPrey)
}
ConfigHuntPrey::ConfigHuntPrey(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntPrey.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHuntPrey)
}
ConfigHuntPrey::ConfigHuntPrey(const ConfigHuntPrey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  drop_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_drop_list()) {
    drop_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_list(),
      GetArenaNoVirtual());
  }
  ::memcpy(&groundid_, &from.groundid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&groundid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigHuntPrey)
}

void ConfigHuntPrey::SharedCtor() {
  drop_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&groundid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&groundid_)) + sizeof(level_));
}

ConfigHuntPrey::~ConfigHuntPrey() {
  // @@protoc_insertion_point(destructor:db.ConfigHuntPrey)
  SharedDtor();
}

void ConfigHuntPrey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  drop_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigHuntPrey::ArenaDtor(void* object) {
  ConfigHuntPrey* _this = reinterpret_cast< ConfigHuntPrey* >(object);
  (void)_this;
}
void ConfigHuntPrey::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHuntPrey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHuntPrey::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHuntPrey& ConfigHuntPrey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntPrey.base);
  return *internal_default_instance();
}


void ConfigHuntPrey::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    drop_list_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 126u) {
    ::memset(&groundid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&groundid_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHuntPrey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHuntPrey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groundid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groundid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groundid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 prey_typeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_prey_typeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prey_typeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 prey_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_prey_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prey_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_size_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float refresh_ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_refresh_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &refresh_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes drop_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drop_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHuntPrey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHuntPrey)
  return false;
#undef DO_
}

void ConfigHuntPrey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groundid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groundid(), output);
  }

  // required uint64 prey_typeid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->prey_typeid(), output);
  }

  // required int32 prey_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prey_type(), output);
  }

  // required int32 size_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size_type(), output);
  }

  // required float refresh_ratio = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->refresh_ratio(), output);
  }

  // required int32 level = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required bytes drop_list = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->drop_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHuntPrey)
}

::google::protobuf::uint8* ConfigHuntPrey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groundid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groundid(), target);
  }

  // required uint64 prey_typeid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->prey_typeid(), target);
  }

  // required int32 prey_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prey_type(), target);
  }

  // required int32 size_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size_type(), target);
  }

  // required float refresh_ratio = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->refresh_ratio(), target);
  }

  // required int32 level = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required bytes drop_list = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->drop_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHuntPrey)
  return target;
}

size_t ConfigHuntPrey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigHuntPrey)
  size_t total_size = 0;

  if (has_drop_list()) {
    // required bytes drop_list = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_list());
  }

  if (has_groundid()) {
    // required uint64 groundid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());
  }

  if (has_prey_typeid()) {
    // required uint64 prey_typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prey_typeid());
  }

  if (has_prey_type()) {
    // required int32 prey_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_type());
  }

  if (has_size_type()) {
    // required int32 size_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_type());
  }

  if (has_refresh_ratio()) {
    // required float refresh_ratio = 5;
    total_size += 1 + 4;
  }

  if (has_level()) {
    // required int32 level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t ConfigHuntPrey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHuntPrey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes drop_list = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->drop_list());

    // required uint64 groundid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());

    // required uint64 prey_typeid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prey_typeid());

    // required int32 prey_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_type());

    // required int32 size_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_type());

    // required float refresh_ratio = 5;
    total_size += 1 + 4;

    // required int32 level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHuntPrey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHuntPrey)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHuntPrey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHuntPrey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHuntPrey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHuntPrey)
    MergeFrom(*source);
  }
}

void ConfigHuntPrey::MergeFrom(const ConfigHuntPrey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHuntPrey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_drop_list(from.drop_list());
    }
    if (cached_has_bits & 0x00000002u) {
      groundid_ = from.groundid_;
    }
    if (cached_has_bits & 0x00000004u) {
      prey_typeid_ = from.prey_typeid_;
    }
    if (cached_has_bits & 0x00000008u) {
      prey_type_ = from.prey_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_type_ = from.size_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      refresh_ratio_ = from.refresh_ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigHuntPrey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHuntPrey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHuntPrey::CopyFrom(const ConfigHuntPrey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHuntPrey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHuntPrey::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void ConfigHuntPrey::Swap(ConfigHuntPrey* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHuntPrey* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHuntPrey::UnsafeArenaSwap(ConfigHuntPrey* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHuntPrey::InternalSwap(ConfigHuntPrey* other) {
  using std::swap;
  drop_list_.Swap(&other->drop_list_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(groundid_, other->groundid_);
  swap(prey_typeid_, other->prey_typeid_);
  swap(prey_type_, other->prey_type_);
  swap(size_type_, other->size_type_);
  swap(refresh_ratio_, other->refresh_ratio_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHuntPrey::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigHuntPreyList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigHuntPreyList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigHuntPreyList::ConfigHuntPreyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntPreyList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigHuntPreyList)
}
ConfigHuntPreyList::ConfigHuntPreyList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntPreyList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigHuntPreyList)
}
ConfigHuntPreyList::ConfigHuntPreyList(const ConfigHuntPreyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigHuntPreyList)
}

void ConfigHuntPreyList::SharedCtor() {
}

ConfigHuntPreyList::~ConfigHuntPreyList() {
  // @@protoc_insertion_point(destructor:db.ConfigHuntPreyList)
  SharedDtor();
}

void ConfigHuntPreyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigHuntPreyList::ArenaDtor(void* object) {
  ConfigHuntPreyList* _this = reinterpret_cast< ConfigHuntPreyList* >(object);
  (void)_this;
}
void ConfigHuntPreyList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigHuntPreyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigHuntPreyList::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigHuntPreyList& ConfigHuntPreyList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_ConfigHuntPreyList.base);
  return *internal_default_instance();
}


void ConfigHuntPreyList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigHuntPreyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigHuntPreyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigHuntPreyList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigHuntPrey list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigHuntPreyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigHuntPreyList)
  return false;
#undef DO_
}

void ConfigHuntPreyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigHuntPreyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHuntPrey list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigHuntPreyList)
}

::google::protobuf::uint8* ConfigHuntPreyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigHuntPreyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigHuntPrey list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigHuntPreyList)
  return target;
}

size_t ConfigHuntPreyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigHuntPreyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigHuntPrey list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigHuntPreyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigHuntPreyList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigHuntPreyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigHuntPreyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigHuntPreyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigHuntPreyList)
    MergeFrom(*source);
  }
}

void ConfigHuntPreyList::MergeFrom(const ConfigHuntPreyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigHuntPreyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigHuntPreyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigHuntPreyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigHuntPreyList::CopyFrom(const ConfigHuntPreyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigHuntPreyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigHuntPreyList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigHuntPreyList::Swap(ConfigHuntPreyList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigHuntPreyList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigHuntPreyList::UnsafeArenaSwap(ConfigHuntPreyList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigHuntPreyList::InternalSwap(ConfigHuntPreyList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigHuntPreyList::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHuntGround::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHuntGround::kUseridFieldNumber;
const int UserHuntGround::kGroundidFieldNumber;
const int UserHuntGround::kStateFieldNumber;
const int UserHuntGround::kHuntNumFieldNumber;
const int UserHuntGround::kHuntRecoverStarttimeFieldNumber;
const int UserHuntGround::kHuntRecoverCdSecondsFieldNumber;
const int UserHuntGround::kHuntRecoverAddRatio1FieldNumber;
const int UserHuntGround::kHuntRecoverAddRatio2FieldNumber;
const int UserHuntGround::kHuntRecoverAddRatio3FieldNumber;
const int UserHuntGround::kGrowtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHuntGround::UserHuntGround()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_UserHuntGround.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserHuntGround)
}
UserHuntGround::UserHuntGround(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_UserHuntGround.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserHuntGround)
}
UserHuntGround::UserHuntGround(const UserHuntGround& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&groundid_, &from.groundid_,
    static_cast<size_t>(reinterpret_cast<char*>(&growtime_) -
    reinterpret_cast<char*>(&groundid_)) + sizeof(growtime_));
  // @@protoc_insertion_point(copy_constructor:db.UserHuntGround)
}

void UserHuntGround::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&groundid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&growtime_) -
      reinterpret_cast<char*>(&groundid_)) + sizeof(growtime_));
}

UserHuntGround::~UserHuntGround() {
  // @@protoc_insertion_point(destructor:db.UserHuntGround)
  SharedDtor();
}

void UserHuntGround::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserHuntGround::ArenaDtor(void* object) {
  UserHuntGround* _this = reinterpret_cast< UserHuntGround* >(object);
  (void)_this;
}
void UserHuntGround::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHuntGround::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHuntGround::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHuntGround& UserHuntGround::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_UserHuntGround.base);
  return *internal_default_instance();
}


void UserHuntGround::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserHuntGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&groundid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hunt_recover_add_ratio2_) -
        reinterpret_cast<char*>(&groundid_)) + sizeof(hunt_recover_add_ratio2_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&hunt_recover_add_ratio3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&growtime_) -
        reinterpret_cast<char*>(&hunt_recover_add_ratio3_)) + sizeof(growtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHuntGround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserHuntGround)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 groundid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_groundid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groundid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hunt_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hunt_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunt_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 hunt_recover_starttime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_hunt_recover_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &hunt_recover_starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hunt_recover_cd_seconds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_hunt_recover_cd_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hunt_recover_cd_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float hunt_recover_add_ratio1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_hunt_recover_add_ratio1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hunt_recover_add_ratio1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float hunt_recover_add_ratio2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_hunt_recover_add_ratio2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hunt_recover_add_ratio2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float hunt_recover_add_ratio3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_hunt_recover_add_ratio3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hunt_recover_add_ratio3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 growtime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_growtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &growtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserHuntGround)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserHuntGround)
  return false;
#undef DO_
}

void UserHuntGround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserHuntGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required uint64 groundid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groundid(), output);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // required int32 hunt_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hunt_num(), output);
  }

  // required sfixed64 hunt_recover_starttime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->hunt_recover_starttime(), output);
  }

  // required int32 hunt_recover_cd_seconds = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hunt_recover_cd_seconds(), output);
  }

  // required float hunt_recover_add_ratio1 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->hunt_recover_add_ratio1(), output);
  }

  // required float hunt_recover_add_ratio2 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->hunt_recover_add_ratio2(), output);
  }

  // required float hunt_recover_add_ratio3 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hunt_recover_add_ratio3(), output);
  }

  // required sfixed64 growtime = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->growtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserHuntGround)
}

::google::protobuf::uint8* UserHuntGround::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserHuntGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required uint64 groundid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groundid(), target);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // required int32 hunt_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hunt_num(), target);
  }

  // required sfixed64 hunt_recover_starttime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->hunt_recover_starttime(), target);
  }

  // required int32 hunt_recover_cd_seconds = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hunt_recover_cd_seconds(), target);
  }

  // required float hunt_recover_add_ratio1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->hunt_recover_add_ratio1(), target);
  }

  // required float hunt_recover_add_ratio2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->hunt_recover_add_ratio2(), target);
  }

  // required float hunt_recover_add_ratio3 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hunt_recover_add_ratio3(), target);
  }

  // required sfixed64 growtime = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->growtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserHuntGround)
  return target;
}

size_t UserHuntGround::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserHuntGround)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_groundid()) {
    // required uint64 groundid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());
  }

  if (has_state()) {
    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_hunt_num()) {
    // required int32 hunt_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hunt_num());
  }

  if (has_hunt_recover_starttime()) {
    // required sfixed64 hunt_recover_starttime = 5;
    total_size += 1 + 8;
  }

  if (has_hunt_recover_cd_seconds()) {
    // required int32 hunt_recover_cd_seconds = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hunt_recover_cd_seconds());
  }

  if (has_hunt_recover_add_ratio1()) {
    // required float hunt_recover_add_ratio1 = 7;
    total_size += 1 + 4;
  }

  if (has_hunt_recover_add_ratio2()) {
    // required float hunt_recover_add_ratio2 = 8;
    total_size += 1 + 4;
  }

  if (has_hunt_recover_add_ratio3()) {
    // required float hunt_recover_add_ratio3 = 9;
    total_size += 1 + 4;
  }

  if (has_growtime()) {
    // required sfixed64 growtime = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UserHuntGround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserHuntGround)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required uint64 groundid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());

    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 hunt_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hunt_num());

    // required sfixed64 hunt_recover_starttime = 5;
    total_size += 1 + 8;

    // required int32 hunt_recover_cd_seconds = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hunt_recover_cd_seconds());

    // required float hunt_recover_add_ratio1 = 7;
    total_size += 1 + 4;

    // required float hunt_recover_add_ratio2 = 8;
    total_size += 1 + 4;

    // required float hunt_recover_add_ratio3 = 9;
    total_size += 1 + 4;

    // required sfixed64 growtime = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHuntGround::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserHuntGround)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHuntGround* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHuntGround>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserHuntGround)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserHuntGround)
    MergeFrom(*source);
  }
}

void UserHuntGround::MergeFrom(const UserHuntGround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserHuntGround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      groundid_ = from.groundid_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      hunt_num_ = from.hunt_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      hunt_recover_starttime_ = from.hunt_recover_starttime_;
    }
    if (cached_has_bits & 0x00000020u) {
      hunt_recover_cd_seconds_ = from.hunt_recover_cd_seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      hunt_recover_add_ratio1_ = from.hunt_recover_add_ratio1_;
    }
    if (cached_has_bits & 0x00000080u) {
      hunt_recover_add_ratio2_ = from.hunt_recover_add_ratio2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      hunt_recover_add_ratio3_ = from.hunt_recover_add_ratio3_;
    }
    if (cached_has_bits & 0x00000200u) {
      growtime_ = from.growtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHuntGround::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserHuntGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHuntGround::CopyFrom(const UserHuntGround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserHuntGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHuntGround::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void UserHuntGround::Swap(UserHuntGround* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHuntGround* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHuntGround::UnsafeArenaSwap(UserHuntGround* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHuntGround::InternalSwap(UserHuntGround* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(groundid_, other->groundid_);
  swap(state_, other->state_);
  swap(hunt_num_, other->hunt_num_);
  swap(hunt_recover_starttime_, other->hunt_recover_starttime_);
  swap(hunt_recover_cd_seconds_, other->hunt_recover_cd_seconds_);
  swap(hunt_recover_add_ratio1_, other->hunt_recover_add_ratio1_);
  swap(hunt_recover_add_ratio2_, other->hunt_recover_add_ratio2_);
  swap(hunt_recover_add_ratio3_, other->hunt_recover_add_ratio3_);
  swap(growtime_, other->growtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHuntGround::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserHuntPrey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHuntPrey::kUseridFieldNumber;
const int UserHuntPrey::kGroundidFieldNumber;
const int UserHuntPrey::kSnFieldNumber;
const int UserHuntPrey::kPreyTypeFieldNumber;
const int UserHuntPrey::kCfgidFieldNumber;
const int UserHuntPrey::kCfgGroupidFieldNumber;
const int UserHuntPrey::kStateFieldNumber;
const int UserHuntPrey::kSecondsFieldNumber;
const int UserHuntPrey::kSeqnoFieldNumber;
const int UserHuntPrey::kTaskMenuidFieldNumber;
const int UserHuntPrey::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHuntPrey::UserHuntPrey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcHunt_2eproto::scc_info_UserHuntPrey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserHuntPrey)
}
UserHuntPrey::UserHuntPrey(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_UserHuntPrey.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserHuntPrey)
}
UserHuntPrey::UserHuntPrey(const UserHuntPrey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&groundid_, &from.groundid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&groundid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.UserHuntPrey)
}

void UserHuntPrey::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&groundid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&groundid_)) + sizeof(optime_));
}

UserHuntPrey::~UserHuntPrey() {
  // @@protoc_insertion_point(destructor:db.UserHuntPrey)
  SharedDtor();
}

void UserHuntPrey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserHuntPrey::ArenaDtor(void* object) {
  UserHuntPrey* _this = reinterpret_cast< UserHuntPrey* >(object);
  (void)_this;
}
void UserHuntPrey::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserHuntPrey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserHuntPrey::descriptor() {
  ::protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHuntPrey& UserHuntPrey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcHunt_2eproto::scc_info_UserHuntPrey.base);
  return *internal_default_instance();
}


void UserHuntPrey::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserHuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&groundid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&groundid_)) + sizeof(seconds_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&seqno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&seqno_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHuntPrey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserHuntPrey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 groundid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_groundid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groundid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 prey_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_prey_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prey_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 cfgid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cfgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cfg_groupid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cfg_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seconds = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seqno = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_seqno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 task_menuid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_task_menuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_menuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserHuntPrey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserHuntPrey)
  return false;
#undef DO_
}

void UserHuntPrey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserHuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required uint64 groundid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groundid(), output);
  }

  // required int32 sn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sn(), output);
  }

  // required int32 prey_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prey_type(), output);
  }

  // required uint64 cfgid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cfgid(), output);
  }

  // required int32 cfg_groupid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cfg_groupid(), output);
  }

  // required int32 state = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // required int32 seconds = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seconds(), output);
  }

  // required int32 seqno = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seqno(), output);
  }

  // required int32 task_menuid = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->task_menuid(), output);
  }

  // required sfixed64 optime = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserHuntPrey)
}

::google::protobuf::uint8* UserHuntPrey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserHuntPrey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required uint64 groundid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groundid(), target);
  }

  // required int32 sn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sn(), target);
  }

  // required int32 prey_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prey_type(), target);
  }

  // required uint64 cfgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cfgid(), target);
  }

  // required int32 cfg_groupid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cfg_groupid(), target);
  }

  // required int32 state = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // required int32 seconds = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seconds(), target);
  }

  // required int32 seqno = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seqno(), target);
  }

  // required int32 task_menuid = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->task_menuid(), target);
  }

  // required sfixed64 optime = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserHuntPrey)
  return target;
}

size_t UserHuntPrey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserHuntPrey)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_groundid()) {
    // required uint64 groundid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());
  }

  if (has_sn()) {
    // required int32 sn = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());
  }

  if (has_prey_type()) {
    // required int32 prey_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_type());
  }

  if (has_cfgid()) {
    // required uint64 cfgid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cfgid());
  }

  if (has_cfg_groupid()) {
    // required int32 cfg_groupid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cfg_groupid());
  }

  if (has_state()) {
    // required int32 state = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_seconds()) {
    // required int32 seconds = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());
  }

  if (has_seqno()) {
    // required int32 seqno = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seqno());
  }

  if (has_task_menuid()) {
    // required int32 task_menuid = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_menuid());
  }

  if (has_optime()) {
    // required sfixed64 optime = 21;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t UserHuntPrey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserHuntPrey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required uint64 groundid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groundid());

    // required int32 sn = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());

    // required int32 prey_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prey_type());

    // required uint64 cfgid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cfgid());

    // required int32 cfg_groupid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cfg_groupid());

    // required int32 state = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 seconds = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds());

    // required int32 seqno = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seqno());

    // required int32 task_menuid = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_menuid());

    // required sfixed64 optime = 21;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHuntPrey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserHuntPrey)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHuntPrey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHuntPrey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserHuntPrey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserHuntPrey)
    MergeFrom(*source);
  }
}

void UserHuntPrey::MergeFrom(const UserHuntPrey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserHuntPrey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      groundid_ = from.groundid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sn_ = from.sn_;
    }
    if (cached_has_bits & 0x00000008u) {
      prey_type_ = from.prey_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      cfgid_ = from.cfgid_;
    }
    if (cached_has_bits & 0x00000020u) {
      cfg_groupid_ = from.cfg_groupid_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      seqno_ = from.seqno_;
    }
    if (cached_has_bits & 0x00000200u) {
      task_menuid_ = from.task_menuid_;
    }
    if (cached_has_bits & 0x00000400u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHuntPrey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserHuntPrey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHuntPrey::CopyFrom(const UserHuntPrey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserHuntPrey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHuntPrey::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void UserHuntPrey::Swap(UserHuntPrey* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserHuntPrey* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserHuntPrey::UnsafeArenaSwap(UserHuntPrey* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserHuntPrey::InternalSwap(UserHuntPrey* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(groundid_, other->groundid_);
  swap(sn_, other->sn_);
  swap(prey_type_, other->prey_type_);
  swap(cfgid_, other->cfgid_);
  swap(cfg_groupid_, other->cfg_groupid_);
  swap(state_, other->state_);
  swap(seconds_, other->seconds_);
  swap(seqno_, other->seqno_);
  swap(task_menuid_, other->task_menuid_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserHuntPrey::GetMetadata() const {
  protobuf_StoredProcHunt_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcHunt_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHuntGround* Arena::CreateMaybeMessage< ::db::ConfigHuntGround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHuntGround >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHuntGroundList* Arena::CreateMaybeMessage< ::db::ConfigHuntGroundList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHuntGroundList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHuntTrap* Arena::CreateMaybeMessage< ::db::ConfigHuntTrap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHuntTrap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHuntTrapList* Arena::CreateMaybeMessage< ::db::ConfigHuntTrapList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHuntTrapList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHuntFishingTool* Arena::CreateMaybeMessage< ::db::ConfigHuntFishingTool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHuntFishingTool >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHuntFishingToolList* Arena::CreateMaybeMessage< ::db::ConfigHuntFishingToolList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHuntFishingToolList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHuntPrey* Arena::CreateMaybeMessage< ::db::ConfigHuntPrey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHuntPrey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigHuntPreyList* Arena::CreateMaybeMessage< ::db::ConfigHuntPreyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigHuntPreyList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserHuntGround* Arena::CreateMaybeMessage< ::db::UserHuntGround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserHuntGround >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserHuntPrey* Arena::CreateMaybeMessage< ::db::UserHuntPrey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserHuntPrey >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
