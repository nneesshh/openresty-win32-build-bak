// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcMap.proto

#include "StoredProcMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_StoredProcMap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMapArea;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMapEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPirateShip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigWildIsland;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WildIslandDetail;
}  // namespace protobuf_StoredProcMap_2eproto
namespace db {
class ConfigMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMap>
      _instance;
} _ConfigMap_default_instance_;
class ConfigMapListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMapList>
      _instance;
} _ConfigMapList_default_instance_;
class ConfigMapAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMapArea>
      _instance;
} _ConfigMapArea_default_instance_;
class ConfigMapAreaListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMapAreaList>
      _instance;
} _ConfigMapAreaList_default_instance_;
class ConfigMapEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMapEntry>
      _instance;
} _ConfigMapEntry_default_instance_;
class ConfigMapEntryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigMapEntryList>
      _instance;
} _ConfigMapEntryList_default_instance_;
class ConfigPirateShipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPirateShip>
      _instance;
} _ConfigPirateShip_default_instance_;
class ConfigPirateShipListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigPirateShipList>
      _instance;
} _ConfigPirateShipList_default_instance_;
class ConfigWildIslandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigWildIsland>
      _instance;
} _ConfigWildIsland_default_instance_;
class ConfigWildIslandListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigWildIslandList>
      _instance;
} _ConfigWildIslandList_default_instance_;
class UserMapAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserMapArea>
      _instance;
} _UserMapArea_default_instance_;
class UserMapEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserMapEntry>
      _instance;
} _UserMapEntry_default_instance_;
class UserFarmSkillExpGenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFarmSkillExpGen>
      _instance;
} _UserFarmSkillExpGen_default_instance_;
class UserStatsMapEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserStatsMapEntry>
      _instance;
} _UserStatsMapEntry_default_instance_;
class UserPirateShipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserPirateShip>
      _instance;
} _UserPirateShip_default_instance_;
class WildIslandDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WildIslandDetail>
      _instance;
} _WildIslandDetail_default_instance_;
class GameGroupWildIslandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameGroupWildIsland>
      _instance;
} _GameGroupWildIsland_default_instance_;
class GameGroupMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameGroupMember>
      _instance;
} _GameGroupMember_default_instance_;
class UserWildIslandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserWildIsland>
      _instance;
} _UserWildIsland_default_instance_;
class UserStatsWildIslandGatherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserStatsWildIslandGather>
      _instance;
} _UserStatsWildIslandGather_default_instance_;
}  // namespace db
namespace protobuf_StoredProcMap_2eproto {
static void InitDefaultsConfigMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMap_default_instance_;
    new (ptr) ::db::ConfigMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigMap}, {}};

static void InitDefaultsConfigMapList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMapList_default_instance_;
    new (ptr) ::db::ConfigMapList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMapList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigMapList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigMapList}, {
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMap.base,}};

static void InitDefaultsConfigMapArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMapArea_default_instance_;
    new (ptr) ::db::ConfigMapArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMapArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMapArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigMapArea}, {}};

static void InitDefaultsConfigMapAreaList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMapAreaList_default_instance_;
    new (ptr) ::db::ConfigMapAreaList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMapAreaList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigMapAreaList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigMapAreaList}, {
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMapArea.base,}};

static void InitDefaultsConfigMapEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMapEntry_default_instance_;
    new (ptr) ::db::ConfigMapEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMapEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigMapEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigMapEntry}, {}};

static void InitDefaultsConfigMapEntryList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigMapEntryList_default_instance_;
    new (ptr) ::db::ConfigMapEntryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigMapEntryList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigMapEntryList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigMapEntryList}, {
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMapEntry.base,}};

static void InitDefaultsConfigPirateShip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPirateShip_default_instance_;
    new (ptr) ::db::ConfigPirateShip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPirateShip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigPirateShip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigPirateShip}, {}};

static void InitDefaultsConfigPirateShipList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigPirateShipList_default_instance_;
    new (ptr) ::db::ConfigPirateShipList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigPirateShipList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigPirateShipList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigPirateShipList}, {
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigPirateShip.base,}};

static void InitDefaultsConfigWildIsland() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigWildIsland_default_instance_;
    new (ptr) ::db::ConfigWildIsland();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigWildIsland::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigWildIsland =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigWildIsland}, {}};

static void InitDefaultsConfigWildIslandList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigWildIslandList_default_instance_;
    new (ptr) ::db::ConfigWildIslandList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigWildIslandList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigWildIslandList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigWildIslandList}, {
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigWildIsland.base,}};

static void InitDefaultsUserMapArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserMapArea_default_instance_;
    new (ptr) ::db::UserMapArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserMapArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserMapArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserMapArea}, {}};

static void InitDefaultsUserMapEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserMapEntry_default_instance_;
    new (ptr) ::db::UserMapEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserMapEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserMapEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserMapEntry}, {}};

static void InitDefaultsUserFarmSkillExpGen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserFarmSkillExpGen_default_instance_;
    new (ptr) ::db::UserFarmSkillExpGen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserFarmSkillExpGen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserFarmSkillExpGen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserFarmSkillExpGen}, {}};

static void InitDefaultsUserStatsMapEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserStatsMapEntry_default_instance_;
    new (ptr) ::db::UserStatsMapEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserStatsMapEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserStatsMapEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserStatsMapEntry}, {}};

static void InitDefaultsUserPirateShip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserPirateShip_default_instance_;
    new (ptr) ::db::UserPirateShip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserPirateShip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserPirateShip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserPirateShip}, {}};

static void InitDefaultsWildIslandDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_WildIslandDetail_default_instance_;
    new (ptr) ::db::WildIslandDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::WildIslandDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WildIslandDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWildIslandDetail}, {}};

static void InitDefaultsGameGroupWildIsland() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_GameGroupWildIsland_default_instance_;
    new (ptr) ::db::GameGroupWildIsland();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::GameGroupWildIsland::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameGroupWildIsland =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameGroupWildIsland}, {
      &protobuf_StoredProcMap_2eproto::scc_info_WildIslandDetail.base,}};

static void InitDefaultsGameGroupMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_GameGroupMember_default_instance_;
    new (ptr) ::db::GameGroupMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::GameGroupMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameGroupMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameGroupMember}, {}};

static void InitDefaultsUserWildIsland() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserWildIsland_default_instance_;
    new (ptr) ::db::UserWildIsland();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserWildIsland::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserWildIsland =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserWildIsland}, {
      &protobuf_StoredProcMap_2eproto::scc_info_WildIslandDetail.base,}};

static void InitDefaultsUserStatsWildIslandGather() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserStatsWildIslandGather_default_instance_;
    new (ptr) ::db::UserStatsWildIslandGather();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserStatsWildIslandGather::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserStatsWildIslandGather =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserStatsWildIslandGather}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMapList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMapArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMapAreaList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMapEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigMapEntryList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPirateShip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigPirateShipList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigWildIsland.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigWildIslandList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserMapArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserMapEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserFarmSkillExpGen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserStatsMapEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserPirateShip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WildIslandDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameGroupWildIsland.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameGroupMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserWildIsland.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserStatsWildIslandGather.base);
}

::google::protobuf::Metadata file_level_metadata[20];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, group_island_total_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, group_island_user_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, group_island_user_capacity_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, group_island_occupy_protect_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, group_island_occupy_num_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, gather_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, gather_aggregate_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, harvest_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, farm_skill_exp_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, pvp_loot_num_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, pvp_loot_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, pvp_loot_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, player_ship_refresh_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMap, player_ship_navigate_timeout_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  13,
  14,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, areaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, tile_blockid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, is_lock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, cond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, unlock_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, unlock_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, unlock_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapArea, front_lock_),
  4,
  0,
  5,
  6,
  1,
  7,
  8,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapAreaList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapAreaList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapAreaList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, island_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, island_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, need_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, easter_egg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntry, first_easter_egg_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  2,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntryList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigMapEntryList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShip, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShip, refreshtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShip, fight_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShip, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShip, vitality_cost_),
  2,
  0,
  3,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShipList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShipList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigPirateShipList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, islandid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, gather_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, workshop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, workshop_store_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, workshop_gather_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, monster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIsland, statue_),
  5,
  0,
  1,
  6,
  7,
  8,
  2,
  9,
  10,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigWildIslandList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapArea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapArea, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapArea, areaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapArea, area_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapArea, optime_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, discover_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, block_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, stage_hint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, stage_hint2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, stage_monsterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, stage_refreshtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, ownership_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, ownership_storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, ownership_gather_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, ownership_gather_add_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, ownership_gather_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, ownership_deadline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, ownership_farm_skill_exp_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, optime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, ownerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, refresh_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserMapEntry, data_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  14,
  15,
  16,
  17,
  18,
  12,
  19,
  20,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFarmSkillExpGen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFarmSkillExpGen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFarmSkillExpGen, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFarmSkillExpGen, cardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFarmSkillExpGen, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserFarmSkillExpGen, exp_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, wild_island_gather_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, wild_island_harvest_time1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, wild_island_harvest_time2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, wild_island_harvest_time3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, wild_island_harvest_time4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, group_island_refreshtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, player_ship_entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, player_ship_refresh_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsMapEntry, player_ship_navigate_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPirateShip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPirateShip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPirateShip, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPirateShip, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPirateShip, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPirateShip, refreshtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPirateShip, fight_num_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, island_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, occupier_ticketid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, occupy_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, refreshtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, workshop_grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, workshop_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, workshop_base_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, workshop_storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, workshop_gather_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, workshop_gather_add_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, workshop_gather_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::WildIslandDetail, optime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupWildIsland, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupWildIsland, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupWildIsland, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupWildIsland, detail_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupMember, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupMember, memberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupMember, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GameGroupMember, optime_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserWildIsland, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserWildIsland, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserWildIsland, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserWildIsland, detail_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, gatherid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, gather_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, gather_resid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, gather_resnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, gather_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, gather_starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsWildIslandGather, optime_),
  0,
  1,
  3,
  2,
  4,
  6,
  5,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::db::ConfigMap)},
  { 35, 41, sizeof(::db::ConfigMapList)},
  { 42, 56, sizeof(::db::ConfigMapArea)},
  { 65, 71, sizeof(::db::ConfigMapAreaList)},
  { 72, 87, sizeof(::db::ConfigMapEntry)},
  { 97, 103, sizeof(::db::ConfigMapEntryList)},
  { 104, 114, sizeof(::db::ConfigPirateShip)},
  { 119, 125, sizeof(::db::ConfigPirateShipList)},
  { 126, 142, sizeof(::db::ConfigWildIsland)},
  { 153, 159, sizeof(::db::ConfigWildIslandList)},
  { 160, 169, sizeof(::db::UserMapArea)},
  { 173, 199, sizeof(::db::UserMapEntry)},
  { 220, 229, sizeof(::db::UserFarmSkillExpGen)},
  { 233, 248, sizeof(::db::UserStatsMapEntry)},
  { 258, 268, sizeof(::db::UserPirateShip)},
  { 273, 291, sizeof(::db::WildIslandDetail)},
  { 304, 311, sizeof(::db::GameGroupWildIsland)},
  { 313, 322, sizeof(::db::GameGroupMember)},
  { 326, 333, sizeof(::db::UserWildIsland)},
  { 335, 348, sizeof(::db::UserStatsWildIslandGather)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMapList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMapArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMapAreaList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigMapEntryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPirateShip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigPirateShipList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigWildIsland_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigWildIslandList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserMapArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserFarmSkillExpGen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserStatsMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserPirateShip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_WildIslandDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_GameGroupWildIsland_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_GameGroupMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserWildIsland_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserStatsWildIslandGather_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "StoredProcMap.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023StoredProcMap.proto\022\002db\"\335\003\n\tConfigMap\022"
      "\r\n\005level\030\001 \002(\005\022\036\n\026group_island_total_num"
      "\030\002 \002(\005\022\"\n\032group_island_user_capacity\030\003 \002"
      "(\005\022&\n\036group_island_user_capacity_add\030\004 \002"
      "(\005\022(\n group_island_occupy_protect_time\030\005"
      " \002(\005\022#\n\033group_island_occupy_num_max\030\006 \002("
      "\005\022\025\n\rgather_period\030\013 \002(\005\022\037\n\027gather_aggre"
      "gate_period\030\014 \002(\005\022\030\n\020harvest_interval\030\r "
      "\002(\005\022\035\n\025farm_skill_exp_period\030\016 \002(\005\022\030\n\020pv"
      "p_loot_num_max\030\025 \002(\005\022\030\n\020pvp_loot_timeout"
      "\030\026 \002(\005\022\026\n\016pvp_loot_ratio\030\027 \002(\002\022#\n\033player"
      "_ship_refresh_timeout\030\037 \002(\005\022$\n\034player_sh"
      "ip_navigate_timeout\030  \002(\005\",\n\rConfigMapLi"
      "st\022\033\n\004list\030\001 \003(\0132\r.db.ConfigMap\"\270\001\n\rConf"
      "igMapArea\022\016\n\006areaid\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022"
      "\024\n\014tile_blockid\030\003 \002(\005\022\017\n\007is_lock\030\004 \002(\005\022\014"
      "\n\004cond\030\005 \002(\014\022\023\n\013unlock_type\030\006 \002(\005\022\023\n\013unl"
      "ock_cost\030\007 \002(\005\022\026\n\016unlock_entries\030\010 \002(\014\022\022"
      "\n\nfront_lock\030\t \002(\014\"4\n\021ConfigMapAreaList\022"
      "\037\n\004list\030\001 \003(\0132\021.db.ConfigMapArea\"\303\001\n\016Con"
      "figMapEntry\022\017\n\007entryid\030\001 \002(\004\022\014\n\004name\030\002 \002"
      "(\014\022\014\n\004desc\030\003 \002(\014\022\023\n\013island_type\030\004 \002(\005\022\021\n"
      "\tisland_id\030\005 \002(\005\022\020\n\010need_key\030\006 \002(\005\022\r\n\005po"
      "s_x\030\007 \002(\005\022\r\n\005pos_y\030\010 \002(\005\022\022\n\neaster_egg\030\t"
      " \002(\014\022\030\n\020first_easter_egg\030\n \002(\005\"6\n\022Config"
      "MapEntryList\022 \n\004list\030\001 \003(\0132\022.db.ConfigMa"
      "pEntry\"p\n\020ConfigPirateShip\022\014\n\004type\030\001 \002(\005"
      "\022\023\n\013refreshtime\030\002 \002(\014\022\021\n\tfight_num\030\003 \002(\005"
      "\022\017\n\007entries\030\013 \002(\014\022\025\n\rvitality_cost\030\014 \002(\005"
      "\":\n\024ConfigPirateShipList\022\"\n\004list\030\001 \003(\0132\024"
      ".db.ConfigPirateShip\"\336\001\n\020ConfigWildIslan"
      "d\022\020\n\010islandid\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\014\n\004des"
      "c\030\003 \002(\014\022\014\n\004type\030\004 \002(\005\022\r\n\005level\030\005 \002(\005\022\023\n\013"
      "gather_type\030\006 \002(\005\022\020\n\010workshop\030\013 \002(\014\022\032\n\022w"
      "orkshop_store_num\030\014 \002(\005\022\033\n\023workshop_gath"
      "er_num\030\r \002(\005\022\017\n\007monster\030\025 \002(\014\022\016\n\006statue\030"
      "\026 \002(\014\":\n\024ConfigWildIslandList\022\"\n\004list\030\001 "
      "\003(\0132\024.db.ConfigWildIsland\"Q\n\013UserMapArea"
      "\022\016\n\006userid\030\001 \002(\014\022\016\n\006areaid\030\002 \002(\005\022\022\n\narea"
      "_state\030\003 \002(\005\022\016\n\006optime\030\013 \002(\020\"\366\003\n\014UserMap"
      "Entry\022\016\n\006userid\030\001 \002(\014\022\017\n\007entryid\030\002 \002(\004\022\025"
      "\n\rdiscover_flag\030\003 \002(\005\022\022\n\nblock_flag\030\004 \002("
      "\005\022\017\n\007groupid\030\005 \002(\004\022\022\n\nstage_hint\030\013 \002(\005\022\023"
      "\n\013stage_hint2\030\014 \002(\005\022\027\n\017stage_monsterid\030\r"
      " \002(\004\022\031\n\021stage_refreshtime\030\016 \002(\020\022\026\n\016owner"
      "ship_flag\030\025 \002(\005\022\031\n\021ownership_storage\030\026 \002"
      "(\002\022 \n\030ownership_gather_per_min\030\027 \002(\002\022\"\n\032"
      "ownership_gather_add_ratio\030\030 \002(\002\022\035\n\025owne"
      "rship_gather_time\030\031 \002(\020\022\032\n\022ownership_dea"
      "dline\030\032 \002(\020\022%\n\035ownership_farm_skill_exp_"
      "time\030\033 \002(\020\022\016\n\006optime\030\037 \002(\020\022\014\n\004type\030( \001(\005"
      "\022\017\n\007ownerid\030) \001(\003\022\024\n\014refresh_time\030* \001(\020\022"
      "\014\n\004data\030+ \001(\014\"S\n\023UserFarmSkillExpGen\022\016\n\006"
      "userid\030\001 \002(\014\022\016\n\006cardid\030\002 \002(\005\022\017\n\007entryid\030"
      "\003 \002(\004\022\013\n\003exp\030\004 \002(\002\"\324\002\n\021UserStatsMapEntry"
      "\022\016\n\006userid\030\001 \002(\014\022\037\n\027wild_island_gather_t"
      "ime\030\013 \002(\020\022!\n\031wild_island_harvest_time1\030\014"
      " \002(\020\022!\n\031wild_island_harvest_time2\030\r \002(\020\022"
      "!\n\031wild_island_harvest_time3\030\016 \002(\020\022!\n\031wi"
      "ld_island_harvest_time4\030\017 \002(\020\022 \n\030group_i"
      "sland_refreshtime\030\025 \002(\020\022\033\n\023player_ship_e"
      "ntryid\030\037 \002(\004\022 \n\030player_ship_refresh_time"
      "\030  \002(\020\022!\n\031player_ship_navigate_time\030! \002("
      "\020\"g\n\016UserPirateShip\022\016\n\006userid\030\001 \002(\014\022\014\n\004t"
      "ype\030\002 \002(\005\022\017\n\007entryid\030\013 \002(\004\022\023\n\013refreshtim"
      "e\030\014 \002(\020\022\021\n\tfight_num\030\r \002(\005\"\327\002\n\020WildIslan"
      "dDetail\022\017\n\007entryid\030\001 \002(\004\022\024\n\014island_state"
      "\030\002 \002(\005\022\031\n\021occupier_ticketid\030\003 \002(\005\022\023\n\013occ"
      "upy_time\030\004 \002(\020\022\023\n\013refreshtime\030\005 \002(\020\022\026\n\016w"
      "orkshop_grade\030\013 \002(\005\022\026\n\016workshop_state\030\014 "
      "\002(\005\022\033\n\023workshop_base_ratio\030\r \002(\002\022\030\n\020work"
      "shop_storage\030\016 \002(\002\022\037\n\027workshop_gather_pe"
      "r_min\030\017 \002(\002\022!\n\031workshop_gather_add_ratio"
      "\030\020 \002(\002\022\034\n\024workshop_gather_time\030\021 \002(\020\022\016\n\006"
      "optime\030\025 \002(\020\"L\n\023GameGroupWildIsland\022\017\n\007g"
      "roupid\030\001 \002(\004\022$\n\006detail\030\002 \002(\0132\024.db.WildIs"
      "landDetail\"S\n\017GameGroupMember\022\017\n\007groupid"
      "\030\001 \002(\004\022\020\n\010memberid\030\002 \002(\005\022\r\n\005state\030\003 \002(\005\022"
      "\016\n\006optime\030\004 \002(\020\"F\n\016UserWildIsland\022\016\n\006use"
      "rid\030\001 \002(\014\022$\n\006detail\030\002 \002(\0132\024.db.WildIslan"
      "dDetail\"\277\001\n\031UserStatsWildIslandGather\022\016\n"
      "\006userid\030\001 \002(\014\022\020\n\010gatherid\030\002 \002(\004\022\023\n\013gathe"
      "r_type\030\003 \002(\005\022\024\n\014gather_resid\030\004 \002(\004\022\025\n\rga"
      "ther_resnum\030\005 \002(\002\022\024\n\014gather_state\030\006 \002(\005\022"
      "\030\n\020gather_starttime\030\007 \002(\020\022\016\n\006optime\030\013 \002("
      "\020B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StoredProcMap.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StoredProcMap_2eproto
namespace db {

// ===================================================================

void ConfigMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMap::kLevelFieldNumber;
const int ConfigMap::kGroupIslandTotalNumFieldNumber;
const int ConfigMap::kGroupIslandUserCapacityFieldNumber;
const int ConfigMap::kGroupIslandUserCapacityAddFieldNumber;
const int ConfigMap::kGroupIslandOccupyProtectTimeFieldNumber;
const int ConfigMap::kGroupIslandOccupyNumMaxFieldNumber;
const int ConfigMap::kGatherPeriodFieldNumber;
const int ConfigMap::kGatherAggregatePeriodFieldNumber;
const int ConfigMap::kHarvestIntervalFieldNumber;
const int ConfigMap::kFarmSkillExpPeriodFieldNumber;
const int ConfigMap::kPvpLootNumMaxFieldNumber;
const int ConfigMap::kPvpLootTimeoutFieldNumber;
const int ConfigMap::kPvpLootRatioFieldNumber;
const int ConfigMap::kPlayerShipRefreshTimeoutFieldNumber;
const int ConfigMap::kPlayerShipNavigateTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMap::ConfigMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMap)
}
ConfigMap::ConfigMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMap.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMap)
}
ConfigMap::ConfigMap(const ConfigMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_ship_refresh_timeout_) -
    reinterpret_cast<char*>(&level_)) + sizeof(player_ship_refresh_timeout_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigMap)
}

void ConfigMap::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_ship_refresh_timeout_) -
      reinterpret_cast<char*>(&level_)) + sizeof(player_ship_refresh_timeout_));
}

ConfigMap::~ConfigMap() {
  // @@protoc_insertion_point(destructor:db.ConfigMap)
  SharedDtor();
}

void ConfigMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigMap::ArenaDtor(void* object) {
  ConfigMap* _this = reinterpret_cast< ConfigMap* >(object);
  (void)_this;
}
void ConfigMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMap::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMap& ConfigMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMap.base);
  return *internal_default_instance();
}


void ConfigMap::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gather_aggregate_period_) -
        reinterpret_cast<char*>(&level_)) + sizeof(gather_aggregate_period_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&harvest_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_ship_refresh_timeout_) -
        reinterpret_cast<char*>(&harvest_interval_)) + sizeof(player_ship_refresh_timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 group_island_total_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_group_island_total_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_island_total_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 group_island_user_capacity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_group_island_user_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_island_user_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 group_island_user_capacity_add = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_group_island_user_capacity_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_island_user_capacity_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 group_island_occupy_protect_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_group_island_occupy_protect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_island_occupy_protect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 group_island_occupy_num_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_group_island_occupy_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_island_occupy_num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gather_period = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_gather_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gather_aggregate_period = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_gather_aggregate_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_aggregate_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 harvest_interval = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_harvest_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harvest_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 farm_skill_exp_period = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_farm_skill_exp_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &farm_skill_exp_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pvp_loot_num_max = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_pvp_loot_num_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_loot_num_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pvp_loot_timeout = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_pvp_loot_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_loot_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pvp_loot_ratio = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          set_has_pvp_loot_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pvp_loot_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 player_ship_refresh_timeout = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_player_ship_refresh_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_ship_refresh_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 player_ship_navigate_timeout = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_player_ship_navigate_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_ship_navigate_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMap)
  return false;
#undef DO_
}

void ConfigMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 group_island_total_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_island_total_num(), output);
  }

  // required int32 group_island_user_capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_island_user_capacity(), output);
  }

  // required int32 group_island_user_capacity_add = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->group_island_user_capacity_add(), output);
  }

  // required int32 group_island_occupy_protect_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group_island_occupy_protect_time(), output);
  }

  // required int32 group_island_occupy_num_max = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->group_island_occupy_num_max(), output);
  }

  // required int32 gather_period = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gather_period(), output);
  }

  // required int32 gather_aggregate_period = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gather_aggregate_period(), output);
  }

  // required int32 harvest_interval = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->harvest_interval(), output);
  }

  // required int32 farm_skill_exp_period = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->farm_skill_exp_period(), output);
  }

  // required int32 pvp_loot_num_max = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->pvp_loot_num_max(), output);
  }

  // required int32 pvp_loot_timeout = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->pvp_loot_timeout(), output);
  }

  // required float pvp_loot_ratio = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->pvp_loot_ratio(), output);
  }

  // required int32 player_ship_refresh_timeout = 31;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->player_ship_refresh_timeout(), output);
  }

  // required int32 player_ship_navigate_timeout = 32;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->player_ship_navigate_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMap)
}

::google::protobuf::uint8* ConfigMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 group_island_total_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_island_total_num(), target);
  }

  // required int32 group_island_user_capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group_island_user_capacity(), target);
  }

  // required int32 group_island_user_capacity_add = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->group_island_user_capacity_add(), target);
  }

  // required int32 group_island_occupy_protect_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group_island_occupy_protect_time(), target);
  }

  // required int32 group_island_occupy_num_max = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->group_island_occupy_num_max(), target);
  }

  // required int32 gather_period = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gather_period(), target);
  }

  // required int32 gather_aggregate_period = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gather_aggregate_period(), target);
  }

  // required int32 harvest_interval = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->harvest_interval(), target);
  }

  // required int32 farm_skill_exp_period = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->farm_skill_exp_period(), target);
  }

  // required int32 pvp_loot_num_max = 21;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->pvp_loot_num_max(), target);
  }

  // required int32 pvp_loot_timeout = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->pvp_loot_timeout(), target);
  }

  // required float pvp_loot_ratio = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->pvp_loot_ratio(), target);
  }

  // required int32 player_ship_refresh_timeout = 31;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->player_ship_refresh_timeout(), target);
  }

  // required int32 player_ship_navigate_timeout = 32;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->player_ship_navigate_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMap)
  return target;
}

size_t ConfigMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigMap)
  size_t total_size = 0;

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_group_island_total_num()) {
    // required int32 group_island_total_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_total_num());
  }

  if (has_group_island_user_capacity()) {
    // required int32 group_island_user_capacity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_user_capacity());
  }

  if (has_group_island_user_capacity_add()) {
    // required int32 group_island_user_capacity_add = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_user_capacity_add());
  }

  if (has_group_island_occupy_protect_time()) {
    // required int32 group_island_occupy_protect_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_occupy_protect_time());
  }

  if (has_group_island_occupy_num_max()) {
    // required int32 group_island_occupy_num_max = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_occupy_num_max());
  }

  if (has_gather_period()) {
    // required int32 gather_period = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_period());
  }

  if (has_gather_aggregate_period()) {
    // required int32 gather_aggregate_period = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_aggregate_period());
  }

  if (has_harvest_interval()) {
    // required int32 harvest_interval = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harvest_interval());
  }

  if (has_farm_skill_exp_period()) {
    // required int32 farm_skill_exp_period = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->farm_skill_exp_period());
  }

  if (has_player_ship_navigate_timeout()) {
    // required int32 player_ship_navigate_timeout = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_ship_navigate_timeout());
  }

  if (has_pvp_loot_num_max()) {
    // required int32 pvp_loot_num_max = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pvp_loot_num_max());
  }

  if (has_pvp_loot_timeout()) {
    // required int32 pvp_loot_timeout = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pvp_loot_timeout());
  }

  if (has_pvp_loot_ratio()) {
    // required float pvp_loot_ratio = 23;
    total_size += 2 + 4;
  }

  if (has_player_ship_refresh_timeout()) {
    // required int32 player_ship_refresh_timeout = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_ship_refresh_timeout());
  }

  return total_size;
}
size_t ConfigMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00007fff) ^ 0x00007fff) == 0) {  // All required fields are present.
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 group_island_total_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_total_num());

    // required int32 group_island_user_capacity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_user_capacity());

    // required int32 group_island_user_capacity_add = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_user_capacity_add());

    // required int32 group_island_occupy_protect_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_occupy_protect_time());

    // required int32 group_island_occupy_num_max = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_island_occupy_num_max());

    // required int32 gather_period = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_period());

    // required int32 gather_aggregate_period = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_aggregate_period());

    // required int32 harvest_interval = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->harvest_interval());

    // required int32 farm_skill_exp_period = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->farm_skill_exp_period());

    // required int32 player_ship_navigate_timeout = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_ship_navigate_timeout());

    // required int32 pvp_loot_num_max = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pvp_loot_num_max());

    // required int32 pvp_loot_timeout = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pvp_loot_timeout());

    // required float pvp_loot_ratio = 23;
    total_size += 2 + 4;

    // required int32 player_ship_refresh_timeout = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_ship_refresh_timeout());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMap)
    MergeFrom(*source);
  }
}

void ConfigMap::MergeFrom(const ConfigMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      group_island_total_num_ = from.group_island_total_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_island_user_capacity_ = from.group_island_user_capacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      group_island_user_capacity_add_ = from.group_island_user_capacity_add_;
    }
    if (cached_has_bits & 0x00000010u) {
      group_island_occupy_protect_time_ = from.group_island_occupy_protect_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      group_island_occupy_num_max_ = from.group_island_occupy_num_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      gather_period_ = from.gather_period_;
    }
    if (cached_has_bits & 0x00000080u) {
      gather_aggregate_period_ = from.gather_aggregate_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      harvest_interval_ = from.harvest_interval_;
    }
    if (cached_has_bits & 0x00000200u) {
      farm_skill_exp_period_ = from.farm_skill_exp_period_;
    }
    if (cached_has_bits & 0x00000400u) {
      player_ship_navigate_timeout_ = from.player_ship_navigate_timeout_;
    }
    if (cached_has_bits & 0x00000800u) {
      pvp_loot_num_max_ = from.pvp_loot_num_max_;
    }
    if (cached_has_bits & 0x00001000u) {
      pvp_loot_timeout_ = from.pvp_loot_timeout_;
    }
    if (cached_has_bits & 0x00002000u) {
      pvp_loot_ratio_ = from.pvp_loot_ratio_;
    }
    if (cached_has_bits & 0x00004000u) {
      player_ship_refresh_timeout_ = from.player_ship_refresh_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMap::CopyFrom(const ConfigMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  return true;
}

void ConfigMap::Swap(ConfigMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMap::UnsafeArenaSwap(ConfigMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMap::InternalSwap(ConfigMap* other) {
  using std::swap;
  swap(level_, other->level_);
  swap(group_island_total_num_, other->group_island_total_num_);
  swap(group_island_user_capacity_, other->group_island_user_capacity_);
  swap(group_island_user_capacity_add_, other->group_island_user_capacity_add_);
  swap(group_island_occupy_protect_time_, other->group_island_occupy_protect_time_);
  swap(group_island_occupy_num_max_, other->group_island_occupy_num_max_);
  swap(gather_period_, other->gather_period_);
  swap(gather_aggregate_period_, other->gather_aggregate_period_);
  swap(harvest_interval_, other->harvest_interval_);
  swap(farm_skill_exp_period_, other->farm_skill_exp_period_);
  swap(player_ship_navigate_timeout_, other->player_ship_navigate_timeout_);
  swap(pvp_loot_num_max_, other->pvp_loot_num_max_);
  swap(pvp_loot_timeout_, other->pvp_loot_timeout_);
  swap(pvp_loot_ratio_, other->pvp_loot_ratio_);
  swap(player_ship_refresh_timeout_, other->player_ship_refresh_timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMap::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMapList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMapList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMapList::ConfigMapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMapList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMapList)
}
ConfigMapList::ConfigMapList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMapList)
}
ConfigMapList::ConfigMapList(const ConfigMapList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigMapList)
}

void ConfigMapList::SharedCtor() {
}

ConfigMapList::~ConfigMapList() {
  // @@protoc_insertion_point(destructor:db.ConfigMapList)
  SharedDtor();
}

void ConfigMapList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigMapList::ArenaDtor(void* object) {
  ConfigMapList* _this = reinterpret_cast< ConfigMapList* >(object);
  (void)_this;
}
void ConfigMapList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMapList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMapList::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMapList& ConfigMapList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapList.base);
  return *internal_default_instance();
}


void ConfigMapList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMapList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigMap list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMapList)
  return false;
#undef DO_
}

void ConfigMapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigMap list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMapList)
}

::google::protobuf::uint8* ConfigMapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigMap list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMapList)
  return target;
}

size_t ConfigMapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMapList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigMap list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMapList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMapList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMapList)
    MergeFrom(*source);
  }
}

void ConfigMapList::MergeFrom(const ConfigMapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMapList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigMapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMapList::CopyFrom(const ConfigMapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMapList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigMapList::Swap(ConfigMapList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMapList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMapList::UnsafeArenaSwap(ConfigMapList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMapList::InternalSwap(ConfigMapList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMapList::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMapArea::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMapArea::kAreaidFieldNumber;
const int ConfigMapArea::kNameFieldNumber;
const int ConfigMapArea::kTileBlockidFieldNumber;
const int ConfigMapArea::kIsLockFieldNumber;
const int ConfigMapArea::kCondFieldNumber;
const int ConfigMapArea::kUnlockTypeFieldNumber;
const int ConfigMapArea::kUnlockCostFieldNumber;
const int ConfigMapArea::kUnlockEntriesFieldNumber;
const int ConfigMapArea::kFrontLockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMapArea::ConfigMapArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMapArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMapArea)
}
ConfigMapArea::ConfigMapArea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapArea.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMapArea)
}
ConfigMapArea::ConfigMapArea(const ConfigMapArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  cond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cond()) {
    cond_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cond(),
      GetArenaNoVirtual());
  }
  unlock_entries_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_entries()) {
    unlock_entries_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_entries(),
      GetArenaNoVirtual());
  }
  front_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_front_lock()) {
    front_lock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.front_lock(),
      GetArenaNoVirtual());
  }
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_cost_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(unlock_cost_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigMapArea)
}

void ConfigMapArea::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_entries_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  front_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_cost_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(unlock_cost_));
}

ConfigMapArea::~ConfigMapArea() {
  // @@protoc_insertion_point(destructor:db.ConfigMapArea)
  SharedDtor();
}

void ConfigMapArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cond_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_entries_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  front_lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigMapArea::ArenaDtor(void* object) {
  ConfigMapArea* _this = reinterpret_cast< ConfigMapArea* >(object);
  (void)_this;
}
void ConfigMapArea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMapArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMapArea::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMapArea& ConfigMapArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapArea.base);
  return *internal_default_instance();
}


void ConfigMapArea::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cond_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      unlock_entries_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      front_lock_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&areaid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unlock_type_) -
        reinterpret_cast<char*>(&areaid_)) + sizeof(unlock_type_));
  }
  unlock_cost_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMapArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMapArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 areaid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_areaid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tile_blockid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tile_blockid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 is_lock = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_lock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes cond = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 unlock_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_unlock_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 unlock_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_unlock_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes unlock_entries = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unlock_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes front_lock = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_front_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMapArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMapArea)
  return false;
#undef DO_
}

void ConfigMapArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 areaid = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required int32 tile_blockid = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tile_blockid(), output);
  }

  // required int32 is_lock = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_lock(), output);
  }

  // required bytes cond = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->cond(), output);
  }

  // required int32 unlock_type = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unlock_type(), output);
  }

  // required int32 unlock_cost = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unlock_cost(), output);
  }

  // required bytes unlock_entries = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->unlock_entries(), output);
  }

  // required bytes front_lock = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->front_lock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMapArea)
}

::google::protobuf::uint8* ConfigMapArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 areaid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 tile_blockid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tile_blockid(), target);
  }

  // required int32 is_lock = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_lock(), target);
  }

  // required bytes cond = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->cond(), target);
  }

  // required int32 unlock_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unlock_type(), target);
  }

  // required int32 unlock_cost = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unlock_cost(), target);
  }

  // required bytes unlock_entries = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->unlock_entries(), target);
  }

  // required bytes front_lock = 9;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->front_lock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMapArea)
  return target;
}

size_t ConfigMapArea::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigMapArea)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_cond()) {
    // required bytes cond = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cond());
  }

  if (has_unlock_entries()) {
    // required bytes unlock_entries = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_entries());
  }

  if (has_front_lock()) {
    // required bytes front_lock = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->front_lock());
  }

  if (has_areaid()) {
    // required int32 areaid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areaid());
  }

  if (has_tile_blockid()) {
    // required int32 tile_blockid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tile_blockid());
  }

  if (has_is_lock()) {
    // required int32 is_lock = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_lock());
  }

  if (has_unlock_type()) {
    // required int32 unlock_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unlock_type());
  }

  if (has_unlock_cost()) {
    // required int32 unlock_cost = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unlock_cost());
  }

  return total_size;
}
size_t ConfigMapArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMapArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes cond = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cond());

    // required bytes unlock_entries = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->unlock_entries());

    // required bytes front_lock = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->front_lock());

    // required int32 areaid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areaid());

    // required int32 tile_blockid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tile_blockid());

    // required int32 is_lock = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_lock());

    // required int32 unlock_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unlock_type());

    // required int32 unlock_cost = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unlock_cost());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMapArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMapArea)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMapArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMapArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMapArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMapArea)
    MergeFrom(*source);
  }
}

void ConfigMapArea::MergeFrom(const ConfigMapArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMapArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_cond(from.cond());
    }
    if (cached_has_bits & 0x00000004u) {
      set_unlock_entries(from.unlock_entries());
    }
    if (cached_has_bits & 0x00000008u) {
      set_front_lock(from.front_lock());
    }
    if (cached_has_bits & 0x00000010u) {
      areaid_ = from.areaid_;
    }
    if (cached_has_bits & 0x00000020u) {
      tile_blockid_ = from.tile_blockid_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_lock_ = from.is_lock_;
    }
    if (cached_has_bits & 0x00000080u) {
      unlock_type_ = from.unlock_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_unlock_cost(from.unlock_cost());
  }
}

void ConfigMapArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMapArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMapArea::CopyFrom(const ConfigMapArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMapArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMapArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ConfigMapArea::Swap(ConfigMapArea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMapArea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMapArea::UnsafeArenaSwap(ConfigMapArea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMapArea::InternalSwap(ConfigMapArea* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cond_.Swap(&other->cond_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unlock_entries_.Swap(&other->unlock_entries_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  front_lock_.Swap(&other->front_lock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(areaid_, other->areaid_);
  swap(tile_blockid_, other->tile_blockid_);
  swap(is_lock_, other->is_lock_);
  swap(unlock_type_, other->unlock_type_);
  swap(unlock_cost_, other->unlock_cost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMapArea::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMapAreaList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMapAreaList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMapAreaList::ConfigMapAreaList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMapAreaList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMapAreaList)
}
ConfigMapAreaList::ConfigMapAreaList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapAreaList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMapAreaList)
}
ConfigMapAreaList::ConfigMapAreaList(const ConfigMapAreaList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigMapAreaList)
}

void ConfigMapAreaList::SharedCtor() {
}

ConfigMapAreaList::~ConfigMapAreaList() {
  // @@protoc_insertion_point(destructor:db.ConfigMapAreaList)
  SharedDtor();
}

void ConfigMapAreaList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigMapAreaList::ArenaDtor(void* object) {
  ConfigMapAreaList* _this = reinterpret_cast< ConfigMapAreaList* >(object);
  (void)_this;
}
void ConfigMapAreaList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMapAreaList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMapAreaList::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMapAreaList& ConfigMapAreaList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapAreaList.base);
  return *internal_default_instance();
}


void ConfigMapAreaList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMapAreaList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMapAreaList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMapAreaList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigMapArea list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMapAreaList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMapAreaList)
  return false;
#undef DO_
}

void ConfigMapAreaList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMapAreaList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigMapArea list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMapAreaList)
}

::google::protobuf::uint8* ConfigMapAreaList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMapAreaList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigMapArea list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMapAreaList)
  return target;
}

size_t ConfigMapAreaList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMapAreaList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigMapArea list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMapAreaList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMapAreaList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMapAreaList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMapAreaList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMapAreaList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMapAreaList)
    MergeFrom(*source);
  }
}

void ConfigMapAreaList::MergeFrom(const ConfigMapAreaList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMapAreaList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigMapAreaList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMapAreaList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMapAreaList::CopyFrom(const ConfigMapAreaList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMapAreaList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMapAreaList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigMapAreaList::Swap(ConfigMapAreaList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMapAreaList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMapAreaList::UnsafeArenaSwap(ConfigMapAreaList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMapAreaList::InternalSwap(ConfigMapAreaList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMapAreaList::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMapEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMapEntry::kEntryidFieldNumber;
const int ConfigMapEntry::kNameFieldNumber;
const int ConfigMapEntry::kDescFieldNumber;
const int ConfigMapEntry::kIslandTypeFieldNumber;
const int ConfigMapEntry::kIslandIdFieldNumber;
const int ConfigMapEntry::kNeedKeyFieldNumber;
const int ConfigMapEntry::kPosXFieldNumber;
const int ConfigMapEntry::kPosYFieldNumber;
const int ConfigMapEntry::kEasterEggFieldNumber;
const int ConfigMapEntry::kFirstEasterEggFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMapEntry::ConfigMapEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMapEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMapEntry)
}
ConfigMapEntry::ConfigMapEntry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapEntry.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMapEntry)
}
ConfigMapEntry::ConfigMapEntry(const ConfigMapEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc(),
      GetArenaNoVirtual());
  }
  easter_egg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_easter_egg()) {
    easter_egg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.easter_egg(),
      GetArenaNoVirtual());
  }
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_easter_egg_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(first_easter_egg_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigMapEntry)
}

void ConfigMapEntry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  easter_egg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_easter_egg_) -
      reinterpret_cast<char*>(&entryid_)) + sizeof(first_easter_egg_));
}

ConfigMapEntry::~ConfigMapEntry() {
  // @@protoc_insertion_point(destructor:db.ConfigMapEntry)
  SharedDtor();
}

void ConfigMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  easter_egg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigMapEntry::ArenaDtor(void* object) {
  ConfigMapEntry* _this = reinterpret_cast< ConfigMapEntry* >(object);
  (void)_this;
}
void ConfigMapEntry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMapEntry::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMapEntry& ConfigMapEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapEntry.base);
  return *internal_default_instance();
}


void ConfigMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      easter_egg_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_x_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(pos_x_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&pos_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_easter_egg_) -
        reinterpret_cast<char*>(&pos_y_)) + sizeof(first_easter_egg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMapEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 entryid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 island_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_island_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &island_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 island_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_island_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &island_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 need_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_need_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes easter_egg = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_easter_egg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 first_easter_egg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_first_easter_egg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_easter_egg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMapEntry)
  return false;
#undef DO_
}

void ConfigMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 entryid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entryid(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->desc(), output);
  }

  // required int32 island_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->island_type(), output);
  }

  // required int32 island_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->island_id(), output);
  }

  // required int32 need_key = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->need_key(), output);
  }

  // required int32 pos_x = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos_x(), output);
  }

  // required int32 pos_y = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pos_y(), output);
  }

  // required bytes easter_egg = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->easter_egg(), output);
  }

  // required int32 first_easter_egg = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->first_easter_egg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMapEntry)
}

::google::protobuf::uint8* ConfigMapEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 entryid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entryid(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes desc = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->desc(), target);
  }

  // required int32 island_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->island_type(), target);
  }

  // required int32 island_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->island_id(), target);
  }

  // required int32 need_key = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->need_key(), target);
  }

  // required int32 pos_x = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos_x(), target);
  }

  // required int32 pos_y = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pos_y(), target);
  }

  // required bytes easter_egg = 9;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->easter_egg(), target);
  }

  // required int32 first_easter_egg = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->first_easter_egg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMapEntry)
  return target;
}

size_t ConfigMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigMapEntry)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_desc()) {
    // required bytes desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (has_easter_egg()) {
    // required bytes easter_egg = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->easter_egg());
  }

  if (has_entryid()) {
    // required uint64 entryid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());
  }

  if (has_island_type()) {
    // required int32 island_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->island_type());
  }

  if (has_island_id()) {
    // required int32 island_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->island_id());
  }

  if (has_need_key()) {
    // required int32 need_key = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_key());
  }

  if (has_pos_x()) {
    // required int32 pos_x = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_x());
  }

  if (has_pos_y()) {
    // required int32 pos_y = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_y());
  }

  if (has_first_easter_egg()) {
    // required int32 first_easter_egg = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_easter_egg());
  }

  return total_size;
}
size_t ConfigMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMapEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());

    // required bytes easter_egg = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->easter_egg());

    // required uint64 entryid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());

    // required int32 island_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->island_type());

    // required int32 island_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->island_id());

    // required int32 need_key = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->need_key());

    // required int32 pos_x = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_x());

    // required int32 pos_y = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos_y());

    // required int32 first_easter_egg = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_easter_egg());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMapEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMapEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMapEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMapEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMapEntry)
    MergeFrom(*source);
  }
}

void ConfigMapEntry::MergeFrom(const ConfigMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_desc(from.desc());
    }
    if (cached_has_bits & 0x00000004u) {
      set_easter_egg(from.easter_egg());
    }
    if (cached_has_bits & 0x00000008u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000010u) {
      island_type_ = from.island_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      island_id_ = from.island_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      need_key_ = from.need_key_;
    }
    if (cached_has_bits & 0x00000080u) {
      pos_x_ = from.pos_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_easter_egg_ = from.first_easter_egg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigMapEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMapEntry::CopyFrom(const ConfigMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void ConfigMapEntry::Swap(ConfigMapEntry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMapEntry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMapEntry::UnsafeArenaSwap(ConfigMapEntry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMapEntry::InternalSwap(ConfigMapEntry* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  easter_egg_.Swap(&other->easter_egg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entryid_, other->entryid_);
  swap(island_type_, other->island_type_);
  swap(island_id_, other->island_id_);
  swap(need_key_, other->need_key_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(first_easter_egg_, other->first_easter_egg_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMapEntry::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigMapEntryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMapEntryList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMapEntryList::ConfigMapEntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigMapEntryList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigMapEntryList)
}
ConfigMapEntryList::ConfigMapEntryList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapEntryList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigMapEntryList)
}
ConfigMapEntryList::ConfigMapEntryList(const ConfigMapEntryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigMapEntryList)
}

void ConfigMapEntryList::SharedCtor() {
}

ConfigMapEntryList::~ConfigMapEntryList() {
  // @@protoc_insertion_point(destructor:db.ConfigMapEntryList)
  SharedDtor();
}

void ConfigMapEntryList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigMapEntryList::ArenaDtor(void* object) {
  ConfigMapEntryList* _this = reinterpret_cast< ConfigMapEntryList* >(object);
  (void)_this;
}
void ConfigMapEntryList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigMapEntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigMapEntryList::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMapEntryList& ConfigMapEntryList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigMapEntryList.base);
  return *internal_default_instance();
}


void ConfigMapEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigMapEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigMapEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigMapEntryList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigMapEntry list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigMapEntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigMapEntryList)
  return false;
#undef DO_
}

void ConfigMapEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigMapEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigMapEntry list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigMapEntryList)
}

::google::protobuf::uint8* ConfigMapEntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigMapEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigMapEntry list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigMapEntryList)
  return target;
}

size_t ConfigMapEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigMapEntryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigMapEntry list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigMapEntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigMapEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMapEntryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMapEntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigMapEntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigMapEntryList)
    MergeFrom(*source);
  }
}

void ConfigMapEntryList::MergeFrom(const ConfigMapEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigMapEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigMapEntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigMapEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMapEntryList::CopyFrom(const ConfigMapEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigMapEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMapEntryList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigMapEntryList::Swap(ConfigMapEntryList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigMapEntryList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigMapEntryList::UnsafeArenaSwap(ConfigMapEntryList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigMapEntryList::InternalSwap(ConfigMapEntryList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigMapEntryList::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPirateShip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPirateShip::kTypeFieldNumber;
const int ConfigPirateShip::kRefreshtimeFieldNumber;
const int ConfigPirateShip::kFightNumFieldNumber;
const int ConfigPirateShip::kEntriesFieldNumber;
const int ConfigPirateShip::kVitalityCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPirateShip::ConfigPirateShip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigPirateShip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPirateShip)
}
ConfigPirateShip::ConfigPirateShip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigPirateShip.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPirateShip)
}
ConfigPirateShip::ConfigPirateShip(const ConfigPirateShip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  refreshtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_refreshtime()) {
    refreshtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refreshtime(),
      GetArenaNoVirtual());
  }
  entries_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entries()) {
    entries_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entries(),
      GetArenaNoVirtual());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&vitality_cost_) -
    reinterpret_cast<char*>(&type_)) + sizeof(vitality_cost_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigPirateShip)
}

void ConfigPirateShip::SharedCtor() {
  refreshtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entries_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vitality_cost_) -
      reinterpret_cast<char*>(&type_)) + sizeof(vitality_cost_));
}

ConfigPirateShip::~ConfigPirateShip() {
  // @@protoc_insertion_point(destructor:db.ConfigPirateShip)
  SharedDtor();
}

void ConfigPirateShip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  refreshtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entries_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigPirateShip::ArenaDtor(void* object) {
  ConfigPirateShip* _this = reinterpret_cast< ConfigPirateShip* >(object);
  (void)_this;
}
void ConfigPirateShip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPirateShip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPirateShip::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPirateShip& ConfigPirateShip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigPirateShip.base);
  return *internal_default_instance();
}


void ConfigPirateShip::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      refreshtime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      entries_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vitality_cost_) -
        reinterpret_cast<char*>(&type_)) + sizeof(vitality_cost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPirateShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPirateShip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes refreshtime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_refreshtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fight_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_fight_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes entries = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vitality_cost = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_vitality_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vitality_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPirateShip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPirateShip)
  return false;
#undef DO_
}

void ConfigPirateShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bytes refreshtime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->refreshtime(), output);
  }

  // required int32 fight_num = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fight_num(), output);
  }

  // required bytes entries = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->entries(), output);
  }

  // required int32 vitality_cost = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vitality_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPirateShip)
}

::google::protobuf::uint8* ConfigPirateShip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bytes refreshtime = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->refreshtime(), target);
  }

  // required int32 fight_num = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fight_num(), target);
  }

  // required bytes entries = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->entries(), target);
  }

  // required int32 vitality_cost = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vitality_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPirateShip)
  return target;
}

size_t ConfigPirateShip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigPirateShip)
  size_t total_size = 0;

  if (has_refreshtime()) {
    // required bytes refreshtime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->refreshtime());
  }

  if (has_entries()) {
    // required bytes entries = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entries());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_fight_num()) {
    // required int32 fight_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fight_num());
  }

  if (has_vitality_cost()) {
    // required int32 vitality_cost = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vitality_cost());
  }

  return total_size;
}
size_t ConfigPirateShip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPirateShip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes refreshtime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->refreshtime());

    // required bytes entries = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->entries());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 fight_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fight_num());

    // required int32 vitality_cost = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vitality_cost());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPirateShip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPirateShip)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPirateShip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPirateShip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPirateShip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPirateShip)
    MergeFrom(*source);
  }
}

void ConfigPirateShip::MergeFrom(const ConfigPirateShip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPirateShip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_refreshtime(from.refreshtime());
    }
    if (cached_has_bits & 0x00000002u) {
      set_entries(from.entries());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      fight_num_ = from.fight_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      vitality_cost_ = from.vitality_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigPirateShip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPirateShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPirateShip::CopyFrom(const ConfigPirateShip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPirateShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPirateShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ConfigPirateShip::Swap(ConfigPirateShip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPirateShip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPirateShip::UnsafeArenaSwap(ConfigPirateShip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPirateShip::InternalSwap(ConfigPirateShip* other) {
  using std::swap;
  refreshtime_.Swap(&other->refreshtime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entries_.Swap(&other->entries_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(fight_num_, other->fight_num_);
  swap(vitality_cost_, other->vitality_cost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPirateShip::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigPirateShipList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPirateShipList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPirateShipList::ConfigPirateShipList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigPirateShipList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigPirateShipList)
}
ConfigPirateShipList::ConfigPirateShipList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigPirateShipList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigPirateShipList)
}
ConfigPirateShipList::ConfigPirateShipList(const ConfigPirateShipList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigPirateShipList)
}

void ConfigPirateShipList::SharedCtor() {
}

ConfigPirateShipList::~ConfigPirateShipList() {
  // @@protoc_insertion_point(destructor:db.ConfigPirateShipList)
  SharedDtor();
}

void ConfigPirateShipList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigPirateShipList::ArenaDtor(void* object) {
  ConfigPirateShipList* _this = reinterpret_cast< ConfigPirateShipList* >(object);
  (void)_this;
}
void ConfigPirateShipList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigPirateShipList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigPirateShipList::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigPirateShipList& ConfigPirateShipList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigPirateShipList.base);
  return *internal_default_instance();
}


void ConfigPirateShipList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigPirateShipList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigPirateShipList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigPirateShipList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigPirateShip list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigPirateShipList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigPirateShipList)
  return false;
#undef DO_
}

void ConfigPirateShipList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigPirateShipList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigPirateShip list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigPirateShipList)
}

::google::protobuf::uint8* ConfigPirateShipList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigPirateShipList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigPirateShip list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigPirateShipList)
  return target;
}

size_t ConfigPirateShipList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigPirateShipList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigPirateShip list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPirateShipList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigPirateShipList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPirateShipList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPirateShipList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigPirateShipList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigPirateShipList)
    MergeFrom(*source);
  }
}

void ConfigPirateShipList::MergeFrom(const ConfigPirateShipList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigPirateShipList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigPirateShipList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigPirateShipList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPirateShipList::CopyFrom(const ConfigPirateShipList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigPirateShipList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPirateShipList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigPirateShipList::Swap(ConfigPirateShipList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigPirateShipList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigPirateShipList::UnsafeArenaSwap(ConfigPirateShipList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigPirateShipList::InternalSwap(ConfigPirateShipList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigPirateShipList::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigWildIsland::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigWildIsland::kIslandidFieldNumber;
const int ConfigWildIsland::kNameFieldNumber;
const int ConfigWildIsland::kDescFieldNumber;
const int ConfigWildIsland::kTypeFieldNumber;
const int ConfigWildIsland::kLevelFieldNumber;
const int ConfigWildIsland::kGatherTypeFieldNumber;
const int ConfigWildIsland::kWorkshopFieldNumber;
const int ConfigWildIsland::kWorkshopStoreNumFieldNumber;
const int ConfigWildIsland::kWorkshopGatherNumFieldNumber;
const int ConfigWildIsland::kMonsterFieldNumber;
const int ConfigWildIsland::kStatueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigWildIsland::ConfigWildIsland()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigWildIsland.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigWildIsland)
}
ConfigWildIsland::ConfigWildIsland(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigWildIsland.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigWildIsland)
}
ConfigWildIsland::ConfigWildIsland(const ConfigWildIsland& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc(),
      GetArenaNoVirtual());
  }
  workshop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_workshop()) {
    workshop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workshop(),
      GetArenaNoVirtual());
  }
  monster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_monster()) {
    monster_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monster(),
      GetArenaNoVirtual());
  }
  statue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_statue()) {
    statue_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statue(),
      GetArenaNoVirtual());
  }
  ::memcpy(&islandid_, &from.islandid_,
    static_cast<size_t>(reinterpret_cast<char*>(&workshop_gather_num_) -
    reinterpret_cast<char*>(&islandid_)) + sizeof(workshop_gather_num_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigWildIsland)
}

void ConfigWildIsland::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workshop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&islandid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workshop_gather_num_) -
      reinterpret_cast<char*>(&islandid_)) + sizeof(workshop_gather_num_));
}

ConfigWildIsland::~ConfigWildIsland() {
  // @@protoc_insertion_point(destructor:db.ConfigWildIsland)
  SharedDtor();
}

void ConfigWildIsland::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workshop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigWildIsland::ArenaDtor(void* object) {
  ConfigWildIsland* _this = reinterpret_cast< ConfigWildIsland* >(object);
  (void)_this;
}
void ConfigWildIsland::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigWildIsland::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigWildIsland::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigWildIsland& ConfigWildIsland::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigWildIsland.base);
  return *internal_default_instance();
}


void ConfigWildIsland::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      workshop_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      monster_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      statue_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&islandid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&islandid_)) + sizeof(level_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&gather_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&workshop_gather_num_) -
        reinterpret_cast<char*>(&gather_type_)) + sizeof(workshop_gather_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigWildIsland::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigWildIsland)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 islandid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_islandid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islandid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gather_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_gather_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes workshop = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_workshop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 workshop_store_num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_workshop_store_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workshop_store_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 workshop_gather_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_workshop_gather_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workshop_gather_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes monster = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_monster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes statue = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_statue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigWildIsland)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigWildIsland)
  return false;
#undef DO_
}

void ConfigWildIsland::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 islandid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->islandid(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->desc(), output);
  }

  // required int32 type = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 gather_type = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gather_type(), output);
  }

  // required bytes workshop = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->workshop(), output);
  }

  // required int32 workshop_store_num = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->workshop_store_num(), output);
  }

  // required int32 workshop_gather_num = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->workshop_gather_num(), output);
  }

  // required bytes monster = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->monster(), output);
  }

  // required bytes statue = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->statue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigWildIsland)
}

::google::protobuf::uint8* ConfigWildIsland::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 islandid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->islandid(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes desc = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->desc(), target);
  }

  // required int32 type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required int32 gather_type = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gather_type(), target);
  }

  // required bytes workshop = 11;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->workshop(), target);
  }

  // required int32 workshop_store_num = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->workshop_store_num(), target);
  }

  // required int32 workshop_gather_num = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->workshop_gather_num(), target);
  }

  // required bytes monster = 21;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->monster(), target);
  }

  // required bytes statue = 22;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->statue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigWildIsland)
  return target;
}

size_t ConfigWildIsland::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigWildIsland)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_desc()) {
    // required bytes desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (has_workshop()) {
    // required bytes workshop = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->workshop());
  }

  if (has_monster()) {
    // required bytes monster = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monster());
  }

  if (has_statue()) {
    // required bytes statue = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->statue());
  }

  if (has_islandid()) {
    // required int32 islandid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->islandid());
  }

  if (has_type()) {
    // required int32 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_level()) {
    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_gather_type()) {
    // required int32 gather_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_type());
  }

  if (has_workshop_store_num()) {
    // required int32 workshop_store_num = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshop_store_num());
  }

  if (has_workshop_gather_num()) {
    // required int32 workshop_gather_num = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshop_gather_num());
  }

  return total_size;
}
size_t ConfigWildIsland::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigWildIsland)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());

    // required bytes workshop = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->workshop());

    // required bytes monster = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monster());

    // required bytes statue = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->statue());

    // required int32 islandid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->islandid());

    // required int32 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 gather_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_type());

    // required int32 workshop_store_num = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshop_store_num());

    // required int32 workshop_gather_num = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshop_gather_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigWildIsland::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigWildIsland)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigWildIsland* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigWildIsland>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigWildIsland)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigWildIsland)
    MergeFrom(*source);
  }
}

void ConfigWildIsland::MergeFrom(const ConfigWildIsland& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigWildIsland)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_desc(from.desc());
    }
    if (cached_has_bits & 0x00000004u) {
      set_workshop(from.workshop());
    }
    if (cached_has_bits & 0x00000008u) {
      set_monster(from.monster());
    }
    if (cached_has_bits & 0x00000010u) {
      set_statue(from.statue());
    }
    if (cached_has_bits & 0x00000020u) {
      islandid_ = from.islandid_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      gather_type_ = from.gather_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      workshop_store_num_ = from.workshop_store_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      workshop_gather_num_ = from.workshop_gather_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigWildIsland::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigWildIsland)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigWildIsland::CopyFrom(const ConfigWildIsland& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigWildIsland)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigWildIsland::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void ConfigWildIsland::Swap(ConfigWildIsland* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigWildIsland* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigWildIsland::UnsafeArenaSwap(ConfigWildIsland* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigWildIsland::InternalSwap(ConfigWildIsland* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  workshop_.Swap(&other->workshop_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  monster_.Swap(&other->monster_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  statue_.Swap(&other->statue_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(islandid_, other->islandid_);
  swap(type_, other->type_);
  swap(level_, other->level_);
  swap(gather_type_, other->gather_type_);
  swap(workshop_store_num_, other->workshop_store_num_);
  swap(workshop_gather_num_, other->workshop_gather_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigWildIsland::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigWildIslandList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigWildIslandList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigWildIslandList::ConfigWildIslandList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_ConfigWildIslandList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigWildIslandList)
}
ConfigWildIslandList::ConfigWildIslandList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigWildIslandList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigWildIslandList)
}
ConfigWildIslandList::ConfigWildIslandList(const ConfigWildIslandList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigWildIslandList)
}

void ConfigWildIslandList::SharedCtor() {
}

ConfigWildIslandList::~ConfigWildIslandList() {
  // @@protoc_insertion_point(destructor:db.ConfigWildIslandList)
  SharedDtor();
}

void ConfigWildIslandList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigWildIslandList::ArenaDtor(void* object) {
  ConfigWildIslandList* _this = reinterpret_cast< ConfigWildIslandList* >(object);
  (void)_this;
}
void ConfigWildIslandList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigWildIslandList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigWildIslandList::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigWildIslandList& ConfigWildIslandList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_ConfigWildIslandList.base);
  return *internal_default_instance();
}


void ConfigWildIslandList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigWildIslandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigWildIslandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigWildIslandList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigWildIsland list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigWildIslandList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigWildIslandList)
  return false;
#undef DO_
}

void ConfigWildIslandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigWildIslandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigWildIsland list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigWildIslandList)
}

::google::protobuf::uint8* ConfigWildIslandList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigWildIslandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigWildIsland list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigWildIslandList)
  return target;
}

size_t ConfigWildIslandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigWildIslandList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigWildIsland list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigWildIslandList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigWildIslandList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigWildIslandList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigWildIslandList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigWildIslandList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigWildIslandList)
    MergeFrom(*source);
  }
}

void ConfigWildIslandList::MergeFrom(const ConfigWildIslandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigWildIslandList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigWildIslandList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigWildIslandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigWildIslandList::CopyFrom(const ConfigWildIslandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigWildIslandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigWildIslandList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigWildIslandList::Swap(ConfigWildIslandList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigWildIslandList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigWildIslandList::UnsafeArenaSwap(ConfigWildIslandList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigWildIslandList::InternalSwap(ConfigWildIslandList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigWildIslandList::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserMapArea::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMapArea::kUseridFieldNumber;
const int UserMapArea::kAreaidFieldNumber;
const int UserMapArea::kAreaStateFieldNumber;
const int UserMapArea::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMapArea::UserMapArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_UserMapArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserMapArea)
}
UserMapArea::UserMapArea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserMapArea.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserMapArea)
}
UserMapArea::UserMapArea(const UserMapArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.UserMapArea)
}

void UserMapArea::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&areaid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&areaid_)) + sizeof(optime_));
}

UserMapArea::~UserMapArea() {
  // @@protoc_insertion_point(destructor:db.UserMapArea)
  SharedDtor();
}

void UserMapArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserMapArea::ArenaDtor(void* object) {
  UserMapArea* _this = reinterpret_cast< UserMapArea* >(object);
  (void)_this;
}
void UserMapArea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserMapArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserMapArea::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMapArea& UserMapArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserMapArea.base);
  return *internal_default_instance();
}


void UserMapArea::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserMapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&areaid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&areaid_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserMapArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserMapArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 areaid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_areaid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 area_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_area_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserMapArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserMapArea)
  return false;
#undef DO_
}

void UserMapArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserMapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 areaid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->areaid(), output);
  }

  // required int32 area_state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->area_state(), output);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserMapArea)
}

::google::protobuf::uint8* UserMapArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserMapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 areaid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->areaid(), target);
  }

  // required int32 area_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->area_state(), target);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserMapArea)
  return target;
}

size_t UserMapArea::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserMapArea)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_areaid()) {
    // required int32 areaid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areaid());
  }

  if (has_area_state()) {
    // required int32 area_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->area_state());
  }

  if (has_optime()) {
    // required sfixed64 optime = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UserMapArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserMapArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required int32 areaid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areaid());

    // required int32 area_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->area_state());

    // required sfixed64 optime = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMapArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserMapArea)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMapArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMapArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserMapArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserMapArea)
    MergeFrom(*source);
  }
}

void UserMapArea::MergeFrom(const UserMapArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserMapArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      areaid_ = from.areaid_;
    }
    if (cached_has_bits & 0x00000004u) {
      area_state_ = from.area_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserMapArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserMapArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMapArea::CopyFrom(const UserMapArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserMapArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMapArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void UserMapArea::Swap(UserMapArea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserMapArea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserMapArea::UnsafeArenaSwap(UserMapArea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserMapArea::InternalSwap(UserMapArea* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(areaid_, other->areaid_);
  swap(area_state_, other->area_state_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserMapArea::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserMapEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMapEntry::kUseridFieldNumber;
const int UserMapEntry::kEntryidFieldNumber;
const int UserMapEntry::kDiscoverFlagFieldNumber;
const int UserMapEntry::kBlockFlagFieldNumber;
const int UserMapEntry::kGroupidFieldNumber;
const int UserMapEntry::kStageHintFieldNumber;
const int UserMapEntry::kStageHint2FieldNumber;
const int UserMapEntry::kStageMonsteridFieldNumber;
const int UserMapEntry::kStageRefreshtimeFieldNumber;
const int UserMapEntry::kOwnershipFlagFieldNumber;
const int UserMapEntry::kOwnershipStorageFieldNumber;
const int UserMapEntry::kOwnershipGatherPerMinFieldNumber;
const int UserMapEntry::kOwnershipGatherAddRatioFieldNumber;
const int UserMapEntry::kOwnershipGatherTimeFieldNumber;
const int UserMapEntry::kOwnershipDeadlineFieldNumber;
const int UserMapEntry::kOwnershipFarmSkillExpTimeFieldNumber;
const int UserMapEntry::kOptimeFieldNumber;
const int UserMapEntry::kTypeFieldNumber;
const int UserMapEntry::kOwneridFieldNumber;
const int UserMapEntry::kRefreshTimeFieldNumber;
const int UserMapEntry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMapEntry::UserMapEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_UserMapEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserMapEntry)
}
UserMapEntry::UserMapEntry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserMapEntry.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserMapEntry)
}
UserMapEntry::UserMapEntry(const UserMapEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_time_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(refresh_time_));
  // @@protoc_insertion_point(copy_constructor:db.UserMapEntry)
}

void UserMapEntry::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_time_) -
      reinterpret_cast<char*>(&entryid_)) + sizeof(refresh_time_));
}

UserMapEntry::~UserMapEntry() {
  // @@protoc_insertion_point(destructor:db.UserMapEntry)
  SharedDtor();
}

void UserMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserMapEntry::ArenaDtor(void* object) {
  UserMapEntry* _this = reinterpret_cast< UserMapEntry* >(object);
  (void)_this;
}
void UserMapEntry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserMapEntry::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMapEntry& UserMapEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserMapEntry.base);
  return *internal_default_instance();
}


void UserMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stage_hint2_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(stage_hint2_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&stage_monsterid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ownership_gather_time_) -
        reinterpret_cast<char*>(&stage_monsterid_)) + sizeof(ownership_gather_time_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&ownership_deadline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&refresh_time_) -
        reinterpret_cast<char*>(&ownership_deadline_)) + sizeof(refresh_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserMapEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 entryid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 discover_flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_discover_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discover_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 block_flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_block_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 groupid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 stage_hint = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_stage_hint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_hint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 stage_hint2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_stage_hint2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_hint2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stage_monsterid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_stage_monsterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stage_monsterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 stage_refreshtime = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_stage_refreshtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &stage_refreshtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ownership_flag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_ownership_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownership_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ownership_storage = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_ownership_storage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ownership_storage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ownership_gather_per_min = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          set_has_ownership_gather_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ownership_gather_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ownership_gather_add_ratio = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          set_has_ownership_gather_add_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ownership_gather_add_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 ownership_gather_time = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_ownership_gather_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &ownership_gather_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 ownership_deadline = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_ownership_deadline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &ownership_deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 ownership_farm_skill_exp_time = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_ownership_farm_skill_exp_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &ownership_farm_skill_exp_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ownerid = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_ownerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 refresh_time = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 337 & 0xFF */)) {
          set_has_refresh_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &refresh_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserMapEntry)
  return false;
#undef DO_
}

void UserMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required uint64 entryid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->entryid(), output);
  }

  // required int32 discover_flag = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->discover_flag(), output);
  }

  // required int32 block_flag = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->block_flag(), output);
  }

  // required uint64 groupid = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->groupid(), output);
  }

  // required int32 stage_hint = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->stage_hint(), output);
  }

  // required int32 stage_hint2 = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stage_hint2(), output);
  }

  // required uint64 stage_monsterid = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->stage_monsterid(), output);
  }

  // required sfixed64 stage_refreshtime = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(14, this->stage_refreshtime(), output);
  }

  // required int32 ownership_flag = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ownership_flag(), output);
  }

  // required float ownership_storage = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->ownership_storage(), output);
  }

  // required float ownership_gather_per_min = 23;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->ownership_gather_per_min(), output);
  }

  // required float ownership_gather_add_ratio = 24;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->ownership_gather_add_ratio(), output);
  }

  // required sfixed64 ownership_gather_time = 25;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(25, this->ownership_gather_time(), output);
  }

  // required sfixed64 ownership_deadline = 26;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(26, this->ownership_deadline(), output);
  }

  // required sfixed64 ownership_farm_skill_exp_time = 27;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(27, this->ownership_farm_skill_exp_time(), output);
  }

  // required sfixed64 optime = 31;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(31, this->optime(), output);
  }

  // optional int32 type = 40;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->type(), output);
  }

  // optional int64 ownerid = 41;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->ownerid(), output);
  }

  // optional sfixed64 refresh_time = 42;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(42, this->refresh_time(), output);
  }

  // optional bytes data = 43;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      43, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserMapEntry)
}

::google::protobuf::uint8* UserMapEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required uint64 entryid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->entryid(), target);
  }

  // required int32 discover_flag = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->discover_flag(), target);
  }

  // required int32 block_flag = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->block_flag(), target);
  }

  // required uint64 groupid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->groupid(), target);
  }

  // required int32 stage_hint = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->stage_hint(), target);
  }

  // required int32 stage_hint2 = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stage_hint2(), target);
  }

  // required uint64 stage_monsterid = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->stage_monsterid(), target);
  }

  // required sfixed64 stage_refreshtime = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(14, this->stage_refreshtime(), target);
  }

  // required int32 ownership_flag = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ownership_flag(), target);
  }

  // required float ownership_storage = 22;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->ownership_storage(), target);
  }

  // required float ownership_gather_per_min = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->ownership_gather_per_min(), target);
  }

  // required float ownership_gather_add_ratio = 24;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->ownership_gather_add_ratio(), target);
  }

  // required sfixed64 ownership_gather_time = 25;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(25, this->ownership_gather_time(), target);
  }

  // required sfixed64 ownership_deadline = 26;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(26, this->ownership_deadline(), target);
  }

  // required sfixed64 ownership_farm_skill_exp_time = 27;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(27, this->ownership_farm_skill_exp_time(), target);
  }

  // required sfixed64 optime = 31;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(31, this->optime(), target);
  }

  // optional int32 type = 40;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->type(), target);
  }

  // optional int64 ownerid = 41;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->ownerid(), target);
  }

  // optional sfixed64 refresh_time = 42;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(42, this->refresh_time(), target);
  }

  // optional bytes data = 43;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        43, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserMapEntry)
  return target;
}

size_t UserMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserMapEntry)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_entryid()) {
    // required uint64 entryid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());
  }

  if (has_discover_flag()) {
    // required int32 discover_flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->discover_flag());
  }

  if (has_block_flag()) {
    // required int32 block_flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->block_flag());
  }

  if (has_groupid()) {
    // required uint64 groupid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  if (has_stage_hint()) {
    // required int32 stage_hint = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stage_hint());
  }

  if (has_stage_hint2()) {
    // required int32 stage_hint2 = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stage_hint2());
  }

  if (has_stage_monsterid()) {
    // required uint64 stage_monsterid = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stage_monsterid());
  }

  if (has_stage_refreshtime()) {
    // required sfixed64 stage_refreshtime = 14;
    total_size += 1 + 8;
  }

  if (has_ownership_flag()) {
    // required int32 ownership_flag = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ownership_flag());
  }

  if (has_ownership_storage()) {
    // required float ownership_storage = 22;
    total_size += 2 + 4;
  }

  if (has_ownership_gather_per_min()) {
    // required float ownership_gather_per_min = 23;
    total_size += 2 + 4;
  }

  if (has_ownership_gather_add_ratio()) {
    // required float ownership_gather_add_ratio = 24;
    total_size += 2 + 4;
  }

  if (has_ownership_gather_time()) {
    // required sfixed64 ownership_gather_time = 25;
    total_size += 2 + 8;
  }

  if (has_ownership_deadline()) {
    // required sfixed64 ownership_deadline = 26;
    total_size += 2 + 8;
  }

  if (has_ownership_farm_skill_exp_time()) {
    // required sfixed64 ownership_farm_skill_exp_time = 27;
    total_size += 2 + 8;
  }

  if (has_optime()) {
    // required sfixed64 optime = 31;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t UserMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserMapEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0007effd) ^ 0x0007effd) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required uint64 entryid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());

    // required int32 discover_flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->discover_flag());

    // required int32 block_flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->block_flag());

    // required uint64 groupid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());

    // required int32 stage_hint = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stage_hint());

    // required int32 stage_hint2 = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stage_hint2());

    // required uint64 stage_monsterid = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stage_monsterid());

    // required sfixed64 stage_refreshtime = 14;
    total_size += 1 + 8;

    // required int32 ownership_flag = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ownership_flag());

    // required float ownership_storage = 22;
    total_size += 2 + 4;

    // required float ownership_gather_per_min = 23;
    total_size += 2 + 4;

    // required float ownership_gather_add_ratio = 24;
    total_size += 2 + 4;

    // required sfixed64 ownership_gather_time = 25;
    total_size += 2 + 8;

    // required sfixed64 ownership_deadline = 26;
    total_size += 2 + 8;

    // required sfixed64 ownership_farm_skill_exp_time = 27;
    total_size += 2 + 8;

    // required sfixed64 optime = 31;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes data = 43;
  if (has_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional int32 type = 40;
  if (has_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (_has_bits_[16 / 32] & 1572864u) {
    // optional int64 ownerid = 41;
    if (has_ownerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ownerid());
    }

    // optional sfixed64 refresh_time = 42;
    if (has_refresh_time()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMapEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMapEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMapEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserMapEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserMapEntry)
    MergeFrom(*source);
  }
}

void UserMapEntry::MergeFrom(const UserMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000008u) {
      discover_flag_ = from.discover_flag_;
    }
    if (cached_has_bits & 0x00000010u) {
      block_flag_ = from.block_flag_;
    }
    if (cached_has_bits & 0x00000020u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000040u) {
      stage_hint_ = from.stage_hint_;
    }
    if (cached_has_bits & 0x00000080u) {
      stage_hint2_ = from.stage_hint2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      stage_monsterid_ = from.stage_monsterid_;
    }
    if (cached_has_bits & 0x00000200u) {
      stage_refreshtime_ = from.stage_refreshtime_;
    }
    if (cached_has_bits & 0x00000400u) {
      ownership_flag_ = from.ownership_flag_;
    }
    if (cached_has_bits & 0x00000800u) {
      ownership_storage_ = from.ownership_storage_;
    }
    if (cached_has_bits & 0x00001000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00002000u) {
      ownership_gather_per_min_ = from.ownership_gather_per_min_;
    }
    if (cached_has_bits & 0x00004000u) {
      ownership_gather_add_ratio_ = from.ownership_gather_add_ratio_;
    }
    if (cached_has_bits & 0x00008000u) {
      ownership_gather_time_ = from.ownership_gather_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      ownership_deadline_ = from.ownership_deadline_;
    }
    if (cached_has_bits & 0x00020000u) {
      ownership_farm_skill_exp_time_ = from.ownership_farm_skill_exp_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      optime_ = from.optime_;
    }
    if (cached_has_bits & 0x00080000u) {
      ownerid_ = from.ownerid_;
    }
    if (cached_has_bits & 0x00100000u) {
      refresh_time_ = from.refresh_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserMapEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMapEntry::CopyFrom(const UserMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007effd) != 0x0007effd) return false;
  return true;
}

void UserMapEntry::Swap(UserMapEntry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserMapEntry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserMapEntry::UnsafeArenaSwap(UserMapEntry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserMapEntry::InternalSwap(UserMapEntry* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entryid_, other->entryid_);
  swap(discover_flag_, other->discover_flag_);
  swap(block_flag_, other->block_flag_);
  swap(groupid_, other->groupid_);
  swap(stage_hint_, other->stage_hint_);
  swap(stage_hint2_, other->stage_hint2_);
  swap(stage_monsterid_, other->stage_monsterid_);
  swap(stage_refreshtime_, other->stage_refreshtime_);
  swap(ownership_flag_, other->ownership_flag_);
  swap(ownership_storage_, other->ownership_storage_);
  swap(type_, other->type_);
  swap(ownership_gather_per_min_, other->ownership_gather_per_min_);
  swap(ownership_gather_add_ratio_, other->ownership_gather_add_ratio_);
  swap(ownership_gather_time_, other->ownership_gather_time_);
  swap(ownership_deadline_, other->ownership_deadline_);
  swap(ownership_farm_skill_exp_time_, other->ownership_farm_skill_exp_time_);
  swap(optime_, other->optime_);
  swap(ownerid_, other->ownerid_);
  swap(refresh_time_, other->refresh_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserMapEntry::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserFarmSkillExpGen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFarmSkillExpGen::kUseridFieldNumber;
const int UserFarmSkillExpGen::kCardidFieldNumber;
const int UserFarmSkillExpGen::kEntryidFieldNumber;
const int UserFarmSkillExpGen::kExpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFarmSkillExpGen::UserFarmSkillExpGen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_UserFarmSkillExpGen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserFarmSkillExpGen)
}
UserFarmSkillExpGen::UserFarmSkillExpGen(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserFarmSkillExpGen.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserFarmSkillExpGen)
}
UserFarmSkillExpGen::UserFarmSkillExpGen(const UserFarmSkillExpGen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:db.UserFarmSkillExpGen)
}

void UserFarmSkillExpGen::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&entryid_)) + sizeof(exp_));
}

UserFarmSkillExpGen::~UserFarmSkillExpGen() {
  // @@protoc_insertion_point(destructor:db.UserFarmSkillExpGen)
  SharedDtor();
}

void UserFarmSkillExpGen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserFarmSkillExpGen::ArenaDtor(void* object) {
  UserFarmSkillExpGen* _this = reinterpret_cast< UserFarmSkillExpGen* >(object);
  (void)_this;
}
void UserFarmSkillExpGen::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserFarmSkillExpGen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserFarmSkillExpGen::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFarmSkillExpGen& UserFarmSkillExpGen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserFarmSkillExpGen.base);
  return *internal_default_instance();
}


void UserFarmSkillExpGen::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserFarmSkillExpGen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 14u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(exp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFarmSkillExpGen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserFarmSkillExpGen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cardid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cardid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 entryid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float exp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserFarmSkillExpGen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserFarmSkillExpGen)
  return false;
#undef DO_
}

void UserFarmSkillExpGen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserFarmSkillExpGen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 cardid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardid(), output);
  }

  // required uint64 entryid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->entryid(), output);
  }

  // required float exp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->exp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserFarmSkillExpGen)
}

::google::protobuf::uint8* UserFarmSkillExpGen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserFarmSkillExpGen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 cardid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardid(), target);
  }

  // required uint64 entryid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->entryid(), target);
  }

  // required float exp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->exp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserFarmSkillExpGen)
  return target;
}

size_t UserFarmSkillExpGen::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserFarmSkillExpGen)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_entryid()) {
    // required uint64 entryid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());
  }

  if (has_cardid()) {
    // required int32 cardid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cardid());
  }

  if (has_exp()) {
    // required float exp = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t UserFarmSkillExpGen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserFarmSkillExpGen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required uint64 entryid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());

    // required int32 cardid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cardid());

    // required float exp = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFarmSkillExpGen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserFarmSkillExpGen)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFarmSkillExpGen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFarmSkillExpGen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserFarmSkillExpGen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserFarmSkillExpGen)
    MergeFrom(*source);
  }
}

void UserFarmSkillExpGen::MergeFrom(const UserFarmSkillExpGen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserFarmSkillExpGen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000004u) {
      cardid_ = from.cardid_;
    }
    if (cached_has_bits & 0x00000008u) {
      exp_ = from.exp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserFarmSkillExpGen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserFarmSkillExpGen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFarmSkillExpGen::CopyFrom(const UserFarmSkillExpGen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserFarmSkillExpGen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFarmSkillExpGen::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void UserFarmSkillExpGen::Swap(UserFarmSkillExpGen* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserFarmSkillExpGen* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserFarmSkillExpGen::UnsafeArenaSwap(UserFarmSkillExpGen* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserFarmSkillExpGen::InternalSwap(UserFarmSkillExpGen* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entryid_, other->entryid_);
  swap(cardid_, other->cardid_);
  swap(exp_, other->exp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserFarmSkillExpGen::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserStatsMapEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStatsMapEntry::kUseridFieldNumber;
const int UserStatsMapEntry::kWildIslandGatherTimeFieldNumber;
const int UserStatsMapEntry::kWildIslandHarvestTime1FieldNumber;
const int UserStatsMapEntry::kWildIslandHarvestTime2FieldNumber;
const int UserStatsMapEntry::kWildIslandHarvestTime3FieldNumber;
const int UserStatsMapEntry::kWildIslandHarvestTime4FieldNumber;
const int UserStatsMapEntry::kGroupIslandRefreshtimeFieldNumber;
const int UserStatsMapEntry::kPlayerShipEntryidFieldNumber;
const int UserStatsMapEntry::kPlayerShipRefreshTimeFieldNumber;
const int UserStatsMapEntry::kPlayerShipNavigateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStatsMapEntry::UserStatsMapEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_UserStatsMapEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserStatsMapEntry)
}
UserStatsMapEntry::UserStatsMapEntry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserStatsMapEntry.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserStatsMapEntry)
}
UserStatsMapEntry::UserStatsMapEntry(const UserStatsMapEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&wild_island_gather_time_, &from.wild_island_gather_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_ship_navigate_time_) -
    reinterpret_cast<char*>(&wild_island_gather_time_)) + sizeof(player_ship_navigate_time_));
  // @@protoc_insertion_point(copy_constructor:db.UserStatsMapEntry)
}

void UserStatsMapEntry::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wild_island_gather_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_ship_navigate_time_) -
      reinterpret_cast<char*>(&wild_island_gather_time_)) + sizeof(player_ship_navigate_time_));
}

UserStatsMapEntry::~UserStatsMapEntry() {
  // @@protoc_insertion_point(destructor:db.UserStatsMapEntry)
  SharedDtor();
}

void UserStatsMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserStatsMapEntry::ArenaDtor(void* object) {
  UserStatsMapEntry* _this = reinterpret_cast< UserStatsMapEntry* >(object);
  (void)_this;
}
void UserStatsMapEntry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserStatsMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserStatsMapEntry::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserStatsMapEntry& UserStatsMapEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserStatsMapEntry.base);
  return *internal_default_instance();
}


void UserStatsMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserStatsMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&wild_island_gather_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_ship_entryid_) -
        reinterpret_cast<char*>(&wild_island_gather_time_)) + sizeof(player_ship_entryid_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&player_ship_refresh_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_ship_navigate_time_) -
        reinterpret_cast<char*>(&player_ship_refresh_time_)) + sizeof(player_ship_navigate_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserStatsMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserStatsMapEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 wild_island_gather_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_wild_island_gather_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &wild_island_gather_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 wild_island_harvest_time1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_wild_island_harvest_time1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &wild_island_harvest_time1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 wild_island_harvest_time2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_wild_island_harvest_time2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &wild_island_harvest_time2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 wild_island_harvest_time3 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_wild_island_harvest_time3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &wild_island_harvest_time3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 wild_island_harvest_time4 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_wild_island_harvest_time4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &wild_island_harvest_time4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 group_island_refreshtime = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_group_island_refreshtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &group_island_refreshtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 player_ship_entryid = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_player_ship_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_ship_entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 player_ship_refresh_time = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_player_ship_refresh_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &player_ship_refresh_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 player_ship_navigate_time = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {
          set_has_player_ship_navigate_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &player_ship_navigate_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserStatsMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserStatsMapEntry)
  return false;
#undef DO_
}

void UserStatsMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserStatsMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required sfixed64 wild_island_gather_time = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->wild_island_gather_time(), output);
  }

  // required sfixed64 wild_island_harvest_time1 = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->wild_island_harvest_time1(), output);
  }

  // required sfixed64 wild_island_harvest_time2 = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->wild_island_harvest_time2(), output);
  }

  // required sfixed64 wild_island_harvest_time3 = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(14, this->wild_island_harvest_time3(), output);
  }

  // required sfixed64 wild_island_harvest_time4 = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(15, this->wild_island_harvest_time4(), output);
  }

  // required sfixed64 group_island_refreshtime = 21;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->group_island_refreshtime(), output);
  }

  // required uint64 player_ship_entryid = 31;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->player_ship_entryid(), output);
  }

  // required sfixed64 player_ship_refresh_time = 32;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(32, this->player_ship_refresh_time(), output);
  }

  // required sfixed64 player_ship_navigate_time = 33;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(33, this->player_ship_navigate_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserStatsMapEntry)
}

::google::protobuf::uint8* UserStatsMapEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserStatsMapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required sfixed64 wild_island_gather_time = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->wild_island_gather_time(), target);
  }

  // required sfixed64 wild_island_harvest_time1 = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->wild_island_harvest_time1(), target);
  }

  // required sfixed64 wild_island_harvest_time2 = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->wild_island_harvest_time2(), target);
  }

  // required sfixed64 wild_island_harvest_time3 = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(14, this->wild_island_harvest_time3(), target);
  }

  // required sfixed64 wild_island_harvest_time4 = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(15, this->wild_island_harvest_time4(), target);
  }

  // required sfixed64 group_island_refreshtime = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->group_island_refreshtime(), target);
  }

  // required uint64 player_ship_entryid = 31;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->player_ship_entryid(), target);
  }

  // required sfixed64 player_ship_refresh_time = 32;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(32, this->player_ship_refresh_time(), target);
  }

  // required sfixed64 player_ship_navigate_time = 33;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(33, this->player_ship_navigate_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserStatsMapEntry)
  return target;
}

size_t UserStatsMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserStatsMapEntry)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_wild_island_gather_time()) {
    // required sfixed64 wild_island_gather_time = 11;
    total_size += 1 + 8;
  }

  if (has_wild_island_harvest_time1()) {
    // required sfixed64 wild_island_harvest_time1 = 12;
    total_size += 1 + 8;
  }

  if (has_wild_island_harvest_time2()) {
    // required sfixed64 wild_island_harvest_time2 = 13;
    total_size += 1 + 8;
  }

  if (has_wild_island_harvest_time3()) {
    // required sfixed64 wild_island_harvest_time3 = 14;
    total_size += 1 + 8;
  }

  if (has_wild_island_harvest_time4()) {
    // required sfixed64 wild_island_harvest_time4 = 15;
    total_size += 1 + 8;
  }

  if (has_group_island_refreshtime()) {
    // required sfixed64 group_island_refreshtime = 21;
    total_size += 2 + 8;
  }

  if (has_player_ship_entryid()) {
    // required uint64 player_ship_entryid = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_ship_entryid());
  }

  if (has_player_ship_refresh_time()) {
    // required sfixed64 player_ship_refresh_time = 32;
    total_size += 2 + 8;
  }

  if (has_player_ship_navigate_time()) {
    // required sfixed64 player_ship_navigate_time = 33;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t UserStatsMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserStatsMapEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required sfixed64 wild_island_gather_time = 11;
    total_size += 1 + 8;

    // required sfixed64 wild_island_harvest_time1 = 12;
    total_size += 1 + 8;

    // required sfixed64 wild_island_harvest_time2 = 13;
    total_size += 1 + 8;

    // required sfixed64 wild_island_harvest_time3 = 14;
    total_size += 1 + 8;

    // required sfixed64 wild_island_harvest_time4 = 15;
    total_size += 1 + 8;

    // required sfixed64 group_island_refreshtime = 21;
    total_size += 2 + 8;

    // required uint64 player_ship_entryid = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_ship_entryid());

    // required sfixed64 player_ship_refresh_time = 32;
    total_size += 2 + 8;

    // required sfixed64 player_ship_navigate_time = 33;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStatsMapEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserStatsMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const UserStatsMapEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserStatsMapEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserStatsMapEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserStatsMapEntry)
    MergeFrom(*source);
  }
}

void UserStatsMapEntry::MergeFrom(const UserStatsMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserStatsMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      wild_island_gather_time_ = from.wild_island_gather_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      wild_island_harvest_time1_ = from.wild_island_harvest_time1_;
    }
    if (cached_has_bits & 0x00000008u) {
      wild_island_harvest_time2_ = from.wild_island_harvest_time2_;
    }
    if (cached_has_bits & 0x00000010u) {
      wild_island_harvest_time3_ = from.wild_island_harvest_time3_;
    }
    if (cached_has_bits & 0x00000020u) {
      wild_island_harvest_time4_ = from.wild_island_harvest_time4_;
    }
    if (cached_has_bits & 0x00000040u) {
      group_island_refreshtime_ = from.group_island_refreshtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      player_ship_entryid_ = from.player_ship_entryid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      player_ship_refresh_time_ = from.player_ship_refresh_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      player_ship_navigate_time_ = from.player_ship_navigate_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserStatsMapEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserStatsMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatsMapEntry::CopyFrom(const UserStatsMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserStatsMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatsMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void UserStatsMapEntry::Swap(UserStatsMapEntry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserStatsMapEntry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserStatsMapEntry::UnsafeArenaSwap(UserStatsMapEntry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserStatsMapEntry::InternalSwap(UserStatsMapEntry* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(wild_island_gather_time_, other->wild_island_gather_time_);
  swap(wild_island_harvest_time1_, other->wild_island_harvest_time1_);
  swap(wild_island_harvest_time2_, other->wild_island_harvest_time2_);
  swap(wild_island_harvest_time3_, other->wild_island_harvest_time3_);
  swap(wild_island_harvest_time4_, other->wild_island_harvest_time4_);
  swap(group_island_refreshtime_, other->group_island_refreshtime_);
  swap(player_ship_entryid_, other->player_ship_entryid_);
  swap(player_ship_refresh_time_, other->player_ship_refresh_time_);
  swap(player_ship_navigate_time_, other->player_ship_navigate_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserStatsMapEntry::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserPirateShip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPirateShip::kUseridFieldNumber;
const int UserPirateShip::kTypeFieldNumber;
const int UserPirateShip::kEntryidFieldNumber;
const int UserPirateShip::kRefreshtimeFieldNumber;
const int UserPirateShip::kFightNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPirateShip::UserPirateShip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_UserPirateShip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserPirateShip)
}
UserPirateShip::UserPirateShip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserPirateShip.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserPirateShip)
}
UserPirateShip::UserPirateShip(const UserPirateShip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&refreshtime_) -
    reinterpret_cast<char*>(&type_)) + sizeof(refreshtime_));
  // @@protoc_insertion_point(copy_constructor:db.UserPirateShip)
}

void UserPirateShip::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refreshtime_) -
      reinterpret_cast<char*>(&type_)) + sizeof(refreshtime_));
}

UserPirateShip::~UserPirateShip() {
  // @@protoc_insertion_point(destructor:db.UserPirateShip)
  SharedDtor();
}

void UserPirateShip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserPirateShip::ArenaDtor(void* object) {
  UserPirateShip* _this = reinterpret_cast< UserPirateShip* >(object);
  (void)_this;
}
void UserPirateShip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserPirateShip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserPirateShip::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserPirateShip& UserPirateShip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserPirateShip.base);
  return *internal_default_instance();
}


void UserPirateShip::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserPirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 30u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&refreshtime_) -
        reinterpret_cast<char*>(&type_)) + sizeof(refreshtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserPirateShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserPirateShip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 entryid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 refreshtime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_refreshtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &refreshtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fight_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_fight_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserPirateShip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserPirateShip)
  return false;
#undef DO_
}

void UserPirateShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserPirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required uint64 entryid = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->entryid(), output);
  }

  // required sfixed64 refreshtime = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->refreshtime(), output);
  }

  // required int32 fight_num = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fight_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserPirateShip)
}

::google::protobuf::uint8* UserPirateShip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserPirateShip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required uint64 entryid = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->entryid(), target);
  }

  // required sfixed64 refreshtime = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->refreshtime(), target);
  }

  // required int32 fight_num = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fight_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserPirateShip)
  return target;
}

size_t UserPirateShip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserPirateShip)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_fight_num()) {
    // required int32 fight_num = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fight_num());
  }

  if (has_entryid()) {
    // required uint64 entryid = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());
  }

  if (has_refreshtime()) {
    // required sfixed64 refreshtime = 12;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UserPirateShip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserPirateShip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 fight_num = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fight_num());

    // required uint64 entryid = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());

    // required sfixed64 refreshtime = 12;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPirateShip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserPirateShip)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPirateShip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPirateShip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserPirateShip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserPirateShip)
    MergeFrom(*source);
  }
}

void UserPirateShip::MergeFrom(const UserPirateShip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserPirateShip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      fight_num_ = from.fight_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000010u) {
      refreshtime_ = from.refreshtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserPirateShip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserPirateShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPirateShip::CopyFrom(const UserPirateShip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserPirateShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPirateShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void UserPirateShip::Swap(UserPirateShip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserPirateShip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserPirateShip::UnsafeArenaSwap(UserPirateShip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserPirateShip::InternalSwap(UserPirateShip* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(fight_num_, other->fight_num_);
  swap(entryid_, other->entryid_);
  swap(refreshtime_, other->refreshtime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserPirateShip::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WildIslandDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WildIslandDetail::kEntryidFieldNumber;
const int WildIslandDetail::kIslandStateFieldNumber;
const int WildIslandDetail::kOccupierTicketidFieldNumber;
const int WildIslandDetail::kOccupyTimeFieldNumber;
const int WildIslandDetail::kRefreshtimeFieldNumber;
const int WildIslandDetail::kWorkshopGradeFieldNumber;
const int WildIslandDetail::kWorkshopStateFieldNumber;
const int WildIslandDetail::kWorkshopBaseRatioFieldNumber;
const int WildIslandDetail::kWorkshopStorageFieldNumber;
const int WildIslandDetail::kWorkshopGatherPerMinFieldNumber;
const int WildIslandDetail::kWorkshopGatherAddRatioFieldNumber;
const int WildIslandDetail::kWorkshopGatherTimeFieldNumber;
const int WildIslandDetail::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WildIslandDetail::WildIslandDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_WildIslandDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.WildIslandDetail)
}
WildIslandDetail::WildIslandDetail(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_WildIslandDetail.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.WildIslandDetail)
}
WildIslandDetail::WildIslandDetail(const WildIslandDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entryid_, &from.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&entryid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.WildIslandDetail)
}

void WildIslandDetail::SharedCtor() {
  ::memset(&entryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&entryid_)) + sizeof(optime_));
}

WildIslandDetail::~WildIslandDetail() {
  // @@protoc_insertion_point(destructor:db.WildIslandDetail)
  SharedDtor();
}

void WildIslandDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void WildIslandDetail::ArenaDtor(void* object) {
  WildIslandDetail* _this = reinterpret_cast< WildIslandDetail* >(object);
  (void)_this;
}
void WildIslandDetail::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WildIslandDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WildIslandDetail::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WildIslandDetail& WildIslandDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_WildIslandDetail.base);
  return *internal_default_instance();
}


void WildIslandDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:db.WildIslandDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&workshop_base_ratio_) -
        reinterpret_cast<char*>(&entryid_)) + sizeof(workshop_base_ratio_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&workshop_storage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&workshop_storage_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WildIslandDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.WildIslandDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 entryid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 island_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_island_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &island_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 occupier_ticketid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_occupier_ticketid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupier_ticketid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 occupy_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_occupy_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &occupy_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 refreshtime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_refreshtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &refreshtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 workshop_grade = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_workshop_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workshop_grade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 workshop_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_workshop_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workshop_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float workshop_base_ratio = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_workshop_base_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &workshop_base_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float workshop_storage = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_workshop_storage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &workshop_storage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float workshop_gather_per_min = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_workshop_gather_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &workshop_gather_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float workshop_gather_add_ratio = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_workshop_gather_add_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &workshop_gather_add_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 workshop_gather_time = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_workshop_gather_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &workshop_gather_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.WildIslandDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.WildIslandDetail)
  return false;
#undef DO_
}

void WildIslandDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.WildIslandDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 entryid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entryid(), output);
  }

  // required int32 island_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->island_state(), output);
  }

  // required int32 occupier_ticketid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->occupier_ticketid(), output);
  }

  // required sfixed64 occupy_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->occupy_time(), output);
  }

  // required sfixed64 refreshtime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->refreshtime(), output);
  }

  // required int32 workshop_grade = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->workshop_grade(), output);
  }

  // required int32 workshop_state = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->workshop_state(), output);
  }

  // required float workshop_base_ratio = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->workshop_base_ratio(), output);
  }

  // required float workshop_storage = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->workshop_storage(), output);
  }

  // required float workshop_gather_per_min = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->workshop_gather_per_min(), output);
  }

  // required float workshop_gather_add_ratio = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->workshop_gather_add_ratio(), output);
  }

  // required sfixed64 workshop_gather_time = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(17, this->workshop_gather_time(), output);
  }

  // required sfixed64 optime = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.WildIslandDetail)
}

::google::protobuf::uint8* WildIslandDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.WildIslandDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 entryid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entryid(), target);
  }

  // required int32 island_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->island_state(), target);
  }

  // required int32 occupier_ticketid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->occupier_ticketid(), target);
  }

  // required sfixed64 occupy_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->occupy_time(), target);
  }

  // required sfixed64 refreshtime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->refreshtime(), target);
  }

  // required int32 workshop_grade = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->workshop_grade(), target);
  }

  // required int32 workshop_state = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->workshop_state(), target);
  }

  // required float workshop_base_ratio = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->workshop_base_ratio(), target);
  }

  // required float workshop_storage = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->workshop_storage(), target);
  }

  // required float workshop_gather_per_min = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->workshop_gather_per_min(), target);
  }

  // required float workshop_gather_add_ratio = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->workshop_gather_add_ratio(), target);
  }

  // required sfixed64 workshop_gather_time = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(17, this->workshop_gather_time(), target);
  }

  // required sfixed64 optime = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.WildIslandDetail)
  return target;
}

size_t WildIslandDetail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.WildIslandDetail)
  size_t total_size = 0;

  if (has_entryid()) {
    // required uint64 entryid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());
  }

  if (has_island_state()) {
    // required int32 island_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->island_state());
  }

  if (has_occupier_ticketid()) {
    // required int32 occupier_ticketid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupier_ticketid());
  }

  if (has_occupy_time()) {
    // required sfixed64 occupy_time = 4;
    total_size += 1 + 8;
  }

  if (has_refreshtime()) {
    // required sfixed64 refreshtime = 5;
    total_size += 1 + 8;
  }

  if (has_workshop_grade()) {
    // required int32 workshop_grade = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshop_grade());
  }

  if (has_workshop_state()) {
    // required int32 workshop_state = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshop_state());
  }

  if (has_workshop_base_ratio()) {
    // required float workshop_base_ratio = 13;
    total_size += 1 + 4;
  }

  if (has_workshop_storage()) {
    // required float workshop_storage = 14;
    total_size += 1 + 4;
  }

  if (has_workshop_gather_per_min()) {
    // required float workshop_gather_per_min = 15;
    total_size += 1 + 4;
  }

  if (has_workshop_gather_add_ratio()) {
    // required float workshop_gather_add_ratio = 16;
    total_size += 2 + 4;
  }

  if (has_workshop_gather_time()) {
    // required sfixed64 workshop_gather_time = 17;
    total_size += 2 + 8;
  }

  if (has_optime()) {
    // required sfixed64 optime = 21;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t WildIslandDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.WildIslandDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required uint64 entryid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entryid());

    // required int32 island_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->island_state());

    // required int32 occupier_ticketid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupier_ticketid());

    // required sfixed64 occupy_time = 4;
    total_size += 1 + 8;

    // required sfixed64 refreshtime = 5;
    total_size += 1 + 8;

    // required int32 workshop_grade = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshop_grade());

    // required int32 workshop_state = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workshop_state());

    // required float workshop_base_ratio = 13;
    total_size += 1 + 4;

    // required float workshop_storage = 14;
    total_size += 1 + 4;

    // required float workshop_gather_per_min = 15;
    total_size += 1 + 4;

    // required float workshop_gather_add_ratio = 16;
    total_size += 2 + 4;

    // required sfixed64 workshop_gather_time = 17;
    total_size += 2 + 8;

    // required sfixed64 optime = 21;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WildIslandDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.WildIslandDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const WildIslandDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WildIslandDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.WildIslandDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.WildIslandDetail)
    MergeFrom(*source);
  }
}

void WildIslandDetail::MergeFrom(const WildIslandDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.WildIslandDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      entryid_ = from.entryid_;
    }
    if (cached_has_bits & 0x00000002u) {
      island_state_ = from.island_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      occupier_ticketid_ = from.occupier_ticketid_;
    }
    if (cached_has_bits & 0x00000008u) {
      occupy_time_ = from.occupy_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      refreshtime_ = from.refreshtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      workshop_grade_ = from.workshop_grade_;
    }
    if (cached_has_bits & 0x00000040u) {
      workshop_state_ = from.workshop_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      workshop_base_ratio_ = from.workshop_base_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      workshop_storage_ = from.workshop_storage_;
    }
    if (cached_has_bits & 0x00000200u) {
      workshop_gather_per_min_ = from.workshop_gather_per_min_;
    }
    if (cached_has_bits & 0x00000400u) {
      workshop_gather_add_ratio_ = from.workshop_gather_add_ratio_;
    }
    if (cached_has_bits & 0x00000800u) {
      workshop_gather_time_ = from.workshop_gather_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WildIslandDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.WildIslandDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildIslandDetail::CopyFrom(const WildIslandDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.WildIslandDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildIslandDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void WildIslandDetail::Swap(WildIslandDetail* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WildIslandDetail* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WildIslandDetail::UnsafeArenaSwap(WildIslandDetail* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WildIslandDetail::InternalSwap(WildIslandDetail* other) {
  using std::swap;
  swap(entryid_, other->entryid_);
  swap(island_state_, other->island_state_);
  swap(occupier_ticketid_, other->occupier_ticketid_);
  swap(occupy_time_, other->occupy_time_);
  swap(refreshtime_, other->refreshtime_);
  swap(workshop_grade_, other->workshop_grade_);
  swap(workshop_state_, other->workshop_state_);
  swap(workshop_base_ratio_, other->workshop_base_ratio_);
  swap(workshop_storage_, other->workshop_storage_);
  swap(workshop_gather_per_min_, other->workshop_gather_per_min_);
  swap(workshop_gather_add_ratio_, other->workshop_gather_add_ratio_);
  swap(workshop_gather_time_, other->workshop_gather_time_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WildIslandDetail::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameGroupWildIsland::InitAsDefaultInstance() {
  ::db::_GameGroupWildIsland_default_instance_._instance.get_mutable()->detail_ = const_cast< ::db::WildIslandDetail*>(
      ::db::WildIslandDetail::internal_default_instance());
}
void GameGroupWildIsland::unsafe_arena_set_allocated_detail(
    ::db::WildIslandDetail* detail) {
  if (GetArenaNoVirtual() == NULL) {
    delete detail_;
  }
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GameGroupWildIsland.detail)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameGroupWildIsland::kGroupidFieldNumber;
const int GameGroupWildIsland::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameGroupWildIsland::GameGroupWildIsland()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_GameGroupWildIsland.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.GameGroupWildIsland)
}
GameGroupWildIsland::GameGroupWildIsland(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_GameGroupWildIsland.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.GameGroupWildIsland)
}
GameGroupWildIsland::GameGroupWildIsland(const GameGroupWildIsland& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_detail()) {
    detail_ = new ::db::WildIslandDetail(*from.detail_);
  } else {
    detail_ = NULL;
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:db.GameGroupWildIsland)
}

void GameGroupWildIsland::SharedCtor() {
  ::memset(&detail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&detail_)) + sizeof(groupid_));
}

GameGroupWildIsland::~GameGroupWildIsland() {
  // @@protoc_insertion_point(destructor:db.GameGroupWildIsland)
  SharedDtor();
}

void GameGroupWildIsland::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete detail_;
}

void GameGroupWildIsland::ArenaDtor(void* object) {
  GameGroupWildIsland* _this = reinterpret_cast< GameGroupWildIsland* >(object);
  (void)_this;
}
void GameGroupWildIsland::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameGroupWildIsland::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameGroupWildIsland::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameGroupWildIsland& GameGroupWildIsland::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_GameGroupWildIsland.base);
  return *internal_default_instance();
}


void GameGroupWildIsland::Clear() {
// @@protoc_insertion_point(message_clear_start:db.GameGroupWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(detail_ != NULL);
    detail_->Clear();
  }
  groupid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameGroupWildIsland::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.GameGroupWildIsland)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .db.WildIslandDetail detail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.GameGroupWildIsland)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.GameGroupWildIsland)
  return false;
#undef DO_
}

void GameGroupWildIsland::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.GameGroupWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required .db.WildIslandDetail detail = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detail(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.GameGroupWildIsland)
}

::google::protobuf::uint8* GameGroupWildIsland::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.GameGroupWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required .db.WildIslandDetail detail = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detail(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.GameGroupWildIsland)
  return target;
}

size_t GameGroupWildIsland::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.GameGroupWildIsland)
  size_t total_size = 0;

  if (has_detail()) {
    // required .db.WildIslandDetail detail = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  if (has_groupid()) {
    // required uint64 groupid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  return total_size;
}
size_t GameGroupWildIsland::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.GameGroupWildIsland)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .db.WildIslandDetail detail = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detail_);

    // required uint64 groupid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameGroupWildIsland::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.GameGroupWildIsland)
  GOOGLE_DCHECK_NE(&from, this);
  const GameGroupWildIsland* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameGroupWildIsland>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.GameGroupWildIsland)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.GameGroupWildIsland)
    MergeFrom(*source);
  }
}

void GameGroupWildIsland::MergeFrom(const GameGroupWildIsland& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.GameGroupWildIsland)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_detail()->::db::WildIslandDetail::MergeFrom(from.detail());
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameGroupWildIsland::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.GameGroupWildIsland)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameGroupWildIsland::CopyFrom(const GameGroupWildIsland& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.GameGroupWildIsland)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGroupWildIsland::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_detail()) {
    if (!this->detail_->IsInitialized()) return false;
  }
  return true;
}

void GameGroupWildIsland::Swap(GameGroupWildIsland* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameGroupWildIsland* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameGroupWildIsland::UnsafeArenaSwap(GameGroupWildIsland* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameGroupWildIsland::InternalSwap(GameGroupWildIsland* other) {
  using std::swap;
  swap(detail_, other->detail_);
  swap(groupid_, other->groupid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameGroupWildIsland::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameGroupMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameGroupMember::kGroupidFieldNumber;
const int GameGroupMember::kMemberidFieldNumber;
const int GameGroupMember::kStateFieldNumber;
const int GameGroupMember::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameGroupMember::GameGroupMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_GameGroupMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.GameGroupMember)
}
GameGroupMember::GameGroupMember(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_GameGroupMember.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.GameGroupMember)
}
GameGroupMember::GameGroupMember(const GameGroupMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.GameGroupMember)
}

void GameGroupMember::SharedCtor() {
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(optime_));
}

GameGroupMember::~GameGroupMember() {
  // @@protoc_insertion_point(destructor:db.GameGroupMember)
  SharedDtor();
}

void GameGroupMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameGroupMember::ArenaDtor(void* object) {
  GameGroupMember* _this = reinterpret_cast< GameGroupMember* >(object);
  (void)_this;
}
void GameGroupMember::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameGroupMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameGroupMember::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameGroupMember& GameGroupMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_GameGroupMember.base);
  return *internal_default_instance();
}


void GameGroupMember::Clear() {
// @@protoc_insertion_point(message_clear_start:db.GameGroupMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&groupid_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameGroupMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.GameGroupMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 memberid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_memberid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.GameGroupMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.GameGroupMember)
  return false;
#undef DO_
}

void GameGroupMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.GameGroupMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groupid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 memberid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->memberid(), output);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // required sfixed64 optime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.GameGroupMember)
}

::google::protobuf::uint8* GameGroupMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.GameGroupMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 groupid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 memberid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->memberid(), target);
  }

  // required int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // required sfixed64 optime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.GameGroupMember)
  return target;
}

size_t GameGroupMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.GameGroupMember)
  size_t total_size = 0;

  if (has_groupid()) {
    // required uint64 groupid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  if (has_memberid()) {
    // required int32 memberid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memberid());
  }

  if (has_state()) {
    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_optime()) {
    // required sfixed64 optime = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t GameGroupMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.GameGroupMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 groupid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());

    // required int32 memberid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memberid());

    // required int32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required sfixed64 optime = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameGroupMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.GameGroupMember)
  GOOGLE_DCHECK_NE(&from, this);
  const GameGroupMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameGroupMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.GameGroupMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.GameGroupMember)
    MergeFrom(*source);
  }
}

void GameGroupMember::MergeFrom(const GameGroupMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.GameGroupMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000002u) {
      memberid_ = from.memberid_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameGroupMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.GameGroupMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameGroupMember::CopyFrom(const GameGroupMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.GameGroupMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameGroupMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void GameGroupMember::Swap(GameGroupMember* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameGroupMember* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameGroupMember::UnsafeArenaSwap(GameGroupMember* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameGroupMember::InternalSwap(GameGroupMember* other) {
  using std::swap;
  swap(groupid_, other->groupid_);
  swap(memberid_, other->memberid_);
  swap(state_, other->state_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameGroupMember::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserWildIsland::InitAsDefaultInstance() {
  ::db::_UserWildIsland_default_instance_._instance.get_mutable()->detail_ = const_cast< ::db::WildIslandDetail*>(
      ::db::WildIslandDetail::internal_default_instance());
}
void UserWildIsland::unsafe_arena_set_allocated_detail(
    ::db::WildIslandDetail* detail) {
  if (GetArenaNoVirtual() == NULL) {
    delete detail_;
  }
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserWildIsland.detail)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserWildIsland::kUseridFieldNumber;
const int UserWildIsland::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserWildIsland::UserWildIsland()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_UserWildIsland.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserWildIsland)
}
UserWildIsland::UserWildIsland(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserWildIsland.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserWildIsland)
}
UserWildIsland::UserWildIsland(const UserWildIsland& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  if (from.has_detail()) {
    detail_ = new ::db::WildIslandDetail(*from.detail_);
  } else {
    detail_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:db.UserWildIsland)
}

void UserWildIsland::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_ = NULL;
}

UserWildIsland::~UserWildIsland() {
  // @@protoc_insertion_point(destructor:db.UserWildIsland)
  SharedDtor();
}

void UserWildIsland::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detail_;
}

void UserWildIsland::ArenaDtor(void* object) {
  UserWildIsland* _this = reinterpret_cast< UserWildIsland* >(object);
  (void)_this;
}
void UserWildIsland::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserWildIsland::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserWildIsland::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserWildIsland& UserWildIsland::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserWildIsland.base);
  return *internal_default_instance();
}


void UserWildIsland::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(detail_ != NULL);
      detail_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserWildIsland::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserWildIsland)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .db.WildIslandDetail detail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserWildIsland)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserWildIsland)
  return false;
#undef DO_
}

void UserWildIsland::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required .db.WildIslandDetail detail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detail(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserWildIsland)
}

::google::protobuf::uint8* UserWildIsland::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserWildIsland)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required .db.WildIslandDetail detail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detail(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserWildIsland)
  return target;
}

size_t UserWildIsland::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserWildIsland)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_detail()) {
    // required .db.WildIslandDetail detail = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  return total_size;
}
size_t UserWildIsland::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserWildIsland)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required .db.WildIslandDetail detail = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detail_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserWildIsland::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserWildIsland)
  GOOGLE_DCHECK_NE(&from, this);
  const UserWildIsland* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserWildIsland>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserWildIsland)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserWildIsland)
    MergeFrom(*source);
  }
}

void UserWildIsland::MergeFrom(const UserWildIsland& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserWildIsland)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_detail()->::db::WildIslandDetail::MergeFrom(from.detail());
    }
  }
}

void UserWildIsland::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserWildIsland)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWildIsland::CopyFrom(const UserWildIsland& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserWildIsland)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWildIsland::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_detail()) {
    if (!this->detail_->IsInitialized()) return false;
  }
  return true;
}

void UserWildIsland::Swap(UserWildIsland* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserWildIsland* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserWildIsland::UnsafeArenaSwap(UserWildIsland* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserWildIsland::InternalSwap(UserWildIsland* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(detail_, other->detail_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserWildIsland::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserStatsWildIslandGather::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStatsWildIslandGather::kUseridFieldNumber;
const int UserStatsWildIslandGather::kGatheridFieldNumber;
const int UserStatsWildIslandGather::kGatherTypeFieldNumber;
const int UserStatsWildIslandGather::kGatherResidFieldNumber;
const int UserStatsWildIslandGather::kGatherResnumFieldNumber;
const int UserStatsWildIslandGather::kGatherStateFieldNumber;
const int UserStatsWildIslandGather::kGatherStarttimeFieldNumber;
const int UserStatsWildIslandGather::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStatsWildIslandGather::UserStatsWildIslandGather()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcMap_2eproto::scc_info_UserStatsWildIslandGather.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserStatsWildIslandGather)
}
UserStatsWildIslandGather::UserStatsWildIslandGather(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserStatsWildIslandGather.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserStatsWildIslandGather)
}
UserStatsWildIslandGather::UserStatsWildIslandGather(const UserStatsWildIslandGather& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&gatherid_, &from.gatherid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&gatherid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.UserStatsWildIslandGather)
}

void UserStatsWildIslandGather::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gatherid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&gatherid_)) + sizeof(optime_));
}

UserStatsWildIslandGather::~UserStatsWildIslandGather() {
  // @@protoc_insertion_point(destructor:db.UserStatsWildIslandGather)
  SharedDtor();
}

void UserStatsWildIslandGather::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserStatsWildIslandGather::ArenaDtor(void* object) {
  UserStatsWildIslandGather* _this = reinterpret_cast< UserStatsWildIslandGather* >(object);
  (void)_this;
}
void UserStatsWildIslandGather::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserStatsWildIslandGather::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserStatsWildIslandGather::descriptor() {
  ::protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserStatsWildIslandGather& UserStatsWildIslandGather::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcMap_2eproto::scc_info_UserStatsWildIslandGather.base);
  return *internal_default_instance();
}


void UserStatsWildIslandGather::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserStatsWildIslandGather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&gatherid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&gatherid_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserStatsWildIslandGather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserStatsWildIslandGather)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 gatherid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gatherid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gatherid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gather_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_gather_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 gather_resid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gather_resid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gather_resid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float gather_resnum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_gather_resnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gather_resnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gather_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_gather_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 gather_starttime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_gather_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &gather_starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserStatsWildIslandGather)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserStatsWildIslandGather)
  return false;
#undef DO_
}

void UserStatsWildIslandGather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserStatsWildIslandGather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required uint64 gatherid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gatherid(), output);
  }

  // required int32 gather_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gather_type(), output);
  }

  // required uint64 gather_resid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gather_resid(), output);
  }

  // required float gather_resnum = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gather_resnum(), output);
  }

  // required int32 gather_state = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gather_state(), output);
  }

  // required sfixed64 gather_starttime = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->gather_starttime(), output);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserStatsWildIslandGather)
}

::google::protobuf::uint8* UserStatsWildIslandGather::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserStatsWildIslandGather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required uint64 gatherid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gatherid(), target);
  }

  // required int32 gather_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gather_type(), target);
  }

  // required uint64 gather_resid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gather_resid(), target);
  }

  // required float gather_resnum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gather_resnum(), target);
  }

  // required int32 gather_state = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gather_state(), target);
  }

  // required sfixed64 gather_starttime = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->gather_starttime(), target);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserStatsWildIslandGather)
  return target;
}

size_t UserStatsWildIslandGather::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserStatsWildIslandGather)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_gatherid()) {
    // required uint64 gatherid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gatherid());
  }

  if (has_gather_resid()) {
    // required uint64 gather_resid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gather_resid());
  }

  if (has_gather_type()) {
    // required int32 gather_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_type());
  }

  if (has_gather_resnum()) {
    // required float gather_resnum = 5;
    total_size += 1 + 4;
  }

  if (has_gather_starttime()) {
    // required sfixed64 gather_starttime = 7;
    total_size += 1 + 8;
  }

  if (has_gather_state()) {
    // required int32 gather_state = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_state());
  }

  if (has_optime()) {
    // required sfixed64 optime = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UserStatsWildIslandGather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserStatsWildIslandGather)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required uint64 gatherid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gatherid());

    // required uint64 gather_resid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gather_resid());

    // required int32 gather_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_type());

    // required float gather_resnum = 5;
    total_size += 1 + 4;

    // required sfixed64 gather_starttime = 7;
    total_size += 1 + 8;

    // required int32 gather_state = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gather_state());

    // required sfixed64 optime = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStatsWildIslandGather::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserStatsWildIslandGather)
  GOOGLE_DCHECK_NE(&from, this);
  const UserStatsWildIslandGather* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserStatsWildIslandGather>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserStatsWildIslandGather)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserStatsWildIslandGather)
    MergeFrom(*source);
  }
}

void UserStatsWildIslandGather::MergeFrom(const UserStatsWildIslandGather& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserStatsWildIslandGather)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      gatherid_ = from.gatherid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gather_resid_ = from.gather_resid_;
    }
    if (cached_has_bits & 0x00000008u) {
      gather_type_ = from.gather_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      gather_resnum_ = from.gather_resnum_;
    }
    if (cached_has_bits & 0x00000020u) {
      gather_starttime_ = from.gather_starttime_;
    }
    if (cached_has_bits & 0x00000040u) {
      gather_state_ = from.gather_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserStatsWildIslandGather::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserStatsWildIslandGather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatsWildIslandGather::CopyFrom(const UserStatsWildIslandGather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserStatsWildIslandGather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatsWildIslandGather::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void UserStatsWildIslandGather::Swap(UserStatsWildIslandGather* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserStatsWildIslandGather* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserStatsWildIslandGather::UnsafeArenaSwap(UserStatsWildIslandGather* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserStatsWildIslandGather::InternalSwap(UserStatsWildIslandGather* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gatherid_, other->gatherid_);
  swap(gather_resid_, other->gather_resid_);
  swap(gather_type_, other->gather_type_);
  swap(gather_resnum_, other->gather_resnum_);
  swap(gather_starttime_, other->gather_starttime_);
  swap(gather_state_, other->gather_state_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserStatsWildIslandGather::GetMetadata() const {
  protobuf_StoredProcMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMap* Arena::CreateMaybeMessage< ::db::ConfigMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMapList* Arena::CreateMaybeMessage< ::db::ConfigMapList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMapList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMapArea* Arena::CreateMaybeMessage< ::db::ConfigMapArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMapArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMapAreaList* Arena::CreateMaybeMessage< ::db::ConfigMapAreaList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMapAreaList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMapEntry* Arena::CreateMaybeMessage< ::db::ConfigMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMapEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigMapEntryList* Arena::CreateMaybeMessage< ::db::ConfigMapEntryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigMapEntryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPirateShip* Arena::CreateMaybeMessage< ::db::ConfigPirateShip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPirateShip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigPirateShipList* Arena::CreateMaybeMessage< ::db::ConfigPirateShipList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigPirateShipList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigWildIsland* Arena::CreateMaybeMessage< ::db::ConfigWildIsland >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigWildIsland >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigWildIslandList* Arena::CreateMaybeMessage< ::db::ConfigWildIslandList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigWildIslandList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserMapArea* Arena::CreateMaybeMessage< ::db::UserMapArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserMapArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserMapEntry* Arena::CreateMaybeMessage< ::db::UserMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserMapEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserFarmSkillExpGen* Arena::CreateMaybeMessage< ::db::UserFarmSkillExpGen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserFarmSkillExpGen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserStatsMapEntry* Arena::CreateMaybeMessage< ::db::UserStatsMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserStatsMapEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserPirateShip* Arena::CreateMaybeMessage< ::db::UserPirateShip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserPirateShip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::WildIslandDetail* Arena::CreateMaybeMessage< ::db::WildIslandDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::WildIslandDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::GameGroupWildIsland* Arena::CreateMaybeMessage< ::db::GameGroupWildIsland >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::GameGroupWildIsland >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::GameGroupMember* Arena::CreateMaybeMessage< ::db::GameGroupMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::GameGroupMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserWildIsland* Arena::CreateMaybeMessage< ::db::UserWildIsland >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserWildIsland >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserStatsWildIslandGather* Arena::CreateMaybeMessage< ::db::UserStatsWildIslandGather >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserStatsWildIslandGather >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
