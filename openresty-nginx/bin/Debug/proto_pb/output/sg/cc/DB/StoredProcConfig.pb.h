// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcConfig.proto

#ifndef PROTOBUF_INCLUDED_StoredProcConfig_2eproto
#define PROTOBUF_INCLUDED_StoredProcConfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcConfig_2eproto 

namespace protobuf_StoredProcConfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[86];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_StoredProcConfig_2eproto
namespace db {
class ConfigAchievement;
class ConfigAchievementDefaultTypeInternal;
extern ConfigAchievementDefaultTypeInternal _ConfigAchievement_default_instance_;
class ConfigAchievementTask;
class ConfigAchievementTaskDefaultTypeInternal;
extern ConfigAchievementTaskDefaultTypeInternal _ConfigAchievementTask_default_instance_;
class ConfigBaseRoom;
class ConfigBaseRoomDefaultTypeInternal;
extern ConfigBaseRoomDefaultTypeInternal _ConfigBaseRoom_default_instance_;
class ConfigBeacon;
class ConfigBeaconDefaultTypeInternal;
extern ConfigBeaconDefaultTypeInternal _ConfigBeacon_default_instance_;
class ConfigBeaconTalent;
class ConfigBeaconTalentDefaultTypeInternal;
extern ConfigBeaconTalentDefaultTypeInternal _ConfigBeaconTalent_default_instance_;
class ConfigBeaconTalentGroup;
class ConfigBeaconTalentGroupDefaultTypeInternal;
extern ConfigBeaconTalentGroupDefaultTypeInternal _ConfigBeaconTalentGroup_default_instance_;
class ConfigBusinessman;
class ConfigBusinessmanDefaultTypeInternal;
extern ConfigBusinessmanDefaultTypeInternal _ConfigBusinessman_default_instance_;
class ConfigCard;
class ConfigCardDefaultTypeInternal;
extern ConfigCardDefaultTypeInternal _ConfigCard_default_instance_;
class ConfigCardAttribute;
class ConfigCardAttributeDefaultTypeInternal;
extern ConfigCardAttributeDefaultTypeInternal _ConfigCardAttribute_default_instance_;
class ConfigCardEquip;
class ConfigCardEquipDefaultTypeInternal;
extern ConfigCardEquipDefaultTypeInternal _ConfigCardEquip_default_instance_;
class ConfigCardEquipStrengthen;
class ConfigCardEquipStrengthenDefaultTypeInternal;
extern ConfigCardEquipStrengthenDefaultTypeInternal _ConfigCardEquipStrengthen_default_instance_;
class ConfigCardLevel;
class ConfigCardLevelDefaultTypeInternal;
extern ConfigCardLevelDefaultTypeInternal _ConfigCardLevel_default_instance_;
class ConfigCardPractice;
class ConfigCardPracticeDefaultTypeInternal;
extern ConfigCardPracticeDefaultTypeInternal _ConfigCardPractice_default_instance_;
class ConfigCardStrengthen;
class ConfigCardStrengthenDefaultTypeInternal;
extern ConfigCardStrengthenDefaultTypeInternal _ConfigCardStrengthen_default_instance_;
class ConfigCardTalent;
class ConfigCardTalentDefaultTypeInternal;
extern ConfigCardTalentDefaultTypeInternal _ConfigCardTalent_default_instance_;
class ConfigChest;
class ConfigChestDefaultTypeInternal;
extern ConfigChestDefaultTypeInternal _ConfigChest_default_instance_;
class ConfigDailyGift;
class ConfigDailyGiftDefaultTypeInternal;
extern ConfigDailyGiftDefaultTypeInternal _ConfigDailyGift_default_instance_;
class ConfigDropItemGroup;
class ConfigDropItemGroupDefaultTypeInternal;
extern ConfigDropItemGroupDefaultTypeInternal _ConfigDropItemGroup_default_instance_;
class ConfigDungeonAltar;
class ConfigDungeonAltarDefaultTypeInternal;
extern ConfigDungeonAltarDefaultTypeInternal _ConfigDungeonAltar_default_instance_;
class ConfigDungeonChest;
class ConfigDungeonChestDefaultTypeInternal;
extern ConfigDungeonChestDefaultTypeInternal _ConfigDungeonChest_default_instance_;
class ConfigDungeonContentGroup;
class ConfigDungeonContentGroupDefaultTypeInternal;
extern ConfigDungeonContentGroupDefaultTypeInternal _ConfigDungeonContentGroup_default_instance_;
class ConfigDungeonEvent;
class ConfigDungeonEventDefaultTypeInternal;
extern ConfigDungeonEventDefaultTypeInternal _ConfigDungeonEvent_default_instance_;
class ConfigDungeonStoreGroup;
class ConfigDungeonStoreGroupDefaultTypeInternal;
extern ConfigDungeonStoreGroupDefaultTypeInternal _ConfigDungeonStoreGroup_default_instance_;
class ConfigDungeonTalent;
class ConfigDungeonTalentDefaultTypeInternal;
extern ConfigDungeonTalentDefaultTypeInternal _ConfigDungeonTalent_default_instance_;
class ConfigDungeonTalentTree;
class ConfigDungeonTalentTreeDefaultTypeInternal;
extern ConfigDungeonTalentTreeDefaultTypeInternal _ConfigDungeonTalentTree_default_instance_;
class ConfigEasterEgg;
class ConfigEasterEggDefaultTypeInternal;
extern ConfigEasterEggDefaultTypeInternal _ConfigEasterEgg_default_instance_;
class ConfigEnemy;
class ConfigEnemyDefaultTypeInternal;
extern ConfigEnemyDefaultTypeInternal _ConfigEnemy_default_instance_;
class ConfigEnemyEvent;
class ConfigEnemyEventDefaultTypeInternal;
extern ConfigEnemyEventDefaultTypeInternal _ConfigEnemyEvent_default_instance_;
class ConfigEnemyGroup;
class ConfigEnemyGroupDefaultTypeInternal;
extern ConfigEnemyGroupDefaultTypeInternal _ConfigEnemyGroup_default_instance_;
class ConfigEquipAttributeWord;
class ConfigEquipAttributeWordDefaultTypeInternal;
extern ConfigEquipAttributeWordDefaultTypeInternal _ConfigEquipAttributeWord_default_instance_;
class ConfigEquipDecompose;
class ConfigEquipDecomposeDefaultTypeInternal;
extern ConfigEquipDecomposeDefaultTypeInternal _ConfigEquipDecompose_default_instance_;
class ConfigEquipDecomposeCost;
class ConfigEquipDecomposeCostDefaultTypeInternal;
extern ConfigEquipDecomposeCostDefaultTypeInternal _ConfigEquipDecomposeCost_default_instance_;
class ConfigEquipRefineCost;
class ConfigEquipRefineCostDefaultTypeInternal;
extern ConfigEquipRefineCostDefaultTypeInternal _ConfigEquipRefineCost_default_instance_;
class ConfigExploreEvent;
class ConfigExploreEventDefaultTypeInternal;
extern ConfigExploreEventDefaultTypeInternal _ConfigExploreEvent_default_instance_;
class ConfigFacility;
class ConfigFacilityDefaultTypeInternal;
extern ConfigFacilityDefaultTypeInternal _ConfigFacility_default_instance_;
class ConfigFacilityGroup;
class ConfigFacilityGroupDefaultTypeInternal;
extern ConfigFacilityGroupDefaultTypeInternal _ConfigFacilityGroup_default_instance_;
class ConfigFarmSkillLevel;
class ConfigFarmSkillLevelDefaultTypeInternal;
extern ConfigFarmSkillLevelDefaultTypeInternal _ConfigFarmSkillLevel_default_instance_;
class ConfigFightElementConnect;
class ConfigFightElementConnectDefaultTypeInternal;
extern ConfigFightElementConnectDefaultTypeInternal _ConfigFightElementConnect_default_instance_;
class ConfigFightItem;
class ConfigFightItemDefaultTypeInternal;
extern ConfigFightItemDefaultTypeInternal _ConfigFightItem_default_instance_;
class ConfigFightMachine;
class ConfigFightMachineDefaultTypeInternal;
extern ConfigFightMachineDefaultTypeInternal _ConfigFightMachine_default_instance_;
class ConfigFightRandomGroup;
class ConfigFightRandomGroupDefaultTypeInternal;
extern ConfigFightRandomGroupDefaultTypeInternal _ConfigFightRandomGroup_default_instance_;
class ConfigFirstname;
class ConfigFirstnameDefaultTypeInternal;
extern ConfigFirstnameDefaultTypeInternal _ConfigFirstname_default_instance_;
class ConfigFormula;
class ConfigFormulaDefaultTypeInternal;
extern ConfigFormulaDefaultTypeInternal _ConfigFormula_default_instance_;
class ConfigGameExchange;
class ConfigGameExchangeDefaultTypeInternal;
extern ConfigGameExchangeDefaultTypeInternal _ConfigGameExchange_default_instance_;
class ConfigGhostShip;
class ConfigGhostShipDefaultTypeInternal;
extern ConfigGhostShipDefaultTypeInternal _ConfigGhostShip_default_instance_;
class ConfigGuildStore;
class ConfigGuildStoreDefaultTypeInternal;
extern ConfigGuildStoreDefaultTypeInternal _ConfigGuildStore_default_instance_;
class ConfigItem;
class ConfigItemDefaultTypeInternal;
extern ConfigItemDefaultTypeInternal _ConfigItem_default_instance_;
class ConfigLastname;
class ConfigLastnameDefaultTypeInternal;
extern ConfigLastnameDefaultTypeInternal _ConfigLastname_default_instance_;
class ConfigLevel;
class ConfigLevelDefaultTypeInternal;
extern ConfigLevelDefaultTypeInternal _ConfigLevel_default_instance_;
class ConfigLottery;
class ConfigLotteryDefaultTypeInternal;
extern ConfigLotteryDefaultTypeInternal _ConfigLottery_default_instance_;
class ConfigMachineExchange;
class ConfigMachineExchangeDefaultTypeInternal;
extern ConfigMachineExchangeDefaultTypeInternal _ConfigMachineExchange_default_instance_;
class ConfigMachineExchangeGroup;
class ConfigMachineExchangeGroupDefaultTypeInternal;
extern ConfigMachineExchangeGroupDefaultTypeInternal _ConfigMachineExchangeGroup_default_instance_;
class ConfigMaelstrom;
class ConfigMaelstromDefaultTypeInternal;
extern ConfigMaelstromDefaultTypeInternal _ConfigMaelstrom_default_instance_;
class ConfigMaelstromEvent;
class ConfigMaelstromEventDefaultTypeInternal;
extern ConfigMaelstromEventDefaultTypeInternal _ConfigMaelstromEvent_default_instance_;
class ConfigMaelstromTile;
class ConfigMaelstromTileDefaultTypeInternal;
extern ConfigMaelstromTileDefaultTypeInternal _ConfigMaelstromTile_default_instance_;
class ConfigModel;
class ConfigModelDefaultTypeInternal;
extern ConfigModelDefaultTypeInternal _ConfigModel_default_instance_;
class ConfigName;
class ConfigNameDefaultTypeInternal;
extern ConfigNameDefaultTypeInternal _ConfigName_default_instance_;
class ConfigNavigationEvent;
class ConfigNavigationEventDefaultTypeInternal;
extern ConfigNavigationEventDefaultTypeInternal _ConfigNavigationEvent_default_instance_;
class ConfigNpc;
class ConfigNpcDefaultTypeInternal;
extern ConfigNpcDefaultTypeInternal _ConfigNpc_default_instance_;
class ConfigNpcFight;
class ConfigNpcFightDefaultTypeInternal;
extern ConfigNpcFightDefaultTypeInternal _ConfigNpcFight_default_instance_;
class ConfigPlace;
class ConfigPlaceDefaultTypeInternal;
extern ConfigPlaceDefaultTypeInternal _ConfigPlace_default_instance_;
class ConfigPlayerInvade;
class ConfigPlayerInvadeDefaultTypeInternal;
extern ConfigPlayerInvadeDefaultTypeInternal _ConfigPlayerInvade_default_instance_;
class ConfigProfession;
class ConfigProfessionDefaultTypeInternal;
extern ConfigProfessionDefaultTypeInternal _ConfigProfession_default_instance_;
class ConfigPveMapModel;
class ConfigPveMapModelDefaultTypeInternal;
extern ConfigPveMapModelDefaultTypeInternal _ConfigPveMapModel_default_instance_;
class ConfigPvePlayerDrop;
class ConfigPvePlayerDropDefaultTypeInternal;
extern ConfigPvePlayerDropDefaultTypeInternal _ConfigPvePlayerDrop_default_instance_;
class ConfigPveRoomModel;
class ConfigPveRoomModelDefaultTypeInternal;
extern ConfigPveRoomModelDefaultTypeInternal _ConfigPveRoomModel_default_instance_;
class ConfigRandomGift;
class ConfigRandomGiftDefaultTypeInternal;
extern ConfigRandomGiftDefaultTypeInternal _ConfigRandomGift_default_instance_;
class ConfigRankingBattleReward;
class ConfigRankingBattleRewardDefaultTypeInternal;
extern ConfigRankingBattleRewardDefaultTypeInternal _ConfigRankingBattleReward_default_instance_;
class ConfigRankingReward;
class ConfigRankingRewardDefaultTypeInternal;
extern ConfigRankingRewardDefaultTypeInternal _ConfigRankingReward_default_instance_;
class ConfigRankingScore;
class ConfigRankingScoreDefaultTypeInternal;
extern ConfigRankingScoreDefaultTypeInternal _ConfigRankingScore_default_instance_;
class ConfigRobot;
class ConfigRobotDefaultTypeInternal;
extern ConfigRobotDefaultTypeInternal _ConfigRobot_default_instance_;
class ConfigRoomModel;
class ConfigRoomModelDefaultTypeInternal;
extern ConfigRoomModelDefaultTypeInternal _ConfigRoomModel_default_instance_;
class ConfigSceneInfo;
class ConfigSceneInfoDefaultTypeInternal;
extern ConfigSceneInfoDefaultTypeInternal _ConfigSceneInfo_default_instance_;
class ConfigSecretRoom;
class ConfigSecretRoomDefaultTypeInternal;
extern ConfigSecretRoomDefaultTypeInternal _ConfigSecretRoom_default_instance_;
class ConfigSecretRoomGroup;
class ConfigSecretRoomGroupDefaultTypeInternal;
extern ConfigSecretRoomGroupDefaultTypeInternal _ConfigSecretRoomGroup_default_instance_;
class ConfigShipEvent;
class ConfigShipEventDefaultTypeInternal;
extern ConfigShipEventDefaultTypeInternal _ConfigShipEvent_default_instance_;
class ConfigShopping;
class ConfigShoppingDefaultTypeInternal;
extern ConfigShoppingDefaultTypeInternal _ConfigShopping_default_instance_;
class ConfigShoppingVitality;
class ConfigShoppingVitalityDefaultTypeInternal;
extern ConfigShoppingVitalityDefaultTypeInternal _ConfigShoppingVitality_default_instance_;
class ConfigSkill;
class ConfigSkillDefaultTypeInternal;
extern ConfigSkillDefaultTypeInternal _ConfigSkill_default_instance_;
class ConfigSkillRandom;
class ConfigSkillRandomDefaultTypeInternal;
extern ConfigSkillRandomDefaultTypeInternal _ConfigSkillRandom_default_instance_;
class ConfigSpecialEvent;
class ConfigSpecialEventDefaultTypeInternal;
extern ConfigSpecialEventDefaultTypeInternal _ConfigSpecialEvent_default_instance_;
class ConfigSystemTask;
class ConfigSystemTaskDefaultTypeInternal;
extern ConfigSystemTaskDefaultTypeInternal _ConfigSystemTask_default_instance_;
class ConfigTask;
class ConfigTaskDefaultTypeInternal;
extern ConfigTaskDefaultTypeInternal _ConfigTask_default_instance_;
class ConfigTaskStep;
class ConfigTaskStepDefaultTypeInternal;
extern ConfigTaskStepDefaultTypeInternal _ConfigTaskStep_default_instance_;
class ConfigWanted;
class ConfigWantedDefaultTypeInternal;
extern ConfigWantedDefaultTypeInternal _ConfigWanted_default_instance_;
class ConfigWildIslandLevel;
class ConfigWildIslandLevelDefaultTypeInternal;
extern ConfigWildIslandLevelDefaultTypeInternal _ConfigWildIslandLevel_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::ConfigAchievement* Arena::CreateMaybeMessage<::db::ConfigAchievement>(Arena*);
template<> ::db::ConfigAchievementTask* Arena::CreateMaybeMessage<::db::ConfigAchievementTask>(Arena*);
template<> ::db::ConfigBaseRoom* Arena::CreateMaybeMessage<::db::ConfigBaseRoom>(Arena*);
template<> ::db::ConfigBeacon* Arena::CreateMaybeMessage<::db::ConfigBeacon>(Arena*);
template<> ::db::ConfigBeaconTalent* Arena::CreateMaybeMessage<::db::ConfigBeaconTalent>(Arena*);
template<> ::db::ConfigBeaconTalentGroup* Arena::CreateMaybeMessage<::db::ConfigBeaconTalentGroup>(Arena*);
template<> ::db::ConfigBusinessman* Arena::CreateMaybeMessage<::db::ConfigBusinessman>(Arena*);
template<> ::db::ConfigCard* Arena::CreateMaybeMessage<::db::ConfigCard>(Arena*);
template<> ::db::ConfigCardAttribute* Arena::CreateMaybeMessage<::db::ConfigCardAttribute>(Arena*);
template<> ::db::ConfigCardEquip* Arena::CreateMaybeMessage<::db::ConfigCardEquip>(Arena*);
template<> ::db::ConfigCardEquipStrengthen* Arena::CreateMaybeMessage<::db::ConfigCardEquipStrengthen>(Arena*);
template<> ::db::ConfigCardLevel* Arena::CreateMaybeMessage<::db::ConfigCardLevel>(Arena*);
template<> ::db::ConfigCardPractice* Arena::CreateMaybeMessage<::db::ConfigCardPractice>(Arena*);
template<> ::db::ConfigCardStrengthen* Arena::CreateMaybeMessage<::db::ConfigCardStrengthen>(Arena*);
template<> ::db::ConfigCardTalent* Arena::CreateMaybeMessage<::db::ConfigCardTalent>(Arena*);
template<> ::db::ConfigChest* Arena::CreateMaybeMessage<::db::ConfigChest>(Arena*);
template<> ::db::ConfigDailyGift* Arena::CreateMaybeMessage<::db::ConfigDailyGift>(Arena*);
template<> ::db::ConfigDropItemGroup* Arena::CreateMaybeMessage<::db::ConfigDropItemGroup>(Arena*);
template<> ::db::ConfigDungeonAltar* Arena::CreateMaybeMessage<::db::ConfigDungeonAltar>(Arena*);
template<> ::db::ConfigDungeonChest* Arena::CreateMaybeMessage<::db::ConfigDungeonChest>(Arena*);
template<> ::db::ConfigDungeonContentGroup* Arena::CreateMaybeMessage<::db::ConfigDungeonContentGroup>(Arena*);
template<> ::db::ConfigDungeonEvent* Arena::CreateMaybeMessage<::db::ConfigDungeonEvent>(Arena*);
template<> ::db::ConfigDungeonStoreGroup* Arena::CreateMaybeMessage<::db::ConfigDungeonStoreGroup>(Arena*);
template<> ::db::ConfigDungeonTalent* Arena::CreateMaybeMessage<::db::ConfigDungeonTalent>(Arena*);
template<> ::db::ConfigDungeonTalentTree* Arena::CreateMaybeMessage<::db::ConfigDungeonTalentTree>(Arena*);
template<> ::db::ConfigEasterEgg* Arena::CreateMaybeMessage<::db::ConfigEasterEgg>(Arena*);
template<> ::db::ConfigEnemy* Arena::CreateMaybeMessage<::db::ConfigEnemy>(Arena*);
template<> ::db::ConfigEnemyEvent* Arena::CreateMaybeMessage<::db::ConfigEnemyEvent>(Arena*);
template<> ::db::ConfigEnemyGroup* Arena::CreateMaybeMessage<::db::ConfigEnemyGroup>(Arena*);
template<> ::db::ConfigEquipAttributeWord* Arena::CreateMaybeMessage<::db::ConfigEquipAttributeWord>(Arena*);
template<> ::db::ConfigEquipDecompose* Arena::CreateMaybeMessage<::db::ConfigEquipDecompose>(Arena*);
template<> ::db::ConfigEquipDecomposeCost* Arena::CreateMaybeMessage<::db::ConfigEquipDecomposeCost>(Arena*);
template<> ::db::ConfigEquipRefineCost* Arena::CreateMaybeMessage<::db::ConfigEquipRefineCost>(Arena*);
template<> ::db::ConfigExploreEvent* Arena::CreateMaybeMessage<::db::ConfigExploreEvent>(Arena*);
template<> ::db::ConfigFacility* Arena::CreateMaybeMessage<::db::ConfigFacility>(Arena*);
template<> ::db::ConfigFacilityGroup* Arena::CreateMaybeMessage<::db::ConfigFacilityGroup>(Arena*);
template<> ::db::ConfigFarmSkillLevel* Arena::CreateMaybeMessage<::db::ConfigFarmSkillLevel>(Arena*);
template<> ::db::ConfigFightElementConnect* Arena::CreateMaybeMessage<::db::ConfigFightElementConnect>(Arena*);
template<> ::db::ConfigFightItem* Arena::CreateMaybeMessage<::db::ConfigFightItem>(Arena*);
template<> ::db::ConfigFightMachine* Arena::CreateMaybeMessage<::db::ConfigFightMachine>(Arena*);
template<> ::db::ConfigFightRandomGroup* Arena::CreateMaybeMessage<::db::ConfigFightRandomGroup>(Arena*);
template<> ::db::ConfigFirstname* Arena::CreateMaybeMessage<::db::ConfigFirstname>(Arena*);
template<> ::db::ConfigFormula* Arena::CreateMaybeMessage<::db::ConfigFormula>(Arena*);
template<> ::db::ConfigGameExchange* Arena::CreateMaybeMessage<::db::ConfigGameExchange>(Arena*);
template<> ::db::ConfigGhostShip* Arena::CreateMaybeMessage<::db::ConfigGhostShip>(Arena*);
template<> ::db::ConfigGuildStore* Arena::CreateMaybeMessage<::db::ConfigGuildStore>(Arena*);
template<> ::db::ConfigItem* Arena::CreateMaybeMessage<::db::ConfigItem>(Arena*);
template<> ::db::ConfigLastname* Arena::CreateMaybeMessage<::db::ConfigLastname>(Arena*);
template<> ::db::ConfigLevel* Arena::CreateMaybeMessage<::db::ConfigLevel>(Arena*);
template<> ::db::ConfigLottery* Arena::CreateMaybeMessage<::db::ConfigLottery>(Arena*);
template<> ::db::ConfigMachineExchange* Arena::CreateMaybeMessage<::db::ConfigMachineExchange>(Arena*);
template<> ::db::ConfigMachineExchangeGroup* Arena::CreateMaybeMessage<::db::ConfigMachineExchangeGroup>(Arena*);
template<> ::db::ConfigMaelstrom* Arena::CreateMaybeMessage<::db::ConfigMaelstrom>(Arena*);
template<> ::db::ConfigMaelstromEvent* Arena::CreateMaybeMessage<::db::ConfigMaelstromEvent>(Arena*);
template<> ::db::ConfigMaelstromTile* Arena::CreateMaybeMessage<::db::ConfigMaelstromTile>(Arena*);
template<> ::db::ConfigModel* Arena::CreateMaybeMessage<::db::ConfigModel>(Arena*);
template<> ::db::ConfigName* Arena::CreateMaybeMessage<::db::ConfigName>(Arena*);
template<> ::db::ConfigNavigationEvent* Arena::CreateMaybeMessage<::db::ConfigNavigationEvent>(Arena*);
template<> ::db::ConfigNpc* Arena::CreateMaybeMessage<::db::ConfigNpc>(Arena*);
template<> ::db::ConfigNpcFight* Arena::CreateMaybeMessage<::db::ConfigNpcFight>(Arena*);
template<> ::db::ConfigPlace* Arena::CreateMaybeMessage<::db::ConfigPlace>(Arena*);
template<> ::db::ConfigPlayerInvade* Arena::CreateMaybeMessage<::db::ConfigPlayerInvade>(Arena*);
template<> ::db::ConfigProfession* Arena::CreateMaybeMessage<::db::ConfigProfession>(Arena*);
template<> ::db::ConfigPveMapModel* Arena::CreateMaybeMessage<::db::ConfigPveMapModel>(Arena*);
template<> ::db::ConfigPvePlayerDrop* Arena::CreateMaybeMessage<::db::ConfigPvePlayerDrop>(Arena*);
template<> ::db::ConfigPveRoomModel* Arena::CreateMaybeMessage<::db::ConfigPveRoomModel>(Arena*);
template<> ::db::ConfigRandomGift* Arena::CreateMaybeMessage<::db::ConfigRandomGift>(Arena*);
template<> ::db::ConfigRankingBattleReward* Arena::CreateMaybeMessage<::db::ConfigRankingBattleReward>(Arena*);
template<> ::db::ConfigRankingReward* Arena::CreateMaybeMessage<::db::ConfigRankingReward>(Arena*);
template<> ::db::ConfigRankingScore* Arena::CreateMaybeMessage<::db::ConfigRankingScore>(Arena*);
template<> ::db::ConfigRobot* Arena::CreateMaybeMessage<::db::ConfigRobot>(Arena*);
template<> ::db::ConfigRoomModel* Arena::CreateMaybeMessage<::db::ConfigRoomModel>(Arena*);
template<> ::db::ConfigSceneInfo* Arena::CreateMaybeMessage<::db::ConfigSceneInfo>(Arena*);
template<> ::db::ConfigSecretRoom* Arena::CreateMaybeMessage<::db::ConfigSecretRoom>(Arena*);
template<> ::db::ConfigSecretRoomGroup* Arena::CreateMaybeMessage<::db::ConfigSecretRoomGroup>(Arena*);
template<> ::db::ConfigShipEvent* Arena::CreateMaybeMessage<::db::ConfigShipEvent>(Arena*);
template<> ::db::ConfigShopping* Arena::CreateMaybeMessage<::db::ConfigShopping>(Arena*);
template<> ::db::ConfigShoppingVitality* Arena::CreateMaybeMessage<::db::ConfigShoppingVitality>(Arena*);
template<> ::db::ConfigSkill* Arena::CreateMaybeMessage<::db::ConfigSkill>(Arena*);
template<> ::db::ConfigSkillRandom* Arena::CreateMaybeMessage<::db::ConfigSkillRandom>(Arena*);
template<> ::db::ConfigSpecialEvent* Arena::CreateMaybeMessage<::db::ConfigSpecialEvent>(Arena*);
template<> ::db::ConfigSystemTask* Arena::CreateMaybeMessage<::db::ConfigSystemTask>(Arena*);
template<> ::db::ConfigTask* Arena::CreateMaybeMessage<::db::ConfigTask>(Arena*);
template<> ::db::ConfigTaskStep* Arena::CreateMaybeMessage<::db::ConfigTaskStep>(Arena*);
template<> ::db::ConfigWanted* Arena::CreateMaybeMessage<::db::ConfigWanted>(Arena*);
template<> ::db::ConfigWildIslandLevel* Arena::CreateMaybeMessage<::db::ConfigWildIslandLevel>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class ConfigFacility : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFacility) */ {
 public:
  ConfigFacility();
  virtual ~ConfigFacility();

  ConfigFacility(const ConfigFacility& from);

  inline ConfigFacility& operator=(const ConfigFacility& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFacility(ConfigFacility&& from) noexcept
    : ConfigFacility() {
    *this = ::std::move(from);
  }

  inline ConfigFacility& operator=(ConfigFacility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFacility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFacility* internal_default_instance() {
    return reinterpret_cast<const ConfigFacility*>(
               &_ConfigFacility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ConfigFacility* other);
  void Swap(ConfigFacility* other);
  friend void swap(ConfigFacility& a, ConfigFacility& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFacility* New() const final {
    return CreateMaybeMessage<ConfigFacility>(NULL);
  }

  ConfigFacility* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFacility>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFacility& from);
  void MergeFrom(const ConfigFacility& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFacility* other);
  protected:
  explicit ConfigFacility(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes property = 7;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 7;
  const ::std::string& property() const;
  void set_property(const ::std::string& value);
  #if LANG_CXX11
  void set_property(::std::string&& value);
  #endif
  void set_property(const char* value);
  void set_property(const void* value, size_t size);
  ::std::string* mutable_property();
  ::std::string* release_property();
  void set_allocated_property(::std::string* property);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_property();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_property(
      ::std::string* property);

  // required bytes level_up_require = 16;
  bool has_level_up_require() const;
  void clear_level_up_require();
  static const int kLevelUpRequireFieldNumber = 16;
  const ::std::string& level_up_require() const;
  void set_level_up_require(const ::std::string& value);
  #if LANG_CXX11
  void set_level_up_require(::std::string&& value);
  #endif
  void set_level_up_require(const char* value);
  void set_level_up_require(const void* value, size_t size);
  ::std::string* mutable_level_up_require();
  ::std::string* release_level_up_require();
  void set_allocated_level_up_require(::std::string* level_up_require);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level_up_require();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_up_require(
      ::std::string* level_up_require);

  // required bytes formula_unlock = 22;
  bool has_formula_unlock() const;
  void clear_formula_unlock();
  static const int kFormulaUnlockFieldNumber = 22;
  const ::std::string& formula_unlock() const;
  void set_formula_unlock(const ::std::string& value);
  #if LANG_CXX11
  void set_formula_unlock(::std::string&& value);
  #endif
  void set_formula_unlock(const char* value);
  void set_formula_unlock(const void* value, size_t size);
  ::std::string* mutable_formula_unlock();
  ::std::string* release_formula_unlock();
  void set_allocated_formula_unlock(::std::string* formula_unlock);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_formula_unlock();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_formula_unlock(
      ::std::string* formula_unlock);

  // required bytes level_up_need_device = 24;
  bool has_level_up_need_device() const;
  void clear_level_up_need_device();
  static const int kLevelUpNeedDeviceFieldNumber = 24;
  const ::std::string& level_up_need_device() const;
  void set_level_up_need_device(const ::std::string& value);
  #if LANG_CXX11
  void set_level_up_need_device(::std::string&& value);
  #endif
  void set_level_up_need_device(const char* value);
  void set_level_up_need_device(const void* value, size_t size);
  ::std::string* mutable_level_up_need_device();
  ::std::string* release_level_up_need_device();
  void set_allocated_level_up_need_device(::std::string* level_up_need_device);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level_up_need_device();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_up_need_device(
      ::std::string* level_up_need_device);

  // required bytes level_up_need_facility = 25;
  bool has_level_up_need_facility() const;
  void clear_level_up_need_facility();
  static const int kLevelUpNeedFacilityFieldNumber = 25;
  const ::std::string& level_up_need_facility() const;
  void set_level_up_need_facility(const ::std::string& value);
  #if LANG_CXX11
  void set_level_up_need_facility(::std::string&& value);
  #endif
  void set_level_up_need_facility(const char* value);
  void set_level_up_need_facility(const void* value, size_t size);
  ::std::string* mutable_level_up_need_facility();
  ::std::string* release_level_up_need_facility();
  void set_allocated_level_up_need_facility(::std::string* level_up_need_facility);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level_up_need_facility();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_up_need_facility(
      ::std::string* level_up_need_facility);

  // required bytes special_property = 26;
  bool has_special_property() const;
  void clear_special_property();
  static const int kSpecialPropertyFieldNumber = 26;
  const ::std::string& special_property() const;
  void set_special_property(const ::std::string& value);
  #if LANG_CXX11
  void set_special_property(::std::string&& value);
  #endif
  void set_special_property(const char* value);
  void set_special_property(const void* value, size_t size);
  ::std::string* mutable_special_property();
  ::std::string* release_special_property();
  void set_allocated_special_property(::std::string* special_property);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_special_property();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_special_property(
      ::std::string* special_property);

  // required bytes slot_unlock_condition = 28;
  bool has_slot_unlock_condition() const;
  void clear_slot_unlock_condition();
  static const int kSlotUnlockConditionFieldNumber = 28;
  const ::std::string& slot_unlock_condition() const;
  void set_slot_unlock_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_slot_unlock_condition(::std::string&& value);
  #endif
  void set_slot_unlock_condition(const char* value);
  void set_slot_unlock_condition(const void* value, size_t size);
  ::std::string* mutable_slot_unlock_condition();
  ::std::string* release_slot_unlock_condition();
  void set_allocated_slot_unlock_condition(::std::string* slot_unlock_condition);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_slot_unlock_condition();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slot_unlock_condition(
      ::std::string* slot_unlock_condition);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 maintype = 3;
  bool has_maintype() const;
  void clear_maintype();
  static const int kMaintypeFieldNumber = 3;
  ::google::protobuf::int32 maintype() const;
  void set_maintype(::google::protobuf::int32 value);

  // required int32 func_type = 4;
  bool has_func_type() const;
  void clear_func_type();
  static const int kFuncTypeFieldNumber = 4;
  ::google::protobuf::int32 func_type() const;
  void set_func_type(::google::protobuf::int32 value);

  // required int32 style_id = 5;
  bool has_style_id() const;
  void clear_style_id();
  static const int kStyleIdFieldNumber = 5;
  ::google::protobuf::int32 style_id() const;
  void set_style_id(::google::protobuf::int32 value);

  // required int32 build_type = 6;
  bool has_build_type() const;
  void clear_build_type();
  static const int kBuildTypeFieldNumber = 6;
  ::google::protobuf::int32 build_type() const;
  void set_build_type(::google::protobuf::int32 value);

  // required int32 price = 8;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 8;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // required int32 seize_row = 9;
  bool has_seize_row() const;
  void clear_seize_row();
  static const int kSeizeRowFieldNumber = 9;
  ::google::protobuf::int32 seize_row() const;
  void set_seize_row(::google::protobuf::int32 value);

  // required int32 seize_col = 10;
  bool has_seize_col() const;
  void clear_seize_col();
  static const int kSeizeColFieldNumber = 10;
  ::google::protobuf::int32 seize_col() const;
  void set_seize_col(::google::protobuf::int32 value);

  // required int32 seconds = 11;
  bool has_seconds() const;
  void clear_seconds();
  static const int kSecondsFieldNumber = 11;
  ::google::protobuf::int32 seconds() const;
  void set_seconds(::google::protobuf::int32 value);

  // required int32 float = 12;
  bool has_float_() const;
  void clear_float_();
  static const int kFloatFieldNumber = 12;
  ::google::protobuf::int32 float_() const;
  void set_float_(::google::protobuf::int32 value);

  // required int32 node = 13;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 13;
  ::google::protobuf::int32 node() const;
  void set_node(::google::protobuf::int32 value);

  // required int32 room_must = 14;
  bool has_room_must() const;
  void clear_room_must();
  static const int kRoomMustFieldNumber = 14;
  ::google::protobuf::int32 room_must() const;
  void set_room_must(::google::protobuf::int32 value);

  // required int32 base_device_id = 15;
  bool has_base_device_id() const;
  void clear_base_device_id();
  static const int kBaseDeviceIdFieldNumber = 15;
  ::google::protobuf::int32 base_device_id() const;
  void set_base_device_id(::google::protobuf::int32 value);

  // required int32 level_up_grade = 17;
  bool has_level_up_grade() const;
  void clear_level_up_grade();
  static const int kLevelUpGradeFieldNumber = 17;
  ::google::protobuf::int32 level_up_grade() const;
  void set_level_up_grade(::google::protobuf::int32 value);

  // required int32 level_up_id = 18;
  bool has_level_up_id() const;
  void clear_level_up_id();
  static const int kLevelUpIdFieldNumber = 18;
  ::google::protobuf::int32 level_up_id() const;
  void set_level_up_id(::google::protobuf::int32 value);

  // required int32 facility_level = 19;
  bool has_facility_level() const;
  void clear_facility_level();
  static const int kFacilityLevelFieldNumber = 19;
  ::google::protobuf::int32 facility_level() const;
  void set_facility_level(::google::protobuf::int32 value);

  // required int32 people_node = 20;
  bool has_people_node() const;
  void clear_people_node();
  static const int kPeopleNodeFieldNumber = 20;
  ::google::protobuf::int32 people_node() const;
  void set_people_node(::google::protobuf::int32 value);

  // required int32 level_up_ship_level = 21;
  bool has_level_up_ship_level() const;
  void clear_level_up_ship_level();
  static const int kLevelUpShipLevelFieldNumber = 21;
  ::google::protobuf::int32 level_up_ship_level() const;
  void set_level_up_ship_level(::google::protobuf::int32 value);

  // required int32 level_up_captain_level = 23;
  bool has_level_up_captain_level() const;
  void clear_level_up_captain_level();
  static const int kLevelUpCaptainLevelFieldNumber = 23;
  ::google::protobuf::int32 level_up_captain_level() const;
  void set_level_up_captain_level(::google::protobuf::int32 value);

  // required int32 machine_id_in_fight = 27;
  bool has_machine_id_in_fight() const;
  void clear_machine_id_in_fight();
  static const int kMachineIdInFightFieldNumber = 27;
  ::google::protobuf::int32 machine_id_in_fight() const;
  void set_machine_id_in_fight(::google::protobuf::int32 value);

  // required int32 machine_capacity = 29;
  bool has_machine_capacity() const;
  void clear_machine_capacity();
  static const int kMachineCapacityFieldNumber = 29;
  ::google::protobuf::int32 machine_capacity() const;
  void set_machine_capacity(::google::protobuf::int32 value);

  // required int32 level_up_need_time = 30;
  bool has_level_up_need_time() const;
  void clear_level_up_need_time();
  static const int kLevelUpNeedTimeFieldNumber = 30;
  ::google::protobuf::int32 level_up_need_time() const;
  void set_level_up_need_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigFacility)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_maintype();
  void clear_has_maintype();
  void set_has_func_type();
  void clear_has_func_type();
  void set_has_style_id();
  void clear_has_style_id();
  void set_has_build_type();
  void clear_has_build_type();
  void set_has_property();
  void clear_has_property();
  void set_has_price();
  void clear_has_price();
  void set_has_seize_row();
  void clear_has_seize_row();
  void set_has_seize_col();
  void clear_has_seize_col();
  void set_has_seconds();
  void clear_has_seconds();
  void set_has_float_();
  void clear_has_float_();
  void set_has_node();
  void clear_has_node();
  void set_has_room_must();
  void clear_has_room_must();
  void set_has_base_device_id();
  void clear_has_base_device_id();
  void set_has_level_up_require();
  void clear_has_level_up_require();
  void set_has_level_up_grade();
  void clear_has_level_up_grade();
  void set_has_level_up_id();
  void clear_has_level_up_id();
  void set_has_facility_level();
  void clear_has_facility_level();
  void set_has_people_node();
  void clear_has_people_node();
  void set_has_level_up_ship_level();
  void clear_has_level_up_ship_level();
  void set_has_formula_unlock();
  void clear_has_formula_unlock();
  void set_has_level_up_captain_level();
  void clear_has_level_up_captain_level();
  void set_has_level_up_need_device();
  void clear_has_level_up_need_device();
  void set_has_level_up_need_facility();
  void clear_has_level_up_need_facility();
  void set_has_special_property();
  void clear_has_special_property();
  void set_has_machine_id_in_fight();
  void clear_has_machine_id_in_fight();
  void set_has_slot_unlock_condition();
  void clear_has_slot_unlock_condition();
  void set_has_machine_capacity();
  void clear_has_machine_capacity();
  void set_has_level_up_need_time();
  void clear_has_level_up_need_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr property_;
  ::google::protobuf::internal::ArenaStringPtr level_up_require_;
  ::google::protobuf::internal::ArenaStringPtr formula_unlock_;
  ::google::protobuf::internal::ArenaStringPtr level_up_need_device_;
  ::google::protobuf::internal::ArenaStringPtr level_up_need_facility_;
  ::google::protobuf::internal::ArenaStringPtr special_property_;
  ::google::protobuf::internal::ArenaStringPtr slot_unlock_condition_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 maintype_;
  ::google::protobuf::int32 func_type_;
  ::google::protobuf::int32 style_id_;
  ::google::protobuf::int32 build_type_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 seize_row_;
  ::google::protobuf::int32 seize_col_;
  ::google::protobuf::int32 seconds_;
  ::google::protobuf::int32 float__;
  ::google::protobuf::int32 node_;
  ::google::protobuf::int32 room_must_;
  ::google::protobuf::int32 base_device_id_;
  ::google::protobuf::int32 level_up_grade_;
  ::google::protobuf::int32 level_up_id_;
  ::google::protobuf::int32 facility_level_;
  ::google::protobuf::int32 people_node_;
  ::google::protobuf::int32 level_up_ship_level_;
  ::google::protobuf::int32 level_up_captain_level_;
  ::google::protobuf::int32 machine_id_in_fight_;
  ::google::protobuf::int32 machine_capacity_;
  ::google::protobuf::int32 level_up_need_time_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigItem) */ {
 public:
  ConfigItem();
  virtual ~ConfigItem();

  ConfigItem(const ConfigItem& from);

  inline ConfigItem& operator=(const ConfigItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigItem(ConfigItem&& from) noexcept
    : ConfigItem() {
    *this = ::std::move(from);
  }

  inline ConfigItem& operator=(ConfigItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigItem* internal_default_instance() {
    return reinterpret_cast<const ConfigItem*>(
               &_ConfigItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ConfigItem* other);
  void Swap(ConfigItem* other);
  friend void swap(ConfigItem& a, ConfigItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigItem* New() const final {
    return CreateMaybeMessage<ConfigItem>(NULL);
  }

  ConfigItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigItem& from);
  void MergeFrom(const ConfigItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigItem* other);
  protected:
  explicit ConfigItem(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes property = 6;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 6;
  const ::std::string& property() const;
  void set_property(const ::std::string& value);
  #if LANG_CXX11
  void set_property(::std::string&& value);
  #endif
  void set_property(const char* value);
  void set_property(const void* value, size_t size);
  ::std::string* mutable_property();
  ::std::string* release_property();
  void set_allocated_property(::std::string* property);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_property();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_property(
      ::std::string* property);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 star = 4;
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 4;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // required int32 quality = 5;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 5;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // required int64 max_num = 8;
  bool has_max_num() const;
  void clear_max_num();
  static const int kMaxNumFieldNumber = 8;
  ::google::protobuf::int64 max_num() const;
  void set_max_num(::google::protobuf::int64 value);

  // required int32 price = 7;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigItem)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_star();
  void clear_has_star();
  void set_has_quality();
  void clear_has_quality();
  void set_has_property();
  void clear_has_property();
  void set_has_price();
  void clear_has_price();
  void set_has_max_num();
  void clear_has_max_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr property_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int64 max_num_;
  ::google::protobuf::int32 price_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigCard) */ {
 public:
  ConfigCard();
  virtual ~ConfigCard();

  ConfigCard(const ConfigCard& from);

  inline ConfigCard& operator=(const ConfigCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCard(ConfigCard&& from) noexcept
    : ConfigCard() {
    *this = ::std::move(from);
  }

  inline ConfigCard& operator=(ConfigCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCard* internal_default_instance() {
    return reinterpret_cast<const ConfigCard*>(
               &_ConfigCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ConfigCard* other);
  void Swap(ConfigCard* other);
  friend void swap(ConfigCard& a, ConfigCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCard* New() const final {
    return CreateMaybeMessage<ConfigCard>(NULL);
  }

  ConfigCard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCard& from);
  void MergeFrom(const ConfigCard& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCard* other);
  protected:
  explicit ConfigCard(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes initial_equip = 18;
  bool has_initial_equip() const;
  void clear_initial_equip();
  static const int kInitialEquipFieldNumber = 18;
  const ::std::string& initial_equip() const;
  void set_initial_equip(const ::std::string& value);
  #if LANG_CXX11
  void set_initial_equip(::std::string&& value);
  #endif
  void set_initial_equip(const char* value);
  void set_initial_equip(const void* value, size_t size);
  ::std::string* mutable_initial_equip();
  ::std::string* release_initial_equip();
  void set_allocated_initial_equip(::std::string* initial_equip);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_initial_equip();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_initial_equip(
      ::std::string* initial_equip);

  // required bytes farm_skill = 21;
  bool has_farm_skill() const;
  void clear_farm_skill();
  static const int kFarmSkillFieldNumber = 21;
  const ::std::string& farm_skill() const;
  void set_farm_skill(const ::std::string& value);
  #if LANG_CXX11
  void set_farm_skill(::std::string&& value);
  #endif
  void set_farm_skill(const char* value);
  void set_farm_skill(const void* value, size_t size);
  ::std::string* mutable_farm_skill();
  ::std::string* release_farm_skill();
  void set_allocated_farm_skill(::std::string* farm_skill);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_farm_skill();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_farm_skill(
      ::std::string* farm_skill);

  // required bytes skill = 22;
  bool has_skill() const;
  void clear_skill();
  static const int kSkillFieldNumber = 22;
  const ::std::string& skill() const;
  void set_skill(const ::std::string& value);
  #if LANG_CXX11
  void set_skill(::std::string&& value);
  #endif
  void set_skill(const char* value);
  void set_skill(const void* value, size_t size);
  ::std::string* mutable_skill();
  ::std::string* release_skill();
  void set_allocated_skill(::std::string* skill);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_skill();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill(
      ::std::string* skill);

  // required bytes chip_exchange = 26;
  bool has_chip_exchange() const;
  void clear_chip_exchange();
  static const int kChipExchangeFieldNumber = 26;
  const ::std::string& chip_exchange() const;
  void set_chip_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_chip_exchange(::std::string&& value);
  #endif
  void set_chip_exchange(const char* value);
  void set_chip_exchange(const void* value, size_t size);
  ::std::string* mutable_chip_exchange();
  ::std::string* release_chip_exchange();
  void set_allocated_chip_exchange(::std::string* chip_exchange);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_chip_exchange();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chip_exchange(
      ::std::string* chip_exchange);

  // required bytes penetration_args = 28;
  bool has_penetration_args() const;
  void clear_penetration_args();
  static const int kPenetrationArgsFieldNumber = 28;
  const ::std::string& penetration_args() const;
  void set_penetration_args(const ::std::string& value);
  #if LANG_CXX11
  void set_penetration_args(::std::string&& value);
  #endif
  void set_penetration_args(const char* value);
  void set_penetration_args(const void* value, size_t size);
  ::std::string* mutable_penetration_args();
  ::std::string* release_penetration_args();
  void set_allocated_penetration_args(::std::string* penetration_args);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_penetration_args();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_penetration_args(
      ::std::string* penetration_args);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 profession = 4;
  bool has_profession() const;
  void clear_profession();
  static const int kProfessionFieldNumber = 4;
  ::google::protobuf::int32 profession() const;
  void set_profession(::google::protobuf::int32 value);

  // required int32 star = 5;
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 5;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // required int32 attack_range = 6;
  bool has_attack_range() const;
  void clear_attack_range();
  static const int kAttackRangeFieldNumber = 6;
  ::google::protobuf::int32 attack_range() const;
  void set_attack_range(::google::protobuf::int32 value);

  // required int32 attack_mode = 7;
  bool has_attack_mode() const;
  void clear_attack_mode();
  static const int kAttackModeFieldNumber = 7;
  ::google::protobuf::int32 attack_mode() const;
  void set_attack_mode(::google::protobuf::int32 value);

  // required int32 energy_cost = 8;
  bool has_energy_cost() const;
  void clear_energy_cost();
  static const int kEnergyCostFieldNumber = 8;
  ::google::protobuf::int32 energy_cost() const;
  void set_energy_cost(::google::protobuf::int32 value);

  // required float attack_time = 9;
  bool has_attack_time() const;
  void clear_attack_time();
  static const int kAttackTimeFieldNumber = 9;
  float attack_time() const;
  void set_attack_time(float value);

  // required float wait_time = 10;
  bool has_wait_time() const;
  void clear_wait_time();
  static const int kWaitTimeFieldNumber = 10;
  float wait_time() const;
  void set_wait_time(float value);

  // required float move_time = 11;
  bool has_move_time() const;
  void clear_move_time();
  static const int kMoveTimeFieldNumber = 11;
  float move_time() const;
  void set_move_time(float value);

  // required int32 move_distance = 12;
  bool has_move_distance() const;
  void clear_move_distance();
  static const int kMoveDistanceFieldNumber = 12;
  ::google::protobuf::int32 move_distance() const;
  void set_move_distance(::google::protobuf::int32 value);

  // required int32 run_distance = 13;
  bool has_run_distance() const;
  void clear_run_distance();
  static const int kRunDistanceFieldNumber = 13;
  ::google::protobuf::int32 run_distance() const;
  void set_run_distance(::google::protobuf::int32 value);

  // required int32 can_move = 14;
  bool has_can_move() const;
  void clear_can_move();
  static const int kCanMoveFieldNumber = 14;
  ::google::protobuf::int32 can_move() const;
  void set_can_move(::google::protobuf::int32 value);

  // required int32 action_mode = 15;
  bool has_action_mode() const;
  void clear_action_mode();
  static const int kActionModeFieldNumber = 15;
  ::google::protobuf::int32 action_mode() const;
  void set_action_mode(::google::protobuf::int32 value);

  // required int32 width = 16;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 16;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 height = 17;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 17;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // required int32 practice_group = 20;
  bool has_practice_group() const;
  void clear_practice_group();
  static const int kPracticeGroupFieldNumber = 20;
  ::google::protobuf::int32 practice_group() const;
  void set_practice_group(::google::protobuf::int32 value);

  // required uint64 talent = 19;
  bool has_talent() const;
  void clear_talent();
  static const int kTalentFieldNumber = 19;
  ::google::protobuf::uint64 talent() const;
  void set_talent(::google::protobuf::uint64 value);

  // required int32 chip_id = 23;
  bool has_chip_id() const;
  void clear_chip_id();
  static const int kChipIdFieldNumber = 23;
  ::google::protobuf::int32 chip_id() const;
  void set_chip_id(::google::protobuf::int32 value);

  // required int32 chip_cost = 24;
  bool has_chip_cost() const;
  void clear_chip_cost();
  static const int kChipCostFieldNumber = 24;
  ::google::protobuf::int32 chip_cost() const;
  void set_chip_cost(::google::protobuf::int32 value);

  // required int32 chip_convert = 25;
  bool has_chip_convert() const;
  void clear_chip_convert();
  static const int kChipConvertFieldNumber = 25;
  ::google::protobuf::int32 chip_convert() const;
  void set_chip_convert(::google::protobuf::int32 value);

  // required float gather_add_ratio = 27;
  bool has_gather_add_ratio() const;
  void clear_gather_add_ratio();
  static const int kGatherAddRatioFieldNumber = 27;
  float gather_add_ratio() const;
  void set_gather_add_ratio(float value);

  // required int64 init_fall_skill = 29;
  bool has_init_fall_skill() const;
  void clear_init_fall_skill();
  static const int kInitFallSkillFieldNumber = 29;
  ::google::protobuf::int64 init_fall_skill() const;
  void set_init_fall_skill(::google::protobuf::int64 value);

  // required int32 quality = 30;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 30;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // required float init_hunger = 31;
  bool has_init_hunger() const;
  void clear_init_hunger();
  static const int kInitHungerFieldNumber = 31;
  float init_hunger() const;
  void set_init_hunger(float value);

  // @@protoc_insertion_point(class_scope:db.ConfigCard)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_profession();
  void clear_has_profession();
  void set_has_star();
  void clear_has_star();
  void set_has_attack_range();
  void clear_has_attack_range();
  void set_has_attack_mode();
  void clear_has_attack_mode();
  void set_has_energy_cost();
  void clear_has_energy_cost();
  void set_has_attack_time();
  void clear_has_attack_time();
  void set_has_wait_time();
  void clear_has_wait_time();
  void set_has_move_time();
  void clear_has_move_time();
  void set_has_move_distance();
  void clear_has_move_distance();
  void set_has_run_distance();
  void clear_has_run_distance();
  void set_has_can_move();
  void clear_has_can_move();
  void set_has_action_mode();
  void clear_has_action_mode();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_initial_equip();
  void clear_has_initial_equip();
  void set_has_talent();
  void clear_has_talent();
  void set_has_practice_group();
  void clear_has_practice_group();
  void set_has_farm_skill();
  void clear_has_farm_skill();
  void set_has_skill();
  void clear_has_skill();
  void set_has_chip_id();
  void clear_has_chip_id();
  void set_has_chip_cost();
  void clear_has_chip_cost();
  void set_has_chip_convert();
  void clear_has_chip_convert();
  void set_has_chip_exchange();
  void clear_has_chip_exchange();
  void set_has_gather_add_ratio();
  void clear_has_gather_add_ratio();
  void set_has_penetration_args();
  void clear_has_penetration_args();
  void set_has_init_fall_skill();
  void clear_has_init_fall_skill();
  void set_has_quality();
  void clear_has_quality();
  void set_has_init_hunger();
  void clear_has_init_hunger();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr initial_equip_;
  ::google::protobuf::internal::ArenaStringPtr farm_skill_;
  ::google::protobuf::internal::ArenaStringPtr skill_;
  ::google::protobuf::internal::ArenaStringPtr chip_exchange_;
  ::google::protobuf::internal::ArenaStringPtr penetration_args_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 attack_range_;
  ::google::protobuf::int32 attack_mode_;
  ::google::protobuf::int32 energy_cost_;
  float attack_time_;
  float wait_time_;
  float move_time_;
  ::google::protobuf::int32 move_distance_;
  ::google::protobuf::int32 run_distance_;
  ::google::protobuf::int32 can_move_;
  ::google::protobuf::int32 action_mode_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 practice_group_;
  ::google::protobuf::uint64 talent_;
  ::google::protobuf::int32 chip_id_;
  ::google::protobuf::int32 chip_cost_;
  ::google::protobuf::int32 chip_convert_;
  float gather_add_ratio_;
  ::google::protobuf::int64 init_fall_skill_;
  ::google::protobuf::int32 quality_;
  float init_hunger_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCardStrengthen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigCardStrengthen) */ {
 public:
  ConfigCardStrengthen();
  virtual ~ConfigCardStrengthen();

  ConfigCardStrengthen(const ConfigCardStrengthen& from);

  inline ConfigCardStrengthen& operator=(const ConfigCardStrengthen& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCardStrengthen(ConfigCardStrengthen&& from) noexcept
    : ConfigCardStrengthen() {
    *this = ::std::move(from);
  }

  inline ConfigCardStrengthen& operator=(ConfigCardStrengthen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCardStrengthen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCardStrengthen* internal_default_instance() {
    return reinterpret_cast<const ConfigCardStrengthen*>(
               &_ConfigCardStrengthen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ConfigCardStrengthen* other);
  void Swap(ConfigCardStrengthen* other);
  friend void swap(ConfigCardStrengthen& a, ConfigCardStrengthen& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCardStrengthen* New() const final {
    return CreateMaybeMessage<ConfigCardStrengthen>(NULL);
  }

  ConfigCardStrengthen* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCardStrengthen>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCardStrengthen& from);
  void MergeFrom(const ConfigCardStrengthen& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCardStrengthen* other);
  protected:
  explicit ConfigCardStrengthen(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes initial_attribute = 3;
  bool has_initial_attribute() const;
  void clear_initial_attribute();
  static const int kInitialAttributeFieldNumber = 3;
  const ::std::string& initial_attribute() const;
  void set_initial_attribute(const ::std::string& value);
  #if LANG_CXX11
  void set_initial_attribute(::std::string&& value);
  #endif
  void set_initial_attribute(const char* value);
  void set_initial_attribute(const void* value, size_t size);
  ::std::string* mutable_initial_attribute();
  ::std::string* release_initial_attribute();
  void set_allocated_initial_attribute(::std::string* initial_attribute);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_initial_attribute();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_initial_attribute(
      ::std::string* initial_attribute);

  // required bytes aptitude = 4;
  bool has_aptitude() const;
  void clear_aptitude();
  static const int kAptitudeFieldNumber = 4;
  const ::std::string& aptitude() const;
  void set_aptitude(const ::std::string& value);
  #if LANG_CXX11
  void set_aptitude(::std::string&& value);
  #endif
  void set_aptitude(const char* value);
  void set_aptitude(const void* value, size_t size);
  ::std::string* mutable_aptitude();
  ::std::string* release_aptitude();
  void set_allocated_aptitude(::std::string* aptitude);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_aptitude();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aptitude(
      ::std::string* aptitude);

  // required bytes item_cost = 6;
  bool has_item_cost() const;
  void clear_item_cost();
  static const int kItemCostFieldNumber = 6;
  const ::std::string& item_cost() const;
  void set_item_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_item_cost(::std::string&& value);
  #endif
  void set_item_cost(const char* value);
  void set_item_cost(const void* value, size_t size);
  ::std::string* mutable_item_cost();
  ::std::string* release_item_cost();
  void set_allocated_item_cost(::std::string* item_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_item_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_item_cost(
      ::std::string* item_cost);

  // required bytes chip_cost = 7;
  bool has_chip_cost() const;
  void clear_chip_cost();
  static const int kChipCostFieldNumber = 7;
  const ::std::string& chip_cost() const;
  void set_chip_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_chip_cost(::std::string&& value);
  #endif
  void set_chip_cost(const char* value);
  void set_chip_cost(const void* value, size_t size);
  ::std::string* mutable_chip_cost();
  ::std::string* release_chip_cost();
  void set_allocated_chip_cost(::std::string* chip_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_chip_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chip_cost(
      ::std::string* chip_cost);

  // required bytes rising_star_cost = 8;
  bool has_rising_star_cost() const;
  void clear_rising_star_cost();
  static const int kRisingStarCostFieldNumber = 8;
  const ::std::string& rising_star_cost() const;
  void set_rising_star_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_rising_star_cost(::std::string&& value);
  #endif
  void set_rising_star_cost(const char* value);
  void set_rising_star_cost(const void* value, size_t size);
  ::std::string* mutable_rising_star_cost();
  ::std::string* release_rising_star_cost();
  void set_allocated_rising_star_cost(::std::string* rising_star_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_rising_star_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rising_star_cost(
      ::std::string* rising_star_cost);

  // required int32 typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 1;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 star = 2;
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 2;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // required int32 level_max = 5;
  bool has_level_max() const;
  void clear_level_max();
  static const int kLevelMaxFieldNumber = 5;
  ::google::protobuf::int32 level_max() const;
  void set_level_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigCardStrengthen)
 private:
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_star();
  void clear_has_star();
  void set_has_initial_attribute();
  void clear_has_initial_attribute();
  void set_has_aptitude();
  void clear_has_aptitude();
  void set_has_level_max();
  void clear_has_level_max();
  void set_has_item_cost();
  void clear_has_item_cost();
  void set_has_chip_cost();
  void clear_has_chip_cost();
  void set_has_rising_star_cost();
  void clear_has_rising_star_cost();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr initial_attribute_;
  ::google::protobuf::internal::ArenaStringPtr aptitude_;
  ::google::protobuf::internal::ArenaStringPtr item_cost_;
  ::google::protobuf::internal::ArenaStringPtr chip_cost_;
  ::google::protobuf::internal::ArenaStringPtr rising_star_cost_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 level_max_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigLevel) */ {
 public:
  ConfigLevel();
  virtual ~ConfigLevel();

  ConfigLevel(const ConfigLevel& from);

  inline ConfigLevel& operator=(const ConfigLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigLevel(ConfigLevel&& from) noexcept
    : ConfigLevel() {
    *this = ::std::move(from);
  }

  inline ConfigLevel& operator=(ConfigLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigLevel* internal_default_instance() {
    return reinterpret_cast<const ConfigLevel*>(
               &_ConfigLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ConfigLevel* other);
  void Swap(ConfigLevel* other);
  friend void swap(ConfigLevel& a, ConfigLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigLevel* New() const final {
    return CreateMaybeMessage<ConfigLevel>(NULL);
  }

  ConfigLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigLevel& from);
  void MergeFrom(const ConfigLevel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigLevel* other);
  protected:
  explicit ConfigLevel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes add_facility = 3;
  bool has_add_facility() const;
  void clear_add_facility();
  static const int kAddFacilityFieldNumber = 3;
  const ::std::string& add_facility() const;
  void set_add_facility(const ::std::string& value);
  #if LANG_CXX11
  void set_add_facility(::std::string&& value);
  #endif
  void set_add_facility(const char* value);
  void set_add_facility(const void* value, size_t size);
  ::std::string* mutable_add_facility();
  ::std::string* release_add_facility();
  void set_allocated_add_facility(::std::string* add_facility);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_add_facility();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_add_facility(
      ::std::string* add_facility);

  // required bytes add_item = 4;
  bool has_add_item() const;
  void clear_add_item();
  static const int kAddItemFieldNumber = 4;
  const ::std::string& add_item() const;
  void set_add_item(const ::std::string& value);
  #if LANG_CXX11
  void set_add_item(::std::string&& value);
  #endif
  void set_add_item(const char* value);
  void set_add_item(const void* value, size_t size);
  ::std::string* mutable_add_item();
  ::std::string* release_add_item();
  void set_allocated_add_item(::std::string* add_item);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_add_item();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_add_item(
      ::std::string* add_item);

  // required bytes fail_reward = 9;
  bool has_fail_reward() const;
  void clear_fail_reward();
  static const int kFailRewardFieldNumber = 9;
  const ::std::string& fail_reward() const;
  void set_fail_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_fail_reward(::std::string&& value);
  #endif
  void set_fail_reward(const char* value);
  void set_fail_reward(const void* value, size_t size);
  ::std::string* mutable_fail_reward();
  ::std::string* release_fail_reward();
  void set_allocated_fail_reward(::std::string* fail_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_fail_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fail_reward(
      ::std::string* fail_reward);

  // required int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 need_exp = 2;
  bool has_need_exp() const;
  void clear_need_exp();
  static const int kNeedExpFieldNumber = 2;
  ::google::protobuf::int32 need_exp() const;
  void set_need_exp(::google::protobuf::int32 value);

  // required int32 add_exp = 5;
  bool has_add_exp() const;
  void clear_add_exp();
  static const int kAddExpFieldNumber = 5;
  ::google::protobuf::int32 add_exp() const;
  void set_add_exp(::google::protobuf::int32 value);

  // required int32 max_sailor_level = 6;
  bool has_max_sailor_level() const;
  void clear_max_sailor_level();
  static const int kMaxSailorLevelFieldNumber = 6;
  ::google::protobuf::int32 max_sailor_level() const;
  void set_max_sailor_level(::google::protobuf::int32 value);

  // required int32 max_vitality = 7;
  bool has_max_vitality() const;
  void clear_max_vitality();
  static const int kMaxVitalityFieldNumber = 7;
  ::google::protobuf::int32 max_vitality() const;
  void set_max_vitality(::google::protobuf::int32 value);

  // required int32 max_take_items = 8;
  bool has_max_take_items() const;
  void clear_max_take_items();
  static const int kMaxTakeItemsFieldNumber = 8;
  ::google::protobuf::int32 max_take_items() const;
  void set_max_take_items(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigLevel)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_need_exp();
  void clear_has_need_exp();
  void set_has_add_facility();
  void clear_has_add_facility();
  void set_has_add_item();
  void clear_has_add_item();
  void set_has_add_exp();
  void clear_has_add_exp();
  void set_has_max_sailor_level();
  void clear_has_max_sailor_level();
  void set_has_max_vitality();
  void clear_has_max_vitality();
  void set_has_max_take_items();
  void clear_has_max_take_items();
  void set_has_fail_reward();
  void clear_has_fail_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr add_facility_;
  ::google::protobuf::internal::ArenaStringPtr add_item_;
  ::google::protobuf::internal::ArenaStringPtr fail_reward_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 need_exp_;
  ::google::protobuf::int32 add_exp_;
  ::google::protobuf::int32 max_sailor_level_;
  ::google::protobuf::int32 max_vitality_;
  ::google::protobuf::int32 max_take_items_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigModel) */ {
 public:
  ConfigModel();
  virtual ~ConfigModel();

  ConfigModel(const ConfigModel& from);

  inline ConfigModel& operator=(const ConfigModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigModel(ConfigModel&& from) noexcept
    : ConfigModel() {
    *this = ::std::move(from);
  }

  inline ConfigModel& operator=(ConfigModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigModel* internal_default_instance() {
    return reinterpret_cast<const ConfigModel*>(
               &_ConfigModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(ConfigModel* other);
  void Swap(ConfigModel* other);
  friend void swap(ConfigModel& a, ConfigModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigModel* New() const final {
    return CreateMaybeMessage<ConfigModel>(NULL);
  }

  ConfigModel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigModel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigModel& from);
  void MergeFrom(const ConfigModel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigModel* other);
  protected:
  explicit ConfigModel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes room_open = 4;
  bool has_room_open() const;
  void clear_room_open();
  static const int kRoomOpenFieldNumber = 4;
  const ::std::string& room_open() const;
  void set_room_open(const ::std::string& value);
  #if LANG_CXX11
  void set_room_open(::std::string&& value);
  #endif
  void set_room_open(const char* value);
  void set_room_open(const void* value, size_t size);
  ::std::string* mutable_room_open();
  ::std::string* release_room_open();
  void set_allocated_room_open(::std::string* room_open);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_room_open();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room_open(
      ::std::string* room_open);

  // required bytes map_size = 5;
  bool has_map_size() const;
  void clear_map_size();
  static const int kMapSizeFieldNumber = 5;
  const ::std::string& map_size() const;
  void set_map_size(const ::std::string& value);
  #if LANG_CXX11
  void set_map_size(::std::string&& value);
  #endif
  void set_map_size(const char* value);
  void set_map_size(const void* value, size_t size);
  ::std::string* mutable_map_size();
  ::std::string* release_map_size();
  void set_allocated_map_size(::std::string* map_size);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_map_size();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_size(
      ::std::string* map_size);

  // required bytes ship_template = 6;
  bool has_ship_template() const;
  void clear_ship_template();
  static const int kShipTemplateFieldNumber = 6;
  const ::std::string& ship_template() const;
  void set_ship_template(const ::std::string& value);
  #if LANG_CXX11
  void set_ship_template(::std::string&& value);
  #endif
  void set_ship_template(const char* value);
  void set_ship_template(const void* value, size_t size);
  ::std::string* mutable_ship_template();
  ::std::string* release_ship_template();
  void set_allocated_ship_template(::std::string* ship_template);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ship_template();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ship_template(
      ::std::string* ship_template);

  // required bytes null_template = 7;
  bool has_null_template() const;
  void clear_null_template();
  static const int kNullTemplateFieldNumber = 7;
  const ::std::string& null_template() const;
  void set_null_template(const ::std::string& value);
  #if LANG_CXX11
  void set_null_template(::std::string&& value);
  #endif
  void set_null_template(const char* value);
  void set_null_template(const void* value, size_t size);
  ::std::string* mutable_null_template();
  ::std::string* release_null_template();
  void set_allocated_null_template(::std::string* null_template);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_null_template();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_null_template(
      ::std::string* null_template);

  // required bytes ship_facility = 8;
  bool has_ship_facility() const;
  void clear_ship_facility();
  static const int kShipFacilityFieldNumber = 8;
  const ::std::string& ship_facility() const;
  void set_ship_facility(const ::std::string& value);
  #if LANG_CXX11
  void set_ship_facility(::std::string&& value);
  #endif
  void set_ship_facility(const char* value);
  void set_ship_facility(const void* value, size_t size);
  ::std::string* mutable_ship_facility();
  ::std::string* release_ship_facility();
  void set_allocated_ship_facility(::std::string* ship_facility);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ship_facility();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ship_facility(
      ::std::string* ship_facility);

  // required bytes unlock_cost = 11;
  bool has_unlock_cost() const;
  void clear_unlock_cost();
  static const int kUnlockCostFieldNumber = 11;
  const ::std::string& unlock_cost() const;
  void set_unlock_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_cost(::std::string&& value);
  #endif
  void set_unlock_cost(const char* value);
  void set_unlock_cost(const void* value, size_t size);
  ::std::string* mutable_unlock_cost();
  ::std::string* release_unlock_cost();
  void set_allocated_unlock_cost(::std::string* unlock_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_cost(
      ::std::string* unlock_cost);

  // required bytes unlock_reward = 13;
  bool has_unlock_reward() const;
  void clear_unlock_reward();
  static const int kUnlockRewardFieldNumber = 13;
  const ::std::string& unlock_reward() const;
  void set_unlock_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_reward(::std::string&& value);
  #endif
  void set_unlock_reward(const char* value);
  void set_unlock_reward(const void* value, size_t size);
  ::std::string* mutable_unlock_reward();
  ::std::string* release_unlock_reward();
  void set_allocated_unlock_reward(::std::string* unlock_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_reward(
      ::std::string* unlock_reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 style = 2;
  bool has_style() const;
  void clear_style();
  static const int kStyleFieldNumber = 2;
  ::google::protobuf::int32 style() const;
  void set_style(::google::protobuf::int32 value);

  // required int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 need_level = 9;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 9;
  ::google::protobuf::int32 need_level() const;
  void set_need_level(::google::protobuf::int32 value);

  // required int32 pre_model = 10;
  bool has_pre_model() const;
  void clear_pre_model();
  static const int kPreModelFieldNumber = 10;
  ::google::protobuf::int32 pre_model() const;
  void set_pre_model(::google::protobuf::int32 value);

  // required int32 capacity = 12;
  bool has_capacity() const;
  void clear_capacity();
  static const int kCapacityFieldNumber = 12;
  ::google::protobuf::int32 capacity() const;
  void set_capacity(::google::protobuf::int32 value);

  // required float machine_param = 14;
  bool has_machine_param() const;
  void clear_machine_param();
  static const int kMachineParamFieldNumber = 14;
  float machine_param() const;
  void set_machine_param(float value);

  // @@protoc_insertion_point(class_scope:db.ConfigModel)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_style();
  void clear_has_style();
  void set_has_level();
  void clear_has_level();
  void set_has_room_open();
  void clear_has_room_open();
  void set_has_map_size();
  void clear_has_map_size();
  void set_has_ship_template();
  void clear_has_ship_template();
  void set_has_null_template();
  void clear_has_null_template();
  void set_has_ship_facility();
  void clear_has_ship_facility();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_pre_model();
  void clear_has_pre_model();
  void set_has_unlock_cost();
  void clear_has_unlock_cost();
  void set_has_capacity();
  void clear_has_capacity();
  void set_has_unlock_reward();
  void clear_has_unlock_reward();
  void set_has_machine_param();
  void clear_has_machine_param();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr room_open_;
  ::google::protobuf::internal::ArenaStringPtr map_size_;
  ::google::protobuf::internal::ArenaStringPtr ship_template_;
  ::google::protobuf::internal::ArenaStringPtr null_template_;
  ::google::protobuf::internal::ArenaStringPtr ship_facility_;
  ::google::protobuf::internal::ArenaStringPtr unlock_cost_;
  ::google::protobuf::internal::ArenaStringPtr unlock_reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 style_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 need_level_;
  ::google::protobuf::int32 pre_model_;
  ::google::protobuf::int32 capacity_;
  float machine_param_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigPlace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigPlace) */ {
 public:
  ConfigPlace();
  virtual ~ConfigPlace();

  ConfigPlace(const ConfigPlace& from);

  inline ConfigPlace& operator=(const ConfigPlace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigPlace(ConfigPlace&& from) noexcept
    : ConfigPlace() {
    *this = ::std::move(from);
  }

  inline ConfigPlace& operator=(ConfigPlace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigPlace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPlace* internal_default_instance() {
    return reinterpret_cast<const ConfigPlace*>(
               &_ConfigPlace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(ConfigPlace* other);
  void Swap(ConfigPlace* other);
  friend void swap(ConfigPlace& a, ConfigPlace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigPlace* New() const final {
    return CreateMaybeMessage<ConfigPlace>(NULL);
  }

  ConfigPlace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPlace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigPlace& from);
  void MergeFrom(const ConfigPlace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPlace* other);
  protected:
  explicit ConfigPlace(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const void* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_time();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time(
      ::std::string* time);

  // required bytes start_pos = 5;
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 5;
  const ::std::string& start_pos() const;
  void set_start_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_start_pos(::std::string&& value);
  #endif
  void set_start_pos(const char* value);
  void set_start_pos(const void* value, size_t size);
  ::std::string* mutable_start_pos();
  ::std::string* release_start_pos();
  void set_allocated_start_pos(::std::string* start_pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_start_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_pos(
      ::std::string* start_pos);

  // required bytes tiled_map = 8;
  bool has_tiled_map() const;
  void clear_tiled_map();
  static const int kTiledMapFieldNumber = 8;
  const ::std::string& tiled_map() const;
  void set_tiled_map(const ::std::string& value);
  #if LANG_CXX11
  void set_tiled_map(::std::string&& value);
  #endif
  void set_tiled_map(const char* value);
  void set_tiled_map(const void* value, size_t size);
  ::std::string* mutable_tiled_map();
  ::std::string* release_tiled_map();
  void set_allocated_tiled_map(::std::string* tiled_map);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_tiled_map();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tiled_map(
      ::std::string* tiled_map);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  ::google::protobuf::int32 location() const;
  void set_location(::google::protobuf::int32 value);

  // required int32 width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // required int32 boom = 9;
  bool has_boom() const;
  void clear_boom();
  static const int kBoomFieldNumber = 9;
  ::google::protobuf::int32 boom() const;
  void set_boom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigPlace)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_time();
  void clear_has_time();
  void set_has_location();
  void clear_has_location();
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_tiled_map();
  void clear_has_tiled_map();
  void set_has_boom();
  void clear_has_boom();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr start_pos_;
  ::google::protobuf::internal::ArenaStringPtr tiled_map_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 location_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 boom_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigSceneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigSceneInfo) */ {
 public:
  ConfigSceneInfo();
  virtual ~ConfigSceneInfo();

  ConfigSceneInfo(const ConfigSceneInfo& from);

  inline ConfigSceneInfo& operator=(const ConfigSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigSceneInfo(ConfigSceneInfo&& from) noexcept
    : ConfigSceneInfo() {
    *this = ::std::move(from);
  }

  inline ConfigSceneInfo& operator=(ConfigSceneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigSceneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigSceneInfo* internal_default_instance() {
    return reinterpret_cast<const ConfigSceneInfo*>(
               &_ConfigSceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(ConfigSceneInfo* other);
  void Swap(ConfigSceneInfo* other);
  friend void swap(ConfigSceneInfo& a, ConfigSceneInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigSceneInfo* New() const final {
    return CreateMaybeMessage<ConfigSceneInfo>(NULL);
  }

  ConfigSceneInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigSceneInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigSceneInfo& from);
  void MergeFrom(const ConfigSceneInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSceneInfo* other);
  protected:
  explicit ConfigSceneInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes scene_name = 2;
  bool has_scene_name() const;
  void clear_scene_name();
  static const int kSceneNameFieldNumber = 2;
  const ::std::string& scene_name() const;
  void set_scene_name(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_name(::std::string&& value);
  #endif
  void set_scene_name(const char* value);
  void set_scene_name(const void* value, size_t size);
  ::std::string* mutable_scene_name();
  ::std::string* release_scene_name();
  void set_allocated_scene_name(::std::string* scene_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_scene_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_name(
      ::std::string* scene_name);

  // required bytes pos = 6;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  const ::std::string& pos() const;
  void set_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_pos(::std::string&& value);
  #endif
  void set_pos(const char* value);
  void set_pos(const void* value, size_t size);
  ::std::string* mutable_pos();
  ::std::string* release_pos();
  void set_allocated_pos(::std::string* pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pos(
      ::std::string* pos);

  // required bytes drop_item = 7;
  bool has_drop_item() const;
  void clear_drop_item();
  static const int kDropItemFieldNumber = 7;
  const ::std::string& drop_item() const;
  void set_drop_item(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_item(::std::string&& value);
  #endif
  void set_drop_item(const char* value);
  void set_drop_item(const void* value, size_t size);
  ::std::string* mutable_drop_item();
  ::std::string* release_drop_item();
  void set_allocated_drop_item(::std::string* drop_item);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop_item();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop_item(
      ::std::string* drop_item);

  // required bytes formula_unlock = 8;
  bool has_formula_unlock() const;
  void clear_formula_unlock();
  static const int kFormulaUnlockFieldNumber = 8;
  const ::std::string& formula_unlock() const;
  void set_formula_unlock(const ::std::string& value);
  #if LANG_CXX11
  void set_formula_unlock(::std::string&& value);
  #endif
  void set_formula_unlock(const char* value);
  void set_formula_unlock(const void* value, size_t size);
  ::std::string* mutable_formula_unlock();
  ::std::string* release_formula_unlock();
  void set_allocated_formula_unlock(::std::string* formula_unlock);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_formula_unlock();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_formula_unlock(
      ::std::string* formula_unlock);

  // required bytes end_condition = 10;
  bool has_end_condition() const;
  void clear_end_condition();
  static const int kEndConditionFieldNumber = 10;
  const ::std::string& end_condition() const;
  void set_end_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_end_condition(::std::string&& value);
  #endif
  void set_end_condition(const char* value);
  void set_end_condition(const void* value, size_t size);
  ::std::string* mutable_end_condition();
  ::std::string* release_end_condition();
  void set_allocated_end_condition(::std::string* end_condition);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_end_condition();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end_condition(
      ::std::string* end_condition);

  // required bytes star_condition = 12;
  bool has_star_condition() const;
  void clear_star_condition();
  static const int kStarConditionFieldNumber = 12;
  const ::std::string& star_condition() const;
  void set_star_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_star_condition(::std::string&& value);
  #endif
  void set_star_condition(const char* value);
  void set_star_condition(const void* value, size_t size);
  ::std::string* mutable_star_condition();
  ::std::string* release_star_condition();
  void set_allocated_star_condition(::std::string* star_condition);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_star_condition();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_star_condition(
      ::std::string* star_condition);

  // required bytes fight_map = 13;
  bool has_fight_map() const;
  void clear_fight_map();
  static const int kFightMapFieldNumber = 13;
  const ::std::string& fight_map() const;
  void set_fight_map(const ::std::string& value);
  #if LANG_CXX11
  void set_fight_map(::std::string&& value);
  #endif
  void set_fight_map(const char* value);
  void set_fight_map(const void* value, size_t size);
  ::std::string* mutable_fight_map();
  ::std::string* release_fight_map();
  void set_allocated_fight_map(::std::string* fight_map);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_fight_map();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fight_map(
      ::std::string* fight_map);

  // required bytes content = 16;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 16;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // required bytes port_unlock = 17;
  bool has_port_unlock() const;
  void clear_port_unlock();
  static const int kPortUnlockFieldNumber = 17;
  const ::std::string& port_unlock() const;
  void set_port_unlock(const ::std::string& value);
  #if LANG_CXX11
  void set_port_unlock(::std::string&& value);
  #endif
  void set_port_unlock(const char* value);
  void set_port_unlock(const void* value, size_t size);
  ::std::string* mutable_port_unlock();
  ::std::string* release_port_unlock();
  void set_allocated_port_unlock(::std::string* port_unlock);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_port_unlock();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_port_unlock(
      ::std::string* port_unlock);

  // required bytes pre_task = 18;
  bool has_pre_task() const;
  void clear_pre_task();
  static const int kPreTaskFieldNumber = 18;
  const ::std::string& pre_task() const;
  void set_pre_task(const ::std::string& value);
  #if LANG_CXX11
  void set_pre_task(::std::string&& value);
  #endif
  void set_pre_task(const char* value);
  void set_pre_task(const void* value, size_t size);
  ::std::string* mutable_pre_task();
  ::std::string* release_pre_task();
  void set_allocated_pre_task(::std::string* pre_task);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pre_task();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre_task(
      ::std::string* pre_task);

  // required bytes secret_room = 19;
  bool has_secret_room() const;
  void clear_secret_room();
  static const int kSecretRoomFieldNumber = 19;
  const ::std::string& secret_room() const;
  void set_secret_room(const ::std::string& value);
  #if LANG_CXX11
  void set_secret_room(::std::string&& value);
  #endif
  void set_secret_room(const char* value);
  void set_secret_room(const void* value, size_t size);
  ::std::string* mutable_secret_room();
  ::std::string* release_secret_room();
  void set_allocated_secret_room(::std::string* secret_room);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_secret_room();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_secret_room(
      ::std::string* secret_room);

  // required bytes start_res = 20;
  bool has_start_res() const;
  void clear_start_res();
  static const int kStartResFieldNumber = 20;
  const ::std::string& start_res() const;
  void set_start_res(const ::std::string& value);
  #if LANG_CXX11
  void set_start_res(::std::string&& value);
  #endif
  void set_start_res(const char* value);
  void set_start_res(const void* value, size_t size);
  ::std::string* mutable_start_res();
  ::std::string* release_start_res();
  void set_allocated_start_res(::std::string* start_res);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_start_res();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_res(
      ::std::string* start_res);

  // required bytes fight_machine = 21;
  bool has_fight_machine() const;
  void clear_fight_machine();
  static const int kFightMachineFieldNumber = 21;
  const ::std::string& fight_machine() const;
  void set_fight_machine(const ::std::string& value);
  #if LANG_CXX11
  void set_fight_machine(::std::string&& value);
  #endif
  void set_fight_machine(const char* value);
  void set_fight_machine(const void* value, size_t size);
  ::std::string* mutable_fight_machine();
  ::std::string* release_fight_machine();
  void set_allocated_fight_machine(::std::string* fight_machine);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_fight_machine();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fight_machine(
      ::std::string* fight_machine);

  // required bytes enter_condition = 22;
  bool has_enter_condition() const;
  void clear_enter_condition();
  static const int kEnterConditionFieldNumber = 22;
  const ::std::string& enter_condition() const;
  void set_enter_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_enter_condition(::std::string&& value);
  #endif
  void set_enter_condition(const char* value);
  void set_enter_condition(const void* value, size_t size);
  ::std::string* mutable_enter_condition();
  ::std::string* release_enter_condition();
  void set_allocated_enter_condition(::std::string* enter_condition);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_enter_condition();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enter_condition(
      ::std::string* enter_condition);

  // required bytes dungeon_event = 23;
  bool has_dungeon_event() const;
  void clear_dungeon_event();
  static const int kDungeonEventFieldNumber = 23;
  const ::std::string& dungeon_event() const;
  void set_dungeon_event(const ::std::string& value);
  #if LANG_CXX11
  void set_dungeon_event(::std::string&& value);
  #endif
  void set_dungeon_event(const char* value);
  void set_dungeon_event(const void* value, size_t size);
  ::std::string* mutable_dungeon_event();
  ::std::string* release_dungeon_event();
  void set_allocated_dungeon_event(::std::string* dungeon_event);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_dungeon_event();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dungeon_event(
      ::std::string* dungeon_event);

  // required bytes final_reward = 24;
  bool has_final_reward() const;
  void clear_final_reward();
  static const int kFinalRewardFieldNumber = 24;
  const ::std::string& final_reward() const;
  void set_final_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_final_reward(::std::string&& value);
  #endif
  void set_final_reward(const char* value);
  void set_final_reward(const void* value, size_t size);
  ::std::string* mutable_final_reward();
  ::std::string* release_final_reward();
  void set_allocated_final_reward(::std::string* final_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_final_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_final_reward(
      ::std::string* final_reward);

  // required bytes first_reward = 26;
  bool has_first_reward() const;
  void clear_first_reward();
  static const int kFirstRewardFieldNumber = 26;
  const ::std::string& first_reward() const;
  void set_first_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_first_reward(::std::string&& value);
  #endif
  void set_first_reward(const char* value);
  void set_first_reward(const void* value, size_t size);
  ::std::string* mutable_first_reward();
  ::std::string* release_first_reward();
  void set_allocated_first_reward(::std::string* first_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_first_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_first_reward(
      ::std::string* first_reward);

  // required bytes clear_reward = 27;
  bool has_clear_reward() const;
  void clear_clear_reward();
  static const int kClearRewardFieldNumber = 27;
  const ::std::string& clear_reward() const;
  void set_clear_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_clear_reward(::std::string&& value);
  #endif
  void set_clear_reward(const char* value);
  void set_clear_reward(const void* value, size_t size);
  ::std::string* mutable_clear_reward();
  ::std::string* release_clear_reward();
  void set_allocated_clear_reward(::std::string* clear_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_clear_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clear_reward(
      ::std::string* clear_reward);

  // required bytes boss_info = 28;
  bool has_boss_info() const;
  void clear_boss_info();
  static const int kBossInfoFieldNumber = 28;
  const ::std::string& boss_info() const;
  void set_boss_info(const ::std::string& value);
  #if LANG_CXX11
  void set_boss_info(::std::string&& value);
  #endif
  void set_boss_info(const char* value);
  void set_boss_info(const void* value, size_t size);
  ::std::string* mutable_boss_info();
  ::std::string* release_boss_info();
  void set_allocated_boss_info(::std::string* boss_info);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_boss_info();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_boss_info(
      ::std::string* boss_info);

  // required bytes layer_reward = 29;
  bool has_layer_reward() const;
  void clear_layer_reward();
  static const int kLayerRewardFieldNumber = 29;
  const ::std::string& layer_reward() const;
  void set_layer_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_layer_reward(::std::string&& value);
  #endif
  void set_layer_reward(const char* value);
  void set_layer_reward(const void* value, size_t size);
  ::std::string* mutable_layer_reward();
  ::std::string* release_layer_reward();
  void set_allocated_layer_reward(::std::string* layer_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_layer_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_layer_reward(
      ::std::string* layer_reward);

  // required bytes saved_customer = 32;
  bool has_saved_customer() const;
  void clear_saved_customer();
  static const int kSavedCustomerFieldNumber = 32;
  const ::std::string& saved_customer() const;
  void set_saved_customer(const ::std::string& value);
  #if LANG_CXX11
  void set_saved_customer(::std::string&& value);
  #endif
  void set_saved_customer(const char* value);
  void set_saved_customer(const void* value, size_t size);
  ::std::string* mutable_saved_customer();
  ::std::string* release_saved_customer();
  void set_allocated_saved_customer(::std::string* saved_customer);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_saved_customer();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_saved_customer(
      ::std::string* saved_customer);

  // required int32 sceneid = 1;
  bool has_sceneid() const;
  void clear_sceneid();
  static const int kSceneidFieldNumber = 1;
  ::google::protobuf::int32 sceneid() const;
  void set_sceneid(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 belong_to = 4;
  bool has_belong_to() const;
  void clear_belong_to();
  static const int kBelongToFieldNumber = 4;
  ::google::protobuf::int32 belong_to() const;
  void set_belong_to(::google::protobuf::int32 value);

  // required int32 checkpoint_num = 5;
  bool has_checkpoint_num() const;
  void clear_checkpoint_num();
  static const int kCheckpointNumFieldNumber = 5;
  ::google::protobuf::int32 checkpoint_num() const;
  void set_checkpoint_num(::google::protobuf::int32 value);

  // required int32 add_exp = 9;
  bool has_add_exp() const;
  void clear_add_exp();
  static const int kAddExpFieldNumber = 9;
  ::google::protobuf::int32 add_exp() const;
  void set_add_exp(::google::protobuf::int32 value);

  // required int32 consume_num = 11;
  bool has_consume_num() const;
  void clear_consume_num();
  static const int kConsumeNumFieldNumber = 11;
  ::google::protobuf::int32 consume_num() const;
  void set_consume_num(::google::protobuf::int32 value);

  // required int32 max_layer = 14;
  bool has_max_layer() const;
  void clear_max_layer();
  static const int kMaxLayerFieldNumber = 14;
  ::google::protobuf::int32 max_layer() const;
  void set_max_layer(::google::protobuf::int32 value);

  // required int32 need_point = 25;
  bool has_need_point() const;
  void clear_need_point();
  static const int kNeedPointFieldNumber = 25;
  ::google::protobuf::int32 need_point() const;
  void set_need_point(::google::protobuf::int32 value);

  // required int32 can_repeat = 30;
  bool has_can_repeat() const;
  void clear_can_repeat();
  static const int kCanRepeatFieldNumber = 30;
  ::google::protobuf::int32 can_repeat() const;
  void set_can_repeat(::google::protobuf::int32 value);

  // required int32 daily_times_limit = 31;
  bool has_daily_times_limit() const;
  void clear_daily_times_limit();
  static const int kDailyTimesLimitFieldNumber = 31;
  ::google::protobuf::int32 daily_times_limit() const;
  void set_daily_times_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigSceneInfo)
 private:
  void set_has_sceneid();
  void clear_has_sceneid();
  void set_has_scene_name();
  void clear_has_scene_name();
  void set_has_type();
  void clear_has_type();
  void set_has_belong_to();
  void clear_has_belong_to();
  void set_has_checkpoint_num();
  void clear_has_checkpoint_num();
  void set_has_pos();
  void clear_has_pos();
  void set_has_drop_item();
  void clear_has_drop_item();
  void set_has_formula_unlock();
  void clear_has_formula_unlock();
  void set_has_add_exp();
  void clear_has_add_exp();
  void set_has_end_condition();
  void clear_has_end_condition();
  void set_has_consume_num();
  void clear_has_consume_num();
  void set_has_star_condition();
  void clear_has_star_condition();
  void set_has_fight_map();
  void clear_has_fight_map();
  void set_has_max_layer();
  void clear_has_max_layer();
  void set_has_content();
  void clear_has_content();
  void set_has_port_unlock();
  void clear_has_port_unlock();
  void set_has_pre_task();
  void clear_has_pre_task();
  void set_has_secret_room();
  void clear_has_secret_room();
  void set_has_start_res();
  void clear_has_start_res();
  void set_has_fight_machine();
  void clear_has_fight_machine();
  void set_has_enter_condition();
  void clear_has_enter_condition();
  void set_has_dungeon_event();
  void clear_has_dungeon_event();
  void set_has_final_reward();
  void clear_has_final_reward();
  void set_has_need_point();
  void clear_has_need_point();
  void set_has_first_reward();
  void clear_has_first_reward();
  void set_has_clear_reward();
  void clear_has_clear_reward();
  void set_has_boss_info();
  void clear_has_boss_info();
  void set_has_layer_reward();
  void clear_has_layer_reward();
  void set_has_can_repeat();
  void clear_has_can_repeat();
  void set_has_daily_times_limit();
  void clear_has_daily_times_limit();
  void set_has_saved_customer();
  void clear_has_saved_customer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr scene_name_;
  ::google::protobuf::internal::ArenaStringPtr pos_;
  ::google::protobuf::internal::ArenaStringPtr drop_item_;
  ::google::protobuf::internal::ArenaStringPtr formula_unlock_;
  ::google::protobuf::internal::ArenaStringPtr end_condition_;
  ::google::protobuf::internal::ArenaStringPtr star_condition_;
  ::google::protobuf::internal::ArenaStringPtr fight_map_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr port_unlock_;
  ::google::protobuf::internal::ArenaStringPtr pre_task_;
  ::google::protobuf::internal::ArenaStringPtr secret_room_;
  ::google::protobuf::internal::ArenaStringPtr start_res_;
  ::google::protobuf::internal::ArenaStringPtr fight_machine_;
  ::google::protobuf::internal::ArenaStringPtr enter_condition_;
  ::google::protobuf::internal::ArenaStringPtr dungeon_event_;
  ::google::protobuf::internal::ArenaStringPtr final_reward_;
  ::google::protobuf::internal::ArenaStringPtr first_reward_;
  ::google::protobuf::internal::ArenaStringPtr clear_reward_;
  ::google::protobuf::internal::ArenaStringPtr boss_info_;
  ::google::protobuf::internal::ArenaStringPtr layer_reward_;
  ::google::protobuf::internal::ArenaStringPtr saved_customer_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 belong_to_;
  ::google::protobuf::int32 checkpoint_num_;
  ::google::protobuf::int32 add_exp_;
  ::google::protobuf::int32 consume_num_;
  ::google::protobuf::int32 max_layer_;
  ::google::protobuf::int32 need_point_;
  ::google::protobuf::int32 can_repeat_;
  ::google::protobuf::int32 daily_times_limit_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigExploreEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigExploreEvent) */ {
 public:
  ConfigExploreEvent();
  virtual ~ConfigExploreEvent();

  ConfigExploreEvent(const ConfigExploreEvent& from);

  inline ConfigExploreEvent& operator=(const ConfigExploreEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigExploreEvent(ConfigExploreEvent&& from) noexcept
    : ConfigExploreEvent() {
    *this = ::std::move(from);
  }

  inline ConfigExploreEvent& operator=(ConfigExploreEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigExploreEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigExploreEvent* internal_default_instance() {
    return reinterpret_cast<const ConfigExploreEvent*>(
               &_ConfigExploreEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ConfigExploreEvent* other);
  void Swap(ConfigExploreEvent* other);
  friend void swap(ConfigExploreEvent& a, ConfigExploreEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigExploreEvent* New() const final {
    return CreateMaybeMessage<ConfigExploreEvent>(NULL);
  }

  ConfigExploreEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigExploreEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigExploreEvent& from);
  void MergeFrom(const ConfigExploreEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigExploreEvent* other);
  protected:
  explicit ConfigExploreEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes condition = 4;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 4;
  const ::std::string& condition() const;
  void set_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_condition(::std::string&& value);
  #endif
  void set_condition(const char* value);
  void set_condition(const void* value, size_t size);
  ::std::string* mutable_condition();
  ::std::string* release_condition();
  void set_allocated_condition(::std::string* condition);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_condition();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_condition(
      ::std::string* condition);

  // required bytes landform_condition = 5;
  bool has_landform_condition() const;
  void clear_landform_condition();
  static const int kLandformConditionFieldNumber = 5;
  const ::std::string& landform_condition() const;
  void set_landform_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_landform_condition(::std::string&& value);
  #endif
  void set_landform_condition(const char* value);
  void set_landform_condition(const void* value, size_t size);
  ::std::string* mutable_landform_condition();
  ::std::string* release_landform_condition();
  void set_allocated_landform_condition(::std::string* landform_condition);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_landform_condition();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_landform_condition(
      ::std::string* landform_condition);

  // required bytes content = 6;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 6;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // required bytes pos = 7;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 7;
  const ::std::string& pos() const;
  void set_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_pos(::std::string&& value);
  #endif
  void set_pos(const char* value);
  void set_pos(const void* value, size_t size);
  ::std::string* mutable_pos();
  ::std::string* release_pos();
  void set_allocated_pos(::std::string* pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pos(
      ::std::string* pos);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 trigger_type = 3;
  bool has_trigger_type() const;
  void clear_trigger_type();
  static const int kTriggerTypeFieldNumber = 3;
  ::google::protobuf::int32 trigger_type() const;
  void set_trigger_type(::google::protobuf::int32 value);

  // required float probability = 8;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 8;
  float probability() const;
  void set_probability(float value);

  // required int32 cd = 9;
  bool has_cd() const;
  void clear_cd();
  static const int kCdFieldNumber = 9;
  ::google::protobuf::int32 cd() const;
  void set_cd(::google::protobuf::int32 value);

  // required int32 time = 10;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 10;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigExploreEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_trigger_type();
  void clear_has_trigger_type();
  void set_has_condition();
  void clear_has_condition();
  void set_has_landform_condition();
  void clear_has_landform_condition();
  void set_has_content();
  void clear_has_content();
  void set_has_pos();
  void clear_has_pos();
  void set_has_probability();
  void clear_has_probability();
  void set_has_cd();
  void clear_has_cd();
  void set_has_time();
  void clear_has_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr condition_;
  ::google::protobuf::internal::ArenaStringPtr landform_condition_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr pos_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 trigger_type_;
  float probability_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 time_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigBaseRoom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigBaseRoom) */ {
 public:
  ConfigBaseRoom();
  virtual ~ConfigBaseRoom();

  ConfigBaseRoom(const ConfigBaseRoom& from);

  inline ConfigBaseRoom& operator=(const ConfigBaseRoom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigBaseRoom(ConfigBaseRoom&& from) noexcept
    : ConfigBaseRoom() {
    *this = ::std::move(from);
  }

  inline ConfigBaseRoom& operator=(ConfigBaseRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigBaseRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigBaseRoom* internal_default_instance() {
    return reinterpret_cast<const ConfigBaseRoom*>(
               &_ConfigBaseRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ConfigBaseRoom* other);
  void Swap(ConfigBaseRoom* other);
  friend void swap(ConfigBaseRoom& a, ConfigBaseRoom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigBaseRoom* New() const final {
    return CreateMaybeMessage<ConfigBaseRoom>(NULL);
  }

  ConfigBaseRoom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigBaseRoom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigBaseRoom& from);
  void MergeFrom(const ConfigBaseRoom& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigBaseRoom* other);
  protected:
  explicit ConfigBaseRoom(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes need_material = 9;
  bool has_need_material() const;
  void clear_need_material();
  static const int kNeedMaterialFieldNumber = 9;
  const ::std::string& need_material() const;
  void set_need_material(const ::std::string& value);
  #if LANG_CXX11
  void set_need_material(::std::string&& value);
  #endif
  void set_need_material(const char* value);
  void set_need_material(const void* value, size_t size);
  ::std::string* mutable_need_material();
  ::std::string* release_need_material();
  void set_allocated_need_material(::std::string* need_material);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_need_material();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_need_material(
      ::std::string* need_material);

  // required bytes machine_param = 11;
  bool has_machine_param() const;
  void clear_machine_param();
  static const int kMachineParamFieldNumber = 11;
  const ::std::string& machine_param() const;
  void set_machine_param(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_param(::std::string&& value);
  #endif
  void set_machine_param(const char* value);
  void set_machine_param(const void* value, size_t size);
  ::std::string* mutable_machine_param();
  ::std::string* release_machine_param();
  void set_allocated_machine_param(::std::string* machine_param);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_machine_param();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_machine_param(
      ::std::string* machine_param);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 room_type = 3;
  bool has_room_type() const;
  void clear_room_type();
  static const int kRoomTypeFieldNumber = 3;
  ::google::protobuf::int32 room_type() const;
  void set_room_type(::google::protobuf::int32 value);

  // required int32 room_num_min = 4;
  bool has_room_num_min() const;
  void clear_room_num_min();
  static const int kRoomNumMinFieldNumber = 4;
  ::google::protobuf::int32 room_num_min() const;
  void set_room_num_min(::google::protobuf::int32 value);

  // required int32 attribute = 5;
  bool has_attribute() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  ::google::protobuf::int32 attribute() const;
  void set_attribute(::google::protobuf::int32 value);

  // required int32 efficiency = 6;
  bool has_efficiency() const;
  void clear_efficiency();
  static const int kEfficiencyFieldNumber = 6;
  ::google::protobuf::int32 efficiency() const;
  void set_efficiency(::google::protobuf::int32 value);

  // required int32 pre_room = 7;
  bool has_pre_room() const;
  void clear_pre_room();
  static const int kPreRoomFieldNumber = 7;
  ::google::protobuf::int32 pre_room() const;
  void set_pre_room(::google::protobuf::int32 value);

  // required int32 need_level = 8;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 8;
  ::google::protobuf::int32 need_level() const;
  void set_need_level(::google::protobuf::int32 value);

  // required int32 farm_skill = 10;
  bool has_farm_skill() const;
  void clear_farm_skill();
  static const int kFarmSkillFieldNumber = 10;
  ::google::protobuf::int32 farm_skill() const;
  void set_farm_skill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigBaseRoom)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_room_type();
  void clear_has_room_type();
  void set_has_room_num_min();
  void clear_has_room_num_min();
  void set_has_attribute();
  void clear_has_attribute();
  void set_has_efficiency();
  void clear_has_efficiency();
  void set_has_pre_room();
  void clear_has_pre_room();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_need_material();
  void clear_has_need_material();
  void set_has_farm_skill();
  void clear_has_farm_skill();
  void set_has_machine_param();
  void clear_has_machine_param();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr need_material_;
  ::google::protobuf::internal::ArenaStringPtr machine_param_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 room_type_;
  ::google::protobuf::int32 room_num_min_;
  ::google::protobuf::int32 attribute_;
  ::google::protobuf::int32 efficiency_;
  ::google::protobuf::int32 pre_room_;
  ::google::protobuf::int32 need_level_;
  ::google::protobuf::int32 farm_skill_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigFormula : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFormula) */ {
 public:
  ConfigFormula();
  virtual ~ConfigFormula();

  ConfigFormula(const ConfigFormula& from);

  inline ConfigFormula& operator=(const ConfigFormula& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFormula(ConfigFormula&& from) noexcept
    : ConfigFormula() {
    *this = ::std::move(from);
  }

  inline ConfigFormula& operator=(ConfigFormula&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFormula& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFormula* internal_default_instance() {
    return reinterpret_cast<const ConfigFormula*>(
               &_ConfigFormula_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(ConfigFormula* other);
  void Swap(ConfigFormula* other);
  friend void swap(ConfigFormula& a, ConfigFormula& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFormula* New() const final {
    return CreateMaybeMessage<ConfigFormula>(NULL);
  }

  ConfigFormula* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFormula>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFormula& from);
  void MergeFrom(const ConfigFormula& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFormula* other);
  protected:
  explicit ConfigFormula(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes product_id = 3;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 3;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const void* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_product_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_product_id(
      ::std::string* product_id);

  // required bytes formula_name = 4;
  bool has_formula_name() const;
  void clear_formula_name();
  static const int kFormulaNameFieldNumber = 4;
  const ::std::string& formula_name() const;
  void set_formula_name(const ::std::string& value);
  #if LANG_CXX11
  void set_formula_name(::std::string&& value);
  #endif
  void set_formula_name(const char* value);
  void set_formula_name(const void* value, size_t size);
  ::std::string* mutable_formula_name();
  ::std::string* release_formula_name();
  void set_allocated_formula_name(::std::string* formula_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_formula_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_formula_name(
      ::std::string* formula_name);

  // required bytes material = 6;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 6;
  const ::std::string& material() const;
  void set_material(const ::std::string& value);
  #if LANG_CXX11
  void set_material(::std::string&& value);
  #endif
  void set_material(const char* value);
  void set_material(const void* value, size_t size);
  ::std::string* mutable_material();
  ::std::string* release_material();
  void set_allocated_material(::std::string* material);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_material();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_material(
      ::std::string* material);

  // required bytes speed_up_cost = 10;
  bool has_speed_up_cost() const;
  void clear_speed_up_cost();
  static const int kSpeedUpCostFieldNumber = 10;
  const ::std::string& speed_up_cost() const;
  void set_speed_up_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_speed_up_cost(::std::string&& value);
  #endif
  void set_speed_up_cost(const char* value);
  void set_speed_up_cost(const void* value, size_t size);
  ::std::string* mutable_speed_up_cost();
  ::std::string* release_speed_up_cost();
  void set_allocated_speed_up_cost(::std::string* speed_up_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_speed_up_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_speed_up_cost(
      ::std::string* speed_up_cost);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 seconds = 7;
  bool has_seconds() const;
  void clear_seconds();
  static const int kSecondsFieldNumber = 7;
  ::google::protobuf::int32 seconds() const;
  void set_seconds(::google::protobuf::int32 value);

  // required int32 belong_to = 8;
  bool has_belong_to() const;
  void clear_belong_to();
  static const int kBelongToFieldNumber = 8;
  ::google::protobuf::int32 belong_to() const;
  void set_belong_to(::google::protobuf::int32 value);

  // required int32 add_exp = 9;
  bool has_add_exp() const;
  void clear_add_exp();
  static const int kAddExpFieldNumber = 9;
  ::google::protobuf::int32 add_exp() const;
  void set_add_exp(::google::protobuf::int32 value);

  // required int32 output = 11;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 11;
  ::google::protobuf::int32 output() const;
  void set_output(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigFormula)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_level();
  void clear_has_level();
  void set_has_product_id();
  void clear_has_product_id();
  void set_has_formula_name();
  void clear_has_formula_name();
  void set_has_type();
  void clear_has_type();
  void set_has_material();
  void clear_has_material();
  void set_has_seconds();
  void clear_has_seconds();
  void set_has_belong_to();
  void clear_has_belong_to();
  void set_has_add_exp();
  void clear_has_add_exp();
  void set_has_speed_up_cost();
  void clear_has_speed_up_cost();
  void set_has_output();
  void clear_has_output();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr formula_name_;
  ::google::protobuf::internal::ArenaStringPtr material_;
  ::google::protobuf::internal::ArenaStringPtr speed_up_cost_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 seconds_;
  ::google::protobuf::int32 belong_to_;
  ::google::protobuf::int32 add_exp_;
  ::google::protobuf::int32 output_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigShopping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigShopping) */ {
 public:
  ConfigShopping();
  virtual ~ConfigShopping();

  ConfigShopping(const ConfigShopping& from);

  inline ConfigShopping& operator=(const ConfigShopping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigShopping(ConfigShopping&& from) noexcept
    : ConfigShopping() {
    *this = ::std::move(from);
  }

  inline ConfigShopping& operator=(ConfigShopping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigShopping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigShopping* internal_default_instance() {
    return reinterpret_cast<const ConfigShopping*>(
               &_ConfigShopping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(ConfigShopping* other);
  void Swap(ConfigShopping* other);
  friend void swap(ConfigShopping& a, ConfigShopping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigShopping* New() const final {
    return CreateMaybeMessage<ConfigShopping>(NULL);
  }

  ConfigShopping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigShopping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigShopping& from);
  void MergeFrom(const ConfigShopping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigShopping* other);
  protected:
  explicit ConfigShopping(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes goods = 5;
  bool has_goods() const;
  void clear_goods();
  static const int kGoodsFieldNumber = 5;
  const ::std::string& goods() const;
  void set_goods(const ::std::string& value);
  #if LANG_CXX11
  void set_goods(::std::string&& value);
  #endif
  void set_goods(const char* value);
  void set_goods(const void* value, size_t size);
  ::std::string* mutable_goods();
  ::std::string* release_goods();
  void set_allocated_goods(::std::string* goods);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_goods();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_goods(
      ::std::string* goods);

  // required bytes price = 6;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 6;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const void* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_price();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_price(
      ::std::string* price);

  // required bytes date = 7;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 7;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const void* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_date();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_date(
      ::std::string* date);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 groupid = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // required int32 category = 3;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  ::google::protobuf::int32 category() const;
  void set_category(::google::protobuf::int32 value);

  // required int32 belong_store = 4;
  bool has_belong_store() const;
  void clear_belong_store();
  static const int kBelongStoreFieldNumber = 4;
  ::google::protobuf::int32 belong_store() const;
  void set_belong_store(::google::protobuf::int32 value);

  // required int32 limit_num = 8;
  bool has_limit_num() const;
  void clear_limit_num();
  static const int kLimitNumFieldNumber = 8;
  ::google::protobuf::int32 limit_num() const;
  void set_limit_num(::google::protobuf::int32 value);

  // required int32 double = 9;
  bool has_double_() const;
  void clear_double_();
  static const int kDoubleFieldNumber = 9;
  ::google::protobuf::int32 double_() const;
  void set_double_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigShopping)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_category();
  void clear_has_category();
  void set_has_belong_store();
  void clear_has_belong_store();
  void set_has_goods();
  void clear_has_goods();
  void set_has_price();
  void clear_has_price();
  void set_has_date();
  void clear_has_date();
  void set_has_limit_num();
  void clear_has_limit_num();
  void set_has_double_();
  void clear_has_double_();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr goods_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 category_;
  ::google::protobuf::int32 belong_store_;
  ::google::protobuf::int32 limit_num_;
  ::google::protobuf::int32 double__;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCardAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigCardAttribute) */ {
 public:
  ConfigCardAttribute();
  virtual ~ConfigCardAttribute();

  ConfigCardAttribute(const ConfigCardAttribute& from);

  inline ConfigCardAttribute& operator=(const ConfigCardAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCardAttribute(ConfigCardAttribute&& from) noexcept
    : ConfigCardAttribute() {
    *this = ::std::move(from);
  }

  inline ConfigCardAttribute& operator=(ConfigCardAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCardAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCardAttribute* internal_default_instance() {
    return reinterpret_cast<const ConfigCardAttribute*>(
               &_ConfigCardAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(ConfigCardAttribute* other);
  void Swap(ConfigCardAttribute* other);
  friend void swap(ConfigCardAttribute& a, ConfigCardAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCardAttribute* New() const final {
    return CreateMaybeMessage<ConfigCardAttribute>(NULL);
  }

  ConfigCardAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCardAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCardAttribute& from);
  void MergeFrom(const ConfigCardAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCardAttribute* other);
  protected:
  explicit ConfigCardAttribute(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes influence = 4;
  bool has_influence() const;
  void clear_influence();
  static const int kInfluenceFieldNumber = 4;
  const ::std::string& influence() const;
  void set_influence(const ::std::string& value);
  #if LANG_CXX11
  void set_influence(::std::string&& value);
  #endif
  void set_influence(const char* value);
  void set_influence(const void* value, size_t size);
  ::std::string* mutable_influence();
  ::std::string* release_influence();
  void set_allocated_influence(::std::string* influence);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_influence();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_influence(
      ::std::string* influence);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigCardAttribute)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_influence();
  void clear_has_influence();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr influence_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCardEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigCardEquip) */ {
 public:
  ConfigCardEquip();
  virtual ~ConfigCardEquip();

  ConfigCardEquip(const ConfigCardEquip& from);

  inline ConfigCardEquip& operator=(const ConfigCardEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCardEquip(ConfigCardEquip&& from) noexcept
    : ConfigCardEquip() {
    *this = ::std::move(from);
  }

  inline ConfigCardEquip& operator=(ConfigCardEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCardEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCardEquip* internal_default_instance() {
    return reinterpret_cast<const ConfigCardEquip*>(
               &_ConfigCardEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(ConfigCardEquip* other);
  void Swap(ConfigCardEquip* other);
  friend void swap(ConfigCardEquip& a, ConfigCardEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCardEquip* New() const final {
    return CreateMaybeMessage<ConfigCardEquip>(NULL);
  }

  ConfigCardEquip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCardEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCardEquip& from);
  void MergeFrom(const ConfigCardEquip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCardEquip* other);
  protected:
  explicit ConfigCardEquip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes attribute = 11;
  bool has_attribute() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 11;
  const ::std::string& attribute() const;
  void set_attribute(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute(::std::string&& value);
  #endif
  void set_attribute(const char* value);
  void set_attribute(const void* value, size_t size);
  ::std::string* mutable_attribute();
  ::std::string* release_attribute();
  void set_allocated_attribute(::std::string* attribute);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attribute();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attribute(
      ::std::string* attribute);

  // required bytes special_attr = 12;
  bool has_special_attr() const;
  void clear_special_attr();
  static const int kSpecialAttrFieldNumber = 12;
  const ::std::string& special_attr() const;
  void set_special_attr(const ::std::string& value);
  #if LANG_CXX11
  void set_special_attr(::std::string&& value);
  #endif
  void set_special_attr(const char* value);
  void set_special_attr(const void* value, size_t size);
  ::std::string* mutable_special_attr();
  ::std::string* release_special_attr();
  void set_allocated_special_attr(::std::string* special_attr);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_special_attr();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_special_attr(
      ::std::string* special_attr);

  // required bytes advanced_attr = 13;
  bool has_advanced_attr() const;
  void clear_advanced_attr();
  static const int kAdvancedAttrFieldNumber = 13;
  const ::std::string& advanced_attr() const;
  void set_advanced_attr(const ::std::string& value);
  #if LANG_CXX11
  void set_advanced_attr(::std::string&& value);
  #endif
  void set_advanced_attr(const char* value);
  void set_advanced_attr(const void* value, size_t size);
  ::std::string* mutable_advanced_attr();
  ::std::string* release_advanced_attr();
  void set_allocated_advanced_attr(::std::string* advanced_attr);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_advanced_attr();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_advanced_attr(
      ::std::string* advanced_attr);

  // required bytes forge_cost = 14;
  bool has_forge_cost() const;
  void clear_forge_cost();
  static const int kForgeCostFieldNumber = 14;
  const ::std::string& forge_cost() const;
  void set_forge_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_forge_cost(::std::string&& value);
  #endif
  void set_forge_cost(const char* value);
  void set_forge_cost(const void* value, size_t size);
  ::std::string* mutable_forge_cost();
  ::std::string* release_forge_cost();
  void set_allocated_forge_cost(::std::string* forge_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_forge_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_forge_cost(
      ::std::string* forge_cost);

  // required bytes base_attribute_add = 16;
  bool has_base_attribute_add() const;
  void clear_base_attribute_add();
  static const int kBaseAttributeAddFieldNumber = 16;
  const ::std::string& base_attribute_add() const;
  void set_base_attribute_add(const ::std::string& value);
  #if LANG_CXX11
  void set_base_attribute_add(::std::string&& value);
  #endif
  void set_base_attribute_add(const char* value);
  void set_base_attribute_add(const void* value, size_t size);
  ::std::string* mutable_base_attribute_add();
  ::std::string* release_base_attribute_add();
  void set_allocated_base_attribute_add(::std::string* base_attribute_add);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_base_attribute_add();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_base_attribute_add(
      ::std::string* base_attribute_add);

  // required bytes skill = 18;
  bool has_skill() const;
  void clear_skill();
  static const int kSkillFieldNumber = 18;
  const ::std::string& skill() const;
  void set_skill(const ::std::string& value);
  #if LANG_CXX11
  void set_skill(::std::string&& value);
  #endif
  void set_skill(const char* value);
  void set_skill(const void* value, size_t size);
  ::std::string* mutable_skill();
  ::std::string* release_skill();
  void set_allocated_skill(::std::string* skill);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_skill();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill(
      ::std::string* skill);

  // required bytes quality_up_cost = 19;
  bool has_quality_up_cost() const;
  void clear_quality_up_cost();
  static const int kQualityUpCostFieldNumber = 19;
  const ::std::string& quality_up_cost() const;
  void set_quality_up_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_quality_up_cost(::std::string&& value);
  #endif
  void set_quality_up_cost(const char* value);
  void set_quality_up_cost(const void* value, size_t size);
  ::std::string* mutable_quality_up_cost();
  ::std::string* release_quality_up_cost();
  void set_allocated_quality_up_cost(::std::string* quality_up_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_quality_up_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_quality_up_cost(
      ::std::string* quality_up_cost);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 star = 3;
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 3;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // required int32 quality = 4;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 4;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // required int32 part = 5;
  bool has_part() const;
  void clear_part();
  static const int kPartFieldNumber = 5;
  ::google::protobuf::int32 part() const;
  void set_part(::google::protobuf::int32 value);

  // required int32 need_level = 6;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 6;
  ::google::protobuf::int32 need_level() const;
  void set_need_level(::google::protobuf::int32 value);

  // required int32 occupation = 7;
  bool has_occupation() const;
  void clear_occupation();
  static const int kOccupationFieldNumber = 7;
  ::google::protobuf::int32 occupation() const;
  void set_occupation(::google::protobuf::int32 value);

  // required int32 farm_skill = 8;
  bool has_farm_skill() const;
  void clear_farm_skill();
  static const int kFarmSkillFieldNumber = 8;
  ::google::protobuf::int32 farm_skill() const;
  void set_farm_skill(::google::protobuf::int32 value);

  // required int32 type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 initial_slot = 10;
  bool has_initial_slot() const;
  void clear_initial_slot();
  static const int kInitialSlotFieldNumber = 10;
  ::google::protobuf::int32 initial_slot() const;
  void set_initial_slot(::google::protobuf::int32 value);

  // required int32 price = 15;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 15;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // required int32 quality_refine_times = 17;
  bool has_quality_refine_times() const;
  void clear_quality_refine_times();
  static const int kQualityRefineTimesFieldNumber = 17;
  ::google::protobuf::int32 quality_refine_times() const;
  void set_quality_refine_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigCardEquip)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_star();
  void clear_has_star();
  void set_has_quality();
  void clear_has_quality();
  void set_has_part();
  void clear_has_part();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_occupation();
  void clear_has_occupation();
  void set_has_farm_skill();
  void clear_has_farm_skill();
  void set_has_type();
  void clear_has_type();
  void set_has_initial_slot();
  void clear_has_initial_slot();
  void set_has_attribute();
  void clear_has_attribute();
  void set_has_special_attr();
  void clear_has_special_attr();
  void set_has_advanced_attr();
  void clear_has_advanced_attr();
  void set_has_forge_cost();
  void clear_has_forge_cost();
  void set_has_price();
  void clear_has_price();
  void set_has_base_attribute_add();
  void clear_has_base_attribute_add();
  void set_has_quality_refine_times();
  void clear_has_quality_refine_times();
  void set_has_skill();
  void clear_has_skill();
  void set_has_quality_up_cost();
  void clear_has_quality_up_cost();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr attribute_;
  ::google::protobuf::internal::ArenaStringPtr special_attr_;
  ::google::protobuf::internal::ArenaStringPtr advanced_attr_;
  ::google::protobuf::internal::ArenaStringPtr forge_cost_;
  ::google::protobuf::internal::ArenaStringPtr base_attribute_add_;
  ::google::protobuf::internal::ArenaStringPtr skill_;
  ::google::protobuf::internal::ArenaStringPtr quality_up_cost_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 part_;
  ::google::protobuf::int32 need_level_;
  ::google::protobuf::int32 occupation_;
  ::google::protobuf::int32 farm_skill_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 initial_slot_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 quality_refine_times_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCardEquipStrengthen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigCardEquipStrengthen) */ {
 public:
  ConfigCardEquipStrengthen();
  virtual ~ConfigCardEquipStrengthen();

  ConfigCardEquipStrengthen(const ConfigCardEquipStrengthen& from);

  inline ConfigCardEquipStrengthen& operator=(const ConfigCardEquipStrengthen& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCardEquipStrengthen(ConfigCardEquipStrengthen&& from) noexcept
    : ConfigCardEquipStrengthen() {
    *this = ::std::move(from);
  }

  inline ConfigCardEquipStrengthen& operator=(ConfigCardEquipStrengthen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCardEquipStrengthen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCardEquipStrengthen* internal_default_instance() {
    return reinterpret_cast<const ConfigCardEquipStrengthen*>(
               &_ConfigCardEquipStrengthen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(ConfigCardEquipStrengthen* other);
  void Swap(ConfigCardEquipStrengthen* other);
  friend void swap(ConfigCardEquipStrengthen& a, ConfigCardEquipStrengthen& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCardEquipStrengthen* New() const final {
    return CreateMaybeMessage<ConfigCardEquipStrengthen>(NULL);
  }

  ConfigCardEquipStrengthen* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCardEquipStrengthen>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCardEquipStrengthen& from);
  void MergeFrom(const ConfigCardEquipStrengthen& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCardEquipStrengthen* other);
  protected:
  explicit ConfigCardEquipStrengthen(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 6;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 6;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required bytes gold = 7;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 7;
  const ::std::string& gold() const;
  void set_gold(const ::std::string& value);
  #if LANG_CXX11
  void set_gold(::std::string&& value);
  #endif
  void set_gold(const char* value);
  void set_gold(const void* value, size_t size);
  ::std::string* mutable_gold();
  ::std::string* release_gold();
  void set_allocated_gold(::std::string* gold);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_gold();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gold(
      ::std::string* gold);

  // required bytes attribute_add = 8;
  bool has_attribute_add() const;
  void clear_attribute_add();
  static const int kAttributeAddFieldNumber = 8;
  const ::std::string& attribute_add() const;
  void set_attribute_add(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute_add(::std::string&& value);
  #endif
  void set_attribute_add(const char* value);
  void set_attribute_add(const void* value, size_t size);
  ::std::string* mutable_attribute_add();
  ::std::string* release_attribute_add();
  void set_allocated_attribute_add(::std::string* attribute_add);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attribute_add();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attribute_add(
      ::std::string* attribute_add);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 quality = 3;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 3;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // required int32 part = 4;
  bool has_part() const;
  void clear_part();
  static const int kPartFieldNumber = 4;
  ::google::protobuf::int32 part() const;
  void set_part(::google::protobuf::int32 value);

  // required int32 strengthen_level_max = 5;
  bool has_strengthen_level_max() const;
  void clear_strengthen_level_max();
  static const int kStrengthenLevelMaxFieldNumber = 5;
  ::google::protobuf::int32 strengthen_level_max() const;
  void set_strengthen_level_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigCardEquipStrengthen)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_level();
  void clear_has_level();
  void set_has_quality();
  void clear_has_quality();
  void set_has_part();
  void clear_has_part();
  void set_has_strengthen_level_max();
  void clear_has_strengthen_level_max();
  void set_has_cost();
  void clear_has_cost();
  void set_has_gold();
  void clear_has_gold();
  void set_has_attribute_add();
  void clear_has_attribute_add();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::internal::ArenaStringPtr gold_;
  ::google::protobuf::internal::ArenaStringPtr attribute_add_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 part_;
  ::google::protobuf::int32 strengthen_level_max_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCardLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigCardLevel) */ {
 public:
  ConfigCardLevel();
  virtual ~ConfigCardLevel();

  ConfigCardLevel(const ConfigCardLevel& from);

  inline ConfigCardLevel& operator=(const ConfigCardLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCardLevel(ConfigCardLevel&& from) noexcept
    : ConfigCardLevel() {
    *this = ::std::move(from);
  }

  inline ConfigCardLevel& operator=(ConfigCardLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCardLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCardLevel* internal_default_instance() {
    return reinterpret_cast<const ConfigCardLevel*>(
               &_ConfigCardLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(ConfigCardLevel* other);
  void Swap(ConfigCardLevel* other);
  friend void swap(ConfigCardLevel& a, ConfigCardLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCardLevel* New() const final {
    return CreateMaybeMessage<ConfigCardLevel>(NULL);
  }

  ConfigCardLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCardLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCardLevel& from);
  void MergeFrom(const ConfigCardLevel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCardLevel* other);
  protected:
  explicit ConfigCardLevel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 exp_max = 2;
  bool has_exp_max() const;
  void clear_exp_max();
  static const int kExpMaxFieldNumber = 2;
  ::google::protobuf::int32 exp_max() const;
  void set_exp_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigCardLevel)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_exp_max();
  void clear_has_exp_max();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_max_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigWanted : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigWanted) */ {
 public:
  ConfigWanted();
  virtual ~ConfigWanted();

  ConfigWanted(const ConfigWanted& from);

  inline ConfigWanted& operator=(const ConfigWanted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigWanted(ConfigWanted&& from) noexcept
    : ConfigWanted() {
    *this = ::std::move(from);
  }

  inline ConfigWanted& operator=(ConfigWanted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigWanted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigWanted* internal_default_instance() {
    return reinterpret_cast<const ConfigWanted*>(
               &_ConfigWanted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(ConfigWanted* other);
  void Swap(ConfigWanted* other);
  friend void swap(ConfigWanted& a, ConfigWanted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigWanted* New() const final {
    return CreateMaybeMessage<ConfigWanted>(NULL);
  }

  ConfigWanted* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigWanted>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigWanted& from);
  void MergeFrom(const ConfigWanted& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigWanted* other);
  protected:
  explicit ConfigWanted(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // required bytes place = 4;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 4;
  const ::std::string& place() const;
  void set_place(const ::std::string& value);
  #if LANG_CXX11
  void set_place(::std::string&& value);
  #endif
  void set_place(const char* value);
  void set_place(const void* value, size_t size);
  ::std::string* mutable_place();
  ::std::string* release_place();
  void set_allocated_place(::std::string* place);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_place();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_place(
      ::std::string* place);

  // required bytes event = 5;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 5;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const void* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_event();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event(
      ::std::string* event);

  // required bytes reward = 6;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 6;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigWanted)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_content();
  void clear_has_content();
  void set_has_place();
  void clear_has_place();
  void set_has_event();
  void clear_has_event();
  void set_has_reward();
  void clear_has_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr place_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigTask) */ {
 public:
  ConfigTask();
  virtual ~ConfigTask();

  ConfigTask(const ConfigTask& from);

  inline ConfigTask& operator=(const ConfigTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigTask(ConfigTask&& from) noexcept
    : ConfigTask() {
    *this = ::std::move(from);
  }

  inline ConfigTask& operator=(ConfigTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigTask* internal_default_instance() {
    return reinterpret_cast<const ConfigTask*>(
               &_ConfigTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(ConfigTask* other);
  void Swap(ConfigTask* other);
  friend void swap(ConfigTask& a, ConfigTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigTask* New() const final {
    return CreateMaybeMessage<ConfigTask>(NULL);
  }

  ConfigTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigTask& from);
  void MergeFrom(const ConfigTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigTask* other);
  protected:
  explicit ConfigTask(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes npc_state = 8;
  bool has_npc_state() const;
  void clear_npc_state();
  static const int kNpcStateFieldNumber = 8;
  const ::std::string& npc_state() const;
  void set_npc_state(const ::std::string& value);
  #if LANG_CXX11
  void set_npc_state(::std::string&& value);
  #endif
  void set_npc_state(const char* value);
  void set_npc_state(const void* value, size_t size);
  ::std::string* mutable_npc_state();
  ::std::string* release_npc_state();
  void set_allocated_npc_state(::std::string* npc_state);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_npc_state();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_npc_state(
      ::std::string* npc_state);

  // required bytes reward = 9;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 9;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required bytes harbor_flush = 11;
  bool has_harbor_flush() const;
  void clear_harbor_flush();
  static const int kHarborFlushFieldNumber = 11;
  const ::std::string& harbor_flush() const;
  void set_harbor_flush(const ::std::string& value);
  #if LANG_CXX11
  void set_harbor_flush(::std::string&& value);
  #endif
  void set_harbor_flush(const char* value);
  void set_harbor_flush(const void* value, size_t size);
  ::std::string* mutable_harbor_flush();
  ::std::string* release_harbor_flush();
  void set_allocated_harbor_flush(::std::string* harbor_flush);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_harbor_flush();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_harbor_flush(
      ::std::string* harbor_flush);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 need_level = 4;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 4;
  ::google::protobuf::int32 need_level() const;
  void set_need_level(::google::protobuf::int32 value);

  // required int32 pre_task = 5;
  bool has_pre_task() const;
  void clear_pre_task();
  static const int kPreTaskFieldNumber = 5;
  ::google::protobuf::int32 pre_task() const;
  void set_pre_task(::google::protobuf::int32 value);

  // required int32 add_exp = 10;
  bool has_add_exp() const;
  void clear_add_exp();
  static const int kAddExpFieldNumber = 10;
  ::google::protobuf::int32 add_exp() const;
  void set_add_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigTask)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_pre_task();
  void clear_has_pre_task();
  void set_has_npc_state();
  void clear_has_npc_state();
  void set_has_reward();
  void clear_has_reward();
  void set_has_add_exp();
  void clear_has_add_exp();
  void set_has_harbor_flush();
  void clear_has_harbor_flush();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr npc_state_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::internal::ArenaStringPtr harbor_flush_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 need_level_;
  ::google::protobuf::int32 pre_task_;
  ::google::protobuf::int32 add_exp_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigTaskStep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigTaskStep) */ {
 public:
  ConfigTaskStep();
  virtual ~ConfigTaskStep();

  ConfigTaskStep(const ConfigTaskStep& from);

  inline ConfigTaskStep& operator=(const ConfigTaskStep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigTaskStep(ConfigTaskStep&& from) noexcept
    : ConfigTaskStep() {
    *this = ::std::move(from);
  }

  inline ConfigTaskStep& operator=(ConfigTaskStep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigTaskStep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigTaskStep* internal_default_instance() {
    return reinterpret_cast<const ConfigTaskStep*>(
               &_ConfigTaskStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(ConfigTaskStep* other);
  void Swap(ConfigTaskStep* other);
  friend void swap(ConfigTaskStep& a, ConfigTaskStep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigTaskStep* New() const final {
    return CreateMaybeMessage<ConfigTaskStep>(NULL);
  }

  ConfigTaskStep* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigTaskStep>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigTaskStep& from);
  void MergeFrom(const ConfigTaskStep& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigTaskStep* other);
  protected:
  explicit ConfigTaskStep(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes npc_state = 3;
  bool has_npc_state() const;
  void clear_npc_state();
  static const int kNpcStateFieldNumber = 3;
  const ::std::string& npc_state() const;
  void set_npc_state(const ::std::string& value);
  #if LANG_CXX11
  void set_npc_state(::std::string&& value);
  #endif
  void set_npc_state(const char* value);
  void set_npc_state(const void* value, size_t size);
  ::std::string* mutable_npc_state();
  ::std::string* release_npc_state();
  void set_allocated_npc_state(::std::string* npc_state);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_npc_state();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_npc_state(
      ::std::string* npc_state);

  // required bytes content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // required bytes harbor_flush = 5;
  bool has_harbor_flush() const;
  void clear_harbor_flush();
  static const int kHarborFlushFieldNumber = 5;
  const ::std::string& harbor_flush() const;
  void set_harbor_flush(const ::std::string& value);
  #if LANG_CXX11
  void set_harbor_flush(::std::string&& value);
  #endif
  void set_harbor_flush(const char* value);
  void set_harbor_flush(const void* value, size_t size);
  ::std::string* mutable_harbor_flush();
  ::std::string* release_harbor_flush();
  void set_allocated_harbor_flush(::std::string* harbor_flush);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_harbor_flush();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_harbor_flush(
      ::std::string* harbor_flush);

  // required bytes ship_event = 6;
  bool has_ship_event() const;
  void clear_ship_event();
  static const int kShipEventFieldNumber = 6;
  const ::std::string& ship_event() const;
  void set_ship_event(const ::std::string& value);
  #if LANG_CXX11
  void set_ship_event(::std::string&& value);
  #endif
  void set_ship_event(const char* value);
  void set_ship_event(const void* value, size_t size);
  ::std::string* mutable_ship_event();
  ::std::string* release_ship_event();
  void set_allocated_ship_event(::std::string* ship_event);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ship_event();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ship_event(
      ::std::string* ship_event);

  // required int32 taskid = 1;
  bool has_taskid() const;
  void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  ::google::protobuf::int32 taskid() const;
  void set_taskid(::google::protobuf::int32 value);

  // required int32 step = 2;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 2;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigTaskStep)
 private:
  void set_has_taskid();
  void clear_has_taskid();
  void set_has_step();
  void clear_has_step();
  void set_has_npc_state();
  void clear_has_npc_state();
  void set_has_content();
  void clear_has_content();
  void set_has_harbor_flush();
  void clear_has_harbor_flush();
  void set_has_ship_event();
  void clear_has_ship_event();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr npc_state_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr harbor_flush_;
  ::google::protobuf::internal::ArenaStringPtr ship_event_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 step_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigNpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigNpc) */ {
 public:
  ConfigNpc();
  virtual ~ConfigNpc();

  ConfigNpc(const ConfigNpc& from);

  inline ConfigNpc& operator=(const ConfigNpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigNpc(ConfigNpc&& from) noexcept
    : ConfigNpc() {
    *this = ::std::move(from);
  }

  inline ConfigNpc& operator=(ConfigNpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigNpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigNpc* internal_default_instance() {
    return reinterpret_cast<const ConfigNpc*>(
               &_ConfigNpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(ConfigNpc* other);
  void Swap(ConfigNpc* other);
  friend void swap(ConfigNpc& a, ConfigNpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigNpc* New() const final {
    return CreateMaybeMessage<ConfigNpc>(NULL);
  }

  ConfigNpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigNpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigNpc& from);
  void MergeFrom(const ConfigNpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigNpc* other);
  protected:
  explicit ConfigNpc(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes pos = 6;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  const ::std::string& pos() const;
  void set_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_pos(::std::string&& value);
  #endif
  void set_pos(const char* value);
  void set_pos(const void* value, size_t size);
  ::std::string* mutable_pos();
  ::std::string* release_pos();
  void set_allocated_pos(::std::string* pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pos(
      ::std::string* pos);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 place = 4;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 4;
  ::google::protobuf::int32 place() const;
  void set_place(::google::protobuf::int32 value);

  // required int32 pos_type = 5;
  bool has_pos_type() const;
  void clear_pos_type();
  static const int kPosTypeFieldNumber = 5;
  ::google::protobuf::int32 pos_type() const;
  void set_pos_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigNpc)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_state();
  void clear_has_state();
  void set_has_place();
  void clear_has_place();
  void set_has_pos_type();
  void clear_has_pos_type();
  void set_has_pos();
  void clear_has_pos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pos_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 place_;
  ::google::protobuf::int32 pos_type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigAchievement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigAchievement) */ {
 public:
  ConfigAchievement();
  virtual ~ConfigAchievement();

  ConfigAchievement(const ConfigAchievement& from);

  inline ConfigAchievement& operator=(const ConfigAchievement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigAchievement(ConfigAchievement&& from) noexcept
    : ConfigAchievement() {
    *this = ::std::move(from);
  }

  inline ConfigAchievement& operator=(ConfigAchievement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigAchievement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigAchievement* internal_default_instance() {
    return reinterpret_cast<const ConfigAchievement*>(
               &_ConfigAchievement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(ConfigAchievement* other);
  void Swap(ConfigAchievement* other);
  friend void swap(ConfigAchievement& a, ConfigAchievement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigAchievement* New() const final {
    return CreateMaybeMessage<ConfigAchievement>(NULL);
  }

  ConfigAchievement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigAchievement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigAchievement& from);
  void MergeFrom(const ConfigAchievement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigAchievement* other);
  protected:
  explicit ConfigAchievement(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes reward = 9;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 9;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 phase = 2;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 2;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 action = 4;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // required int32 target = 5;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 5;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // required int32 param = 6;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 6;
  ::google::protobuf::int32 param() const;
  void set_param(::google::protobuf::int32 value);

  // required int32 require = 7;
  bool has_require() const;
  void clear_require();
  static const int kRequireFieldNumber = 7;
  ::google::protobuf::int32 require() const;
  void set_require(::google::protobuf::int32 value);

  // required int32 get_point = 8;
  bool has_get_point() const;
  void clear_get_point();
  static const int kGetPointFieldNumber = 8;
  ::google::protobuf::int32 get_point() const;
  void set_get_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigAchievement)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_phase();
  void clear_has_phase();
  void set_has_type();
  void clear_has_type();
  void set_has_action();
  void clear_has_action();
  void set_has_target();
  void clear_has_target();
  void set_has_param();
  void clear_has_param();
  void set_has_require();
  void clear_has_require();
  void set_has_get_point();
  void clear_has_get_point();
  void set_has_reward();
  void clear_has_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 phase_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 param_;
  ::google::protobuf::int32 require_;
  ::google::protobuf::int32 get_point_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigAchievementTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigAchievementTask) */ {
 public:
  ConfigAchievementTask();
  virtual ~ConfigAchievementTask();

  ConfigAchievementTask(const ConfigAchievementTask& from);

  inline ConfigAchievementTask& operator=(const ConfigAchievementTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigAchievementTask(ConfigAchievementTask&& from) noexcept
    : ConfigAchievementTask() {
    *this = ::std::move(from);
  }

  inline ConfigAchievementTask& operator=(ConfigAchievementTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigAchievementTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigAchievementTask* internal_default_instance() {
    return reinterpret_cast<const ConfigAchievementTask*>(
               &_ConfigAchievementTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(ConfigAchievementTask* other);
  void Swap(ConfigAchievementTask* other);
  friend void swap(ConfigAchievementTask& a, ConfigAchievementTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigAchievementTask* New() const final {
    return CreateMaybeMessage<ConfigAchievementTask>(NULL);
  }

  ConfigAchievementTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigAchievementTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigAchievementTask& from);
  void MergeFrom(const ConfigAchievementTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigAchievementTask* other);
  protected:
  explicit ConfigAchievementTask(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes reward = 4;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 4;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 dungeon_id = 2;
  bool has_dungeon_id() const;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 2;
  ::google::protobuf::int32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::int32 value);

  // required int32 require = 3;
  bool has_require() const;
  void clear_require();
  static const int kRequireFieldNumber = 3;
  ::google::protobuf::int32 require() const;
  void set_require(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigAchievementTask)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_dungeon_id();
  void clear_has_dungeon_id();
  void set_has_require();
  void clear_has_require();
  void set_has_reward();
  void clear_has_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 dungeon_id_;
  ::google::protobuf::int32 require_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigSystemTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigSystemTask) */ {
 public:
  ConfigSystemTask();
  virtual ~ConfigSystemTask();

  ConfigSystemTask(const ConfigSystemTask& from);

  inline ConfigSystemTask& operator=(const ConfigSystemTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigSystemTask(ConfigSystemTask&& from) noexcept
    : ConfigSystemTask() {
    *this = ::std::move(from);
  }

  inline ConfigSystemTask& operator=(ConfigSystemTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigSystemTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigSystemTask* internal_default_instance() {
    return reinterpret_cast<const ConfigSystemTask*>(
               &_ConfigSystemTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(ConfigSystemTask* other);
  void Swap(ConfigSystemTask* other);
  friend void swap(ConfigSystemTask& a, ConfigSystemTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigSystemTask* New() const final {
    return CreateMaybeMessage<ConfigSystemTask>(NULL);
  }

  ConfigSystemTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigSystemTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigSystemTask& from);
  void MergeFrom(const ConfigSystemTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSystemTask* other);
  protected:
  explicit ConfigSystemTask(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes condition = 4;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 4;
  const ::std::string& condition() const;
  void set_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_condition(::std::string&& value);
  #endif
  void set_condition(const char* value);
  void set_condition(const void* value, size_t size);
  ::std::string* mutable_condition();
  ::std::string* release_condition();
  void set_allocated_condition(::std::string* condition);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_condition();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_condition(
      ::std::string* condition);

  // required bytes reward = 6;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 6;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required bytes refresh_date_weekly = 8;
  bool has_refresh_date_weekly() const;
  void clear_refresh_date_weekly();
  static const int kRefreshDateWeeklyFieldNumber = 8;
  const ::std::string& refresh_date_weekly() const;
  void set_refresh_date_weekly(const ::std::string& value);
  #if LANG_CXX11
  void set_refresh_date_weekly(::std::string&& value);
  #endif
  void set_refresh_date_weekly(const char* value);
  void set_refresh_date_weekly(const void* value, size_t size);
  ::std::string* mutable_refresh_date_weekly();
  ::std::string* release_refresh_date_weekly();
  void set_allocated_refresh_date_weekly(::std::string* refresh_date_weekly);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_refresh_date_weekly();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_refresh_date_weekly(
      ::std::string* refresh_date_weekly);

  // required bytes need_level = 9;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 9;
  const ::std::string& need_level() const;
  void set_need_level(const ::std::string& value);
  #if LANG_CXX11
  void set_need_level(::std::string&& value);
  #endif
  void set_need_level(const char* value);
  void set_need_level(const void* value, size_t size);
  ::std::string* mutable_need_level();
  ::std::string* release_need_level();
  void set_allocated_need_level(::std::string* need_level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_need_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_need_level(
      ::std::string* need_level);

  // required bytes pre_task = 10;
  bool has_pre_task() const;
  void clear_pre_task();
  static const int kPreTaskFieldNumber = 10;
  const ::std::string& pre_task() const;
  void set_pre_task(const ::std::string& value);
  #if LANG_CXX11
  void set_pre_task(::std::string&& value);
  #endif
  void set_pre_task(const char* value);
  void set_pre_task(const void* value, size_t size);
  ::std::string* mutable_pre_task();
  ::std::string* release_pre_task();
  void set_allocated_pre_task(::std::string* pre_task);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pre_task();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre_task(
      ::std::string* pre_task);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 condition_type = 3;
  bool has_condition_type() const;
  void clear_condition_type();
  static const int kConditionTypeFieldNumber = 3;
  ::google::protobuf::int32 condition_type() const;
  void set_condition_type(::google::protobuf::int32 value);

  // required int32 require = 5;
  bool has_require() const;
  void clear_require();
  static const int kRequireFieldNumber = 5;
  ::google::protobuf::int32 require() const;
  void set_require(::google::protobuf::int32 value);

  // required int32 exp = 7;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 7;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigSystemTask)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_condition_type();
  void clear_has_condition_type();
  void set_has_condition();
  void clear_has_condition();
  void set_has_require();
  void clear_has_require();
  void set_has_reward();
  void clear_has_reward();
  void set_has_exp();
  void clear_has_exp();
  void set_has_refresh_date_weekly();
  void clear_has_refresh_date_weekly();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_pre_task();
  void clear_has_pre_task();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr condition_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::internal::ArenaStringPtr refresh_date_weekly_;
  ::google::protobuf::internal::ArenaStringPtr need_level_;
  ::google::protobuf::internal::ArenaStringPtr pre_task_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 condition_type_;
  ::google::protobuf::int32 require_;
  ::google::protobuf::int32 exp_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigRandomGift : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigRandomGift) */ {
 public:
  ConfigRandomGift();
  virtual ~ConfigRandomGift();

  ConfigRandomGift(const ConfigRandomGift& from);

  inline ConfigRandomGift& operator=(const ConfigRandomGift& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigRandomGift(ConfigRandomGift&& from) noexcept
    : ConfigRandomGift() {
    *this = ::std::move(from);
  }

  inline ConfigRandomGift& operator=(ConfigRandomGift&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRandomGift& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRandomGift* internal_default_instance() {
    return reinterpret_cast<const ConfigRandomGift*>(
               &_ConfigRandomGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(ConfigRandomGift* other);
  void Swap(ConfigRandomGift* other);
  friend void swap(ConfigRandomGift& a, ConfigRandomGift& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigRandomGift* New() const final {
    return CreateMaybeMessage<ConfigRandomGift>(NULL);
  }

  ConfigRandomGift* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRandomGift>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigRandomGift& from);
  void MergeFrom(const ConfigRandomGift& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRandomGift* other);
  protected:
  explicit ConfigRandomGift(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const void* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_price();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_price(
      ::std::string* price);

  // required bytes goods = 5;
  bool has_goods() const;
  void clear_goods();
  static const int kGoodsFieldNumber = 5;
  const ::std::string& goods() const;
  void set_goods(const ::std::string& value);
  #if LANG_CXX11
  void set_goods(::std::string&& value);
  #endif
  void set_goods(const char* value);
  void set_goods(const void* value, size_t size);
  ::std::string* mutable_goods();
  ::std::string* release_goods();
  void set_allocated_goods(::std::string* goods);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_goods();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_goods(
      ::std::string* goods);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 probability = 3;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 3;
  ::google::protobuf::int32 probability() const;
  void set_probability(::google::protobuf::int32 value);

  // required int32 limit_num = 6;
  bool has_limit_num() const;
  void clear_limit_num();
  static const int kLimitNumFieldNumber = 6;
  ::google::protobuf::int32 limit_num() const;
  void set_limit_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigRandomGift)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_probability();
  void clear_has_probability();
  void set_has_price();
  void clear_has_price();
  void set_has_goods();
  void clear_has_goods();
  void set_has_limit_num();
  void clear_has_limit_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr goods_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 probability_;
  ::google::protobuf::int32 limit_num_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDungeonEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDungeonEvent) */ {
 public:
  ConfigDungeonEvent();
  virtual ~ConfigDungeonEvent();

  ConfigDungeonEvent(const ConfigDungeonEvent& from);

  inline ConfigDungeonEvent& operator=(const ConfigDungeonEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDungeonEvent(ConfigDungeonEvent&& from) noexcept
    : ConfigDungeonEvent() {
    *this = ::std::move(from);
  }

  inline ConfigDungeonEvent& operator=(ConfigDungeonEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDungeonEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDungeonEvent* internal_default_instance() {
    return reinterpret_cast<const ConfigDungeonEvent*>(
               &_ConfigDungeonEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(ConfigDungeonEvent* other);
  void Swap(ConfigDungeonEvent* other);
  friend void swap(ConfigDungeonEvent& a, ConfigDungeonEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDungeonEvent* New() const final {
    return CreateMaybeMessage<ConfigDungeonEvent>(NULL);
  }

  ConfigDungeonEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDungeonEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDungeonEvent& from);
  void MergeFrom(const ConfigDungeonEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDungeonEvent* other);
  protected:
  explicit ConfigDungeonEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes condition = 3;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 3;
  const ::std::string& condition() const;
  void set_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_condition(::std::string&& value);
  #endif
  void set_condition(const char* value);
  void set_condition(const void* value, size_t size);
  ::std::string* mutable_condition();
  ::std::string* release_condition();
  void set_allocated_condition(::std::string* condition);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_condition();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_condition(
      ::std::string* condition);

  // required bytes reward = 7;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 7;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 action = 2;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // required int32 require = 4;
  bool has_require() const;
  void clear_require();
  static const int kRequireFieldNumber = 4;
  ::google::protobuf::int32 require() const;
  void set_require(::google::protobuf::int32 value);

  // required int32 get_point = 5;
  bool has_get_point() const;
  void clear_get_point();
  static const int kGetPointFieldNumber = 5;
  ::google::protobuf::int32 get_point() const;
  void set_get_point(::google::protobuf::int32 value);

  // required int32 dungeon_id = 6;
  bool has_dungeon_id() const;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 6;
  ::google::protobuf::int32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigDungeonEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_action();
  void clear_has_action();
  void set_has_condition();
  void clear_has_condition();
  void set_has_require();
  void clear_has_require();
  void set_has_get_point();
  void clear_has_get_point();
  void set_has_dungeon_id();
  void clear_has_dungeon_id();
  void set_has_reward();
  void clear_has_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr condition_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 require_;
  ::google::protobuf::int32 get_point_;
  ::google::protobuf::int32 dungeon_id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDungeonContentGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDungeonContentGroup) */ {
 public:
  ConfigDungeonContentGroup();
  virtual ~ConfigDungeonContentGroup();

  ConfigDungeonContentGroup(const ConfigDungeonContentGroup& from);

  inline ConfigDungeonContentGroup& operator=(const ConfigDungeonContentGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDungeonContentGroup(ConfigDungeonContentGroup&& from) noexcept
    : ConfigDungeonContentGroup() {
    *this = ::std::move(from);
  }

  inline ConfigDungeonContentGroup& operator=(ConfigDungeonContentGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDungeonContentGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDungeonContentGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigDungeonContentGroup*>(
               &_ConfigDungeonContentGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void UnsafeArenaSwap(ConfigDungeonContentGroup* other);
  void Swap(ConfigDungeonContentGroup* other);
  friend void swap(ConfigDungeonContentGroup& a, ConfigDungeonContentGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDungeonContentGroup* New() const final {
    return CreateMaybeMessage<ConfigDungeonContentGroup>(NULL);
  }

  ConfigDungeonContentGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDungeonContentGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDungeonContentGroup& from);
  void MergeFrom(const ConfigDungeonContentGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDungeonContentGroup* other);
  protected:
  explicit ConfigDungeonContentGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes base_element = 2;
  bool has_base_element() const;
  void clear_base_element();
  static const int kBaseElementFieldNumber = 2;
  const ::std::string& base_element() const;
  void set_base_element(const ::std::string& value);
  #if LANG_CXX11
  void set_base_element(::std::string&& value);
  #endif
  void set_base_element(const char* value);
  void set_base_element(const void* value, size_t size);
  ::std::string* mutable_base_element();
  ::std::string* release_base_element();
  void set_allocated_base_element(::std::string* base_element);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_base_element();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_base_element(
      ::std::string* base_element);

  // required bytes random_element = 3;
  bool has_random_element() const;
  void clear_random_element();
  static const int kRandomElementFieldNumber = 3;
  const ::std::string& random_element() const;
  void set_random_element(const ::std::string& value);
  #if LANG_CXX11
  void set_random_element(::std::string&& value);
  #endif
  void set_random_element(const char* value);
  void set_random_element(const void* value, size_t size);
  ::std::string* mutable_random_element();
  ::std::string* release_random_element();
  void set_allocated_random_element(::std::string* random_element);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_element();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_element(
      ::std::string* random_element);

  // required bytes spider_info = 4;
  bool has_spider_info() const;
  void clear_spider_info();
  static const int kSpiderInfoFieldNumber = 4;
  const ::std::string& spider_info() const;
  void set_spider_info(const ::std::string& value);
  #if LANG_CXX11
  void set_spider_info(::std::string&& value);
  #endif
  void set_spider_info(const char* value);
  void set_spider_info(const void* value, size_t size);
  ::std::string* mutable_spider_info();
  ::std::string* release_spider_info();
  void set_allocated_spider_info(::std::string* spider_info);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_spider_info();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_spider_info(
      ::std::string* spider_info);

  // required bytes stairs_enemy = 5;
  bool has_stairs_enemy() const;
  void clear_stairs_enemy();
  static const int kStairsEnemyFieldNumber = 5;
  const ::std::string& stairs_enemy() const;
  void set_stairs_enemy(const ::std::string& value);
  #if LANG_CXX11
  void set_stairs_enemy(::std::string&& value);
  #endif
  void set_stairs_enemy(const char* value);
  void set_stairs_enemy(const void* value, size_t size);
  ::std::string* mutable_stairs_enemy();
  ::std::string* release_stairs_enemy();
  void set_allocated_stairs_enemy(::std::string* stairs_enemy);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_stairs_enemy();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stairs_enemy(
      ::std::string* stairs_enemy);

  // required bytes npc = 6;
  bool has_npc() const;
  void clear_npc();
  static const int kNpcFieldNumber = 6;
  const ::std::string& npc() const;
  void set_npc(const ::std::string& value);
  #if LANG_CXX11
  void set_npc(::std::string&& value);
  #endif
  void set_npc(const char* value);
  void set_npc(const void* value, size_t size);
  ::std::string* mutable_npc();
  ::std::string* release_npc();
  void set_allocated_npc(::std::string* npc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_npc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_npc(
      ::std::string* npc);

  // required bytes path_choice = 7;
  bool has_path_choice() const;
  void clear_path_choice();
  static const int kPathChoiceFieldNumber = 7;
  const ::std::string& path_choice() const;
  void set_path_choice(const ::std::string& value);
  #if LANG_CXX11
  void set_path_choice(::std::string&& value);
  #endif
  void set_path_choice(const char* value);
  void set_path_choice(const void* value, size_t size);
  ::std::string* mutable_path_choice();
  ::std::string* release_path_choice();
  void set_allocated_path_choice(::std::string* path_choice);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_path_choice();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path_choice(
      ::std::string* path_choice);

  // required bytes altar = 8;
  bool has_altar() const;
  void clear_altar();
  static const int kAltarFieldNumber = 8;
  const ::std::string& altar() const;
  void set_altar(const ::std::string& value);
  #if LANG_CXX11
  void set_altar(::std::string&& value);
  #endif
  void set_altar(const char* value);
  void set_altar(const void* value, size_t size);
  ::std::string* mutable_altar();
  ::std::string* release_altar();
  void set_allocated_altar(::std::string* altar);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_altar();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_altar(
      ::std::string* altar);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigDungeonContentGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_base_element();
  void clear_has_base_element();
  void set_has_random_element();
  void clear_has_random_element();
  void set_has_spider_info();
  void clear_has_spider_info();
  void set_has_stairs_enemy();
  void clear_has_stairs_enemy();
  void set_has_npc();
  void clear_has_npc();
  void set_has_path_choice();
  void clear_has_path_choice();
  void set_has_altar();
  void clear_has_altar();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr base_element_;
  ::google::protobuf::internal::ArenaStringPtr random_element_;
  ::google::protobuf::internal::ArenaStringPtr spider_info_;
  ::google::protobuf::internal::ArenaStringPtr stairs_enemy_;
  ::google::protobuf::internal::ArenaStringPtr npc_;
  ::google::protobuf::internal::ArenaStringPtr path_choice_;
  ::google::protobuf::internal::ArenaStringPtr altar_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEnemy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigEnemy) */ {
 public:
  ConfigEnemy();
  virtual ~ConfigEnemy();

  ConfigEnemy(const ConfigEnemy& from);

  inline ConfigEnemy& operator=(const ConfigEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEnemy(ConfigEnemy&& from) noexcept
    : ConfigEnemy() {
    *this = ::std::move(from);
  }

  inline ConfigEnemy& operator=(ConfigEnemy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEnemy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEnemy* internal_default_instance() {
    return reinterpret_cast<const ConfigEnemy*>(
               &_ConfigEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(ConfigEnemy* other);
  void Swap(ConfigEnemy* other);
  friend void swap(ConfigEnemy& a, ConfigEnemy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEnemy* New() const final {
    return CreateMaybeMessage<ConfigEnemy>(NULL);
  }

  ConfigEnemy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEnemy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEnemy& from);
  void MergeFrom(const ConfigEnemy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEnemy* other);
  protected:
  explicit ConfigEnemy(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes skill = 21;
  bool has_skill() const;
  void clear_skill();
  static const int kSkillFieldNumber = 21;
  const ::std::string& skill() const;
  void set_skill(const ::std::string& value);
  #if LANG_CXX11
  void set_skill(::std::string&& value);
  #endif
  void set_skill(const char* value);
  void set_skill(const void* value, size_t size);
  ::std::string* mutable_skill();
  ::std::string* release_skill();
  void set_allocated_skill(::std::string* skill);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_skill();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill(
      ::std::string* skill);

  // required bytes drop_item = 22;
  bool has_drop_item() const;
  void clear_drop_item();
  static const int kDropItemFieldNumber = 22;
  const ::std::string& drop_item() const;
  void set_drop_item(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_item(::std::string&& value);
  #endif
  void set_drop_item(const char* value);
  void set_drop_item(const void* value, size_t size);
  ::std::string* mutable_drop_item();
  ::std::string* release_drop_item();
  void set_allocated_drop_item(::std::string* drop_item);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop_item();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop_item(
      ::std::string* drop_item);

  // required bytes drop_element = 23;
  bool has_drop_element() const;
  void clear_drop_element();
  static const int kDropElementFieldNumber = 23;
  const ::std::string& drop_element() const;
  void set_drop_element(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_element(::std::string&& value);
  #endif
  void set_drop_element(const char* value);
  void set_drop_element(const void* value, size_t size);
  ::std::string* mutable_drop_element();
  ::std::string* release_drop_element();
  void set_allocated_drop_element(::std::string* drop_element);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop_element();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop_element(
      ::std::string* drop_element);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 profession = 3;
  bool has_profession() const;
  void clear_profession();
  static const int kProfessionFieldNumber = 3;
  ::google::protobuf::int32 profession() const;
  void set_profession(::google::protobuf::int32 value);

  // required int32 enemy_model = 4;
  bool has_enemy_model() const;
  void clear_enemy_model();
  static const int kEnemyModelFieldNumber = 4;
  ::google::protobuf::int32 enemy_model() const;
  void set_enemy_model(::google::protobuf::int32 value);

  // required int32 camp = 5;
  bool has_camp() const;
  void clear_camp();
  static const int kCampFieldNumber = 5;
  ::google::protobuf::int32 camp() const;
  void set_camp(::google::protobuf::int32 value);

  // required int32 hp = 6;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 6;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // required float physical_attack = 7;
  bool has_physical_attack() const;
  void clear_physical_attack();
  static const int kPhysicalAttackFieldNumber = 7;
  float physical_attack() const;
  void set_physical_attack(float value);

  // required float magic_attack = 8;
  bool has_magic_attack() const;
  void clear_magic_attack();
  static const int kMagicAttackFieldNumber = 8;
  float magic_attack() const;
  void set_magic_attack(float value);

  // required float physical_defense = 9;
  bool has_physical_defense() const;
  void clear_physical_defense();
  static const int kPhysicalDefenseFieldNumber = 9;
  float physical_defense() const;
  void set_physical_defense(float value);

  // required float magic_defense = 10;
  bool has_magic_defense() const;
  void clear_magic_defense();
  static const int kMagicDefenseFieldNumber = 10;
  float magic_defense() const;
  void set_magic_defense(float value);

  // required int32 summon = 11;
  bool has_summon() const;
  void clear_summon();
  static const int kSummonFieldNumber = 11;
  ::google::protobuf::int32 summon() const;
  void set_summon(::google::protobuf::int32 value);

  // required float width = 12;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 12;
  float width() const;
  void set_width(float value);

  // required float height = 13;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 13;
  float height() const;
  void set_height(float value);

  // required int32 wait_time = 14;
  bool has_wait_time() const;
  void clear_wait_time();
  static const int kWaitTimeFieldNumber = 14;
  ::google::protobuf::int32 wait_time() const;
  void set_wait_time(::google::protobuf::int32 value);

  // required int32 attack_mode = 15;
  bool has_attack_mode() const;
  void clear_attack_mode();
  static const int kAttackModeFieldNumber = 15;
  ::google::protobuf::int32 attack_mode() const;
  void set_attack_mode(::google::protobuf::int32 value);

  // required int32 move_distance = 16;
  bool has_move_distance() const;
  void clear_move_distance();
  static const int kMoveDistanceFieldNumber = 16;
  ::google::protobuf::int32 move_distance() const;
  void set_move_distance(::google::protobuf::int32 value);

  // required int32 run_distance = 17;
  bool has_run_distance() const;
  void clear_run_distance();
  static const int kRunDistanceFieldNumber = 17;
  ::google::protobuf::int32 run_distance() const;
  void set_run_distance(::google::protobuf::int32 value);

  // required int32 can_move = 18;
  bool has_can_move() const;
  void clear_can_move();
  static const int kCanMoveFieldNumber = 18;
  ::google::protobuf::int32 can_move() const;
  void set_can_move(::google::protobuf::int32 value);

  // required int32 enemy_type = 19;
  bool has_enemy_type() const;
  void clear_enemy_type();
  static const int kEnemyTypeFieldNumber = 19;
  ::google::protobuf::int32 enemy_type() const;
  void set_enemy_type(::google::protobuf::int32 value);

  // required int32 action_mode = 20;
  bool has_action_mode() const;
  void clear_action_mode();
  static const int kActionModeFieldNumber = 20;
  ::google::protobuf::int32 action_mode() const;
  void set_action_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigEnemy)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_profession();
  void clear_has_profession();
  void set_has_enemy_model();
  void clear_has_enemy_model();
  void set_has_camp();
  void clear_has_camp();
  void set_has_hp();
  void clear_has_hp();
  void set_has_physical_attack();
  void clear_has_physical_attack();
  void set_has_magic_attack();
  void clear_has_magic_attack();
  void set_has_physical_defense();
  void clear_has_physical_defense();
  void set_has_magic_defense();
  void clear_has_magic_defense();
  void set_has_summon();
  void clear_has_summon();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_wait_time();
  void clear_has_wait_time();
  void set_has_attack_mode();
  void clear_has_attack_mode();
  void set_has_move_distance();
  void clear_has_move_distance();
  void set_has_run_distance();
  void clear_has_run_distance();
  void set_has_can_move();
  void clear_has_can_move();
  void set_has_enemy_type();
  void clear_has_enemy_type();
  void set_has_action_mode();
  void clear_has_action_mode();
  void set_has_skill();
  void clear_has_skill();
  void set_has_drop_item();
  void clear_has_drop_item();
  void set_has_drop_element();
  void clear_has_drop_element();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr skill_;
  ::google::protobuf::internal::ArenaStringPtr drop_item_;
  ::google::protobuf::internal::ArenaStringPtr drop_element_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 enemy_model_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 hp_;
  float physical_attack_;
  float magic_attack_;
  float physical_defense_;
  float magic_defense_;
  ::google::protobuf::int32 summon_;
  float width_;
  float height_;
  ::google::protobuf::int32 wait_time_;
  ::google::protobuf::int32 attack_mode_;
  ::google::protobuf::int32 move_distance_;
  ::google::protobuf::int32 run_distance_;
  ::google::protobuf::int32 can_move_;
  ::google::protobuf::int32 enemy_type_;
  ::google::protobuf::int32 action_mode_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEnemyEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigEnemyEvent) */ {
 public:
  ConfigEnemyEvent();
  virtual ~ConfigEnemyEvent();

  ConfigEnemyEvent(const ConfigEnemyEvent& from);

  inline ConfigEnemyEvent& operator=(const ConfigEnemyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEnemyEvent(ConfigEnemyEvent&& from) noexcept
    : ConfigEnemyEvent() {
    *this = ::std::move(from);
  }

  inline ConfigEnemyEvent& operator=(ConfigEnemyEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEnemyEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEnemyEvent* internal_default_instance() {
    return reinterpret_cast<const ConfigEnemyEvent*>(
               &_ConfigEnemyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(ConfigEnemyEvent* other);
  void Swap(ConfigEnemyEvent* other);
  friend void swap(ConfigEnemyEvent& a, ConfigEnemyEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEnemyEvent* New() const final {
    return CreateMaybeMessage<ConfigEnemyEvent>(NULL);
  }

  ConfigEnemyEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEnemyEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEnemyEvent& from);
  void MergeFrom(const ConfigEnemyEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEnemyEvent* other);
  protected:
  explicit ConfigEnemyEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes trigger_info = 2;
  bool has_trigger_info() const;
  void clear_trigger_info();
  static const int kTriggerInfoFieldNumber = 2;
  const ::std::string& trigger_info() const;
  void set_trigger_info(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_info(::std::string&& value);
  #endif
  void set_trigger_info(const char* value);
  void set_trigger_info(const void* value, size_t size);
  ::std::string* mutable_trigger_info();
  ::std::string* release_trigger_info();
  void set_allocated_trigger_info(::std::string* trigger_info);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_trigger_info();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trigger_info(
      ::std::string* trigger_info);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigEnemyEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_trigger_info();
  void clear_has_trigger_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trigger_info_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEnemyGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigEnemyGroup) */ {
 public:
  ConfigEnemyGroup();
  virtual ~ConfigEnemyGroup();

  ConfigEnemyGroup(const ConfigEnemyGroup& from);

  inline ConfigEnemyGroup& operator=(const ConfigEnemyGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEnemyGroup(ConfigEnemyGroup&& from) noexcept
    : ConfigEnemyGroup() {
    *this = ::std::move(from);
  }

  inline ConfigEnemyGroup& operator=(ConfigEnemyGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEnemyGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEnemyGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigEnemyGroup*>(
               &_ConfigEnemyGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void UnsafeArenaSwap(ConfigEnemyGroup* other);
  void Swap(ConfigEnemyGroup* other);
  friend void swap(ConfigEnemyGroup& a, ConfigEnemyGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEnemyGroup* New() const final {
    return CreateMaybeMessage<ConfigEnemyGroup>(NULL);
  }

  ConfigEnemyGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEnemyGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEnemyGroup& from);
  void MergeFrom(const ConfigEnemyGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEnemyGroup* other);
  protected:
  explicit ConfigEnemyGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes group_info = 3;
  bool has_group_info() const;
  void clear_group_info();
  static const int kGroupInfoFieldNumber = 3;
  const ::std::string& group_info() const;
  void set_group_info(const ::std::string& value);
  #if LANG_CXX11
  void set_group_info(::std::string&& value);
  #endif
  void set_group_info(const char* value);
  void set_group_info(const void* value, size_t size);
  ::std::string* mutable_group_info();
  ::std::string* release_group_info();
  void set_allocated_group_info(::std::string* group_info);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_group_info();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_info(
      ::std::string* group_info);

  // required bytes random_enemy = 4;
  bool has_random_enemy() const;
  void clear_random_enemy();
  static const int kRandomEnemyFieldNumber = 4;
  const ::std::string& random_enemy() const;
  void set_random_enemy(const ::std::string& value);
  #if LANG_CXX11
  void set_random_enemy(::std::string&& value);
  #endif
  void set_random_enemy(const char* value);
  void set_random_enemy(const void* value, size_t size);
  ::std::string* mutable_random_enemy();
  ::std::string* release_random_enemy();
  void set_allocated_random_enemy(::std::string* random_enemy);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_enemy();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_enemy(
      ::std::string* random_enemy);

  // required bytes random_event = 5;
  bool has_random_event() const;
  void clear_random_event();
  static const int kRandomEventFieldNumber = 5;
  const ::std::string& random_event() const;
  void set_random_event(const ::std::string& value);
  #if LANG_CXX11
  void set_random_event(::std::string&& value);
  #endif
  void set_random_event(const char* value);
  void set_random_event(const void* value, size_t size);
  ::std::string* mutable_random_event();
  ::std::string* release_random_event();
  void set_allocated_random_event(::std::string* random_event);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_event();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_event(
      ::std::string* random_event);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 eventid = 2;
  bool has_eventid() const;
  void clear_eventid();
  static const int kEventidFieldNumber = 2;
  ::google::protobuf::int32 eventid() const;
  void set_eventid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigEnemyGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_eventid();
  void clear_has_eventid();
  void set_has_group_info();
  void clear_has_group_info();
  void set_has_random_enemy();
  void clear_has_random_enemy();
  void set_has_random_event();
  void clear_has_random_event();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr group_info_;
  ::google::protobuf::internal::ArenaStringPtr random_enemy_;
  ::google::protobuf::internal::ArenaStringPtr random_event_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 eventid_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigFightItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFightItem) */ {
 public:
  ConfigFightItem();
  virtual ~ConfigFightItem();

  ConfigFightItem(const ConfigFightItem& from);

  inline ConfigFightItem& operator=(const ConfigFightItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFightItem(ConfigFightItem&& from) noexcept
    : ConfigFightItem() {
    *this = ::std::move(from);
  }

  inline ConfigFightItem& operator=(ConfigFightItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFightItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFightItem* internal_default_instance() {
    return reinterpret_cast<const ConfigFightItem*>(
               &_ConfigFightItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void UnsafeArenaSwap(ConfigFightItem* other);
  void Swap(ConfigFightItem* other);
  friend void swap(ConfigFightItem& a, ConfigFightItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFightItem* New() const final {
    return CreateMaybeMessage<ConfigFightItem>(NULL);
  }

  ConfigFightItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFightItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFightItem& from);
  void MergeFrom(const ConfigFightItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFightItem* other);
  protected:
  explicit ConfigFightItem(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes effect = 5;
  bool has_effect() const;
  void clear_effect();
  static const int kEffectFieldNumber = 5;
  const ::std::string& effect() const;
  void set_effect(const ::std::string& value);
  #if LANG_CXX11
  void set_effect(::std::string&& value);
  #endif
  void set_effect(const char* value);
  void set_effect(const void* value, size_t size);
  ::std::string* mutable_effect();
  ::std::string* release_effect();
  void set_allocated_effect(::std::string* effect);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_effect();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_effect(
      ::std::string* effect);

  // required bytes exchange = 8;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 8;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const void* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_exchange();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // required bytes price = 9;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 9;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const void* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_price();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_price(
      ::std::string* price);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 use_type = 4;
  bool has_use_type() const;
  void clear_use_type();
  static const int kUseTypeFieldNumber = 4;
  ::google::protobuf::int32 use_type() const;
  void set_use_type(::google::protobuf::int32 value);

  // required int32 package_max = 6;
  bool has_package_max() const;
  void clear_package_max();
  static const int kPackageMaxFieldNumber = 6;
  ::google::protobuf::int32 package_max() const;
  void set_package_max(::google::protobuf::int32 value);

  // required int32 exchange_num = 7;
  bool has_exchange_num() const;
  void clear_exchange_num();
  static const int kExchangeNumFieldNumber = 7;
  ::google::protobuf::int32 exchange_num() const;
  void set_exchange_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigFightItem)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_use_type();
  void clear_has_use_type();
  void set_has_effect();
  void clear_has_effect();
  void set_has_package_max();
  void clear_has_package_max();
  void set_has_exchange_num();
  void clear_has_exchange_num();
  void set_has_exchange();
  void clear_has_exchange();
  void set_has_price();
  void clear_has_price();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr effect_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 use_type_;
  ::google::protobuf::int32 package_max_;
  ::google::protobuf::int32 exchange_num_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigFightMachine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFightMachine) */ {
 public:
  ConfigFightMachine();
  virtual ~ConfigFightMachine();

  ConfigFightMachine(const ConfigFightMachine& from);

  inline ConfigFightMachine& operator=(const ConfigFightMachine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFightMachine(ConfigFightMachine&& from) noexcept
    : ConfigFightMachine() {
    *this = ::std::move(from);
  }

  inline ConfigFightMachine& operator=(ConfigFightMachine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFightMachine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFightMachine* internal_default_instance() {
    return reinterpret_cast<const ConfigFightMachine*>(
               &_ConfigFightMachine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void UnsafeArenaSwap(ConfigFightMachine* other);
  void Swap(ConfigFightMachine* other);
  friend void swap(ConfigFightMachine& a, ConfigFightMachine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFightMachine* New() const final {
    return CreateMaybeMessage<ConfigFightMachine>(NULL);
  }

  ConfigFightMachine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFightMachine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFightMachine& from);
  void MergeFrom(const ConfigFightMachine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFightMachine* other);
  protected:
  explicit ConfigFightMachine(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes trigger_effect = 5;
  bool has_trigger_effect() const;
  void clear_trigger_effect();
  static const int kTriggerEffectFieldNumber = 5;
  const ::std::string& trigger_effect() const;
  void set_trigger_effect(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_effect(::std::string&& value);
  #endif
  void set_trigger_effect(const char* value);
  void set_trigger_effect(const void* value, size_t size);
  ::std::string* mutable_trigger_effect();
  ::std::string* release_trigger_effect();
  void set_allocated_trigger_effect(::std::string* trigger_effect);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_trigger_effect();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trigger_effect(
      ::std::string* trigger_effect);

  // required bytes trigger_element = 7;
  bool has_trigger_element() const;
  void clear_trigger_element();
  static const int kTriggerElementFieldNumber = 7;
  const ::std::string& trigger_element() const;
  void set_trigger_element(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_element(::std::string&& value);
  #endif
  void set_trigger_element(const char* value);
  void set_trigger_element(const void* value, size_t size);
  ::std::string* mutable_trigger_element();
  ::std::string* release_trigger_element();
  void set_allocated_trigger_element(::std::string* trigger_element);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_trigger_element();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trigger_element(
      ::std::string* trigger_element);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 condition_type = 2;
  bool has_condition_type() const;
  void clear_condition_type();
  static const int kConditionTypeFieldNumber = 2;
  ::google::protobuf::int32 condition_type() const;
  void set_condition_type(::google::protobuf::int32 value);

  // required int32 condition_param = 3;
  bool has_condition_param() const;
  void clear_condition_param();
  static const int kConditionParamFieldNumber = 3;
  ::google::protobuf::int32 condition_param() const;
  void set_condition_param(::google::protobuf::int32 value);

  // required int32 machine_type = 4;
  bool has_machine_type() const;
  void clear_machine_type();
  static const int kMachineTypeFieldNumber = 4;
  ::google::protobuf::int32 machine_type() const;
  void set_machine_type(::google::protobuf::int32 value);

  // required int32 machine_time = 6;
  bool has_machine_time() const;
  void clear_machine_time();
  static const int kMachineTimeFieldNumber = 6;
  ::google::protobuf::int32 machine_time() const;
  void set_machine_time(::google::protobuf::int32 value);

  // required int32 special_type = 8;
  bool has_special_type() const;
  void clear_special_type();
  static const int kSpecialTypeFieldNumber = 8;
  ::google::protobuf::int32 special_type() const;
  void set_special_type(::google::protobuf::int32 value);

  // required int32 exist_times = 9;
  bool has_exist_times() const;
  void clear_exist_times();
  static const int kExistTimesFieldNumber = 9;
  ::google::protobuf::int32 exist_times() const;
  void set_exist_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigFightMachine)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_condition_type();
  void clear_has_condition_type();
  void set_has_condition_param();
  void clear_has_condition_param();
  void set_has_machine_type();
  void clear_has_machine_type();
  void set_has_trigger_effect();
  void clear_has_trigger_effect();
  void set_has_machine_time();
  void clear_has_machine_time();
  void set_has_trigger_element();
  void clear_has_trigger_element();
  void set_has_special_type();
  void clear_has_special_type();
  void set_has_exist_times();
  void clear_has_exist_times();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trigger_effect_;
  ::google::protobuf::internal::ArenaStringPtr trigger_element_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 condition_type_;
  ::google::protobuf::int32 condition_param_;
  ::google::protobuf::int32 machine_type_;
  ::google::protobuf::int32 machine_time_;
  ::google::protobuf::int32 special_type_;
  ::google::protobuf::int32 exist_times_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDungeonTalent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDungeonTalent) */ {
 public:
  ConfigDungeonTalent();
  virtual ~ConfigDungeonTalent();

  ConfigDungeonTalent(const ConfigDungeonTalent& from);

  inline ConfigDungeonTalent& operator=(const ConfigDungeonTalent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDungeonTalent(ConfigDungeonTalent&& from) noexcept
    : ConfigDungeonTalent() {
    *this = ::std::move(from);
  }

  inline ConfigDungeonTalent& operator=(ConfigDungeonTalent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDungeonTalent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDungeonTalent* internal_default_instance() {
    return reinterpret_cast<const ConfigDungeonTalent*>(
               &_ConfigDungeonTalent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void UnsafeArenaSwap(ConfigDungeonTalent* other);
  void Swap(ConfigDungeonTalent* other);
  friend void swap(ConfigDungeonTalent& a, ConfigDungeonTalent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDungeonTalent* New() const final {
    return CreateMaybeMessage<ConfigDungeonTalent>(NULL);
  }

  ConfigDungeonTalent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDungeonTalent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDungeonTalent& from);
  void MergeFrom(const ConfigDungeonTalent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDungeonTalent* other);
  protected:
  explicit ConfigDungeonTalent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes get_props = 4;
  bool has_get_props() const;
  void clear_get_props();
  static const int kGetPropsFieldNumber = 4;
  const ::std::string& get_props() const;
  void set_get_props(const ::std::string& value);
  #if LANG_CXX11
  void set_get_props(::std::string&& value);
  #endif
  void set_get_props(const char* value);
  void set_get_props(const void* value, size_t size);
  ::std::string* mutable_get_props();
  ::std::string* release_get_props();
  void set_allocated_get_props(::std::string* get_props);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_get_props();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_get_props(
      ::std::string* get_props);

  // required bytes next_floor_item = 5;
  bool has_next_floor_item() const;
  void clear_next_floor_item();
  static const int kNextFloorItemFieldNumber = 5;
  const ::std::string& next_floor_item() const;
  void set_next_floor_item(const ::std::string& value);
  #if LANG_CXX11
  void set_next_floor_item(::std::string&& value);
  #endif
  void set_next_floor_item(const char* value);
  void set_next_floor_item(const void* value, size_t size);
  ::std::string* mutable_next_floor_item();
  ::std::string* release_next_floor_item();
  void set_allocated_next_floor_item(::std::string* next_floor_item);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_floor_item();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_floor_item(
      ::std::string* next_floor_item);

  // required bytes next_floor_machine = 6;
  bool has_next_floor_machine() const;
  void clear_next_floor_machine();
  static const int kNextFloorMachineFieldNumber = 6;
  const ::std::string& next_floor_machine() const;
  void set_next_floor_machine(const ::std::string& value);
  #if LANG_CXX11
  void set_next_floor_machine(::std::string&& value);
  #endif
  void set_next_floor_machine(const char* value);
  void set_next_floor_machine(const void* value, size_t size);
  ::std::string* mutable_next_floor_machine();
  ::std::string* release_next_floor_machine();
  void set_allocated_next_floor_machine(::std::string* next_floor_machine);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_floor_machine();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_floor_machine(
      ::std::string* next_floor_machine);

  // required bytes incentives = 7;
  bool has_incentives() const;
  void clear_incentives();
  static const int kIncentivesFieldNumber = 7;
  const ::std::string& incentives() const;
  void set_incentives(const ::std::string& value);
  #if LANG_CXX11
  void set_incentives(::std::string&& value);
  #endif
  void set_incentives(const char* value);
  void set_incentives(const void* value, size_t size);
  ::std::string* mutable_incentives();
  ::std::string* release_incentives();
  void set_allocated_incentives(::std::string* incentives);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_incentives();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_incentives(
      ::std::string* incentives);

  // required bytes machine_incentives = 8;
  bool has_machine_incentives() const;
  void clear_machine_incentives();
  static const int kMachineIncentivesFieldNumber = 8;
  const ::std::string& machine_incentives() const;
  void set_machine_incentives(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_incentives(::std::string&& value);
  #endif
  void set_machine_incentives(const char* value);
  void set_machine_incentives(const void* value, size_t size);
  ::std::string* mutable_machine_incentives();
  ::std::string* release_machine_incentives();
  void set_allocated_machine_incentives(::std::string* machine_incentives);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_machine_incentives();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_machine_incentives(
      ::std::string* machine_incentives);

  // required bytes reduce_cost = 9;
  bool has_reduce_cost() const;
  void clear_reduce_cost();
  static const int kReduceCostFieldNumber = 9;
  const ::std::string& reduce_cost() const;
  void set_reduce_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_reduce_cost(::std::string&& value);
  #endif
  void set_reduce_cost(const char* value);
  void set_reduce_cost(const void* value, size_t size);
  ::std::string* mutable_reduce_cost();
  ::std::string* release_reduce_cost();
  void set_allocated_reduce_cost(::std::string* reduce_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reduce_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reduce_cost(
      ::std::string* reduce_cost);

  // required bytes cost = 10;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 10;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required int32 talent_group = 1;
  bool has_talent_group() const;
  void clear_talent_group();
  static const int kTalentGroupFieldNumber = 1;
  ::google::protobuf::int32 talent_group() const;
  void set_talent_group(::google::protobuf::int32 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 level_max = 3;
  bool has_level_max() const;
  void clear_level_max();
  static const int kLevelMaxFieldNumber = 3;
  ::google::protobuf::int32 level_max() const;
  void set_level_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigDungeonTalent)
 private:
  void set_has_talent_group();
  void clear_has_talent_group();
  void set_has_level();
  void clear_has_level();
  void set_has_level_max();
  void clear_has_level_max();
  void set_has_get_props();
  void clear_has_get_props();
  void set_has_next_floor_item();
  void clear_has_next_floor_item();
  void set_has_next_floor_machine();
  void clear_has_next_floor_machine();
  void set_has_incentives();
  void clear_has_incentives();
  void set_has_machine_incentives();
  void clear_has_machine_incentives();
  void set_has_reduce_cost();
  void clear_has_reduce_cost();
  void set_has_cost();
  void clear_has_cost();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr get_props_;
  ::google::protobuf::internal::ArenaStringPtr next_floor_item_;
  ::google::protobuf::internal::ArenaStringPtr next_floor_machine_;
  ::google::protobuf::internal::ArenaStringPtr incentives_;
  ::google::protobuf::internal::ArenaStringPtr machine_incentives_;
  ::google::protobuf::internal::ArenaStringPtr reduce_cost_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::int32 talent_group_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 level_max_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDungeonTalentTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDungeonTalentTree) */ {
 public:
  ConfigDungeonTalentTree();
  virtual ~ConfigDungeonTalentTree();

  ConfigDungeonTalentTree(const ConfigDungeonTalentTree& from);

  inline ConfigDungeonTalentTree& operator=(const ConfigDungeonTalentTree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDungeonTalentTree(ConfigDungeonTalentTree&& from) noexcept
    : ConfigDungeonTalentTree() {
    *this = ::std::move(from);
  }

  inline ConfigDungeonTalentTree& operator=(ConfigDungeonTalentTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDungeonTalentTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDungeonTalentTree* internal_default_instance() {
    return reinterpret_cast<const ConfigDungeonTalentTree*>(
               &_ConfigDungeonTalentTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void UnsafeArenaSwap(ConfigDungeonTalentTree* other);
  void Swap(ConfigDungeonTalentTree* other);
  friend void swap(ConfigDungeonTalentTree& a, ConfigDungeonTalentTree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDungeonTalentTree* New() const final {
    return CreateMaybeMessage<ConfigDungeonTalentTree>(NULL);
  }

  ConfigDungeonTalentTree* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDungeonTalentTree>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDungeonTalentTree& from);
  void MergeFrom(const ConfigDungeonTalentTree& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDungeonTalentTree* other);
  protected:
  explicit ConfigDungeonTalentTree(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 3;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 3;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required bytes unlock_require = 4;
  bool has_unlock_require() const;
  void clear_unlock_require();
  static const int kUnlockRequireFieldNumber = 4;
  const ::std::string& unlock_require() const;
  void set_unlock_require(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_require(::std::string&& value);
  #endif
  void set_unlock_require(const char* value);
  void set_unlock_require(const void* value, size_t size);
  ::std::string* mutable_unlock_require();
  ::std::string* release_unlock_require();
  void set_allocated_unlock_require(::std::string* unlock_require);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_require();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_require(
      ::std::string* unlock_require);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigDungeonTalentTree)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_cost();
  void clear_has_cost();
  void set_has_unlock_require();
  void clear_has_unlock_require();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::internal::ArenaStringPtr unlock_require_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDungeonStoreGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDungeonStoreGroup) */ {
 public:
  ConfigDungeonStoreGroup();
  virtual ~ConfigDungeonStoreGroup();

  ConfigDungeonStoreGroup(const ConfigDungeonStoreGroup& from);

  inline ConfigDungeonStoreGroup& operator=(const ConfigDungeonStoreGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDungeonStoreGroup(ConfigDungeonStoreGroup&& from) noexcept
    : ConfigDungeonStoreGroup() {
    *this = ::std::move(from);
  }

  inline ConfigDungeonStoreGroup& operator=(ConfigDungeonStoreGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDungeonStoreGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDungeonStoreGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigDungeonStoreGroup*>(
               &_ConfigDungeonStoreGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void UnsafeArenaSwap(ConfigDungeonStoreGroup* other);
  void Swap(ConfigDungeonStoreGroup* other);
  friend void swap(ConfigDungeonStoreGroup& a, ConfigDungeonStoreGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDungeonStoreGroup* New() const final {
    return CreateMaybeMessage<ConfigDungeonStoreGroup>(NULL);
  }

  ConfigDungeonStoreGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDungeonStoreGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDungeonStoreGroup& from);
  void MergeFrom(const ConfigDungeonStoreGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDungeonStoreGroup* other);
  protected:
  explicit ConfigDungeonStoreGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes base_items = 2;
  bool has_base_items() const;
  void clear_base_items();
  static const int kBaseItemsFieldNumber = 2;
  const ::std::string& base_items() const;
  void set_base_items(const ::std::string& value);
  #if LANG_CXX11
  void set_base_items(::std::string&& value);
  #endif
  void set_base_items(const char* value);
  void set_base_items(const void* value, size_t size);
  ::std::string* mutable_base_items();
  ::std::string* release_base_items();
  void set_allocated_base_items(::std::string* base_items);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_base_items();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_base_items(
      ::std::string* base_items);

  // required bytes random_items = 3;
  bool has_random_items() const;
  void clear_random_items();
  static const int kRandomItemsFieldNumber = 3;
  const ::std::string& random_items() const;
  void set_random_items(const ::std::string& value);
  #if LANG_CXX11
  void set_random_items(::std::string&& value);
  #endif
  void set_random_items(const char* value);
  void set_random_items(const void* value, size_t size);
  ::std::string* mutable_random_items();
  ::std::string* release_random_items();
  void set_allocated_random_items(::std::string* random_items);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_items();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_items(
      ::std::string* random_items);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigDungeonStoreGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_base_items();
  void clear_has_base_items();
  void set_has_random_items();
  void clear_has_random_items();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr base_items_;
  ::google::protobuf::internal::ArenaStringPtr random_items_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMachineExchange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMachineExchange) */ {
 public:
  ConfigMachineExchange();
  virtual ~ConfigMachineExchange();

  ConfigMachineExchange(const ConfigMachineExchange& from);

  inline ConfigMachineExchange& operator=(const ConfigMachineExchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMachineExchange(ConfigMachineExchange&& from) noexcept
    : ConfigMachineExchange() {
    *this = ::std::move(from);
  }

  inline ConfigMachineExchange& operator=(ConfigMachineExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMachineExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMachineExchange* internal_default_instance() {
    return reinterpret_cast<const ConfigMachineExchange*>(
               &_ConfigMachineExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void UnsafeArenaSwap(ConfigMachineExchange* other);
  void Swap(ConfigMachineExchange* other);
  friend void swap(ConfigMachineExchange& a, ConfigMachineExchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMachineExchange* New() const final {
    return CreateMaybeMessage<ConfigMachineExchange>(NULL);
  }

  ConfigMachineExchange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMachineExchange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMachineExchange& from);
  void MergeFrom(const ConfigMachineExchange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMachineExchange* other);
  protected:
  explicit ConfigMachineExchange(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 2;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 2;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required bytes get = 3;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 3;
  const ::std::string& get() const;
  void set_get(const ::std::string& value);
  #if LANG_CXX11
  void set_get(::std::string&& value);
  #endif
  void set_get(const char* value);
  void set_get(const void* value, size_t size);
  ::std::string* mutable_get();
  ::std::string* release_get();
  void set_allocated_get(::std::string* get);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_get();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_get(
      ::std::string* get);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigMachineExchange)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_cost();
  void clear_has_cost();
  void set_has_get();
  void clear_has_get();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::internal::ArenaStringPtr get_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMachineExchangeGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMachineExchangeGroup) */ {
 public:
  ConfigMachineExchangeGroup();
  virtual ~ConfigMachineExchangeGroup();

  ConfigMachineExchangeGroup(const ConfigMachineExchangeGroup& from);

  inline ConfigMachineExchangeGroup& operator=(const ConfigMachineExchangeGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMachineExchangeGroup(ConfigMachineExchangeGroup&& from) noexcept
    : ConfigMachineExchangeGroup() {
    *this = ::std::move(from);
  }

  inline ConfigMachineExchangeGroup& operator=(ConfigMachineExchangeGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMachineExchangeGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMachineExchangeGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigMachineExchangeGroup*>(
               &_ConfigMachineExchangeGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void UnsafeArenaSwap(ConfigMachineExchangeGroup* other);
  void Swap(ConfigMachineExchangeGroup* other);
  friend void swap(ConfigMachineExchangeGroup& a, ConfigMachineExchangeGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMachineExchangeGroup* New() const final {
    return CreateMaybeMessage<ConfigMachineExchangeGroup>(NULL);
  }

  ConfigMachineExchangeGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMachineExchangeGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMachineExchangeGroup& from);
  void MergeFrom(const ConfigMachineExchangeGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMachineExchangeGroup* other);
  protected:
  explicit ConfigMachineExchangeGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes group_info = 2;
  bool has_group_info() const;
  void clear_group_info();
  static const int kGroupInfoFieldNumber = 2;
  const ::std::string& group_info() const;
  void set_group_info(const ::std::string& value);
  #if LANG_CXX11
  void set_group_info(::std::string&& value);
  #endif
  void set_group_info(const char* value);
  void set_group_info(const void* value, size_t size);
  ::std::string* mutable_group_info();
  ::std::string* release_group_info();
  void set_allocated_group_info(::std::string* group_info);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_group_info();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_info(
      ::std::string* group_info);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigMachineExchangeGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_group_info();
  void clear_has_group_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr group_info_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigPveMapModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigPveMapModel) */ {
 public:
  ConfigPveMapModel();
  virtual ~ConfigPveMapModel();

  ConfigPveMapModel(const ConfigPveMapModel& from);

  inline ConfigPveMapModel& operator=(const ConfigPveMapModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigPveMapModel(ConfigPveMapModel&& from) noexcept
    : ConfigPveMapModel() {
    *this = ::std::move(from);
  }

  inline ConfigPveMapModel& operator=(ConfigPveMapModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigPveMapModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPveMapModel* internal_default_instance() {
    return reinterpret_cast<const ConfigPveMapModel*>(
               &_ConfigPveMapModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void UnsafeArenaSwap(ConfigPveMapModel* other);
  void Swap(ConfigPveMapModel* other);
  friend void swap(ConfigPveMapModel& a, ConfigPveMapModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigPveMapModel* New() const final {
    return CreateMaybeMessage<ConfigPveMapModel>(NULL);
  }

  ConfigPveMapModel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPveMapModel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigPveMapModel& from);
  void MergeFrom(const ConfigPveMapModel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPveMapModel* other);
  protected:
  explicit ConfigPveMapModel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const void* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level(
      ::std::string* level);

  // required bytes map_tiles = 7;
  bool has_map_tiles() const;
  void clear_map_tiles();
  static const int kMapTilesFieldNumber = 7;
  const ::std::string& map_tiles() const;
  void set_map_tiles(const ::std::string& value);
  #if LANG_CXX11
  void set_map_tiles(::std::string&& value);
  #endif
  void set_map_tiles(const char* value);
  void set_map_tiles(const void* value, size_t size);
  ::std::string* mutable_map_tiles();
  ::std::string* release_map_tiles();
  void set_allocated_map_tiles(::std::string* map_tiles);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_map_tiles();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_tiles(
      ::std::string* map_tiles);

  // required bytes map_size = 8;
  bool has_map_size() const;
  void clear_map_size();
  static const int kMapSizeFieldNumber = 8;
  const ::std::string& map_size() const;
  void set_map_size(const ::std::string& value);
  #if LANG_CXX11
  void set_map_size(::std::string&& value);
  #endif
  void set_map_size(const char* value);
  void set_map_size(const void* value, size_t size);
  ::std::string* mutable_map_size();
  ::std::string* release_map_size();
  void set_allocated_map_size(::std::string* map_size);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_map_size();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_size(
      ::std::string* map_size);

  // required bytes random_room_one = 11;
  bool has_random_room_one() const;
  void clear_random_room_one();
  static const int kRandomRoomOneFieldNumber = 11;
  const ::std::string& random_room_one() const;
  void set_random_room_one(const ::std::string& value);
  #if LANG_CXX11
  void set_random_room_one(::std::string&& value);
  #endif
  void set_random_room_one(const char* value);
  void set_random_room_one(const void* value, size_t size);
  ::std::string* mutable_random_room_one();
  ::std::string* release_random_room_one();
  void set_allocated_random_room_one(::std::string* random_room_one);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_room_one();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_room_one(
      ::std::string* random_room_one);

  // required bytes random_room_two = 12;
  bool has_random_room_two() const;
  void clear_random_room_two();
  static const int kRandomRoomTwoFieldNumber = 12;
  const ::std::string& random_room_two() const;
  void set_random_room_two(const ::std::string& value);
  #if LANG_CXX11
  void set_random_room_two(::std::string&& value);
  #endif
  void set_random_room_two(const char* value);
  void set_random_room_two(const void* value, size_t size);
  ::std::string* mutable_random_room_two();
  ::std::string* release_random_room_two();
  void set_allocated_random_room_two(::std::string* random_room_two);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_room_two();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_room_two(
      ::std::string* random_room_two);

  // required bytes random_room_three = 13;
  bool has_random_room_three() const;
  void clear_random_room_three();
  static const int kRandomRoomThreeFieldNumber = 13;
  const ::std::string& random_room_three() const;
  void set_random_room_three(const ::std::string& value);
  #if LANG_CXX11
  void set_random_room_three(::std::string&& value);
  #endif
  void set_random_room_three(const char* value);
  void set_random_room_three(const void* value, size_t size);
  ::std::string* mutable_random_room_three();
  ::std::string* release_random_room_three();
  void set_allocated_random_room_three(::std::string* random_room_three);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_room_three();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_room_three(
      ::std::string* random_room_three);

  // required bytes random_room_four = 14;
  bool has_random_room_four() const;
  void clear_random_room_four();
  static const int kRandomRoomFourFieldNumber = 14;
  const ::std::string& random_room_four() const;
  void set_random_room_four(const ::std::string& value);
  #if LANG_CXX11
  void set_random_room_four(::std::string&& value);
  #endif
  void set_random_room_four(const char* value);
  void set_random_room_four(const void* value, size_t size);
  ::std::string* mutable_random_room_four();
  ::std::string* release_random_room_four();
  void set_allocated_random_room_four(::std::string* random_room_four);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_room_four();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_room_four(
      ::std::string* random_room_four);

  // required bytes random_room_five = 15;
  bool has_random_room_five() const;
  void clear_random_room_five();
  static const int kRandomRoomFiveFieldNumber = 15;
  const ::std::string& random_room_five() const;
  void set_random_room_five(const ::std::string& value);
  #if LANG_CXX11
  void set_random_room_five(::std::string&& value);
  #endif
  void set_random_room_five(const char* value);
  void set_random_room_five(const void* value, size_t size);
  ::std::string* mutable_random_room_five();
  ::std::string* release_random_room_five();
  void set_allocated_random_room_five(::std::string* random_room_five);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_room_five();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_room_five(
      ::std::string* random_room_five);

  // required bytes random_enemy_two = 16;
  bool has_random_enemy_two() const;
  void clear_random_enemy_two();
  static const int kRandomEnemyTwoFieldNumber = 16;
  const ::std::string& random_enemy_two() const;
  void set_random_enemy_two(const ::std::string& value);
  #if LANG_CXX11
  void set_random_enemy_two(::std::string&& value);
  #endif
  void set_random_enemy_two(const char* value);
  void set_random_enemy_two(const void* value, size_t size);
  ::std::string* mutable_random_enemy_two();
  ::std::string* release_random_enemy_two();
  void set_allocated_random_enemy_two(::std::string* random_enemy_two);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_enemy_two();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_enemy_two(
      ::std::string* random_enemy_two);

  // required bytes random_enemy_three = 17;
  bool has_random_enemy_three() const;
  void clear_random_enemy_three();
  static const int kRandomEnemyThreeFieldNumber = 17;
  const ::std::string& random_enemy_three() const;
  void set_random_enemy_three(const ::std::string& value);
  #if LANG_CXX11
  void set_random_enemy_three(::std::string&& value);
  #endif
  void set_random_enemy_three(const char* value);
  void set_random_enemy_three(const void* value, size_t size);
  ::std::string* mutable_random_enemy_three();
  ::std::string* release_random_enemy_three();
  void set_allocated_random_enemy_three(::std::string* random_enemy_three);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_enemy_three();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_enemy_three(
      ::std::string* random_enemy_three);

  // required bytes random_enemy_four = 18;
  bool has_random_enemy_four() const;
  void clear_random_enemy_four();
  static const int kRandomEnemyFourFieldNumber = 18;
  const ::std::string& random_enemy_four() const;
  void set_random_enemy_four(const ::std::string& value);
  #if LANG_CXX11
  void set_random_enemy_four(::std::string&& value);
  #endif
  void set_random_enemy_four(const char* value);
  void set_random_enemy_four(const void* value, size_t size);
  ::std::string* mutable_random_enemy_four();
  ::std::string* release_random_enemy_four();
  void set_allocated_random_enemy_four(::std::string* random_enemy_four);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_enemy_four();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_enemy_four(
      ::std::string* random_enemy_four);

  // required bytes random_enemy_five = 19;
  bool has_random_enemy_five() const;
  void clear_random_enemy_five();
  static const int kRandomEnemyFiveFieldNumber = 19;
  const ::std::string& random_enemy_five() const;
  void set_random_enemy_five(const ::std::string& value);
  #if LANG_CXX11
  void set_random_enemy_five(::std::string&& value);
  #endif
  void set_random_enemy_five(const char* value);
  void set_random_enemy_five(const void* value, size_t size);
  ::std::string* mutable_random_enemy_five();
  ::std::string* release_random_enemy_five();
  void set_allocated_random_enemy_five(::std::string* random_enemy_five);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_enemy_five();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_enemy_five(
      ::std::string* random_enemy_five);

  // required bytes facilitys = 21;
  bool has_facilitys() const;
  void clear_facilitys();
  static const int kFacilitysFieldNumber = 21;
  const ::std::string& facilitys() const;
  void set_facilitys(const ::std::string& value);
  #if LANG_CXX11
  void set_facilitys(::std::string&& value);
  #endif
  void set_facilitys(const char* value);
  void set_facilitys(const void* value, size_t size);
  ::std::string* mutable_facilitys();
  ::std::string* release_facilitys();
  void set_allocated_facilitys(::std::string* facilitys);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_facilitys();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_facilitys(
      ::std::string* facilitys);

  // required bytes confirm_room = 22;
  bool has_confirm_room() const;
  void clear_confirm_room();
  static const int kConfirmRoomFieldNumber = 22;
  const ::std::string& confirm_room() const;
  void set_confirm_room(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_room(::std::string&& value);
  #endif
  void set_confirm_room(const char* value);
  void set_confirm_room(const void* value, size_t size);
  ::std::string* mutable_confirm_room();
  ::std::string* release_confirm_room();
  void set_allocated_confirm_room(::std::string* confirm_room);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_confirm_room();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_confirm_room(
      ::std::string* confirm_room);

  // required bytes confirm_element = 23;
  bool has_confirm_element() const;
  void clear_confirm_element();
  static const int kConfirmElementFieldNumber = 23;
  const ::std::string& confirm_element() const;
  void set_confirm_element(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_element(::std::string&& value);
  #endif
  void set_confirm_element(const char* value);
  void set_confirm_element(const void* value, size_t size);
  ::std::string* mutable_confirm_element();
  ::std::string* release_confirm_element();
  void set_allocated_confirm_element(::std::string* confirm_element);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_confirm_element();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_confirm_element(
      ::std::string* confirm_element);

  // required bytes locked_room = 24;
  bool has_locked_room() const;
  void clear_locked_room();
  static const int kLockedRoomFieldNumber = 24;
  const ::std::string& locked_room() const;
  void set_locked_room(const ::std::string& value);
  #if LANG_CXX11
  void set_locked_room(::std::string&& value);
  #endif
  void set_locked_room(const char* value);
  void set_locked_room(const void* value, size_t size);
  ::std::string* mutable_locked_room();
  ::std::string* release_locked_room();
  void set_allocated_locked_room(::std::string* locked_room);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_locked_room();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_locked_room(
      ::std::string* locked_room);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 subtype = 4;
  bool has_subtype() const;
  void clear_subtype();
  static const int kSubtypeFieldNumber = 4;
  ::google::protobuf::int32 subtype() const;
  void set_subtype(::google::protobuf::int32 value);

  // required int32 map_type = 6;
  bool has_map_type() const;
  void clear_map_type();
  static const int kMapTypeFieldNumber = 6;
  ::google::protobuf::int32 map_type() const;
  void set_map_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigPveMapModel)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_subtype();
  void clear_has_subtype();
  void set_has_level();
  void clear_has_level();
  void set_has_map_type();
  void clear_has_map_type();
  void set_has_map_tiles();
  void clear_has_map_tiles();
  void set_has_map_size();
  void clear_has_map_size();
  void set_has_random_room_one();
  void clear_has_random_room_one();
  void set_has_random_room_two();
  void clear_has_random_room_two();
  void set_has_random_room_three();
  void clear_has_random_room_three();
  void set_has_random_room_four();
  void clear_has_random_room_four();
  void set_has_random_room_five();
  void clear_has_random_room_five();
  void set_has_random_enemy_two();
  void clear_has_random_enemy_two();
  void set_has_random_enemy_three();
  void clear_has_random_enemy_three();
  void set_has_random_enemy_four();
  void clear_has_random_enemy_four();
  void set_has_random_enemy_five();
  void clear_has_random_enemy_five();
  void set_has_facilitys();
  void clear_has_facilitys();
  void set_has_confirm_room();
  void clear_has_confirm_room();
  void set_has_confirm_element();
  void clear_has_confirm_element();
  void set_has_locked_room();
  void clear_has_locked_room();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr map_tiles_;
  ::google::protobuf::internal::ArenaStringPtr map_size_;
  ::google::protobuf::internal::ArenaStringPtr random_room_one_;
  ::google::protobuf::internal::ArenaStringPtr random_room_two_;
  ::google::protobuf::internal::ArenaStringPtr random_room_three_;
  ::google::protobuf::internal::ArenaStringPtr random_room_four_;
  ::google::protobuf::internal::ArenaStringPtr random_room_five_;
  ::google::protobuf::internal::ArenaStringPtr random_enemy_two_;
  ::google::protobuf::internal::ArenaStringPtr random_enemy_three_;
  ::google::protobuf::internal::ArenaStringPtr random_enemy_four_;
  ::google::protobuf::internal::ArenaStringPtr random_enemy_five_;
  ::google::protobuf::internal::ArenaStringPtr facilitys_;
  ::google::protobuf::internal::ArenaStringPtr confirm_room_;
  ::google::protobuf::internal::ArenaStringPtr confirm_element_;
  ::google::protobuf::internal::ArenaStringPtr locked_room_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 subtype_;
  ::google::protobuf::int32 map_type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigPveRoomModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigPveRoomModel) */ {
 public:
  ConfigPveRoomModel();
  virtual ~ConfigPveRoomModel();

  ConfigPveRoomModel(const ConfigPveRoomModel& from);

  inline ConfigPveRoomModel& operator=(const ConfigPveRoomModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigPveRoomModel(ConfigPveRoomModel&& from) noexcept
    : ConfigPveRoomModel() {
    *this = ::std::move(from);
  }

  inline ConfigPveRoomModel& operator=(ConfigPveRoomModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigPveRoomModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPveRoomModel* internal_default_instance() {
    return reinterpret_cast<const ConfigPveRoomModel*>(
               &_ConfigPveRoomModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void UnsafeArenaSwap(ConfigPveRoomModel* other);
  void Swap(ConfigPveRoomModel* other);
  friend void swap(ConfigPveRoomModel& a, ConfigPveRoomModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigPveRoomModel* New() const final {
    return CreateMaybeMessage<ConfigPveRoomModel>(NULL);
  }

  ConfigPveRoomModel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPveRoomModel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigPveRoomModel& from);
  void MergeFrom(const ConfigPveRoomModel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPveRoomModel* other);
  protected:
  explicit ConfigPveRoomModel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes facilitys = 4;
  bool has_facilitys() const;
  void clear_facilitys();
  static const int kFacilitysFieldNumber = 4;
  const ::std::string& facilitys() const;
  void set_facilitys(const ::std::string& value);
  #if LANG_CXX11
  void set_facilitys(::std::string&& value);
  #endif
  void set_facilitys(const char* value);
  void set_facilitys(const void* value, size_t size);
  ::std::string* mutable_facilitys();
  ::std::string* release_facilitys();
  void set_allocated_facilitys(::std::string* facilitys);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_facilitys();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_facilitys(
      ::std::string* facilitys);

  // required bytes drops = 5;
  bool has_drops() const;
  void clear_drops();
  static const int kDropsFieldNumber = 5;
  const ::std::string& drops() const;
  void set_drops(const ::std::string& value);
  #if LANG_CXX11
  void set_drops(::std::string&& value);
  #endif
  void set_drops(const char* value);
  void set_drops(const void* value, size_t size);
  ::std::string* mutable_drops();
  ::std::string* release_drops();
  void set_allocated_drops(::std::string* drops);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drops();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drops(
      ::std::string* drops);

  // required bytes machine = 6;
  bool has_machine() const;
  void clear_machine();
  static const int kMachineFieldNumber = 6;
  const ::std::string& machine() const;
  void set_machine(const ::std::string& value);
  #if LANG_CXX11
  void set_machine(::std::string&& value);
  #endif
  void set_machine(const char* value);
  void set_machine(const void* value, size_t size);
  ::std::string* mutable_machine();
  ::std::string* release_machine();
  void set_allocated_machine(::std::string* machine);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_machine();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_machine(
      ::std::string* machine);

  // required bytes random_machine = 7;
  bool has_random_machine() const;
  void clear_random_machine();
  static const int kRandomMachineFieldNumber = 7;
  const ::std::string& random_machine() const;
  void set_random_machine(const ::std::string& value);
  #if LANG_CXX11
  void set_random_machine(::std::string&& value);
  #endif
  void set_random_machine(const char* value);
  void set_random_machine(const void* value, size_t size);
  ::std::string* mutable_random_machine();
  ::std::string* release_random_machine();
  void set_allocated_random_machine(::std::string* random_machine);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_machine();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_machine(
      ::std::string* random_machine);

  // required bytes altar = 8;
  bool has_altar() const;
  void clear_altar();
  static const int kAltarFieldNumber = 8;
  const ::std::string& altar() const;
  void set_altar(const ::std::string& value);
  #if LANG_CXX11
  void set_altar(::std::string&& value);
  #endif
  void set_altar(const char* value);
  void set_altar(const void* value, size_t size);
  ::std::string* mutable_altar();
  ::std::string* release_altar();
  void set_allocated_altar(::std::string* altar);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_altar();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_altar(
      ::std::string* altar);

  // required bytes room_size = 9;
  bool has_room_size() const;
  void clear_room_size();
  static const int kRoomSizeFieldNumber = 9;
  const ::std::string& room_size() const;
  void set_room_size(const ::std::string& value);
  #if LANG_CXX11
  void set_room_size(::std::string&& value);
  #endif
  void set_room_size(const char* value);
  void set_room_size(const void* value, size_t size);
  ::std::string* mutable_room_size();
  ::std::string* release_room_size();
  void set_allocated_room_size(::std::string* room_size);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_room_size();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room_size(
      ::std::string* room_size);

  // required bytes chest = 11;
  bool has_chest() const;
  void clear_chest();
  static const int kChestFieldNumber = 11;
  const ::std::string& chest() const;
  void set_chest(const ::std::string& value);
  #if LANG_CXX11
  void set_chest(::std::string&& value);
  #endif
  void set_chest(const char* value);
  void set_chest(const void* value, size_t size);
  ::std::string* mutable_chest();
  ::std::string* release_chest();
  void set_allocated_chest(::std::string* chest);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_chest();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chest(
      ::std::string* chest);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 groupid = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 exist_enemy = 10;
  bool has_exist_enemy() const;
  void clear_exist_enemy();
  static const int kExistEnemyFieldNumber = 10;
  ::google::protobuf::int32 exist_enemy() const;
  void set_exist_enemy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigPveRoomModel)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_type();
  void clear_has_type();
  void set_has_facilitys();
  void clear_has_facilitys();
  void set_has_drops();
  void clear_has_drops();
  void set_has_machine();
  void clear_has_machine();
  void set_has_random_machine();
  void clear_has_random_machine();
  void set_has_altar();
  void clear_has_altar();
  void set_has_room_size();
  void clear_has_room_size();
  void set_has_exist_enemy();
  void clear_has_exist_enemy();
  void set_has_chest();
  void clear_has_chest();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr facilitys_;
  ::google::protobuf::internal::ArenaStringPtr drops_;
  ::google::protobuf::internal::ArenaStringPtr machine_;
  ::google::protobuf::internal::ArenaStringPtr random_machine_;
  ::google::protobuf::internal::ArenaStringPtr altar_;
  ::google::protobuf::internal::ArenaStringPtr room_size_;
  ::google::protobuf::internal::ArenaStringPtr chest_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 exist_enemy_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigChest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigChest) */ {
 public:
  ConfigChest();
  virtual ~ConfigChest();

  ConfigChest(const ConfigChest& from);

  inline ConfigChest& operator=(const ConfigChest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigChest(ConfigChest&& from) noexcept
    : ConfigChest() {
    *this = ::std::move(from);
  }

  inline ConfigChest& operator=(ConfigChest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigChest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigChest* internal_default_instance() {
    return reinterpret_cast<const ConfigChest*>(
               &_ConfigChest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void UnsafeArenaSwap(ConfigChest* other);
  void Swap(ConfigChest* other);
  friend void swap(ConfigChest& a, ConfigChest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigChest* New() const final {
    return CreateMaybeMessage<ConfigChest>(NULL);
  }

  ConfigChest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigChest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigChest& from);
  void MergeFrom(const ConfigChest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigChest* other);
  protected:
  explicit ConfigChest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const void* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level(
      ::std::string* level);

  // required bytes drop_item = 4;
  bool has_drop_item() const;
  void clear_drop_item();
  static const int kDropItemFieldNumber = 4;
  const ::std::string& drop_item() const;
  void set_drop_item(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_item(::std::string&& value);
  #endif
  void set_drop_item(const char* value);
  void set_drop_item(const void* value, size_t size);
  ::std::string* mutable_drop_item();
  ::std::string* release_drop_item();
  void set_allocated_drop_item(::std::string* drop_item);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop_item();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop_item(
      ::std::string* drop_item);

  // required bytes drop_group = 5;
  bool has_drop_group() const;
  void clear_drop_group();
  static const int kDropGroupFieldNumber = 5;
  const ::std::string& drop_group() const;
  void set_drop_group(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_group(::std::string&& value);
  #endif
  void set_drop_group(const char* value);
  void set_drop_group(const void* value, size_t size);
  ::std::string* mutable_drop_group();
  ::std::string* release_drop_group();
  void set_allocated_drop_group(::std::string* drop_group);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop_group();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop_group(
      ::std::string* drop_group);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 phase = 2;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 2;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigChest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_phase();
  void clear_has_phase();
  void set_has_level();
  void clear_has_level();
  void set_has_drop_item();
  void clear_has_drop_item();
  void set_has_drop_group();
  void clear_has_drop_group();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr drop_item_;
  ::google::protobuf::internal::ArenaStringPtr drop_group_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 phase_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDropItemGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDropItemGroup) */ {
 public:
  ConfigDropItemGroup();
  virtual ~ConfigDropItemGroup();

  ConfigDropItemGroup(const ConfigDropItemGroup& from);

  inline ConfigDropItemGroup& operator=(const ConfigDropItemGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDropItemGroup(ConfigDropItemGroup&& from) noexcept
    : ConfigDropItemGroup() {
    *this = ::std::move(from);
  }

  inline ConfigDropItemGroup& operator=(ConfigDropItemGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDropItemGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDropItemGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigDropItemGroup*>(
               &_ConfigDropItemGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void UnsafeArenaSwap(ConfigDropItemGroup* other);
  void Swap(ConfigDropItemGroup* other);
  friend void swap(ConfigDropItemGroup& a, ConfigDropItemGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDropItemGroup* New() const final {
    return CreateMaybeMessage<ConfigDropItemGroup>(NULL);
  }

  ConfigDropItemGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDropItemGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDropItemGroup& from);
  void MergeFrom(const ConfigDropItemGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDropItemGroup* other);
  protected:
  explicit ConfigDropItemGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 groupid = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 index = 4;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // required int32 typeid = 5;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 5;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required int32 num_min = 6;
  bool has_num_min() const;
  void clear_num_min();
  static const int kNumMinFieldNumber = 6;
  ::google::protobuf::int32 num_min() const;
  void set_num_min(::google::protobuf::int32 value);

  // required int32 num_max = 7;
  bool has_num_max() const;
  void clear_num_max();
  static const int kNumMaxFieldNumber = 7;
  ::google::protobuf::int32 num_max() const;
  void set_num_max(::google::protobuf::int32 value);

  // required float probability = 8;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 8;
  float probability() const;
  void set_probability(float value);

  // @@protoc_insertion_point(class_scope:db.ConfigDropItemGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_type();
  void clear_has_type();
  void set_has_index();
  void clear_has_index();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_num_min();
  void clear_has_num_min();
  void set_has_num_max();
  void clear_has_num_max();
  void set_has_probability();
  void clear_has_probability();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 num_min_;
  ::google::protobuf::int32 num_max_;
  float probability_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigLottery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigLottery) */ {
 public:
  ConfigLottery();
  virtual ~ConfigLottery();

  ConfigLottery(const ConfigLottery& from);

  inline ConfigLottery& operator=(const ConfigLottery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigLottery(ConfigLottery&& from) noexcept
    : ConfigLottery() {
    *this = ::std::move(from);
  }

  inline ConfigLottery& operator=(ConfigLottery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigLottery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigLottery* internal_default_instance() {
    return reinterpret_cast<const ConfigLottery*>(
               &_ConfigLottery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void UnsafeArenaSwap(ConfigLottery* other);
  void Swap(ConfigLottery* other);
  friend void swap(ConfigLottery& a, ConfigLottery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigLottery* New() const final {
    return CreateMaybeMessage<ConfigLottery>(NULL);
  }

  ConfigLottery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigLottery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigLottery& from);
  void MergeFrom(const ConfigLottery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigLottery* other);
  protected:
  explicit ConfigLottery(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 3;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 3;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required bytes random_groups = 5;
  bool has_random_groups() const;
  void clear_random_groups();
  static const int kRandomGroupsFieldNumber = 5;
  const ::std::string& random_groups() const;
  void set_random_groups(const ::std::string& value);
  #if LANG_CXX11
  void set_random_groups(::std::string&& value);
  #endif
  void set_random_groups(const char* value);
  void set_random_groups(const void* value, size_t size);
  ::std::string* mutable_random_groups();
  ::std::string* release_random_groups();
  void set_allocated_random_groups(::std::string* random_groups);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_random_groups();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_random_groups(
      ::std::string* random_groups);

  // required bytes lowest_groups = 6;
  bool has_lowest_groups() const;
  void clear_lowest_groups();
  static const int kLowestGroupsFieldNumber = 6;
  const ::std::string& lowest_groups() const;
  void set_lowest_groups(const ::std::string& value);
  #if LANG_CXX11
  void set_lowest_groups(::std::string&& value);
  #endif
  void set_lowest_groups(const char* value);
  void set_lowest_groups(const void* value, size_t size);
  ::std::string* mutable_lowest_groups();
  ::std::string* release_lowest_groups();
  void set_allocated_lowest_groups(::std::string* lowest_groups);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_lowest_groups();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lowest_groups(
      ::std::string* lowest_groups);

  // required bytes activity_reward = 8;
  bool has_activity_reward() const;
  void clear_activity_reward();
  static const int kActivityRewardFieldNumber = 8;
  const ::std::string& activity_reward() const;
  void set_activity_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_activity_reward(::std::string&& value);
  #endif
  void set_activity_reward(const char* value);
  void set_activity_reward(const void* value, size_t size);
  ::std::string* mutable_activity_reward();
  ::std::string* release_activity_reward();
  void set_allocated_activity_reward(::std::string* activity_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_activity_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_activity_reward(
      ::std::string* activity_reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 limit_num = 4;
  bool has_limit_num() const;
  void clear_limit_num();
  static const int kLimitNumFieldNumber = 4;
  ::google::protobuf::int32 limit_num() const;
  void set_limit_num(::google::protobuf::int32 value);

  // required int32 activity_id = 7;
  bool has_activity_id() const;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 7;
  ::google::protobuf::int32 activity_id() const;
  void set_activity_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigLottery)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_cost();
  void clear_has_cost();
  void set_has_limit_num();
  void clear_has_limit_num();
  void set_has_random_groups();
  void clear_has_random_groups();
  void set_has_lowest_groups();
  void clear_has_lowest_groups();
  void set_has_activity_id();
  void clear_has_activity_id();
  void set_has_activity_reward();
  void clear_has_activity_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::internal::ArenaStringPtr random_groups_;
  ::google::protobuf::internal::ArenaStringPtr lowest_groups_;
  ::google::protobuf::internal::ArenaStringPtr activity_reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 limit_num_;
  ::google::protobuf::int32 activity_id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigSecretRoom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigSecretRoom) */ {
 public:
  ConfigSecretRoom();
  virtual ~ConfigSecretRoom();

  ConfigSecretRoom(const ConfigSecretRoom& from);

  inline ConfigSecretRoom& operator=(const ConfigSecretRoom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigSecretRoom(ConfigSecretRoom&& from) noexcept
    : ConfigSecretRoom() {
    *this = ::std::move(from);
  }

  inline ConfigSecretRoom& operator=(ConfigSecretRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigSecretRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigSecretRoom* internal_default_instance() {
    return reinterpret_cast<const ConfigSecretRoom*>(
               &_ConfigSecretRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void UnsafeArenaSwap(ConfigSecretRoom* other);
  void Swap(ConfigSecretRoom* other);
  friend void swap(ConfigSecretRoom& a, ConfigSecretRoom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigSecretRoom* New() const final {
    return CreateMaybeMessage<ConfigSecretRoom>(NULL);
  }

  ConfigSecretRoom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigSecretRoom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigSecretRoom& from);
  void MergeFrom(const ConfigSecretRoom& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSecretRoom* other);
  protected:
  explicit ConfigSecretRoom(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes lock_info = 3;
  bool has_lock_info() const;
  void clear_lock_info();
  static const int kLockInfoFieldNumber = 3;
  const ::std::string& lock_info() const;
  void set_lock_info(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_info(::std::string&& value);
  #endif
  void set_lock_info(const char* value);
  void set_lock_info(const void* value, size_t size);
  ::std::string* mutable_lock_info();
  ::std::string* release_lock_info();
  void set_allocated_lock_info(::std::string* lock_info);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_lock_info();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lock_info(
      ::std::string* lock_info);

  // required bytes trigger_element = 4;
  bool has_trigger_element() const;
  void clear_trigger_element();
  static const int kTriggerElementFieldNumber = 4;
  const ::std::string& trigger_element() const;
  void set_trigger_element(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_element(::std::string&& value);
  #endif
  void set_trigger_element(const char* value);
  void set_trigger_element(const void* value, size_t size);
  ::std::string* mutable_trigger_element();
  ::std::string* release_trigger_element();
  void set_allocated_trigger_element(::std::string* trigger_element);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_trigger_element();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trigger_element(
      ::std::string* trigger_element);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 model_id = 2;
  bool has_model_id() const;
  void clear_model_id();
  static const int kModelIdFieldNumber = 2;
  ::google::protobuf::int32 model_id() const;
  void set_model_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigSecretRoom)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_model_id();
  void clear_has_model_id();
  void set_has_lock_info();
  void clear_has_lock_info();
  void set_has_trigger_element();
  void clear_has_trigger_element();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr lock_info_;
  ::google::protobuf::internal::ArenaStringPtr trigger_element_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 model_id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigSecretRoomGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigSecretRoomGroup) */ {
 public:
  ConfigSecretRoomGroup();
  virtual ~ConfigSecretRoomGroup();

  ConfigSecretRoomGroup(const ConfigSecretRoomGroup& from);

  inline ConfigSecretRoomGroup& operator=(const ConfigSecretRoomGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigSecretRoomGroup(ConfigSecretRoomGroup&& from) noexcept
    : ConfigSecretRoomGroup() {
    *this = ::std::move(from);
  }

  inline ConfigSecretRoomGroup& operator=(ConfigSecretRoomGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigSecretRoomGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigSecretRoomGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigSecretRoomGroup*>(
               &_ConfigSecretRoomGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void UnsafeArenaSwap(ConfigSecretRoomGroup* other);
  void Swap(ConfigSecretRoomGroup* other);
  friend void swap(ConfigSecretRoomGroup& a, ConfigSecretRoomGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigSecretRoomGroup* New() const final {
    return CreateMaybeMessage<ConfigSecretRoomGroup>(NULL);
  }

  ConfigSecretRoomGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigSecretRoomGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigSecretRoomGroup& from);
  void MergeFrom(const ConfigSecretRoomGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSecretRoomGroup* other);
  protected:
  explicit ConfigSecretRoomGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes group_info = 2;
  bool has_group_info() const;
  void clear_group_info();
  static const int kGroupInfoFieldNumber = 2;
  const ::std::string& group_info() const;
  void set_group_info(const ::std::string& value);
  #if LANG_CXX11
  void set_group_info(::std::string&& value);
  #endif
  void set_group_info(const char* value);
  void set_group_info(const void* value, size_t size);
  ::std::string* mutable_group_info();
  ::std::string* release_group_info();
  void set_allocated_group_info(::std::string* group_info);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_group_info();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_info(
      ::std::string* group_info);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigSecretRoomGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_group_info();
  void clear_has_group_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr group_info_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigFarmSkillLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFarmSkillLevel) */ {
 public:
  ConfigFarmSkillLevel();
  virtual ~ConfigFarmSkillLevel();

  ConfigFarmSkillLevel(const ConfigFarmSkillLevel& from);

  inline ConfigFarmSkillLevel& operator=(const ConfigFarmSkillLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFarmSkillLevel(ConfigFarmSkillLevel&& from) noexcept
    : ConfigFarmSkillLevel() {
    *this = ::std::move(from);
  }

  inline ConfigFarmSkillLevel& operator=(ConfigFarmSkillLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFarmSkillLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFarmSkillLevel* internal_default_instance() {
    return reinterpret_cast<const ConfigFarmSkillLevel*>(
               &_ConfigFarmSkillLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void UnsafeArenaSwap(ConfigFarmSkillLevel* other);
  void Swap(ConfigFarmSkillLevel* other);
  friend void swap(ConfigFarmSkillLevel& a, ConfigFarmSkillLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFarmSkillLevel* New() const final {
    return CreateMaybeMessage<ConfigFarmSkillLevel>(NULL);
  }

  ConfigFarmSkillLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFarmSkillLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFarmSkillLevel& from);
  void MergeFrom(const ConfigFarmSkillLevel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFarmSkillLevel* other);
  protected:
  explicit ConfigFarmSkillLevel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes level_up_cost = 4;
  bool has_level_up_cost() const;
  void clear_level_up_cost();
  static const int kLevelUpCostFieldNumber = 4;
  const ::std::string& level_up_cost() const;
  void set_level_up_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_level_up_cost(::std::string&& value);
  #endif
  void set_level_up_cost(const char* value);
  void set_level_up_cost(const void* value, size_t size);
  ::std::string* mutable_level_up_cost();
  ::std::string* release_level_up_cost();
  void set_allocated_level_up_cost(::std::string* level_up_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level_up_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_up_cost(
      ::std::string* level_up_cost);

  // required bytes attribute = 5;
  bool has_attribute() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  const ::std::string& attribute() const;
  void set_attribute(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute(::std::string&& value);
  #endif
  void set_attribute(const char* value);
  void set_attribute(const void* value, size_t size);
  ::std::string* mutable_attribute();
  ::std::string* release_attribute();
  void set_allocated_attribute(::std::string* attribute);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attribute();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attribute(
      ::std::string* attribute);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 exp_max = 3;
  bool has_exp_max() const;
  void clear_exp_max();
  static const int kExpMaxFieldNumber = 3;
  ::google::protobuf::int32 exp_max() const;
  void set_exp_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigFarmSkillLevel)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_level();
  void clear_has_level();
  void set_has_exp_max();
  void clear_has_exp_max();
  void set_has_level_up_cost();
  void clear_has_level_up_cost();
  void set_has_attribute();
  void clear_has_attribute();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr level_up_cost_;
  ::google::protobuf::internal::ArenaStringPtr attribute_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_max_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigSkill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigSkill) */ {
 public:
  ConfigSkill();
  virtual ~ConfigSkill();

  ConfigSkill(const ConfigSkill& from);

  inline ConfigSkill& operator=(const ConfigSkill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigSkill(ConfigSkill&& from) noexcept
    : ConfigSkill() {
    *this = ::std::move(from);
  }

  inline ConfigSkill& operator=(ConfigSkill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigSkill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigSkill* internal_default_instance() {
    return reinterpret_cast<const ConfigSkill*>(
               &_ConfigSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void UnsafeArenaSwap(ConfigSkill* other);
  void Swap(ConfigSkill* other);
  friend void swap(ConfigSkill& a, ConfigSkill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigSkill* New() const final {
    return CreateMaybeMessage<ConfigSkill>(NULL);
  }

  ConfigSkill* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigSkill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigSkill& from);
  void MergeFrom(const ConfigSkill& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSkill* other);
  protected:
  explicit ConfigSkill(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes skill_name = 4;
  bool has_skill_name() const;
  void clear_skill_name();
  static const int kSkillNameFieldNumber = 4;
  const ::std::string& skill_name() const;
  void set_skill_name(const ::std::string& value);
  #if LANG_CXX11
  void set_skill_name(::std::string&& value);
  #endif
  void set_skill_name(const char* value);
  void set_skill_name(const void* value, size_t size);
  ::std::string* mutable_skill_name();
  ::std::string* release_skill_name();
  void set_allocated_skill_name(::std::string* skill_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_skill_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_name(
      ::std::string* skill_name);

  // required bytes description = 5;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const void* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_description();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // required bytes level_up_base_cost = 8;
  bool has_level_up_base_cost() const;
  void clear_level_up_base_cost();
  static const int kLevelUpBaseCostFieldNumber = 8;
  const ::std::string& level_up_base_cost() const;
  void set_level_up_base_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_level_up_base_cost(::std::string&& value);
  #endif
  void set_level_up_base_cost(const char* value);
  void set_level_up_base_cost(const void* value, size_t size);
  ::std::string* mutable_level_up_base_cost();
  ::std::string* release_level_up_base_cost();
  void set_allocated_level_up_base_cost(::std::string* level_up_base_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level_up_base_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_up_base_cost(
      ::std::string* level_up_base_cost);

  // required bytes level_up_cost = 9;
  bool has_level_up_cost() const;
  void clear_level_up_cost();
  static const int kLevelUpCostFieldNumber = 9;
  const ::std::string& level_up_cost() const;
  void set_level_up_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_level_up_cost(::std::string&& value);
  #endif
  void set_level_up_cost(const char* value);
  void set_level_up_cost(const void* value, size_t size);
  ::std::string* mutable_level_up_cost();
  ::std::string* release_level_up_cost();
  void set_allocated_level_up_cost(::std::string* level_up_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level_up_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_up_cost(
      ::std::string* level_up_cost);

  // required bytes target = 11;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 11;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const void* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_target();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      ::std::string* target);

  // required bytes attack = 15;
  bool has_attack() const;
  void clear_attack();
  static const int kAttackFieldNumber = 15;
  const ::std::string& attack() const;
  void set_attack(const ::std::string& value);
  #if LANG_CXX11
  void set_attack(::std::string&& value);
  #endif
  void set_attack(const char* value);
  void set_attack(const void* value, size_t size);
  ::std::string* mutable_attack();
  ::std::string* release_attack();
  void set_allocated_attack(::std::string* attack);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attack();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attack(
      ::std::string* attack);

  // required bytes attack_mode = 16;
  bool has_attack_mode() const;
  void clear_attack_mode();
  static const int kAttackModeFieldNumber = 16;
  const ::std::string& attack_mode() const;
  void set_attack_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_attack_mode(::std::string&& value);
  #endif
  void set_attack_mode(const char* value);
  void set_attack_mode(const void* value, size_t size);
  ::std::string* mutable_attack_mode();
  ::std::string* release_attack_mode();
  void set_allocated_attack_mode(::std::string* attack_mode);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attack_mode();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attack_mode(
      ::std::string* attack_mode);

  // required bytes trigger_self_buff = 17;
  bool has_trigger_self_buff() const;
  void clear_trigger_self_buff();
  static const int kTriggerSelfBuffFieldNumber = 17;
  const ::std::string& trigger_self_buff() const;
  void set_trigger_self_buff(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_self_buff(::std::string&& value);
  #endif
  void set_trigger_self_buff(const char* value);
  void set_trigger_self_buff(const void* value, size_t size);
  ::std::string* mutable_trigger_self_buff();
  ::std::string* release_trigger_self_buff();
  void set_allocated_trigger_self_buff(::std::string* trigger_self_buff);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_trigger_self_buff();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trigger_self_buff(
      ::std::string* trigger_self_buff);

  // required bytes trigger_enemy_buff = 18;
  bool has_trigger_enemy_buff() const;
  void clear_trigger_enemy_buff();
  static const int kTriggerEnemyBuffFieldNumber = 18;
  const ::std::string& trigger_enemy_buff() const;
  void set_trigger_enemy_buff(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_enemy_buff(::std::string&& value);
  #endif
  void set_trigger_enemy_buff(const char* value);
  void set_trigger_enemy_buff(const void* value, size_t size);
  ::std::string* mutable_trigger_enemy_buff();
  ::std::string* release_trigger_enemy_buff();
  void set_allocated_trigger_enemy_buff(::std::string* trigger_enemy_buff);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_trigger_enemy_buff();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trigger_enemy_buff(
      ::std::string* trigger_enemy_buff);

  // required bytes buff_mode = 19;
  bool has_buff_mode() const;
  void clear_buff_mode();
  static const int kBuffModeFieldNumber = 19;
  const ::std::string& buff_mode() const;
  void set_buff_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_buff_mode(::std::string&& value);
  #endif
  void set_buff_mode(const char* value);
  void set_buff_mode(const void* value, size_t size);
  ::std::string* mutable_buff_mode();
  ::std::string* release_buff_mode();
  void set_allocated_buff_mode(::std::string* buff_mode);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_buff_mode();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buff_mode(
      ::std::string* buff_mode);

  // required bytes item_add = 24;
  bool has_item_add() const;
  void clear_item_add();
  static const int kItemAddFieldNumber = 24;
  const ::std::string& item_add() const;
  void set_item_add(const ::std::string& value);
  #if LANG_CXX11
  void set_item_add(::std::string&& value);
  #endif
  void set_item_add(const char* value);
  void set_item_add(const void* value, size_t size);
  ::std::string* mutable_item_add();
  ::std::string* release_item_add();
  void set_allocated_item_add(::std::string* item_add);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_item_add();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_item_add(
      ::std::string* item_add);

  // required bytes attribute_add = 25;
  bool has_attribute_add() const;
  void clear_attribute_add();
  static const int kAttributeAddFieldNumber = 25;
  const ::std::string& attribute_add() const;
  void set_attribute_add(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute_add(::std::string&& value);
  #endif
  void set_attribute_add(const char* value);
  void set_attribute_add(const void* value, size_t size);
  ::std::string* mutable_attribute_add();
  ::std::string* release_attribute_add();
  void set_allocated_attribute_add(::std::string* attribute_add);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attribute_add();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attribute_add(
      ::std::string* attribute_add);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required uint64 groupid = 3;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 3;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // required int32 skill_level = 2;
  bool has_skill_level() const;
  void clear_skill_level();
  static const int kSkillLevelFieldNumber = 2;
  ::google::protobuf::int32 skill_level() const;
  void set_skill_level(::google::protobuf::int32 value);

  // required int32 need_star = 6;
  bool has_need_star() const;
  void clear_need_star();
  static const int kNeedStarFieldNumber = 6;
  ::google::protobuf::int32 need_star() const;
  void set_need_star(::google::protobuf::int32 value);

  // required int32 need_level = 7;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 7;
  ::google::protobuf::int32 need_level() const;
  void set_need_level(::google::protobuf::int32 value);

  // required int32 chip_cost = 10;
  bool has_chip_cost() const;
  void clear_chip_cost();
  static const int kChipCostFieldNumber = 10;
  ::google::protobuf::int32 chip_cost() const;
  void set_chip_cost(::google::protobuf::int32 value);

  // required int32 type = 12;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 12;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 priority = 13;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 13;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // required int32 attack_attr = 14;
  bool has_attack_attr() const;
  void clear_attack_attr();
  static const int kAttackAttrFieldNumber = 14;
  ::google::protobuf::int32 attack_attr() const;
  void set_attack_attr(::google::protobuf::int32 value);

  // required int32 cd = 20;
  bool has_cd() const;
  void clear_cd();
  static const int kCdFieldNumber = 20;
  ::google::protobuf::int32 cd() const;
  void set_cd(::google::protobuf::int32 value);

  // required int32 product = 21;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 21;
  ::google::protobuf::int32 product() const;
  void set_product(::google::protobuf::int32 value);

  // required int32 attack_range = 22;
  bool has_attack_range() const;
  void clear_attack_range();
  static const int kAttackRangeFieldNumber = 22;
  ::google::protobuf::int32 attack_range() const;
  void set_attack_range(::google::protobuf::int32 value);

  // required int32 special_effect = 23;
  bool has_special_effect() const;
  void clear_special_effect();
  static const int kSpecialEffectFieldNumber = 23;
  ::google::protobuf::int32 special_effect() const;
  void set_special_effect(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigSkill)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_skill_level();
  void clear_has_skill_level();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_skill_name();
  void clear_has_skill_name();
  void set_has_description();
  void clear_has_description();
  void set_has_need_star();
  void clear_has_need_star();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_level_up_base_cost();
  void clear_has_level_up_base_cost();
  void set_has_level_up_cost();
  void clear_has_level_up_cost();
  void set_has_chip_cost();
  void clear_has_chip_cost();
  void set_has_target();
  void clear_has_target();
  void set_has_type();
  void clear_has_type();
  void set_has_priority();
  void clear_has_priority();
  void set_has_attack_attr();
  void clear_has_attack_attr();
  void set_has_attack();
  void clear_has_attack();
  void set_has_attack_mode();
  void clear_has_attack_mode();
  void set_has_trigger_self_buff();
  void clear_has_trigger_self_buff();
  void set_has_trigger_enemy_buff();
  void clear_has_trigger_enemy_buff();
  void set_has_buff_mode();
  void clear_has_buff_mode();
  void set_has_cd();
  void clear_has_cd();
  void set_has_product();
  void clear_has_product();
  void set_has_attack_range();
  void clear_has_attack_range();
  void set_has_special_effect();
  void clear_has_special_effect();
  void set_has_item_add();
  void clear_has_item_add();
  void set_has_attribute_add();
  void clear_has_attribute_add();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr skill_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr level_up_base_cost_;
  ::google::protobuf::internal::ArenaStringPtr level_up_cost_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  ::google::protobuf::internal::ArenaStringPtr attack_;
  ::google::protobuf::internal::ArenaStringPtr attack_mode_;
  ::google::protobuf::internal::ArenaStringPtr trigger_self_buff_;
  ::google::protobuf::internal::ArenaStringPtr trigger_enemy_buff_;
  ::google::protobuf::internal::ArenaStringPtr buff_mode_;
  ::google::protobuf::internal::ArenaStringPtr item_add_;
  ::google::protobuf::internal::ArenaStringPtr attribute_add_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 skill_level_;
  ::google::protobuf::int32 need_star_;
  ::google::protobuf::int32 need_level_;
  ::google::protobuf::int32 chip_cost_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int32 attack_attr_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 product_;
  ::google::protobuf::int32 attack_range_;
  ::google::protobuf::int32 special_effect_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigFightRandomGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFightRandomGroup) */ {
 public:
  ConfigFightRandomGroup();
  virtual ~ConfigFightRandomGroup();

  ConfigFightRandomGroup(const ConfigFightRandomGroup& from);

  inline ConfigFightRandomGroup& operator=(const ConfigFightRandomGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFightRandomGroup(ConfigFightRandomGroup&& from) noexcept
    : ConfigFightRandomGroup() {
    *this = ::std::move(from);
  }

  inline ConfigFightRandomGroup& operator=(ConfigFightRandomGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFightRandomGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFightRandomGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigFightRandomGroup*>(
               &_ConfigFightRandomGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void UnsafeArenaSwap(ConfigFightRandomGroup* other);
  void Swap(ConfigFightRandomGroup* other);
  friend void swap(ConfigFightRandomGroup& a, ConfigFightRandomGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFightRandomGroup* New() const final {
    return CreateMaybeMessage<ConfigFightRandomGroup>(NULL);
  }

  ConfigFightRandomGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFightRandomGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFightRandomGroup& from);
  void MergeFrom(const ConfigFightRandomGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFightRandomGroup* other);
  protected:
  explicit ConfigFightRandomGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 groupid = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  ::google::protobuf::int32 groupid() const;
  void set_groupid(::google::protobuf::int32 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 index = 4;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // required int32 typeid = 5;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 5;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // required float probability = 6;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 6;
  float probability() const;
  void set_probability(float value);

  // @@protoc_insertion_point(class_scope:db.ConfigFightRandomGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_type();
  void clear_has_type();
  void set_has_index();
  void clear_has_index();
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_probability();
  void clear_has_probability();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 typeid__;
  float probability_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigNpcFight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigNpcFight) */ {
 public:
  ConfigNpcFight();
  virtual ~ConfigNpcFight();

  ConfigNpcFight(const ConfigNpcFight& from);

  inline ConfigNpcFight& operator=(const ConfigNpcFight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigNpcFight(ConfigNpcFight&& from) noexcept
    : ConfigNpcFight() {
    *this = ::std::move(from);
  }

  inline ConfigNpcFight& operator=(ConfigNpcFight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigNpcFight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigNpcFight* internal_default_instance() {
    return reinterpret_cast<const ConfigNpcFight*>(
               &_ConfigNpcFight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void UnsafeArenaSwap(ConfigNpcFight* other);
  void Swap(ConfigNpcFight* other);
  friend void swap(ConfigNpcFight& a, ConfigNpcFight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigNpcFight* New() const final {
    return CreateMaybeMessage<ConfigNpcFight>(NULL);
  }

  ConfigNpcFight* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigNpcFight>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigNpcFight& from);
  void MergeFrom(const ConfigNpcFight& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigNpcFight* other);
  protected:
  explicit ConfigNpcFight(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes effect = 4;
  bool has_effect() const;
  void clear_effect();
  static const int kEffectFieldNumber = 4;
  const ::std::string& effect() const;
  void set_effect(const ::std::string& value);
  #if LANG_CXX11
  void set_effect(::std::string&& value);
  #endif
  void set_effect(const char* value);
  void set_effect(const void* value, size_t size);
  ::std::string* mutable_effect();
  ::std::string* release_effect();
  void set_allocated_effect(::std::string* effect);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_effect();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_effect(
      ::std::string* effect);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required uint64 model_id = 2;
  bool has_model_id() const;
  void clear_model_id();
  static const int kModelIdFieldNumber = 2;
  ::google::protobuf::uint64 model_id() const;
  void set_model_id(::google::protobuf::uint64 value);

  // required int32 move_speed = 3;
  bool has_move_speed() const;
  void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 3;
  ::google::protobuf::int32 move_speed() const;
  void set_move_speed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigNpcFight)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_model_id();
  void clear_has_model_id();
  void set_has_move_speed();
  void clear_has_move_speed();
  void set_has_effect();
  void clear_has_effect();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr effect_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 model_id_;
  ::google::protobuf::int32 move_speed_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigPvePlayerDrop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigPvePlayerDrop) */ {
 public:
  ConfigPvePlayerDrop();
  virtual ~ConfigPvePlayerDrop();

  ConfigPvePlayerDrop(const ConfigPvePlayerDrop& from);

  inline ConfigPvePlayerDrop& operator=(const ConfigPvePlayerDrop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigPvePlayerDrop(ConfigPvePlayerDrop&& from) noexcept
    : ConfigPvePlayerDrop() {
    *this = ::std::move(from);
  }

  inline ConfigPvePlayerDrop& operator=(ConfigPvePlayerDrop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigPvePlayerDrop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPvePlayerDrop* internal_default_instance() {
    return reinterpret_cast<const ConfigPvePlayerDrop*>(
               &_ConfigPvePlayerDrop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void UnsafeArenaSwap(ConfigPvePlayerDrop* other);
  void Swap(ConfigPvePlayerDrop* other);
  friend void swap(ConfigPvePlayerDrop& a, ConfigPvePlayerDrop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigPvePlayerDrop* New() const final {
    return CreateMaybeMessage<ConfigPvePlayerDrop>(NULL);
  }

  ConfigPvePlayerDrop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPvePlayerDrop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigPvePlayerDrop& from);
  void MergeFrom(const ConfigPvePlayerDrop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPvePlayerDrop* other);
  protected:
  explicit ConfigPvePlayerDrop(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes drop = 3;
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 3;
  const ::std::string& drop() const;
  void set_drop(const ::std::string& value);
  #if LANG_CXX11
  void set_drop(::std::string&& value);
  #endif
  void set_drop(const char* value);
  void set_drop(const void* value, size_t size);
  ::std::string* mutable_drop();
  ::std::string* release_drop();
  void set_allocated_drop(::std::string* drop);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop(
      ::std::string* drop);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required uint64 facility = 2;
  bool has_facility() const;
  void clear_facility();
  static const int kFacilityFieldNumber = 2;
  ::google::protobuf::uint64 facility() const;
  void set_facility(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:db.ConfigPvePlayerDrop)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_facility();
  void clear_has_facility();
  void set_has_drop();
  void clear_has_drop();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr drop_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 facility_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCardTalent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigCardTalent) */ {
 public:
  ConfigCardTalent();
  virtual ~ConfigCardTalent();

  ConfigCardTalent(const ConfigCardTalent& from);

  inline ConfigCardTalent& operator=(const ConfigCardTalent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCardTalent(ConfigCardTalent&& from) noexcept
    : ConfigCardTalent() {
    *this = ::std::move(from);
  }

  inline ConfigCardTalent& operator=(ConfigCardTalent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCardTalent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCardTalent* internal_default_instance() {
    return reinterpret_cast<const ConfigCardTalent*>(
               &_ConfigCardTalent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void UnsafeArenaSwap(ConfigCardTalent* other);
  void Swap(ConfigCardTalent* other);
  friend void swap(ConfigCardTalent& a, ConfigCardTalent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCardTalent* New() const final {
    return CreateMaybeMessage<ConfigCardTalent>(NULL);
  }

  ConfigCardTalent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCardTalent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCardTalent& from);
  void MergeFrom(const ConfigCardTalent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCardTalent* other);
  protected:
  explicit ConfigCardTalent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes effect = 6;
  bool has_effect() const;
  void clear_effect();
  static const int kEffectFieldNumber = 6;
  const ::std::string& effect() const;
  void set_effect(const ::std::string& value);
  #if LANG_CXX11
  void set_effect(::std::string&& value);
  #endif
  void set_effect(const char* value);
  void set_effect(const void* value, size_t size);
  ::std::string* mutable_effect();
  ::std::string* release_effect();
  void set_allocated_effect(::std::string* effect);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_effect();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_effect(
      ::std::string* effect);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required uint64 skill_id = 4;
  bool has_skill_id() const;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 4;
  ::google::protobuf::uint64 skill_id() const;
  void set_skill_id(::google::protobuf::uint64 value);

  // required uint64 farm_skill_id = 5;
  bool has_farm_skill_id() const;
  void clear_farm_skill_id();
  static const int kFarmSkillIdFieldNumber = 5;
  ::google::protobuf::uint64 farm_skill_id() const;
  void set_farm_skill_id(::google::protobuf::uint64 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigCardTalent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_level();
  void clear_has_level();
  void set_has_name();
  void clear_has_name();
  void set_has_skill_id();
  void clear_has_skill_id();
  void set_has_farm_skill_id();
  void clear_has_farm_skill_id();
  void set_has_effect();
  void clear_has_effect();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr effect_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 skill_id_;
  ::google::protobuf::uint64 farm_skill_id_;
  ::google::protobuf::int32 level_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigShoppingVitality : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigShoppingVitality) */ {
 public:
  ConfigShoppingVitality();
  virtual ~ConfigShoppingVitality();

  ConfigShoppingVitality(const ConfigShoppingVitality& from);

  inline ConfigShoppingVitality& operator=(const ConfigShoppingVitality& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigShoppingVitality(ConfigShoppingVitality&& from) noexcept
    : ConfigShoppingVitality() {
    *this = ::std::move(from);
  }

  inline ConfigShoppingVitality& operator=(ConfigShoppingVitality&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigShoppingVitality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigShoppingVitality* internal_default_instance() {
    return reinterpret_cast<const ConfigShoppingVitality*>(
               &_ConfigShoppingVitality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void UnsafeArenaSwap(ConfigShoppingVitality* other);
  void Swap(ConfigShoppingVitality* other);
  friend void swap(ConfigShoppingVitality& a, ConfigShoppingVitality& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigShoppingVitality* New() const final {
    return CreateMaybeMessage<ConfigShoppingVitality>(NULL);
  }

  ConfigShoppingVitality* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigShoppingVitality>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigShoppingVitality& from);
  void MergeFrom(const ConfigShoppingVitality& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigShoppingVitality* other);
  protected:
  explicit ConfigShoppingVitality(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // required int32 get_vitality = 3;
  bool has_get_vitality() const;
  void clear_get_vitality();
  static const int kGetVitalityFieldNumber = 3;
  ::google::protobuf::int32 get_vitality() const;
  void set_get_vitality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigShoppingVitality)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_price();
  void clear_has_price();
  void set_has_get_vitality();
  void clear_has_get_vitality();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 get_vitality_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigRankingReward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigRankingReward) */ {
 public:
  ConfigRankingReward();
  virtual ~ConfigRankingReward();

  ConfigRankingReward(const ConfigRankingReward& from);

  inline ConfigRankingReward& operator=(const ConfigRankingReward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigRankingReward(ConfigRankingReward&& from) noexcept
    : ConfigRankingReward() {
    *this = ::std::move(from);
  }

  inline ConfigRankingReward& operator=(ConfigRankingReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRankingReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRankingReward* internal_default_instance() {
    return reinterpret_cast<const ConfigRankingReward*>(
               &_ConfigRankingReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void UnsafeArenaSwap(ConfigRankingReward* other);
  void Swap(ConfigRankingReward* other);
  friend void swap(ConfigRankingReward& a, ConfigRankingReward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigRankingReward* New() const final {
    return CreateMaybeMessage<ConfigRankingReward>(NULL);
  }

  ConfigRankingReward* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRankingReward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigRankingReward& from);
  void MergeFrom(const ConfigRankingReward& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRankingReward* other);
  protected:
  explicit ConfigRankingReward(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ranking = 2;
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 2;
  const ::std::string& ranking() const;
  void set_ranking(const ::std::string& value);
  #if LANG_CXX11
  void set_ranking(::std::string&& value);
  #endif
  void set_ranking(const char* value);
  void set_ranking(const void* value, size_t size);
  ::std::string* mutable_ranking();
  ::std::string* release_ranking();
  void set_allocated_ranking(::std::string* ranking);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ranking();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ranking(
      ::std::string* ranking);

  // required bytes daily_reward = 4;
  bool has_daily_reward() const;
  void clear_daily_reward();
  static const int kDailyRewardFieldNumber = 4;
  const ::std::string& daily_reward() const;
  void set_daily_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_daily_reward(::std::string&& value);
  #endif
  void set_daily_reward(const char* value);
  void set_daily_reward(const void* value, size_t size);
  ::std::string* mutable_daily_reward();
  ::std::string* release_daily_reward();
  void set_allocated_daily_reward(::std::string* daily_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_daily_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_daily_reward(
      ::std::string* daily_reward);

  // required bytes weekly_reward = 5;
  bool has_weekly_reward() const;
  void clear_weekly_reward();
  static const int kWeeklyRewardFieldNumber = 5;
  const ::std::string& weekly_reward() const;
  void set_weekly_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_weekly_reward(::std::string&& value);
  #endif
  void set_weekly_reward(const char* value);
  void set_weekly_reward(const void* value, size_t size);
  ::std::string* mutable_weekly_reward();
  ::std::string* release_weekly_reward();
  void set_allocated_weekly_reward(::std::string* weekly_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_weekly_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_weekly_reward(
      ::std::string* weekly_reward);

  // required bytes monthly_reward = 6;
  bool has_monthly_reward() const;
  void clear_monthly_reward();
  static const int kMonthlyRewardFieldNumber = 6;
  const ::std::string& monthly_reward() const;
  void set_monthly_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_monthly_reward(::std::string&& value);
  #endif
  void set_monthly_reward(const char* value);
  void set_monthly_reward(const void* value, size_t size);
  ::std::string* mutable_monthly_reward();
  ::std::string* release_monthly_reward();
  void set_allocated_monthly_reward(::std::string* monthly_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_monthly_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_monthly_reward(
      ::std::string* monthly_reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 division = 3;
  bool has_division() const;
  void clear_division();
  static const int kDivisionFieldNumber = 3;
  ::google::protobuf::int32 division() const;
  void set_division(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigRankingReward)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_ranking();
  void clear_has_ranking();
  void set_has_division();
  void clear_has_division();
  void set_has_daily_reward();
  void clear_has_daily_reward();
  void set_has_weekly_reward();
  void clear_has_weekly_reward();
  void set_has_monthly_reward();
  void clear_has_monthly_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ranking_;
  ::google::protobuf::internal::ArenaStringPtr daily_reward_;
  ::google::protobuf::internal::ArenaStringPtr weekly_reward_;
  ::google::protobuf::internal::ArenaStringPtr monthly_reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 division_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigFightElementConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFightElementConnect) */ {
 public:
  ConfigFightElementConnect();
  virtual ~ConfigFightElementConnect();

  ConfigFightElementConnect(const ConfigFightElementConnect& from);

  inline ConfigFightElementConnect& operator=(const ConfigFightElementConnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFightElementConnect(ConfigFightElementConnect&& from) noexcept
    : ConfigFightElementConnect() {
    *this = ::std::move(from);
  }

  inline ConfigFightElementConnect& operator=(ConfigFightElementConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFightElementConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFightElementConnect* internal_default_instance() {
    return reinterpret_cast<const ConfigFightElementConnect*>(
               &_ConfigFightElementConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void UnsafeArenaSwap(ConfigFightElementConnect* other);
  void Swap(ConfigFightElementConnect* other);
  friend void swap(ConfigFightElementConnect& a, ConfigFightElementConnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFightElementConnect* New() const final {
    return CreateMaybeMessage<ConfigFightElementConnect>(NULL);
  }

  ConfigFightElementConnect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFightElementConnect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFightElementConnect& from);
  void MergeFrom(const ConfigFightElementConnect& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFightElementConnect* other);
  protected:
  explicit ConfigFightElementConnect(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes connect_element = 3;
  bool has_connect_element() const;
  void clear_connect_element();
  static const int kConnectElementFieldNumber = 3;
  const ::std::string& connect_element() const;
  void set_connect_element(const ::std::string& value);
  #if LANG_CXX11
  void set_connect_element(::std::string&& value);
  #endif
  void set_connect_element(const char* value);
  void set_connect_element(const void* value, size_t size);
  ::std::string* mutable_connect_element();
  ::std::string* release_connect_element();
  void set_allocated_connect_element(::std::string* connect_element);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_connect_element();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_connect_element(
      ::std::string* connect_element);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigFightElementConnect)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_connect_element();
  void clear_has_connect_element();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr connect_element_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigWildIslandLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigWildIslandLevel) */ {
 public:
  ConfigWildIslandLevel();
  virtual ~ConfigWildIslandLevel();

  ConfigWildIslandLevel(const ConfigWildIslandLevel& from);

  inline ConfigWildIslandLevel& operator=(const ConfigWildIslandLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigWildIslandLevel(ConfigWildIslandLevel&& from) noexcept
    : ConfigWildIslandLevel() {
    *this = ::std::move(from);
  }

  inline ConfigWildIslandLevel& operator=(ConfigWildIslandLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigWildIslandLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigWildIslandLevel* internal_default_instance() {
    return reinterpret_cast<const ConfigWildIslandLevel*>(
               &_ConfigWildIslandLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void UnsafeArenaSwap(ConfigWildIslandLevel* other);
  void Swap(ConfigWildIslandLevel* other);
  friend void swap(ConfigWildIslandLevel& a, ConfigWildIslandLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigWildIslandLevel* New() const final {
    return CreateMaybeMessage<ConfigWildIslandLevel>(NULL);
  }

  ConfigWildIslandLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigWildIslandLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigWildIslandLevel& from);
  void MergeFrom(const ConfigWildIslandLevel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigWildIslandLevel* other);
  protected:
  explicit ConfigWildIslandLevel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes repair_cost = 10;
  bool has_repair_cost() const;
  void clear_repair_cost();
  static const int kRepairCostFieldNumber = 10;
  const ::std::string& repair_cost() const;
  void set_repair_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_repair_cost(::std::string&& value);
  #endif
  void set_repair_cost(const char* value);
  void set_repair_cost(const void* value, size_t size);
  ::std::string* mutable_repair_cost();
  ::std::string* release_repair_cost();
  void set_allocated_repair_cost(::std::string* repair_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_repair_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_repair_cost(
      ::std::string* repair_cost);

  // required bytes reward = 13;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 13;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int64 islandid = 2;
  bool has_islandid() const;
  void clear_islandid();
  static const int kIslandidFieldNumber = 2;
  ::google::protobuf::int64 islandid() const;
  void set_islandid(::google::protobuf::int64 value);

  // required int32 rank = 4;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 4;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // required int32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 condition = 6;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 6;
  ::google::protobuf::int32 condition() const;
  void set_condition(::google::protobuf::int32 value);

  // required int32 vitality_cost = 7;
  bool has_vitality_cost() const;
  void clear_vitality_cost();
  static const int kVitalityCostFieldNumber = 7;
  ::google::protobuf::int32 vitality_cost() const;
  void set_vitality_cost(::google::protobuf::int32 value);

  // required int32 worker_max = 8;
  bool has_worker_max() const;
  void clear_worker_max();
  static const int kWorkerMaxFieldNumber = 8;
  ::google::protobuf::int32 worker_max() const;
  void set_worker_max(::google::protobuf::int32 value);

  // required int32 produce_add = 9;
  bool has_produce_add() const;
  void clear_produce_add();
  static const int kProduceAddFieldNumber = 9;
  ::google::protobuf::int32 produce_add() const;
  void set_produce_add(::google::protobuf::int32 value);

  // required int32 model_id = 11;
  bool has_model_id() const;
  void clear_model_id();
  static const int kModelIdFieldNumber = 11;
  ::google::protobuf::int32 model_id() const;
  void set_model_id(::google::protobuf::int32 value);

  // required int32 map_model = 12;
  bool has_map_model() const;
  void clear_map_model();
  static const int kMapModelFieldNumber = 12;
  ::google::protobuf::int32 map_model() const;
  void set_map_model(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigWildIslandLevel)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_islandid();
  void clear_has_islandid();
  void set_has_name();
  void clear_has_name();
  void set_has_rank();
  void clear_has_rank();
  void set_has_level();
  void clear_has_level();
  void set_has_condition();
  void clear_has_condition();
  void set_has_vitality_cost();
  void clear_has_vitality_cost();
  void set_has_worker_max();
  void clear_has_worker_max();
  void set_has_produce_add();
  void clear_has_produce_add();
  void set_has_repair_cost();
  void clear_has_repair_cost();
  void set_has_model_id();
  void clear_has_model_id();
  void set_has_map_model();
  void clear_has_map_model();
  void set_has_reward();
  void clear_has_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr repair_cost_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 islandid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 condition_;
  ::google::protobuf::int32 vitality_cost_;
  ::google::protobuf::int32 worker_max_;
  ::google::protobuf::int32 produce_add_;
  ::google::protobuf::int32 model_id_;
  ::google::protobuf::int32 map_model_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigBusinessman : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigBusinessman) */ {
 public:
  ConfigBusinessman();
  virtual ~ConfigBusinessman();

  ConfigBusinessman(const ConfigBusinessman& from);

  inline ConfigBusinessman& operator=(const ConfigBusinessman& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigBusinessman(ConfigBusinessman&& from) noexcept
    : ConfigBusinessman() {
    *this = ::std::move(from);
  }

  inline ConfigBusinessman& operator=(ConfigBusinessman&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigBusinessman& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigBusinessman* internal_default_instance() {
    return reinterpret_cast<const ConfigBusinessman*>(
               &_ConfigBusinessman_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void UnsafeArenaSwap(ConfigBusinessman* other);
  void Swap(ConfigBusinessman* other);
  friend void swap(ConfigBusinessman& a, ConfigBusinessman& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigBusinessman* New() const final {
    return CreateMaybeMessage<ConfigBusinessman>(NULL);
  }

  ConfigBusinessman* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigBusinessman>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigBusinessman& from);
  void MergeFrom(const ConfigBusinessman& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigBusinessman* other);
  protected:
  explicit ConfigBusinessman(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes exchange_need1 = 11;
  bool has_exchange_need1() const;
  void clear_exchange_need1();
  static const int kExchangeNeed1FieldNumber = 11;
  const ::std::string& exchange_need1() const;
  void set_exchange_need1(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_need1(::std::string&& value);
  #endif
  void set_exchange_need1(const char* value);
  void set_exchange_need1(const void* value, size_t size);
  ::std::string* mutable_exchange_need1();
  ::std::string* release_exchange_need1();
  void set_allocated_exchange_need1(::std::string* exchange_need1);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_exchange_need1();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_need1(
      ::std::string* exchange_need1);

  // required bytes exchange_reward1 = 12;
  bool has_exchange_reward1() const;
  void clear_exchange_reward1();
  static const int kExchangeReward1FieldNumber = 12;
  const ::std::string& exchange_reward1() const;
  void set_exchange_reward1(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_reward1(::std::string&& value);
  #endif
  void set_exchange_reward1(const char* value);
  void set_exchange_reward1(const void* value, size_t size);
  ::std::string* mutable_exchange_reward1();
  ::std::string* release_exchange_reward1();
  void set_allocated_exchange_reward1(::std::string* exchange_reward1);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_exchange_reward1();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_reward1(
      ::std::string* exchange_reward1);

  // required bytes exchange_need2 = 13;
  bool has_exchange_need2() const;
  void clear_exchange_need2();
  static const int kExchangeNeed2FieldNumber = 13;
  const ::std::string& exchange_need2() const;
  void set_exchange_need2(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_need2(::std::string&& value);
  #endif
  void set_exchange_need2(const char* value);
  void set_exchange_need2(const void* value, size_t size);
  ::std::string* mutable_exchange_need2();
  ::std::string* release_exchange_need2();
  void set_allocated_exchange_need2(::std::string* exchange_need2);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_exchange_need2();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_need2(
      ::std::string* exchange_need2);

  // required bytes exchange_reward2 = 14;
  bool has_exchange_reward2() const;
  void clear_exchange_reward2();
  static const int kExchangeReward2FieldNumber = 14;
  const ::std::string& exchange_reward2() const;
  void set_exchange_reward2(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_reward2(::std::string&& value);
  #endif
  void set_exchange_reward2(const char* value);
  void set_exchange_reward2(const void* value, size_t size);
  ::std::string* mutable_exchange_reward2();
  ::std::string* release_exchange_reward2();
  void set_allocated_exchange_reward2(::std::string* exchange_reward2);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_exchange_reward2();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_reward2(
      ::std::string* exchange_reward2);

  // required bytes exchange_need3 = 15;
  bool has_exchange_need3() const;
  void clear_exchange_need3();
  static const int kExchangeNeed3FieldNumber = 15;
  const ::std::string& exchange_need3() const;
  void set_exchange_need3(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_need3(::std::string&& value);
  #endif
  void set_exchange_need3(const char* value);
  void set_exchange_need3(const void* value, size_t size);
  ::std::string* mutable_exchange_need3();
  ::std::string* release_exchange_need3();
  void set_allocated_exchange_need3(::std::string* exchange_need3);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_exchange_need3();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_need3(
      ::std::string* exchange_need3);

  // required bytes exchange_reward3 = 16;
  bool has_exchange_reward3() const;
  void clear_exchange_reward3();
  static const int kExchangeReward3FieldNumber = 16;
  const ::std::string& exchange_reward3() const;
  void set_exchange_reward3(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_reward3(::std::string&& value);
  #endif
  void set_exchange_reward3(const char* value);
  void set_exchange_reward3(const void* value, size_t size);
  ::std::string* mutable_exchange_reward3();
  ::std::string* release_exchange_reward3();
  void set_allocated_exchange_reward3(::std::string* exchange_reward3);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_exchange_reward3();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_reward3(
      ::std::string* exchange_reward3);

  // required bytes goods_num = 21;
  bool has_goods_num() const;
  void clear_goods_num();
  static const int kGoodsNumFieldNumber = 21;
  const ::std::string& goods_num() const;
  void set_goods_num(const ::std::string& value);
  #if LANG_CXX11
  void set_goods_num(::std::string&& value);
  #endif
  void set_goods_num(const char* value);
  void set_goods_num(const void* value, size_t size);
  ::std::string* mutable_goods_num();
  ::std::string* release_goods_num();
  void set_allocated_goods_num(::std::string* goods_num);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_goods_num();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_goods_num(
      ::std::string* goods_num);

  // required bytes goods = 22;
  bool has_goods() const;
  void clear_goods();
  static const int kGoodsFieldNumber = 22;
  const ::std::string& goods() const;
  void set_goods(const ::std::string& value);
  #if LANG_CXX11
  void set_goods(::std::string&& value);
  #endif
  void set_goods(const char* value);
  void set_goods(const void* value, size_t size);
  ::std::string* mutable_goods();
  ::std::string* release_goods();
  void set_allocated_goods(::std::string* goods);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_goods();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_goods(
      ::std::string* goods);

  // required bytes discount_num = 24;
  bool has_discount_num() const;
  void clear_discount_num();
  static const int kDiscountNumFieldNumber = 24;
  const ::std::string& discount_num() const;
  void set_discount_num(const ::std::string& value);
  #if LANG_CXX11
  void set_discount_num(::std::string&& value);
  #endif
  void set_discount_num(const char* value);
  void set_discount_num(const void* value, size_t size);
  ::std::string* mutable_discount_num();
  ::std::string* release_discount_num();
  void set_allocated_discount_num(::std::string* discount_num);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_discount_num();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_discount_num(
      ::std::string* discount_num);

  // required bytes price_fluctuation = 25;
  bool has_price_fluctuation() const;
  void clear_price_fluctuation();
  static const int kPriceFluctuationFieldNumber = 25;
  const ::std::string& price_fluctuation() const;
  void set_price_fluctuation(const ::std::string& value);
  #if LANG_CXX11
  void set_price_fluctuation(::std::string&& value);
  #endif
  void set_price_fluctuation(const char* value);
  void set_price_fluctuation(const void* value, size_t size);
  ::std::string* mutable_price_fluctuation();
  ::std::string* release_price_fluctuation();
  void set_allocated_price_fluctuation(::std::string* price_fluctuation);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_price_fluctuation();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_price_fluctuation(
      ::std::string* price_fluctuation);

  // required bytes bargain = 26;
  bool has_bargain() const;
  void clear_bargain();
  static const int kBargainFieldNumber = 26;
  const ::std::string& bargain() const;
  void set_bargain(const ::std::string& value);
  #if LANG_CXX11
  void set_bargain(::std::string&& value);
  #endif
  void set_bargain(const char* value);
  void set_bargain(const void* value, size_t size);
  ::std::string* mutable_bargain();
  ::std::string* release_bargain();
  void set_allocated_bargain(::std::string* bargain);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_bargain();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bargain(
      ::std::string* bargain);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required float discount_probability = 23;
  bool has_discount_probability() const;
  void clear_discount_probability();
  static const int kDiscountProbabilityFieldNumber = 23;
  float discount_probability() const;
  void set_discount_probability(float value);

  // required int32 duration = 27;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 27;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // required int64 groupid = 28;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 28;
  ::google::protobuf::int64 groupid() const;
  void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.ConfigBusinessman)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_exchange_need1();
  void clear_has_exchange_need1();
  void set_has_exchange_reward1();
  void clear_has_exchange_reward1();
  void set_has_exchange_need2();
  void clear_has_exchange_need2();
  void set_has_exchange_reward2();
  void clear_has_exchange_reward2();
  void set_has_exchange_need3();
  void clear_has_exchange_need3();
  void set_has_exchange_reward3();
  void clear_has_exchange_reward3();
  void set_has_goods_num();
  void clear_has_goods_num();
  void set_has_goods();
  void clear_has_goods();
  void set_has_discount_probability();
  void clear_has_discount_probability();
  void set_has_discount_num();
  void clear_has_discount_num();
  void set_has_price_fluctuation();
  void clear_has_price_fluctuation();
  void set_has_bargain();
  void clear_has_bargain();
  void set_has_duration();
  void clear_has_duration();
  void set_has_groupid();
  void clear_has_groupid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr exchange_need1_;
  ::google::protobuf::internal::ArenaStringPtr exchange_reward1_;
  ::google::protobuf::internal::ArenaStringPtr exchange_need2_;
  ::google::protobuf::internal::ArenaStringPtr exchange_reward2_;
  ::google::protobuf::internal::ArenaStringPtr exchange_need3_;
  ::google::protobuf::internal::ArenaStringPtr exchange_reward3_;
  ::google::protobuf::internal::ArenaStringPtr goods_num_;
  ::google::protobuf::internal::ArenaStringPtr goods_;
  ::google::protobuf::internal::ArenaStringPtr discount_num_;
  ::google::protobuf::internal::ArenaStringPtr price_fluctuation_;
  ::google::protobuf::internal::ArenaStringPtr bargain_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 type_;
  float discount_probability_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int64 groupid_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigSkillRandom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigSkillRandom) */ {
 public:
  ConfigSkillRandom();
  virtual ~ConfigSkillRandom();

  ConfigSkillRandom(const ConfigSkillRandom& from);

  inline ConfigSkillRandom& operator=(const ConfigSkillRandom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigSkillRandom(ConfigSkillRandom&& from) noexcept
    : ConfigSkillRandom() {
    *this = ::std::move(from);
  }

  inline ConfigSkillRandom& operator=(ConfigSkillRandom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigSkillRandom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigSkillRandom* internal_default_instance() {
    return reinterpret_cast<const ConfigSkillRandom*>(
               &_ConfigSkillRandom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void UnsafeArenaSwap(ConfigSkillRandom* other);
  void Swap(ConfigSkillRandom* other);
  friend void swap(ConfigSkillRandom& a, ConfigSkillRandom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigSkillRandom* New() const final {
    return CreateMaybeMessage<ConfigSkillRandom>(NULL);
  }

  ConfigSkillRandom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigSkillRandom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigSkillRandom& from);
  void MergeFrom(const ConfigSkillRandom& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSkillRandom* other);
  protected:
  explicit ConfigSkillRandom(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes profession = 3;
  bool has_profession() const;
  void clear_profession();
  static const int kProfessionFieldNumber = 3;
  const ::std::string& profession() const;
  void set_profession(const ::std::string& value);
  #if LANG_CXX11
  void set_profession(::std::string&& value);
  #endif
  void set_profession(const char* value);
  void set_profession(const void* value, size_t size);
  ::std::string* mutable_profession();
  ::std::string* release_profession();
  void set_allocated_profession(::std::string* profession);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_profession();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_profession(
      ::std::string* profession);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required float probability = 4;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 4;
  float probability() const;
  void set_probability(float value);

  // @@protoc_insertion_point(class_scope:db.ConfigSkillRandom)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_profession();
  void clear_has_profession();
  void set_has_probability();
  void clear_has_probability();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr profession_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 type_;
  float probability_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEquipAttributeWord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigEquipAttributeWord) */ {
 public:
  ConfigEquipAttributeWord();
  virtual ~ConfigEquipAttributeWord();

  ConfigEquipAttributeWord(const ConfigEquipAttributeWord& from);

  inline ConfigEquipAttributeWord& operator=(const ConfigEquipAttributeWord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEquipAttributeWord(ConfigEquipAttributeWord&& from) noexcept
    : ConfigEquipAttributeWord() {
    *this = ::std::move(from);
  }

  inline ConfigEquipAttributeWord& operator=(ConfigEquipAttributeWord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEquipAttributeWord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEquipAttributeWord* internal_default_instance() {
    return reinterpret_cast<const ConfigEquipAttributeWord*>(
               &_ConfigEquipAttributeWord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void UnsafeArenaSwap(ConfigEquipAttributeWord* other);
  void Swap(ConfigEquipAttributeWord* other);
  friend void swap(ConfigEquipAttributeWord& a, ConfigEquipAttributeWord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEquipAttributeWord* New() const final {
    return CreateMaybeMessage<ConfigEquipAttributeWord>(NULL);
  }

  ConfigEquipAttributeWord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEquipAttributeWord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEquipAttributeWord& from);
  void MergeFrom(const ConfigEquipAttributeWord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEquipAttributeWord* other);
  protected:
  explicit ConfigEquipAttributeWord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes interval = 4;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 4;
  const ::std::string& interval() const;
  void set_interval(const ::std::string& value);
  #if LANG_CXX11
  void set_interval(::std::string&& value);
  #endif
  void set_interval(const char* value);
  void set_interval(const void* value, size_t size);
  ::std::string* mutable_interval();
  ::std::string* release_interval();
  void set_allocated_interval(::std::string* interval);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_interval();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interval(
      ::std::string* interval);

  // required bytes float = 5;
  bool has_float_() const;
  void clear_float_();
  static const int kFloatFieldNumber = 5;
  const ::std::string& float_() const;
  void set_float_(const ::std::string& value);
  #if LANG_CXX11
  void set_float_(::std::string&& value);
  #endif
  void set_float_(const char* value);
  void set_float_(const void* value, size_t size);
  ::std::string* mutable_float_();
  ::std::string* release_float_();
  void set_allocated_float_(::std::string* float_);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_float_();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_float_(
      ::std::string* float_);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 attr_id = 3;
  bool has_attr_id() const;
  void clear_attr_id();
  static const int kAttrIdFieldNumber = 3;
  ::google::protobuf::int32 attr_id() const;
  void set_attr_id(::google::protobuf::int32 value);

  // required float perfect_value = 6;
  bool has_perfect_value() const;
  void clear_perfect_value();
  static const int kPerfectValueFieldNumber = 6;
  float perfect_value() const;
  void set_perfect_value(float value);

  // required int32 unlock_level = 7;
  bool has_unlock_level() const;
  void clear_unlock_level();
  static const int kUnlockLevelFieldNumber = 7;
  ::google::protobuf::int32 unlock_level() const;
  void set_unlock_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigEquipAttributeWord)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_attr_id();
  void clear_has_attr_id();
  void set_has_interval();
  void clear_has_interval();
  void set_has_float_();
  void clear_has_float_();
  void set_has_perfect_value();
  void clear_has_perfect_value();
  void set_has_unlock_level();
  void clear_has_unlock_level();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr interval_;
  ::google::protobuf::internal::ArenaStringPtr float__;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 attr_id_;
  float perfect_value_;
  ::google::protobuf::int32 unlock_level_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEquipRefineCost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigEquipRefineCost) */ {
 public:
  ConfigEquipRefineCost();
  virtual ~ConfigEquipRefineCost();

  ConfigEquipRefineCost(const ConfigEquipRefineCost& from);

  inline ConfigEquipRefineCost& operator=(const ConfigEquipRefineCost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEquipRefineCost(ConfigEquipRefineCost&& from) noexcept
    : ConfigEquipRefineCost() {
    *this = ::std::move(from);
  }

  inline ConfigEquipRefineCost& operator=(ConfigEquipRefineCost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEquipRefineCost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEquipRefineCost* internal_default_instance() {
    return reinterpret_cast<const ConfigEquipRefineCost*>(
               &_ConfigEquipRefineCost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void UnsafeArenaSwap(ConfigEquipRefineCost* other);
  void Swap(ConfigEquipRefineCost* other);
  friend void swap(ConfigEquipRefineCost& a, ConfigEquipRefineCost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEquipRefineCost* New() const final {
    return CreateMaybeMessage<ConfigEquipRefineCost>(NULL);
  }

  ConfigEquipRefineCost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEquipRefineCost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEquipRefineCost& from);
  void MergeFrom(const ConfigEquipRefineCost& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEquipRefineCost* other);
  protected:
  explicit ConfigEquipRefineCost(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 2;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 2;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required int32 star = 1;
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 1;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // required float success_probability = 3;
  bool has_success_probability() const;
  void clear_success_probability();
  static const int kSuccessProbabilityFieldNumber = 3;
  float success_probability() const;
  void set_success_probability(float value);

  // required int32 diamond_cost = 4;
  bool has_diamond_cost() const;
  void clear_diamond_cost();
  static const int kDiamondCostFieldNumber = 4;
  ::google::protobuf::int32 diamond_cost() const;
  void set_diamond_cost(::google::protobuf::int32 value);

  // required float diamond_success_probability = 5;
  bool has_diamond_success_probability() const;
  void clear_diamond_success_probability();
  static const int kDiamondSuccessProbabilityFieldNumber = 5;
  float diamond_success_probability() const;
  void set_diamond_success_probability(float value);

  // required int32 limit = 6;
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 6;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigEquipRefineCost)
 private:
  void set_has_star();
  void clear_has_star();
  void set_has_cost();
  void clear_has_cost();
  void set_has_success_probability();
  void clear_has_success_probability();
  void set_has_diamond_cost();
  void clear_has_diamond_cost();
  void set_has_diamond_success_probability();
  void clear_has_diamond_success_probability();
  void set_has_limit();
  void clear_has_limit();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::int32 star_;
  float success_probability_;
  ::google::protobuf::int32 diamond_cost_;
  float diamond_success_probability_;
  ::google::protobuf::int32 limit_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEquipDecompose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigEquipDecompose) */ {
 public:
  ConfigEquipDecompose();
  virtual ~ConfigEquipDecompose();

  ConfigEquipDecompose(const ConfigEquipDecompose& from);

  inline ConfigEquipDecompose& operator=(const ConfigEquipDecompose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEquipDecompose(ConfigEquipDecompose&& from) noexcept
    : ConfigEquipDecompose() {
    *this = ::std::move(from);
  }

  inline ConfigEquipDecompose& operator=(ConfigEquipDecompose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEquipDecompose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEquipDecompose* internal_default_instance() {
    return reinterpret_cast<const ConfigEquipDecompose*>(
               &_ConfigEquipDecompose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void UnsafeArenaSwap(ConfigEquipDecompose* other);
  void Swap(ConfigEquipDecompose* other);
  friend void swap(ConfigEquipDecompose& a, ConfigEquipDecompose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEquipDecompose* New() const final {
    return CreateMaybeMessage<ConfigEquipDecompose>(NULL);
  }

  ConfigEquipDecompose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEquipDecompose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEquipDecompose& from);
  void MergeFrom(const ConfigEquipDecompose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEquipDecompose* other);
  protected:
  explicit ConfigEquipDecompose(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes decompose_get = 3;
  bool has_decompose_get() const;
  void clear_decompose_get();
  static const int kDecomposeGetFieldNumber = 3;
  const ::std::string& decompose_get() const;
  void set_decompose_get(const ::std::string& value);
  #if LANG_CXX11
  void set_decompose_get(::std::string&& value);
  #endif
  void set_decompose_get(const char* value);
  void set_decompose_get(const void* value, size_t size);
  ::std::string* mutable_decompose_get();
  ::std::string* release_decompose_get();
  void set_allocated_decompose_get(::std::string* decompose_get);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_decompose_get();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_decompose_get(
      ::std::string* decompose_get);

  // required bytes skill_influence = 4;
  bool has_skill_influence() const;
  void clear_skill_influence();
  static const int kSkillInfluenceFieldNumber = 4;
  const ::std::string& skill_influence() const;
  void set_skill_influence(const ::std::string& value);
  #if LANG_CXX11
  void set_skill_influence(::std::string&& value);
  #endif
  void set_skill_influence(const char* value);
  void set_skill_influence(const void* value, size_t size);
  ::std::string* mutable_skill_influence();
  ::std::string* release_skill_influence();
  void set_allocated_skill_influence(::std::string* skill_influence);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_skill_influence();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_skill_influence(
      ::std::string* skill_influence);

  // required int32 star = 1;
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 1;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // required int32 quality = 2;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigEquipDecompose)
 private:
  void set_has_star();
  void clear_has_star();
  void set_has_quality();
  void clear_has_quality();
  void set_has_decompose_get();
  void clear_has_decompose_get();
  void set_has_skill_influence();
  void clear_has_skill_influence();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr decompose_get_;
  ::google::protobuf::internal::ArenaStringPtr skill_influence_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 quality_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEquipDecomposeCost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigEquipDecomposeCost) */ {
 public:
  ConfigEquipDecomposeCost();
  virtual ~ConfigEquipDecomposeCost();

  ConfigEquipDecomposeCost(const ConfigEquipDecomposeCost& from);

  inline ConfigEquipDecomposeCost& operator=(const ConfigEquipDecomposeCost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEquipDecomposeCost(ConfigEquipDecomposeCost&& from) noexcept
    : ConfigEquipDecomposeCost() {
    *this = ::std::move(from);
  }

  inline ConfigEquipDecomposeCost& operator=(ConfigEquipDecomposeCost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEquipDecomposeCost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEquipDecomposeCost* internal_default_instance() {
    return reinterpret_cast<const ConfigEquipDecomposeCost*>(
               &_ConfigEquipDecomposeCost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void UnsafeArenaSwap(ConfigEquipDecomposeCost* other);
  void Swap(ConfigEquipDecomposeCost* other);
  friend void swap(ConfigEquipDecomposeCost& a, ConfigEquipDecomposeCost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEquipDecomposeCost* New() const final {
    return CreateMaybeMessage<ConfigEquipDecomposeCost>(NULL);
  }

  ConfigEquipDecomposeCost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEquipDecomposeCost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEquipDecomposeCost& from);
  void MergeFrom(const ConfigEquipDecomposeCost& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEquipDecomposeCost* other);
  protected:
  explicit ConfigEquipDecomposeCost(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 2;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 2;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required float success_probability = 3;
  bool has_success_probability() const;
  void clear_success_probability();
  static const int kSuccessProbabilityFieldNumber = 3;
  float success_probability() const;
  void set_success_probability(float value);

  // required float add_ratio = 4;
  bool has_add_ratio() const;
  void clear_add_ratio();
  static const int kAddRatioFieldNumber = 4;
  float add_ratio() const;
  void set_add_ratio(float value);

  // @@protoc_insertion_point(class_scope:db.ConfigEquipDecomposeCost)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_cost();
  void clear_has_cost();
  void set_has_success_probability();
  void clear_has_success_probability();
  void set_has_add_ratio();
  void clear_has_add_ratio();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::int32 id_;
  float success_probability_;
  float add_ratio_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigSpecialEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigSpecialEvent) */ {
 public:
  ConfigSpecialEvent();
  virtual ~ConfigSpecialEvent();

  ConfigSpecialEvent(const ConfigSpecialEvent& from);

  inline ConfigSpecialEvent& operator=(const ConfigSpecialEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigSpecialEvent(ConfigSpecialEvent&& from) noexcept
    : ConfigSpecialEvent() {
    *this = ::std::move(from);
  }

  inline ConfigSpecialEvent& operator=(ConfigSpecialEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigSpecialEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigSpecialEvent* internal_default_instance() {
    return reinterpret_cast<const ConfigSpecialEvent*>(
               &_ConfigSpecialEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void UnsafeArenaSwap(ConfigSpecialEvent* other);
  void Swap(ConfigSpecialEvent* other);
  friend void swap(ConfigSpecialEvent& a, ConfigSpecialEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigSpecialEvent* New() const final {
    return CreateMaybeMessage<ConfigSpecialEvent>(NULL);
  }

  ConfigSpecialEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigSpecialEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigSpecialEvent& from);
  void MergeFrom(const ConfigSpecialEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigSpecialEvent* other);
  protected:
  explicit ConfigSpecialEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes trigger_param = 3;
  bool has_trigger_param() const;
  void clear_trigger_param();
  static const int kTriggerParamFieldNumber = 3;
  const ::std::string& trigger_param() const;
  void set_trigger_param(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_param(::std::string&& value);
  #endif
  void set_trigger_param(const char* value);
  void set_trigger_param(const void* value, size_t size);
  ::std::string* mutable_trigger_param();
  ::std::string* release_trigger_param();
  void set_allocated_trigger_param(::std::string* trigger_param);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_trigger_param();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trigger_param(
      ::std::string* trigger_param);

  // required bytes reward = 7;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 7;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required bytes first_reward = 8;
  bool has_first_reward() const;
  void clear_first_reward();
  static const int kFirstRewardFieldNumber = 8;
  const ::std::string& first_reward() const;
  void set_first_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_first_reward(::std::string&& value);
  #endif
  void set_first_reward(const char* value);
  void set_first_reward(const void* value, size_t size);
  ::std::string* mutable_first_reward();
  ::std::string* release_first_reward();
  void set_allocated_first_reward(::std::string* first_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_first_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_first_reward(
      ::std::string* first_reward);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 trigger = 2;
  bool has_trigger() const;
  void clear_trigger();
  static const int kTriggerFieldNumber = 2;
  ::google::protobuf::int32 trigger() const;
  void set_trigger(::google::protobuf::int32 value);

  // required int32 condition = 4;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 4;
  ::google::protobuf::int32 condition() const;
  void set_condition(::google::protobuf::int32 value);

  // required int32 condition_param = 5;
  bool has_condition_param() const;
  void clear_condition_param();
  static const int kConditionParamFieldNumber = 5;
  ::google::protobuf::int32 condition_param() const;
  void set_condition_param(::google::protobuf::int32 value);

  // required int32 trigger_times = 6;
  bool has_trigger_times() const;
  void clear_trigger_times();
  static const int kTriggerTimesFieldNumber = 6;
  ::google::protobuf::int32 trigger_times() const;
  void set_trigger_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigSpecialEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_trigger();
  void clear_has_trigger();
  void set_has_trigger_param();
  void clear_has_trigger_param();
  void set_has_condition();
  void clear_has_condition();
  void set_has_condition_param();
  void clear_has_condition_param();
  void set_has_trigger_times();
  void clear_has_trigger_times();
  void set_has_reward();
  void clear_has_reward();
  void set_has_first_reward();
  void clear_has_first_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trigger_param_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::internal::ArenaStringPtr first_reward_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 trigger_;
  ::google::protobuf::int32 condition_;
  ::google::protobuf::int32 condition_param_;
  ::google::protobuf::int32 trigger_times_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCardPractice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigCardPractice) */ {
 public:
  ConfigCardPractice();
  virtual ~ConfigCardPractice();

  ConfigCardPractice(const ConfigCardPractice& from);

  inline ConfigCardPractice& operator=(const ConfigCardPractice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCardPractice(ConfigCardPractice&& from) noexcept
    : ConfigCardPractice() {
    *this = ::std::move(from);
  }

  inline ConfigCardPractice& operator=(ConfigCardPractice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCardPractice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCardPractice* internal_default_instance() {
    return reinterpret_cast<const ConfigCardPractice*>(
               &_ConfigCardPractice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void UnsafeArenaSwap(ConfigCardPractice* other);
  void Swap(ConfigCardPractice* other);
  friend void swap(ConfigCardPractice& a, ConfigCardPractice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCardPractice* New() const final {
    return CreateMaybeMessage<ConfigCardPractice>(NULL);
  }

  ConfigCardPractice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCardPractice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCardPractice& from);
  void MergeFrom(const ConfigCardPractice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCardPractice* other);
  protected:
  explicit ConfigCardPractice(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 3;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 3;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required bytes attribute_add = 6;
  bool has_attribute_add() const;
  void clear_attribute_add();
  static const int kAttributeAddFieldNumber = 6;
  const ::std::string& attribute_add() const;
  void set_attribute_add(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute_add(::std::string&& value);
  #endif
  void set_attribute_add(const char* value);
  void set_attribute_add(const void* value, size_t size);
  ::std::string* mutable_attribute_add();
  ::std::string* release_attribute_add();
  void set_allocated_attribute_add(::std::string* attribute_add);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attribute_add();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attribute_add(
      ::std::string* attribute_add);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 need_star = 4;
  bool has_need_star() const;
  void clear_need_star();
  static const int kNeedStarFieldNumber = 4;
  ::google::protobuf::int32 need_star() const;
  void set_need_star(::google::protobuf::int32 value);

  // required int32 need_level = 5;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 5;
  ::google::protobuf::int32 need_level() const;
  void set_need_level(::google::protobuf::int32 value);

  // required int32 talent_level = 7;
  bool has_talent_level() const;
  void clear_talent_level();
  static const int kTalentLevelFieldNumber = 7;
  ::google::protobuf::int32 talent_level() const;
  void set_talent_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigCardPractice)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_level();
  void clear_has_level();
  void set_has_cost();
  void clear_has_cost();
  void set_has_need_star();
  void clear_has_need_star();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_attribute_add();
  void clear_has_attribute_add();
  void set_has_talent_level();
  void clear_has_talent_level();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::internal::ArenaStringPtr attribute_add_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 need_star_;
  ::google::protobuf::int32 need_level_;
  ::google::protobuf::int32 talent_level_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigGhostShip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigGhostShip) */ {
 public:
  ConfigGhostShip();
  virtual ~ConfigGhostShip();

  ConfigGhostShip(const ConfigGhostShip& from);

  inline ConfigGhostShip& operator=(const ConfigGhostShip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigGhostShip(ConfigGhostShip&& from) noexcept
    : ConfigGhostShip() {
    *this = ::std::move(from);
  }

  inline ConfigGhostShip& operator=(ConfigGhostShip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigGhostShip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigGhostShip* internal_default_instance() {
    return reinterpret_cast<const ConfigGhostShip*>(
               &_ConfigGhostShip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void UnsafeArenaSwap(ConfigGhostShip* other);
  void Swap(ConfigGhostShip* other);
  friend void swap(ConfigGhostShip& a, ConfigGhostShip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigGhostShip* New() const final {
    return CreateMaybeMessage<ConfigGhostShip>(NULL);
  }

  ConfigGhostShip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigGhostShip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigGhostShip& from);
  void MergeFrom(const ConfigGhostShip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigGhostShip* other);
  protected:
  explicit ConfigGhostShip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes unlock_stage = 4;
  bool has_unlock_stage() const;
  void clear_unlock_stage();
  static const int kUnlockStageFieldNumber = 4;
  const ::std::string& unlock_stage() const;
  void set_unlock_stage(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_stage(::std::string&& value);
  #endif
  void set_unlock_stage(const char* value);
  void set_unlock_stage(const void* value, size_t size);
  ::std::string* mutable_unlock_stage();
  ::std::string* release_unlock_stage();
  void set_allocated_unlock_stage(::std::string* unlock_stage);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_stage();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_stage(
      ::std::string* unlock_stage);

  // required bytes match = 5;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 5;
  const ::std::string& match() const;
  void set_match(const ::std::string& value);
  #if LANG_CXX11
  void set_match(::std::string&& value);
  #endif
  void set_match(const char* value);
  void set_match(const void* value, size_t size);
  ::std::string* mutable_match();
  ::std::string* release_match();
  void set_allocated_match(::std::string* match);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_match();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_match(
      ::std::string* match);

  // required bytes boss_group = 6;
  bool has_boss_group() const;
  void clear_boss_group();
  static const int kBossGroupFieldNumber = 6;
  const ::std::string& boss_group() const;
  void set_boss_group(const ::std::string& value);
  #if LANG_CXX11
  void set_boss_group(::std::string&& value);
  #endif
  void set_boss_group(const char* value);
  void set_boss_group(const void* value, size_t size);
  ::std::string* mutable_boss_group();
  ::std::string* release_boss_group();
  void set_allocated_boss_group(::std::string* boss_group);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_boss_group();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_boss_group(
      ::std::string* boss_group);

  // required bytes reward = 7;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 7;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required bytes buff_get = 8;
  bool has_buff_get() const;
  void clear_buff_get();
  static const int kBuffGetFieldNumber = 8;
  const ::std::string& buff_get() const;
  void set_buff_get(const ::std::string& value);
  #if LANG_CXX11
  void set_buff_get(::std::string&& value);
  #endif
  void set_buff_get(const char* value);
  void set_buff_get(const void* value, size_t size);
  ::std::string* mutable_buff_get();
  ::std::string* release_buff_get();
  void set_allocated_buff_get(::std::string* buff_get);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_buff_get();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buff_get(
      ::std::string* buff_get);

  // required bytes monster_buff = 9;
  bool has_monster_buff() const;
  void clear_monster_buff();
  static const int kMonsterBuffFieldNumber = 9;
  const ::std::string& monster_buff() const;
  void set_monster_buff(const ::std::string& value);
  #if LANG_CXX11
  void set_monster_buff(::std::string&& value);
  #endif
  void set_monster_buff(const char* value);
  void set_monster_buff(const void* value, size_t size);
  ::std::string* mutable_monster_buff();
  ::std::string* release_monster_buff();
  void set_allocated_monster_buff(::std::string* monster_buff);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_monster_buff();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_monster_buff(
      ::std::string* monster_buff);

  // required bytes special_reward = 11;
  bool has_special_reward() const;
  void clear_special_reward();
  static const int kSpecialRewardFieldNumber = 11;
  const ::std::string& special_reward() const;
  void set_special_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_special_reward(::std::string&& value);
  #endif
  void set_special_reward(const char* value);
  void set_special_reward(const void* value, size_t size);
  ::std::string* mutable_special_reward();
  ::std::string* release_special_reward();
  void set_allocated_special_reward(::std::string* special_reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_special_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_special_reward(
      ::std::string* special_reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 initial_state = 3;
  bool has_initial_state() const;
  void clear_initial_state();
  static const int kInitialStateFieldNumber = 3;
  ::google::protobuf::int32 initial_state() const;
  void set_initial_state(::google::protobuf::int32 value);

  // required int32 map_model = 10;
  bool has_map_model() const;
  void clear_map_model();
  static const int kMapModelFieldNumber = 10;
  ::google::protobuf::int32 map_model() const;
  void set_map_model(::google::protobuf::int32 value);

  // required int32 rank = 12;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 12;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigGhostShip)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_initial_state();
  void clear_has_initial_state();
  void set_has_unlock_stage();
  void clear_has_unlock_stage();
  void set_has_match();
  void clear_has_match();
  void set_has_boss_group();
  void clear_has_boss_group();
  void set_has_reward();
  void clear_has_reward();
  void set_has_buff_get();
  void clear_has_buff_get();
  void set_has_monster_buff();
  void clear_has_monster_buff();
  void set_has_map_model();
  void clear_has_map_model();
  void set_has_special_reward();
  void clear_has_special_reward();
  void set_has_rank();
  void clear_has_rank();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr unlock_stage_;
  ::google::protobuf::internal::ArenaStringPtr match_;
  ::google::protobuf::internal::ArenaStringPtr boss_group_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::internal::ArenaStringPtr buff_get_;
  ::google::protobuf::internal::ArenaStringPtr monster_buff_;
  ::google::protobuf::internal::ArenaStringPtr special_reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 initial_state_;
  ::google::protobuf::int32 map_model_;
  ::google::protobuf::int32 rank_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigFacilityGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFacilityGroup) */ {
 public:
  ConfigFacilityGroup();
  virtual ~ConfigFacilityGroup();

  ConfigFacilityGroup(const ConfigFacilityGroup& from);

  inline ConfigFacilityGroup& operator=(const ConfigFacilityGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFacilityGroup(ConfigFacilityGroup&& from) noexcept
    : ConfigFacilityGroup() {
    *this = ::std::move(from);
  }

  inline ConfigFacilityGroup& operator=(ConfigFacilityGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFacilityGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFacilityGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigFacilityGroup*>(
               &_ConfigFacilityGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void UnsafeArenaSwap(ConfigFacilityGroup* other);
  void Swap(ConfigFacilityGroup* other);
  friend void swap(ConfigFacilityGroup& a, ConfigFacilityGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFacilityGroup* New() const final {
    return CreateMaybeMessage<ConfigFacilityGroup>(NULL);
  }

  ConfigFacilityGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFacilityGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFacilityGroup& from);
  void MergeFrom(const ConfigFacilityGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFacilityGroup* other);
  protected:
  explicit ConfigFacilityGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes contain = 2;
  bool has_contain() const;
  void clear_contain();
  static const int kContainFieldNumber = 2;
  const ::std::string& contain() const;
  void set_contain(const ::std::string& value);
  #if LANG_CXX11
  void set_contain(::std::string&& value);
  #endif
  void set_contain(const char* value);
  void set_contain(const void* value, size_t size);
  ::std::string* mutable_contain();
  ::std::string* release_contain();
  void set_allocated_contain(::std::string* contain);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_contain();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contain(
      ::std::string* contain);

  // required bytes param = 4;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 4;
  const ::std::string& param() const;
  void set_param(const ::std::string& value);
  #if LANG_CXX11
  void set_param(::std::string&& value);
  #endif
  void set_param(const char* value);
  void set_param(const void* value, size_t size);
  ::std::string* mutable_param();
  ::std::string* release_param();
  void set_allocated_param(::std::string* param);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_param();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param(
      ::std::string* param);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 effect = 3;
  bool has_effect() const;
  void clear_effect();
  static const int kEffectFieldNumber = 3;
  ::google::protobuf::int32 effect() const;
  void set_effect(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigFacilityGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_contain();
  void clear_has_contain();
  void set_has_effect();
  void clear_has_effect();
  void set_has_param();
  void clear_has_param();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contain_;
  ::google::protobuf::internal::ArenaStringPtr param_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 effect_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigRankingScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigRankingScore) */ {
 public:
  ConfigRankingScore();
  virtual ~ConfigRankingScore();

  ConfigRankingScore(const ConfigRankingScore& from);

  inline ConfigRankingScore& operator=(const ConfigRankingScore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigRankingScore(ConfigRankingScore&& from) noexcept
    : ConfigRankingScore() {
    *this = ::std::move(from);
  }

  inline ConfigRankingScore& operator=(ConfigRankingScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRankingScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRankingScore* internal_default_instance() {
    return reinterpret_cast<const ConfigRankingScore*>(
               &_ConfigRankingScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void UnsafeArenaSwap(ConfigRankingScore* other);
  void Swap(ConfigRankingScore* other);
  friend void swap(ConfigRankingScore& a, ConfigRankingScore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigRankingScore* New() const final {
    return CreateMaybeMessage<ConfigRankingScore>(NULL);
  }

  ConfigRankingScore* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRankingScore>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigRankingScore& from);
  void MergeFrom(const ConfigRankingScore& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRankingScore* other);
  protected:
  explicit ConfigRankingScore(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  const ::std::string& score() const;
  void set_score(const ::std::string& value);
  #if LANG_CXX11
  void set_score(::std::string&& value);
  #endif
  void set_score(const char* value);
  void set_score(const void* value, size_t size);
  ::std::string* mutable_score();
  ::std::string* release_score();
  void set_allocated_score(::std::string* score);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_score();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_score(
      ::std::string* score);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigRankingScore)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_score();
  void clear_has_score();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr score_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigRankingBattleReward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigRankingBattleReward) */ {
 public:
  ConfigRankingBattleReward();
  virtual ~ConfigRankingBattleReward();

  ConfigRankingBattleReward(const ConfigRankingBattleReward& from);

  inline ConfigRankingBattleReward& operator=(const ConfigRankingBattleReward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigRankingBattleReward(ConfigRankingBattleReward&& from) noexcept
    : ConfigRankingBattleReward() {
    *this = ::std::move(from);
  }

  inline ConfigRankingBattleReward& operator=(ConfigRankingBattleReward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRankingBattleReward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRankingBattleReward* internal_default_instance() {
    return reinterpret_cast<const ConfigRankingBattleReward*>(
               &_ConfigRankingBattleReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void UnsafeArenaSwap(ConfigRankingBattleReward* other);
  void Swap(ConfigRankingBattleReward* other);
  friend void swap(ConfigRankingBattleReward& a, ConfigRankingBattleReward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigRankingBattleReward* New() const final {
    return CreateMaybeMessage<ConfigRankingBattleReward>(NULL);
  }

  ConfigRankingBattleReward* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRankingBattleReward>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigRankingBattleReward& from);
  void MergeFrom(const ConfigRankingBattleReward& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRankingBattleReward* other);
  protected:
  explicit ConfigRankingBattleReward(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes reward = 5;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 5;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 combo = 2;
  bool has_combo() const;
  void clear_combo();
  static const int kComboFieldNumber = 2;
  ::google::protobuf::int32 combo() const;
  void set_combo(::google::protobuf::int32 value);

  // required int32 score_up = 3;
  bool has_score_up() const;
  void clear_score_up();
  static const int kScoreUpFieldNumber = 3;
  ::google::protobuf::int32 score_up() const;
  void set_score_up(::google::protobuf::int32 value);

  // required int32 score_down = 4;
  bool has_score_down() const;
  void clear_score_down();
  static const int kScoreDownFieldNumber = 4;
  ::google::protobuf::int32 score_down() const;
  void set_score_down(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigRankingBattleReward)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_combo();
  void clear_has_combo();
  void set_has_score_up();
  void clear_has_score_up();
  void set_has_score_down();
  void clear_has_score_down();
  void set_has_reward();
  void clear_has_reward();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 combo_;
  ::google::protobuf::int32 score_up_;
  ::google::protobuf::int32 score_down_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigEasterEgg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigEasterEgg) */ {
 public:
  ConfigEasterEgg();
  virtual ~ConfigEasterEgg();

  ConfigEasterEgg(const ConfigEasterEgg& from);

  inline ConfigEasterEgg& operator=(const ConfigEasterEgg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigEasterEgg(ConfigEasterEgg&& from) noexcept
    : ConfigEasterEgg() {
    *this = ::std::move(from);
  }

  inline ConfigEasterEgg& operator=(ConfigEasterEgg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigEasterEgg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigEasterEgg* internal_default_instance() {
    return reinterpret_cast<const ConfigEasterEgg*>(
               &_ConfigEasterEgg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void UnsafeArenaSwap(ConfigEasterEgg* other);
  void Swap(ConfigEasterEgg* other);
  friend void swap(ConfigEasterEgg& a, ConfigEasterEgg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigEasterEgg* New() const final {
    return CreateMaybeMessage<ConfigEasterEgg>(NULL);
  }

  ConfigEasterEgg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigEasterEgg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigEasterEgg& from);
  void MergeFrom(const ConfigEasterEgg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigEasterEgg* other);
  protected:
  explicit ConfigEasterEgg(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes choice = 4;
  bool has_choice() const;
  void clear_choice();
  static const int kChoiceFieldNumber = 4;
  const ::std::string& choice() const;
  void set_choice(const ::std::string& value);
  #if LANG_CXX11
  void set_choice(::std::string&& value);
  #endif
  void set_choice(const char* value);
  void set_choice(const void* value, size_t size);
  ::std::string* mutable_choice();
  ::std::string* release_choice();
  void set_allocated_choice(::std::string* choice);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_choice();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_choice(
      ::std::string* choice);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigEasterEgg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_choice();
  void clear_has_choice();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr choice_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigShipEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigShipEvent) */ {
 public:
  ConfigShipEvent();
  virtual ~ConfigShipEvent();

  ConfigShipEvent(const ConfigShipEvent& from);

  inline ConfigShipEvent& operator=(const ConfigShipEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigShipEvent(ConfigShipEvent&& from) noexcept
    : ConfigShipEvent() {
    *this = ::std::move(from);
  }

  inline ConfigShipEvent& operator=(ConfigShipEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigShipEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigShipEvent* internal_default_instance() {
    return reinterpret_cast<const ConfigShipEvent*>(
               &_ConfigShipEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void UnsafeArenaSwap(ConfigShipEvent* other);
  void Swap(ConfigShipEvent* other);
  friend void swap(ConfigShipEvent& a, ConfigShipEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigShipEvent* New() const final {
    return CreateMaybeMessage<ConfigShipEvent>(NULL);
  }

  ConfigShipEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigShipEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigShipEvent& from);
  void MergeFrom(const ConfigShipEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigShipEvent* other);
  protected:
  explicit ConfigShipEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes need_seconds = 3;
  bool has_need_seconds() const;
  void clear_need_seconds();
  static const int kNeedSecondsFieldNumber = 3;
  const ::std::string& need_seconds() const;
  void set_need_seconds(const ::std::string& value);
  #if LANG_CXX11
  void set_need_seconds(::std::string&& value);
  #endif
  void set_need_seconds(const char* value);
  void set_need_seconds(const void* value, size_t size);
  ::std::string* mutable_need_seconds();
  ::std::string* release_need_seconds();
  void set_allocated_need_seconds(::std::string* need_seconds);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_need_seconds();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_need_seconds(
      ::std::string* need_seconds);

  // required bytes need_level = 4;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 4;
  const ::std::string& need_level() const;
  void set_need_level(const ::std::string& value);
  #if LANG_CXX11
  void set_need_level(::std::string&& value);
  #endif
  void set_need_level(const char* value);
  void set_need_level(const void* value, size_t size);
  ::std::string* mutable_need_level();
  ::std::string* release_need_level();
  void set_allocated_need_level(::std::string* need_level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_need_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_need_level(
      ::std::string* need_level);

  // required bytes need_room = 6;
  bool has_need_room() const;
  void clear_need_room();
  static const int kNeedRoomFieldNumber = 6;
  const ::std::string& need_room() const;
  void set_need_room(const ::std::string& value);
  #if LANG_CXX11
  void set_need_room(::std::string&& value);
  #endif
  void set_need_room(const char* value);
  void set_need_room(const void* value, size_t size);
  ::std::string* mutable_need_room();
  ::std::string* release_need_room();
  void set_allocated_need_room(::std::string* need_room);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_need_room();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_need_room(
      ::std::string* need_room);

  // required bytes need_facility = 7;
  bool has_need_facility() const;
  void clear_need_facility();
  static const int kNeedFacilityFieldNumber = 7;
  const ::std::string& need_facility() const;
  void set_need_facility(const ::std::string& value);
  #if LANG_CXX11
  void set_need_facility(::std::string&& value);
  #endif
  void set_need_facility(const char* value);
  void set_need_facility(const void* value, size_t size);
  ::std::string* mutable_need_facility();
  ::std::string* release_need_facility();
  void set_allocated_need_facility(::std::string* need_facility);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_need_facility();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_need_facility(
      ::std::string* need_facility);

  // required bytes pre_task = 8;
  bool has_pre_task() const;
  void clear_pre_task();
  static const int kPreTaskFieldNumber = 8;
  const ::std::string& pre_task() const;
  void set_pre_task(const ::std::string& value);
  #if LANG_CXX11
  void set_pre_task(::std::string&& value);
  #endif
  void set_pre_task(const char* value);
  void set_pre_task(const void* value, size_t size);
  ::std::string* mutable_pre_task();
  ::std::string* release_pre_task();
  void set_allocated_pre_task(::std::string* pre_task);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pre_task();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre_task(
      ::std::string* pre_task);

  // required bytes enemy = 12;
  bool has_enemy() const;
  void clear_enemy();
  static const int kEnemyFieldNumber = 12;
  const ::std::string& enemy() const;
  void set_enemy(const ::std::string& value);
  #if LANG_CXX11
  void set_enemy(::std::string&& value);
  #endif
  void set_enemy(const char* value);
  void set_enemy(const void* value, size_t size);
  ::std::string* mutable_enemy();
  ::std::string* release_enemy();
  void set_allocated_enemy(::std::string* enemy);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_enemy();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enemy(
      ::std::string* enemy);

  // required bytes choice = 14;
  bool has_choice() const;
  void clear_choice();
  static const int kChoiceFieldNumber = 14;
  const ::std::string& choice() const;
  void set_choice(const ::std::string& value);
  #if LANG_CXX11
  void set_choice(::std::string&& value);
  #endif
  void set_choice(const char* value);
  void set_choice(const void* value, size_t size);
  ::std::string* mutable_choice();
  ::std::string* release_choice();
  void set_allocated_choice(::std::string* choice);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_choice();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_choice(
      ::std::string* choice);

  // required bytes untreated_cost = 15;
  bool has_untreated_cost() const;
  void clear_untreated_cost();
  static const int kUntreatedCostFieldNumber = 15;
  const ::std::string& untreated_cost() const;
  void set_untreated_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_untreated_cost(::std::string&& value);
  #endif
  void set_untreated_cost(const char* value);
  void set_untreated_cost(const void* value, size_t size);
  ::std::string* mutable_untreated_cost();
  ::std::string* release_untreated_cost();
  void set_allocated_untreated_cost(::std::string* untreated_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_untreated_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_untreated_cost(
      ::std::string* untreated_cost);

  // required bytes effect = 16;
  bool has_effect() const;
  void clear_effect();
  static const int kEffectFieldNumber = 16;
  const ::std::string& effect() const;
  void set_effect(const ::std::string& value);
  #if LANG_CXX11
  void set_effect(::std::string&& value);
  #endif
  void set_effect(const char* value);
  void set_effect(const void* value, size_t size);
  ::std::string* mutable_effect();
  ::std::string* release_effect();
  void set_allocated_effect(::std::string* effect);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_effect();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_effect(
      ::std::string* effect);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 need_model = 5;
  bool has_need_model() const;
  void clear_need_model();
  static const int kNeedModelFieldNumber = 5;
  ::google::protobuf::int32 need_model() const;
  void set_need_model(::google::protobuf::int32 value);

  // required int32 region = 9;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 9;
  ::google::protobuf::int32 region() const;
  void set_region(::google::protobuf::int32 value);

  // required float probability = 10;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 10;
  float probability() const;
  void set_probability(float value);

  // required int32 limit_num = 11;
  bool has_limit_num() const;
  void clear_limit_num();
  static const int kLimitNumFieldNumber = 11;
  ::google::protobuf::int32 limit_num() const;
  void set_limit_num(::google::protobuf::int32 value);

  // required int32 exculde = 13;
  bool has_exculde() const;
  void clear_exculde();
  static const int kExculdeFieldNumber = 13;
  ::google::protobuf::int32 exculde() const;
  void set_exculde(::google::protobuf::int32 value);

  // required int32 duration = 17;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 17;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // required int32 happen_limit = 18;
  bool has_happen_limit() const;
  void clear_happen_limit();
  static const int kHappenLimitFieldNumber = 18;
  ::google::protobuf::int32 happen_limit() const;
  void set_happen_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigShipEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_need_seconds();
  void clear_has_need_seconds();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_need_model();
  void clear_has_need_model();
  void set_has_need_room();
  void clear_has_need_room();
  void set_has_need_facility();
  void clear_has_need_facility();
  void set_has_pre_task();
  void clear_has_pre_task();
  void set_has_region();
  void clear_has_region();
  void set_has_probability();
  void clear_has_probability();
  void set_has_limit_num();
  void clear_has_limit_num();
  void set_has_enemy();
  void clear_has_enemy();
  void set_has_exculde();
  void clear_has_exculde();
  void set_has_choice();
  void clear_has_choice();
  void set_has_untreated_cost();
  void clear_has_untreated_cost();
  void set_has_effect();
  void clear_has_effect();
  void set_has_duration();
  void clear_has_duration();
  void set_has_happen_limit();
  void clear_has_happen_limit();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr need_seconds_;
  ::google::protobuf::internal::ArenaStringPtr need_level_;
  ::google::protobuf::internal::ArenaStringPtr need_room_;
  ::google::protobuf::internal::ArenaStringPtr need_facility_;
  ::google::protobuf::internal::ArenaStringPtr pre_task_;
  ::google::protobuf::internal::ArenaStringPtr enemy_;
  ::google::protobuf::internal::ArenaStringPtr choice_;
  ::google::protobuf::internal::ArenaStringPtr untreated_cost_;
  ::google::protobuf::internal::ArenaStringPtr effect_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 need_model_;
  ::google::protobuf::int32 region_;
  float probability_;
  ::google::protobuf::int32 limit_num_;
  ::google::protobuf::int32 exculde_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 happen_limit_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDailyGift : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDailyGift) */ {
 public:
  ConfigDailyGift();
  virtual ~ConfigDailyGift();

  ConfigDailyGift(const ConfigDailyGift& from);

  inline ConfigDailyGift& operator=(const ConfigDailyGift& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDailyGift(ConfigDailyGift&& from) noexcept
    : ConfigDailyGift() {
    *this = ::std::move(from);
  }

  inline ConfigDailyGift& operator=(ConfigDailyGift&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDailyGift& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDailyGift* internal_default_instance() {
    return reinterpret_cast<const ConfigDailyGift*>(
               &_ConfigDailyGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void UnsafeArenaSwap(ConfigDailyGift* other);
  void Swap(ConfigDailyGift* other);
  friend void swap(ConfigDailyGift& a, ConfigDailyGift& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDailyGift* New() const final {
    return CreateMaybeMessage<ConfigDailyGift>(NULL);
  }

  ConfigDailyGift* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDailyGift>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDailyGift& from);
  void MergeFrom(const ConfigDailyGift& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDailyGift* other);
  protected:
  explicit ConfigDailyGift(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes reward = 2;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 2;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required bytes time_interval = 3;
  bool has_time_interval() const;
  void clear_time_interval();
  static const int kTimeIntervalFieldNumber = 3;
  const ::std::string& time_interval() const;
  void set_time_interval(const ::std::string& value);
  #if LANG_CXX11
  void set_time_interval(::std::string&& value);
  #endif
  void set_time_interval(const char* value);
  void set_time_interval(const void* value, size_t size);
  ::std::string* mutable_time_interval();
  ::std::string* release_time_interval();
  void set_allocated_time_interval(::std::string* time_interval);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_time_interval();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time_interval(
      ::std::string* time_interval);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigDailyGift)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_reward();
  void clear_has_reward();
  void set_has_time_interval();
  void clear_has_time_interval();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::internal::ArenaStringPtr time_interval_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigNavigationEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigNavigationEvent) */ {
 public:
  ConfigNavigationEvent();
  virtual ~ConfigNavigationEvent();

  ConfigNavigationEvent(const ConfigNavigationEvent& from);

  inline ConfigNavigationEvent& operator=(const ConfigNavigationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigNavigationEvent(ConfigNavigationEvent&& from) noexcept
    : ConfigNavigationEvent() {
    *this = ::std::move(from);
  }

  inline ConfigNavigationEvent& operator=(ConfigNavigationEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigNavigationEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigNavigationEvent* internal_default_instance() {
    return reinterpret_cast<const ConfigNavigationEvent*>(
               &_ConfigNavigationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void UnsafeArenaSwap(ConfigNavigationEvent* other);
  void Swap(ConfigNavigationEvent* other);
  friend void swap(ConfigNavigationEvent& a, ConfigNavigationEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigNavigationEvent* New() const final {
    return CreateMaybeMessage<ConfigNavigationEvent>(NULL);
  }

  ConfigNavigationEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigNavigationEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigNavigationEvent& from);
  void MergeFrom(const ConfigNavigationEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigNavigationEvent* other);
  protected:
  explicit ConfigNavigationEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const void* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level(
      ::std::string* level);

  // required bytes deal_cost = 4;
  bool has_deal_cost() const;
  void clear_deal_cost();
  static const int kDealCostFieldNumber = 4;
  const ::std::string& deal_cost() const;
  void set_deal_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_deal_cost(::std::string&& value);
  #endif
  void set_deal_cost(const char* value);
  void set_deal_cost(const void* value, size_t size);
  ::std::string* mutable_deal_cost();
  ::std::string* release_deal_cost();
  void set_allocated_deal_cost(::std::string* deal_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_deal_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deal_cost(
      ::std::string* deal_cost);

  // required bytes ignore_cost = 5;
  bool has_ignore_cost() const;
  void clear_ignore_cost();
  static const int kIgnoreCostFieldNumber = 5;
  const ::std::string& ignore_cost() const;
  void set_ignore_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_ignore_cost(::std::string&& value);
  #endif
  void set_ignore_cost(const char* value);
  void set_ignore_cost(const void* value, size_t size);
  ::std::string* mutable_ignore_cost();
  ::std::string* release_ignore_cost();
  void set_allocated_ignore_cost(::std::string* ignore_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ignore_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ignore_cost(
      ::std::string* ignore_cost);

  // required bytes enemy = 6;
  bool has_enemy() const;
  void clear_enemy();
  static const int kEnemyFieldNumber = 6;
  const ::std::string& enemy() const;
  void set_enemy(const ::std::string& value);
  #if LANG_CXX11
  void set_enemy(::std::string&& value);
  #endif
  void set_enemy(const char* value);
  void set_enemy(const void* value, size_t size);
  ::std::string* mutable_enemy();
  ::std::string* release_enemy();
  void set_allocated_enemy(::std::string* enemy);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_enemy();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enemy(
      ::std::string* enemy);

  // required bytes drop = 8;
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 8;
  const ::std::string& drop() const;
  void set_drop(const ::std::string& value);
  #if LANG_CXX11
  void set_drop(::std::string&& value);
  #endif
  void set_drop(const char* value);
  void set_drop(const void* value, size_t size);
  ::std::string* mutable_drop();
  ::std::string* release_drop();
  void set_allocated_drop(::std::string* drop);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop(
      ::std::string* drop);

  // required bytes room_effect = 9;
  bool has_room_effect() const;
  void clear_room_effect();
  static const int kRoomEffectFieldNumber = 9;
  const ::std::string& room_effect() const;
  void set_room_effect(const ::std::string& value);
  #if LANG_CXX11
  void set_room_effect(::std::string&& value);
  #endif
  void set_room_effect(const char* value);
  void set_room_effect(const void* value, size_t size);
  ::std::string* mutable_room_effect();
  ::std::string* release_room_effect();
  void set_allocated_room_effect(::std::string* room_effect);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_room_effect();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room_effect(
      ::std::string* room_effect);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 model_id = 7;
  bool has_model_id() const;
  void clear_model_id();
  static const int kModelIdFieldNumber = 7;
  ::google::protobuf::int32 model_id() const;
  void set_model_id(::google::protobuf::int32 value);

  // required float probability = 10;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 10;
  float probability() const;
  void set_probability(float value);

  // required int32 duration = 11;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 11;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigNavigationEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_level();
  void clear_has_level();
  void set_has_deal_cost();
  void clear_has_deal_cost();
  void set_has_ignore_cost();
  void clear_has_ignore_cost();
  void set_has_enemy();
  void clear_has_enemy();
  void set_has_model_id();
  void clear_has_model_id();
  void set_has_drop();
  void clear_has_drop();
  void set_has_room_effect();
  void clear_has_room_effect();
  void set_has_probability();
  void clear_has_probability();
  void set_has_duration();
  void clear_has_duration();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr deal_cost_;
  ::google::protobuf::internal::ArenaStringPtr ignore_cost_;
  ::google::protobuf::internal::ArenaStringPtr enemy_;
  ::google::protobuf::internal::ArenaStringPtr drop_;
  ::google::protobuf::internal::ArenaStringPtr room_effect_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 model_id_;
  float probability_;
  ::google::protobuf::int32 duration_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDungeonAltar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDungeonAltar) */ {
 public:
  ConfigDungeonAltar();
  virtual ~ConfigDungeonAltar();

  ConfigDungeonAltar(const ConfigDungeonAltar& from);

  inline ConfigDungeonAltar& operator=(const ConfigDungeonAltar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDungeonAltar(ConfigDungeonAltar&& from) noexcept
    : ConfigDungeonAltar() {
    *this = ::std::move(from);
  }

  inline ConfigDungeonAltar& operator=(ConfigDungeonAltar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDungeonAltar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDungeonAltar* internal_default_instance() {
    return reinterpret_cast<const ConfigDungeonAltar*>(
               &_ConfigDungeonAltar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void UnsafeArenaSwap(ConfigDungeonAltar* other);
  void Swap(ConfigDungeonAltar* other);
  friend void swap(ConfigDungeonAltar& a, ConfigDungeonAltar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDungeonAltar* New() const final {
    return CreateMaybeMessage<ConfigDungeonAltar>(NULL);
  }

  ConfigDungeonAltar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDungeonAltar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDungeonAltar& from);
  void MergeFrom(const ConfigDungeonAltar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDungeonAltar* other);
  protected:
  explicit ConfigDungeonAltar(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes repair_cost = 3;
  bool has_repair_cost() const;
  void clear_repair_cost();
  static const int kRepairCostFieldNumber = 3;
  const ::std::string& repair_cost() const;
  void set_repair_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_repair_cost(::std::string&& value);
  #endif
  void set_repair_cost(const char* value);
  void set_repair_cost(const void* value, size_t size);
  ::std::string* mutable_repair_cost();
  ::std::string* release_repair_cost();
  void set_allocated_repair_cost(::std::string* repair_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_repair_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_repair_cost(
      ::std::string* repair_cost);

  // required bytes destory_cost = 4;
  bool has_destory_cost() const;
  void clear_destory_cost();
  static const int kDestoryCostFieldNumber = 4;
  const ::std::string& destory_cost() const;
  void set_destory_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_destory_cost(::std::string&& value);
  #endif
  void set_destory_cost(const char* value);
  void set_destory_cost(const void* value, size_t size);
  ::std::string* mutable_destory_cost();
  ::std::string* release_destory_cost();
  void set_allocated_destory_cost(::std::string* destory_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_destory_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destory_cost(
      ::std::string* destory_cost);

  // required bytes drop = 5;
  bool has_drop() const;
  void clear_drop();
  static const int kDropFieldNumber = 5;
  const ::std::string& drop() const;
  void set_drop(const ::std::string& value);
  #if LANG_CXX11
  void set_drop(::std::string&& value);
  #endif
  void set_drop(const char* value);
  void set_drop(const void* value, size_t size);
  ::std::string* mutable_drop();
  ::std::string* release_drop();
  void set_allocated_drop(::std::string* drop);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop(
      ::std::string* drop);

  // required bytes adjunct_skill = 8;
  bool has_adjunct_skill() const;
  void clear_adjunct_skill();
  static const int kAdjunctSkillFieldNumber = 8;
  const ::std::string& adjunct_skill() const;
  void set_adjunct_skill(const ::std::string& value);
  #if LANG_CXX11
  void set_adjunct_skill(::std::string&& value);
  #endif
  void set_adjunct_skill(const char* value);
  void set_adjunct_skill(const void* value, size_t size);
  ::std::string* mutable_adjunct_skill();
  ::std::string* release_adjunct_skill();
  void set_allocated_adjunct_skill(::std::string* adjunct_skill);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_adjunct_skill();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_adjunct_skill(
      ::std::string* adjunct_skill);

  // required bytes adjunct_level_up_cost = 9;
  bool has_adjunct_level_up_cost() const;
  void clear_adjunct_level_up_cost();
  static const int kAdjunctLevelUpCostFieldNumber = 9;
  const ::std::string& adjunct_level_up_cost() const;
  void set_adjunct_level_up_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_adjunct_level_up_cost(::std::string&& value);
  #endif
  void set_adjunct_level_up_cost(const char* value);
  void set_adjunct_level_up_cost(const void* value, size_t size);
  ::std::string* mutable_adjunct_level_up_cost();
  ::std::string* release_adjunct_level_up_cost();
  void set_allocated_adjunct_level_up_cost(::std::string* adjunct_level_up_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_adjunct_level_up_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_adjunct_level_up_cost(
      ::std::string* adjunct_level_up_cost);

  // required bytes adjunct_skill_up_cost = 10;
  bool has_adjunct_skill_up_cost() const;
  void clear_adjunct_skill_up_cost();
  static const int kAdjunctSkillUpCostFieldNumber = 10;
  const ::std::string& adjunct_skill_up_cost() const;
  void set_adjunct_skill_up_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_adjunct_skill_up_cost(::std::string&& value);
  #endif
  void set_adjunct_skill_up_cost(const char* value);
  void set_adjunct_skill_up_cost(const void* value, size_t size);
  ::std::string* mutable_adjunct_skill_up_cost();
  ::std::string* release_adjunct_skill_up_cost();
  void set_allocated_adjunct_skill_up_cost(::std::string* adjunct_skill_up_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_adjunct_skill_up_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_adjunct_skill_up_cost(
      ::std::string* adjunct_skill_up_cost);

  // required bytes adjunct_revive_cost = 11;
  bool has_adjunct_revive_cost() const;
  void clear_adjunct_revive_cost();
  static const int kAdjunctReviveCostFieldNumber = 11;
  const ::std::string& adjunct_revive_cost() const;
  void set_adjunct_revive_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_adjunct_revive_cost(::std::string&& value);
  #endif
  void set_adjunct_revive_cost(const char* value);
  void set_adjunct_revive_cost(const void* value, size_t size);
  ::std::string* mutable_adjunct_revive_cost();
  ::std::string* release_adjunct_revive_cost();
  void set_allocated_adjunct_revive_cost(::std::string* adjunct_revive_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_adjunct_revive_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_adjunct_revive_cost(
      ::std::string* adjunct_revive_cost);

  // required bytes adjunct_cure_cost = 12;
  bool has_adjunct_cure_cost() const;
  void clear_adjunct_cure_cost();
  static const int kAdjunctCureCostFieldNumber = 12;
  const ::std::string& adjunct_cure_cost() const;
  void set_adjunct_cure_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_adjunct_cure_cost(::std::string&& value);
  #endif
  void set_adjunct_cure_cost(const char* value);
  void set_adjunct_cure_cost(const void* value, size_t size);
  ::std::string* mutable_adjunct_cure_cost();
  ::std::string* release_adjunct_cure_cost();
  void set_allocated_adjunct_cure_cost(::std::string* adjunct_cure_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_adjunct_cure_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_adjunct_cure_cost(
      ::std::string* adjunct_cure_cost);

  // required bytes special_skill = 13;
  bool has_special_skill() const;
  void clear_special_skill();
  static const int kSpecialSkillFieldNumber = 13;
  const ::std::string& special_skill() const;
  void set_special_skill(const ::std::string& value);
  #if LANG_CXX11
  void set_special_skill(::std::string&& value);
  #endif
  void set_special_skill(const char* value);
  void set_special_skill(const void* value, size_t size);
  ::std::string* mutable_special_skill();
  ::std::string* release_special_skill();
  void set_allocated_special_skill(::std::string* special_skill);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_special_skill();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_special_skill(
      ::std::string* special_skill);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 adjunct = 6;
  bool has_adjunct() const;
  void clear_adjunct();
  static const int kAdjunctFieldNumber = 6;
  ::google::protobuf::int32 adjunct() const;
  void set_adjunct(::google::protobuf::int32 value);

  // required int32 adjunct_type = 7;
  bool has_adjunct_type() const;
  void clear_adjunct_type();
  static const int kAdjunctTypeFieldNumber = 7;
  ::google::protobuf::int32 adjunct_type() const;
  void set_adjunct_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigDungeonAltar)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_repair_cost();
  void clear_has_repair_cost();
  void set_has_destory_cost();
  void clear_has_destory_cost();
  void set_has_drop();
  void clear_has_drop();
  void set_has_adjunct();
  void clear_has_adjunct();
  void set_has_adjunct_type();
  void clear_has_adjunct_type();
  void set_has_adjunct_skill();
  void clear_has_adjunct_skill();
  void set_has_adjunct_level_up_cost();
  void clear_has_adjunct_level_up_cost();
  void set_has_adjunct_skill_up_cost();
  void clear_has_adjunct_skill_up_cost();
  void set_has_adjunct_revive_cost();
  void clear_has_adjunct_revive_cost();
  void set_has_adjunct_cure_cost();
  void clear_has_adjunct_cure_cost();
  void set_has_special_skill();
  void clear_has_special_skill();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr repair_cost_;
  ::google::protobuf::internal::ArenaStringPtr destory_cost_;
  ::google::protobuf::internal::ArenaStringPtr drop_;
  ::google::protobuf::internal::ArenaStringPtr adjunct_skill_;
  ::google::protobuf::internal::ArenaStringPtr adjunct_level_up_cost_;
  ::google::protobuf::internal::ArenaStringPtr adjunct_skill_up_cost_;
  ::google::protobuf::internal::ArenaStringPtr adjunct_revive_cost_;
  ::google::protobuf::internal::ArenaStringPtr adjunct_cure_cost_;
  ::google::protobuf::internal::ArenaStringPtr special_skill_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 adjunct_;
  ::google::protobuf::int32 adjunct_type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigRobot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigRobot) */ {
 public:
  ConfigRobot();
  virtual ~ConfigRobot();

  ConfigRobot(const ConfigRobot& from);

  inline ConfigRobot& operator=(const ConfigRobot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigRobot(ConfigRobot&& from) noexcept
    : ConfigRobot() {
    *this = ::std::move(from);
  }

  inline ConfigRobot& operator=(ConfigRobot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRobot* internal_default_instance() {
    return reinterpret_cast<const ConfigRobot*>(
               &_ConfigRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void UnsafeArenaSwap(ConfigRobot* other);
  void Swap(ConfigRobot* other);
  friend void swap(ConfigRobot& a, ConfigRobot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigRobot* New() const final {
    return CreateMaybeMessage<ConfigRobot>(NULL);
  }

  ConfigRobot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRobot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigRobot& from);
  void MergeFrom(const ConfigRobot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRobot* other);
  protected:
  explicit ConfigRobot(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes score = 3;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  const ::std::string& score() const;
  void set_score(const ::std::string& value);
  #if LANG_CXX11
  void set_score(::std::string&& value);
  #endif
  void set_score(const char* value);
  void set_score(const void* value, size_t size);
  ::std::string* mutable_score();
  ::std::string* release_score();
  void set_allocated_score(::std::string* score);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_score();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_score(
      ::std::string* score);

  // required bytes captain_level = 4;
  bool has_captain_level() const;
  void clear_captain_level();
  static const int kCaptainLevelFieldNumber = 4;
  const ::std::string& captain_level() const;
  void set_captain_level(const ::std::string& value);
  #if LANG_CXX11
  void set_captain_level(::std::string&& value);
  #endif
  void set_captain_level(const char* value);
  void set_captain_level(const void* value, size_t size);
  ::std::string* mutable_captain_level();
  ::std::string* release_captain_level();
  void set_allocated_captain_level(::std::string* captain_level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_captain_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captain_level(
      ::std::string* captain_level);

  // required bytes sailor_num_in_jjc = 5;
  bool has_sailor_num_in_jjc() const;
  void clear_sailor_num_in_jjc();
  static const int kSailorNumInJjcFieldNumber = 5;
  const ::std::string& sailor_num_in_jjc() const;
  void set_sailor_num_in_jjc(const ::std::string& value);
  #if LANG_CXX11
  void set_sailor_num_in_jjc(::std::string&& value);
  #endif
  void set_sailor_num_in_jjc(const char* value);
  void set_sailor_num_in_jjc(const void* value, size_t size);
  ::std::string* mutable_sailor_num_in_jjc();
  ::std::string* release_sailor_num_in_jjc();
  void set_allocated_sailor_num_in_jjc(::std::string* sailor_num_in_jjc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_sailor_num_in_jjc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sailor_num_in_jjc(
      ::std::string* sailor_num_in_jjc);

  // required bytes sailor_in_jjc = 6;
  bool has_sailor_in_jjc() const;
  void clear_sailor_in_jjc();
  static const int kSailorInJjcFieldNumber = 6;
  const ::std::string& sailor_in_jjc() const;
  void set_sailor_in_jjc(const ::std::string& value);
  #if LANG_CXX11
  void set_sailor_in_jjc(::std::string&& value);
  #endif
  void set_sailor_in_jjc(const char* value);
  void set_sailor_in_jjc(const void* value, size_t size);
  ::std::string* mutable_sailor_in_jjc();
  ::std::string* release_sailor_in_jjc();
  void set_allocated_sailor_in_jjc(::std::string* sailor_in_jjc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_sailor_in_jjc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sailor_in_jjc(
      ::std::string* sailor_in_jjc);

  // required bytes sailor_level = 7;
  bool has_sailor_level() const;
  void clear_sailor_level();
  static const int kSailorLevelFieldNumber = 7;
  const ::std::string& sailor_level() const;
  void set_sailor_level(const ::std::string& value);
  #if LANG_CXX11
  void set_sailor_level(::std::string&& value);
  #endif
  void set_sailor_level(const char* value);
  void set_sailor_level(const void* value, size_t size);
  ::std::string* mutable_sailor_level();
  ::std::string* release_sailor_level();
  void set_allocated_sailor_level(::std::string* sailor_level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_sailor_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sailor_level(
      ::std::string* sailor_level);

  // required bytes sailor_star = 8;
  bool has_sailor_star() const;
  void clear_sailor_star();
  static const int kSailorStarFieldNumber = 8;
  const ::std::string& sailor_star() const;
  void set_sailor_star(const ::std::string& value);
  #if LANG_CXX11
  void set_sailor_star(::std::string&& value);
  #endif
  void set_sailor_star(const char* value);
  void set_sailor_star(const void* value, size_t size);
  ::std::string* mutable_sailor_star();
  ::std::string* release_sailor_star();
  void set_allocated_sailor_star(::std::string* sailor_star);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_sailor_star();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sailor_star(
      ::std::string* sailor_star);

  // required bytes ship_model = 9;
  bool has_ship_model() const;
  void clear_ship_model();
  static const int kShipModelFieldNumber = 9;
  const ::std::string& ship_model() const;
  void set_ship_model(const ::std::string& value);
  #if LANG_CXX11
  void set_ship_model(::std::string&& value);
  #endif
  void set_ship_model(const char* value);
  void set_ship_model(const void* value, size_t size);
  ::std::string* mutable_ship_model();
  ::std::string* release_ship_model();
  void set_allocated_ship_model(::std::string* ship_model);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ship_model();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ship_model(
      ::std::string* ship_model);

  // required bytes sailor_practice = 10;
  bool has_sailor_practice() const;
  void clear_sailor_practice();
  static const int kSailorPracticeFieldNumber = 10;
  const ::std::string& sailor_practice() const;
  void set_sailor_practice(const ::std::string& value);
  #if LANG_CXX11
  void set_sailor_practice(::std::string&& value);
  #endif
  void set_sailor_practice(const char* value);
  void set_sailor_practice(const void* value, size_t size);
  ::std::string* mutable_sailor_practice();
  ::std::string* release_sailor_practice();
  void set_allocated_sailor_practice(::std::string* sailor_practice);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_sailor_practice();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sailor_practice(
      ::std::string* sailor_practice);

  // required bytes sailor_num_in_ship = 11;
  bool has_sailor_num_in_ship() const;
  void clear_sailor_num_in_ship();
  static const int kSailorNumInShipFieldNumber = 11;
  const ::std::string& sailor_num_in_ship() const;
  void set_sailor_num_in_ship(const ::std::string& value);
  #if LANG_CXX11
  void set_sailor_num_in_ship(::std::string&& value);
  #endif
  void set_sailor_num_in_ship(const char* value);
  void set_sailor_num_in_ship(const void* value, size_t size);
  ::std::string* mutable_sailor_num_in_ship();
  ::std::string* release_sailor_num_in_ship();
  void set_allocated_sailor_num_in_ship(::std::string* sailor_num_in_ship);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_sailor_num_in_ship();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sailor_num_in_ship(
      ::std::string* sailor_num_in_ship);

  // required bytes sailor_in_ship = 12;
  bool has_sailor_in_ship() const;
  void clear_sailor_in_ship();
  static const int kSailorInShipFieldNumber = 12;
  const ::std::string& sailor_in_ship() const;
  void set_sailor_in_ship(const ::std::string& value);
  #if LANG_CXX11
  void set_sailor_in_ship(::std::string&& value);
  #endif
  void set_sailor_in_ship(const char* value);
  void set_sailor_in_ship(const void* value, size_t size);
  ::std::string* mutable_sailor_in_ship();
  ::std::string* release_sailor_in_ship();
  void set_allocated_sailor_in_ship(::std::string* sailor_in_ship);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_sailor_in_ship();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sailor_in_ship(
      ::std::string* sailor_in_ship);

  // required bytes equip_quality = 13;
  bool has_equip_quality() const;
  void clear_equip_quality();
  static const int kEquipQualityFieldNumber = 13;
  const ::std::string& equip_quality() const;
  void set_equip_quality(const ::std::string& value);
  #if LANG_CXX11
  void set_equip_quality(::std::string&& value);
  #endif
  void set_equip_quality(const char* value);
  void set_equip_quality(const void* value, size_t size);
  ::std::string* mutable_equip_quality();
  ::std::string* release_equip_quality();
  void set_allocated_equip_quality(::std::string* equip_quality);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_equip_quality();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_equip_quality(
      ::std::string* equip_quality);

  // required bytes items = 14;
  bool has_items() const;
  void clear_items();
  static const int kItemsFieldNumber = 14;
  const ::std::string& items() const;
  void set_items(const ::std::string& value);
  #if LANG_CXX11
  void set_items(::std::string&& value);
  #endif
  void set_items(const char* value);
  void set_items(const void* value, size_t size);
  ::std::string* mutable_items();
  ::std::string* release_items();
  void set_allocated_items(::std::string* items);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_items();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_items(
      ::std::string* items);

  // required bytes invade_score = 15;
  bool has_invade_score() const;
  void clear_invade_score();
  static const int kInvadeScoreFieldNumber = 15;
  const ::std::string& invade_score() const;
  void set_invade_score(const ::std::string& value);
  #if LANG_CXX11
  void set_invade_score(::std::string&& value);
  #endif
  void set_invade_score(const char* value);
  void set_invade_score(const void* value, size_t size);
  ::std::string* mutable_invade_score();
  ::std::string* release_invade_score();
  void set_allocated_invade_score(::std::string* invade_score);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_invade_score();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invade_score(
      ::std::string* invade_score);

  // required int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigRobot)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_num();
  void clear_has_num();
  void set_has_score();
  void clear_has_score();
  void set_has_captain_level();
  void clear_has_captain_level();
  void set_has_sailor_num_in_jjc();
  void clear_has_sailor_num_in_jjc();
  void set_has_sailor_in_jjc();
  void clear_has_sailor_in_jjc();
  void set_has_sailor_level();
  void clear_has_sailor_level();
  void set_has_sailor_star();
  void clear_has_sailor_star();
  void set_has_ship_model();
  void clear_has_ship_model();
  void set_has_sailor_practice();
  void clear_has_sailor_practice();
  void set_has_sailor_num_in_ship();
  void clear_has_sailor_num_in_ship();
  void set_has_sailor_in_ship();
  void clear_has_sailor_in_ship();
  void set_has_equip_quality();
  void clear_has_equip_quality();
  void set_has_items();
  void clear_has_items();
  void set_has_invade_score();
  void clear_has_invade_score();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr score_;
  ::google::protobuf::internal::ArenaStringPtr captain_level_;
  ::google::protobuf::internal::ArenaStringPtr sailor_num_in_jjc_;
  ::google::protobuf::internal::ArenaStringPtr sailor_in_jjc_;
  ::google::protobuf::internal::ArenaStringPtr sailor_level_;
  ::google::protobuf::internal::ArenaStringPtr sailor_star_;
  ::google::protobuf::internal::ArenaStringPtr ship_model_;
  ::google::protobuf::internal::ArenaStringPtr sailor_practice_;
  ::google::protobuf::internal::ArenaStringPtr sailor_num_in_ship_;
  ::google::protobuf::internal::ArenaStringPtr sailor_in_ship_;
  ::google::protobuf::internal::ArenaStringPtr equip_quality_;
  ::google::protobuf::internal::ArenaStringPtr items_;
  ::google::protobuf::internal::ArenaStringPtr invade_score_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 num_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigBeacon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigBeacon) */ {
 public:
  ConfigBeacon();
  virtual ~ConfigBeacon();

  ConfigBeacon(const ConfigBeacon& from);

  inline ConfigBeacon& operator=(const ConfigBeacon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigBeacon(ConfigBeacon&& from) noexcept
    : ConfigBeacon() {
    *this = ::std::move(from);
  }

  inline ConfigBeacon& operator=(ConfigBeacon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigBeacon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigBeacon* internal_default_instance() {
    return reinterpret_cast<const ConfigBeacon*>(
               &_ConfigBeacon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void UnsafeArenaSwap(ConfigBeacon* other);
  void Swap(ConfigBeacon* other);
  friend void swap(ConfigBeacon& a, ConfigBeacon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigBeacon* New() const final {
    return CreateMaybeMessage<ConfigBeacon>(NULL);
  }

  ConfigBeacon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigBeacon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigBeacon& from);
  void MergeFrom(const ConfigBeacon& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigBeacon* other);
  protected:
  explicit ConfigBeacon(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes level_up_cost = 2;
  bool has_level_up_cost() const;
  void clear_level_up_cost();
  static const int kLevelUpCostFieldNumber = 2;
  const ::std::string& level_up_cost() const;
  void set_level_up_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_level_up_cost(::std::string&& value);
  #endif
  void set_level_up_cost(const char* value);
  void set_level_up_cost(const void* value, size_t size);
  ::std::string* mutable_level_up_cost();
  ::std::string* release_level_up_cost();
  void set_allocated_level_up_cost(::std::string* level_up_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_level_up_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_up_cost(
      ::std::string* level_up_cost);

  // required bytes explore_scope = 4;
  bool has_explore_scope() const;
  void clear_explore_scope();
  static const int kExploreScopeFieldNumber = 4;
  const ::std::string& explore_scope() const;
  void set_explore_scope(const ::std::string& value);
  #if LANG_CXX11
  void set_explore_scope(::std::string&& value);
  #endif
  void set_explore_scope(const char* value);
  void set_explore_scope(const void* value, size_t size);
  ::std::string* mutable_explore_scope();
  ::std::string* release_explore_scope();
  void set_allocated_explore_scope(::std::string* explore_scope);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_explore_scope();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_explore_scope(
      ::std::string* explore_scope);

  // required int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 level_up_time = 3;
  bool has_level_up_time() const;
  void clear_level_up_time();
  static const int kLevelUpTimeFieldNumber = 3;
  ::google::protobuf::int32 level_up_time() const;
  void set_level_up_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigBeacon)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_level_up_cost();
  void clear_has_level_up_cost();
  void set_has_level_up_time();
  void clear_has_level_up_time();
  void set_has_explore_scope();
  void clear_has_explore_scope();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr level_up_cost_;
  ::google::protobuf::internal::ArenaStringPtr explore_scope_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 level_up_time_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMaelstromTile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMaelstromTile) */ {
 public:
  ConfigMaelstromTile();
  virtual ~ConfigMaelstromTile();

  ConfigMaelstromTile(const ConfigMaelstromTile& from);

  inline ConfigMaelstromTile& operator=(const ConfigMaelstromTile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMaelstromTile(ConfigMaelstromTile&& from) noexcept
    : ConfigMaelstromTile() {
    *this = ::std::move(from);
  }

  inline ConfigMaelstromTile& operator=(ConfigMaelstromTile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMaelstromTile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMaelstromTile* internal_default_instance() {
    return reinterpret_cast<const ConfigMaelstromTile*>(
               &_ConfigMaelstromTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void UnsafeArenaSwap(ConfigMaelstromTile* other);
  void Swap(ConfigMaelstromTile* other);
  friend void swap(ConfigMaelstromTile& a, ConfigMaelstromTile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMaelstromTile* New() const final {
    return CreateMaybeMessage<ConfigMaelstromTile>(NULL);
  }

  ConfigMaelstromTile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMaelstromTile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMaelstromTile& from);
  void MergeFrom(const ConfigMaelstromTile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMaelstromTile* other);
  protected:
  explicit ConfigMaelstromTile(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const void* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_event();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event(
      ::std::string* event);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 oil_cost = 3;
  bool has_oil_cost() const;
  void clear_oil_cost();
  static const int kOilCostFieldNumber = 3;
  ::google::protobuf::int32 oil_cost() const;
  void set_oil_cost(::google::protobuf::int32 value);

  // required int32 event_num = 4;
  bool has_event_num() const;
  void clear_event_num();
  static const int kEventNumFieldNumber = 4;
  ::google::protobuf::int32 event_num() const;
  void set_event_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigMaelstromTile)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_event();
  void clear_has_event();
  void set_has_oil_cost();
  void clear_has_oil_cost();
  void set_has_event_num();
  void clear_has_event_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 oil_cost_;
  ::google::protobuf::int32 event_num_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMaelstrom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMaelstrom) */ {
 public:
  ConfigMaelstrom();
  virtual ~ConfigMaelstrom();

  ConfigMaelstrom(const ConfigMaelstrom& from);

  inline ConfigMaelstrom& operator=(const ConfigMaelstrom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMaelstrom(ConfigMaelstrom&& from) noexcept
    : ConfigMaelstrom() {
    *this = ::std::move(from);
  }

  inline ConfigMaelstrom& operator=(ConfigMaelstrom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMaelstrom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMaelstrom* internal_default_instance() {
    return reinterpret_cast<const ConfigMaelstrom*>(
               &_ConfigMaelstrom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void UnsafeArenaSwap(ConfigMaelstrom* other);
  void Swap(ConfigMaelstrom* other);
  friend void swap(ConfigMaelstrom& a, ConfigMaelstrom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMaelstrom* New() const final {
    return CreateMaybeMessage<ConfigMaelstrom>(NULL);
  }

  ConfigMaelstrom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMaelstrom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMaelstrom& from);
  void MergeFrom(const ConfigMaelstrom& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMaelstrom* other);
  protected:
  explicit ConfigMaelstrom(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes map_size = 2;
  bool has_map_size() const;
  void clear_map_size();
  static const int kMapSizeFieldNumber = 2;
  const ::std::string& map_size() const;
  void set_map_size(const ::std::string& value);
  #if LANG_CXX11
  void set_map_size(::std::string&& value);
  #endif
  void set_map_size(const char* value);
  void set_map_size(const void* value, size_t size);
  ::std::string* mutable_map_size();
  ::std::string* release_map_size();
  void set_allocated_map_size(::std::string* map_size);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_map_size();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_size(
      ::std::string* map_size);

  // required bytes map = 3;
  bool has_map() const;
  void clear_map();
  static const int kMapFieldNumber = 3;
  const ::std::string& map() const;
  void set_map(const ::std::string& value);
  #if LANG_CXX11
  void set_map(::std::string&& value);
  #endif
  void set_map(const char* value);
  void set_map(const void* value, size_t size);
  ::std::string* mutable_map();
  ::std::string* release_map();
  void set_allocated_map(::std::string* map);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_map();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map(
      ::std::string* map);

  // required bytes guild_island_pos = 4;
  bool has_guild_island_pos() const;
  void clear_guild_island_pos();
  static const int kGuildIslandPosFieldNumber = 4;
  const ::std::string& guild_island_pos() const;
  void set_guild_island_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_island_pos(::std::string&& value);
  #endif
  void set_guild_island_pos(const char* value);
  void set_guild_island_pos(const void* value, size_t size);
  ::std::string* mutable_guild_island_pos();
  ::std::string* release_guild_island_pos();
  void set_allocated_guild_island_pos(::std::string* guild_island_pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_guild_island_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guild_island_pos(
      ::std::string* guild_island_pos);

  // required bytes guild_island_size = 5;
  bool has_guild_island_size() const;
  void clear_guild_island_size();
  static const int kGuildIslandSizeFieldNumber = 5;
  const ::std::string& guild_island_size() const;
  void set_guild_island_size(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_island_size(::std::string&& value);
  #endif
  void set_guild_island_size(const char* value);
  void set_guild_island_size(const void* value, size_t size);
  ::std::string* mutable_guild_island_size();
  ::std::string* release_guild_island_size();
  void set_allocated_guild_island_size(::std::string* guild_island_size);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_guild_island_size();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guild_island_size(
      ::std::string* guild_island_size);

  // required bytes oil_well_pos = 6;
  bool has_oil_well_pos() const;
  void clear_oil_well_pos();
  static const int kOilWellPosFieldNumber = 6;
  const ::std::string& oil_well_pos() const;
  void set_oil_well_pos(const ::std::string& value);
  #if LANG_CXX11
  void set_oil_well_pos(::std::string&& value);
  #endif
  void set_oil_well_pos(const char* value);
  void set_oil_well_pos(const void* value, size_t size);
  ::std::string* mutable_oil_well_pos();
  ::std::string* release_oil_well_pos();
  void set_allocated_oil_well_pos(::std::string* oil_well_pos);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_oil_well_pos();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oil_well_pos(
      ::std::string* oil_well_pos);

  // required bytes oil_well_size = 7;
  bool has_oil_well_size() const;
  void clear_oil_well_size();
  static const int kOilWellSizeFieldNumber = 7;
  const ::std::string& oil_well_size() const;
  void set_oil_well_size(const ::std::string& value);
  #if LANG_CXX11
  void set_oil_well_size(::std::string&& value);
  #endif
  void set_oil_well_size(const char* value);
  void set_oil_well_size(const void* value, size_t size);
  ::std::string* mutable_oil_well_size();
  ::std::string* release_oil_well_size();
  void set_allocated_oil_well_size(::std::string* oil_well_size);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_oil_well_size();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oil_well_size(
      ::std::string* oil_well_size);

  // required bytes event_refresh_time = 13;
  bool has_event_refresh_time() const;
  void clear_event_refresh_time();
  static const int kEventRefreshTimeFieldNumber = 13;
  const ::std::string& event_refresh_time() const;
  void set_event_refresh_time(const ::std::string& value);
  #if LANG_CXX11
  void set_event_refresh_time(::std::string&& value);
  #endif
  void set_event_refresh_time(const char* value);
  void set_event_refresh_time(const void* value, size_t size);
  ::std::string* mutable_event_refresh_time();
  ::std::string* release_event_refresh_time();
  void set_allocated_event_refresh_time(::std::string* event_refresh_time);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_event_refresh_time();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_refresh_time(
      ::std::string* event_refresh_time);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 oil_id = 8;
  bool has_oil_id() const;
  void clear_oil_id();
  static const int kOilIdFieldNumber = 8;
  ::google::protobuf::int32 oil_id() const;
  void set_oil_id(::google::protobuf::int32 value);

  // required int32 oil_output = 9;
  bool has_oil_output() const;
  void clear_oil_output();
  static const int kOilOutputFieldNumber = 9;
  ::google::protobuf::int32 oil_output() const;
  void set_oil_output(::google::protobuf::int32 value);

  // required int32 oil_reserves = 10;
  bool has_oil_reserves() const;
  void clear_oil_reserves();
  static const int kOilReservesFieldNumber = 10;
  ::google::protobuf::int32 oil_reserves() const;
  void set_oil_reserves(::google::protobuf::int32 value);

  // required int32 ship_oil_reserves = 11;
  bool has_ship_oil_reserves() const;
  void clear_ship_oil_reserves();
  static const int kShipOilReservesFieldNumber = 11;
  ::google::protobuf::int32 ship_oil_reserves() const;
  void set_ship_oil_reserves(::google::protobuf::int32 value);

  // required int32 repair_seconds = 12;
  bool has_repair_seconds() const;
  void clear_repair_seconds();
  static const int kRepairSecondsFieldNumber = 12;
  ::google::protobuf::int32 repair_seconds() const;
  void set_repair_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigMaelstrom)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_map_size();
  void clear_has_map_size();
  void set_has_map();
  void clear_has_map();
  void set_has_guild_island_pos();
  void clear_has_guild_island_pos();
  void set_has_guild_island_size();
  void clear_has_guild_island_size();
  void set_has_oil_well_pos();
  void clear_has_oil_well_pos();
  void set_has_oil_well_size();
  void clear_has_oil_well_size();
  void set_has_oil_id();
  void clear_has_oil_id();
  void set_has_oil_output();
  void clear_has_oil_output();
  void set_has_oil_reserves();
  void clear_has_oil_reserves();
  void set_has_ship_oil_reserves();
  void clear_has_ship_oil_reserves();
  void set_has_repair_seconds();
  void clear_has_repair_seconds();
  void set_has_event_refresh_time();
  void clear_has_event_refresh_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr map_size_;
  ::google::protobuf::internal::ArenaStringPtr map_;
  ::google::protobuf::internal::ArenaStringPtr guild_island_pos_;
  ::google::protobuf::internal::ArenaStringPtr guild_island_size_;
  ::google::protobuf::internal::ArenaStringPtr oil_well_pos_;
  ::google::protobuf::internal::ArenaStringPtr oil_well_size_;
  ::google::protobuf::internal::ArenaStringPtr event_refresh_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 oil_id_;
  ::google::protobuf::int32 oil_output_;
  ::google::protobuf::int32 oil_reserves_;
  ::google::protobuf::int32 ship_oil_reserves_;
  ::google::protobuf::int32 repair_seconds_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMaelstromEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigMaelstromEvent) */ {
 public:
  ConfigMaelstromEvent();
  virtual ~ConfigMaelstromEvent();

  ConfigMaelstromEvent(const ConfigMaelstromEvent& from);

  inline ConfigMaelstromEvent& operator=(const ConfigMaelstromEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMaelstromEvent(ConfigMaelstromEvent&& from) noexcept
    : ConfigMaelstromEvent() {
    *this = ::std::move(from);
  }

  inline ConfigMaelstromEvent& operator=(ConfigMaelstromEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMaelstromEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMaelstromEvent* internal_default_instance() {
    return reinterpret_cast<const ConfigMaelstromEvent*>(
               &_ConfigMaelstromEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void UnsafeArenaSwap(ConfigMaelstromEvent* other);
  void Swap(ConfigMaelstromEvent* other);
  friend void swap(ConfigMaelstromEvent& a, ConfigMaelstromEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMaelstromEvent* New() const final {
    return CreateMaybeMessage<ConfigMaelstromEvent>(NULL);
  }

  ConfigMaelstromEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigMaelstromEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigMaelstromEvent& from);
  void MergeFrom(const ConfigMaelstromEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigMaelstromEvent* other);
  protected:
  explicit ConfigMaelstromEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes need_level = 3;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 3;
  const ::std::string& need_level() const;
  void set_need_level(const ::std::string& value);
  #if LANG_CXX11
  void set_need_level(::std::string&& value);
  #endif
  void set_need_level(const char* value);
  void set_need_level(const void* value, size_t size);
  ::std::string* mutable_need_level();
  ::std::string* release_need_level();
  void set_allocated_need_level(::std::string* need_level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_need_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_need_level(
      ::std::string* need_level);

  // required bytes contant = 4;
  bool has_contant() const;
  void clear_contant();
  static const int kContantFieldNumber = 4;
  const ::std::string& contant() const;
  void set_contant(const ::std::string& value);
  #if LANG_CXX11
  void set_contant(::std::string&& value);
  #endif
  void set_contant(const char* value);
  void set_contant(const void* value, size_t size);
  ::std::string* mutable_contant();
  ::std::string* release_contant();
  void set_allocated_contant(::std::string* contant);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_contant();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contant(
      ::std::string* contant);

  // required bytes reward = 5;
  bool has_reward() const;
  void clear_reward();
  static const int kRewardFieldNumber = 5;
  const ::std::string& reward() const;
  void set_reward(const ::std::string& value);
  #if LANG_CXX11
  void set_reward(::std::string&& value);
  #endif
  void set_reward(const char* value);
  void set_reward(const void* value, size_t size);
  ::std::string* mutable_reward();
  ::std::string* release_reward();
  void set_allocated_reward(::std::string* reward);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward(
      ::std::string* reward);

  // required bytes trigger_event = 7;
  bool has_trigger_event() const;
  void clear_trigger_event();
  static const int kTriggerEventFieldNumber = 7;
  const ::std::string& trigger_event() const;
  void set_trigger_event(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_event(::std::string&& value);
  #endif
  void set_trigger_event(const char* value);
  void set_trigger_event(const void* value, size_t size);
  ::std::string* mutable_trigger_event();
  ::std::string* release_trigger_event();
  void set_allocated_trigger_event(::std::string* trigger_event);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_trigger_event();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trigger_event(
      ::std::string* trigger_event);

  // required bytes explore_point = 8;
  bool has_explore_point() const;
  void clear_explore_point();
  static const int kExplorePointFieldNumber = 8;
  const ::std::string& explore_point() const;
  void set_explore_point(const ::std::string& value);
  #if LANG_CXX11
  void set_explore_point(::std::string&& value);
  #endif
  void set_explore_point(const char* value);
  void set_explore_point(const void* value, size_t size);
  ::std::string* mutable_explore_point();
  ::std::string* release_explore_point();
  void set_allocated_explore_point(::std::string* explore_point);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_explore_point();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_explore_point(
      ::std::string* explore_point);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 trigger_times = 6;
  bool has_trigger_times() const;
  void clear_trigger_times();
  static const int kTriggerTimesFieldNumber = 6;
  ::google::protobuf::int32 trigger_times() const;
  void set_trigger_times(::google::protobuf::int32 value);

  // required int32 explore_level_up = 9;
  bool has_explore_level_up() const;
  void clear_explore_level_up();
  static const int kExploreLevelUpFieldNumber = 9;
  ::google::protobuf::int32 explore_level_up() const;
  void set_explore_level_up(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigMaelstromEvent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_need_level();
  void clear_has_need_level();
  void set_has_contant();
  void clear_has_contant();
  void set_has_reward();
  void clear_has_reward();
  void set_has_trigger_times();
  void clear_has_trigger_times();
  void set_has_trigger_event();
  void clear_has_trigger_event();
  void set_has_explore_point();
  void clear_has_explore_point();
  void set_has_explore_level_up();
  void clear_has_explore_level_up();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr need_level_;
  ::google::protobuf::internal::ArenaStringPtr contant_;
  ::google::protobuf::internal::ArenaStringPtr reward_;
  ::google::protobuf::internal::ArenaStringPtr trigger_event_;
  ::google::protobuf::internal::ArenaStringPtr explore_point_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 trigger_times_;
  ::google::protobuf::int32 explore_level_up_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigProfession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigProfession) */ {
 public:
  ConfigProfession();
  virtual ~ConfigProfession();

  ConfigProfession(const ConfigProfession& from);

  inline ConfigProfession& operator=(const ConfigProfession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigProfession(ConfigProfession&& from) noexcept
    : ConfigProfession() {
    *this = ::std::move(from);
  }

  inline ConfigProfession& operator=(ConfigProfession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigProfession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigProfession* internal_default_instance() {
    return reinterpret_cast<const ConfigProfession*>(
               &_ConfigProfession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void UnsafeArenaSwap(ConfigProfession* other);
  void Swap(ConfigProfession* other);
  friend void swap(ConfigProfession& a, ConfigProfession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigProfession* New() const final {
    return CreateMaybeMessage<ConfigProfession>(NULL);
  }

  ConfigProfession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigProfession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigProfession& from);
  void MergeFrom(const ConfigProfession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigProfession* other);
  protected:
  explicit ConfigProfession(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes pro_args = 3;
  bool has_pro_args() const;
  void clear_pro_args();
  static const int kProArgsFieldNumber = 3;
  const ::std::string& pro_args() const;
  void set_pro_args(const ::std::string& value);
  #if LANG_CXX11
  void set_pro_args(::std::string&& value);
  #endif
  void set_pro_args(const char* value);
  void set_pro_args(const void* value, size_t size);
  ::std::string* mutable_pro_args();
  ::std::string* release_pro_args();
  void set_allocated_pro_args(::std::string* pro_args);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pro_args();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pro_args(
      ::std::string* pro_args);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 main_attr = 2;
  bool has_main_attr() const;
  void clear_main_attr();
  static const int kMainAttrFieldNumber = 2;
  ::google::protobuf::int32 main_attr() const;
  void set_main_attr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigProfession)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_main_attr();
  void clear_has_main_attr();
  void set_has_pro_args();
  void clear_has_pro_args();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pro_args_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 main_attr_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigBeaconTalent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigBeaconTalent) */ {
 public:
  ConfigBeaconTalent();
  virtual ~ConfigBeaconTalent();

  ConfigBeaconTalent(const ConfigBeaconTalent& from);

  inline ConfigBeaconTalent& operator=(const ConfigBeaconTalent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigBeaconTalent(ConfigBeaconTalent&& from) noexcept
    : ConfigBeaconTalent() {
    *this = ::std::move(from);
  }

  inline ConfigBeaconTalent& operator=(ConfigBeaconTalent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigBeaconTalent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigBeaconTalent* internal_default_instance() {
    return reinterpret_cast<const ConfigBeaconTalent*>(
               &_ConfigBeaconTalent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void UnsafeArenaSwap(ConfigBeaconTalent* other);
  void Swap(ConfigBeaconTalent* other);
  friend void swap(ConfigBeaconTalent& a, ConfigBeaconTalent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigBeaconTalent* New() const final {
    return CreateMaybeMessage<ConfigBeaconTalent>(NULL);
  }

  ConfigBeaconTalent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigBeaconTalent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigBeaconTalent& from);
  void MergeFrom(const ConfigBeaconTalent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigBeaconTalent* other);
  protected:
  explicit ConfigBeaconTalent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes pre_talent = 5;
  bool has_pre_talent() const;
  void clear_pre_talent();
  static const int kPreTalentFieldNumber = 5;
  const ::std::string& pre_talent() const;
  void set_pre_talent(const ::std::string& value);
  #if LANG_CXX11
  void set_pre_talent(::std::string&& value);
  #endif
  void set_pre_talent(const char* value);
  void set_pre_talent(const void* value, size_t size);
  ::std::string* mutable_pre_talent();
  ::std::string* release_pre_talent();
  void set_allocated_pre_talent(::std::string* pre_talent);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pre_talent();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre_talent(
      ::std::string* pre_talent);

  // required bytes get_item = 6;
  bool has_get_item() const;
  void clear_get_item();
  static const int kGetItemFieldNumber = 6;
  const ::std::string& get_item() const;
  void set_get_item(const ::std::string& value);
  #if LANG_CXX11
  void set_get_item(::std::string&& value);
  #endif
  void set_get_item(const char* value);
  void set_get_item(const void* value, size_t size);
  ::std::string* mutable_get_item();
  ::std::string* release_get_item();
  void set_allocated_get_item(::std::string* get_item);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_get_item();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_get_item(
      ::std::string* get_item);

  // required bytes event_reward_add = 7;
  bool has_event_reward_add() const;
  void clear_event_reward_add();
  static const int kEventRewardAddFieldNumber = 7;
  const ::std::string& event_reward_add() const;
  void set_event_reward_add(const ::std::string& value);
  #if LANG_CXX11
  void set_event_reward_add(::std::string&& value);
  #endif
  void set_event_reward_add(const char* value);
  void set_event_reward_add(const void* value, size_t size);
  ::std::string* mutable_event_reward_add();
  ::std::string* release_event_reward_add();
  void set_allocated_event_reward_add(::std::string* event_reward_add);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_event_reward_add();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_reward_add(
      ::std::string* event_reward_add);

  // required bytes point_cost_down = 8;
  bool has_point_cost_down() const;
  void clear_point_cost_down();
  static const int kPointCostDownFieldNumber = 8;
  const ::std::string& point_cost_down() const;
  void set_point_cost_down(const ::std::string& value);
  #if LANG_CXX11
  void set_point_cost_down(::std::string&& value);
  #endif
  void set_point_cost_down(const char* value);
  void set_point_cost_down(const void* value, size_t size);
  ::std::string* mutable_point_cost_down();
  ::std::string* release_point_cost_down();
  void set_allocated_point_cost_down(::std::string* point_cost_down);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_point_cost_down();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_point_cost_down(
      ::std::string* point_cost_down);

  // required bytes point_get_up = 9;
  bool has_point_get_up() const;
  void clear_point_get_up();
  static const int kPointGetUpFieldNumber = 9;
  const ::std::string& point_get_up() const;
  void set_point_get_up(const ::std::string& value);
  #if LANG_CXX11
  void set_point_get_up(::std::string&& value);
  #endif
  void set_point_get_up(const char* value);
  void set_point_get_up(const void* value, size_t size);
  ::std::string* mutable_point_get_up();
  ::std::string* release_point_get_up();
  void set_allocated_point_get_up(::std::string* point_get_up);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_point_get_up();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_point_get_up(
      ::std::string* point_get_up);

  // required bytes adjunct = 10;
  bool has_adjunct() const;
  void clear_adjunct();
  static const int kAdjunctFieldNumber = 10;
  const ::std::string& adjunct() const;
  void set_adjunct(const ::std::string& value);
  #if LANG_CXX11
  void set_adjunct(::std::string&& value);
  #endif
  void set_adjunct(const char* value);
  void set_adjunct(const void* value, size_t size);
  ::std::string* mutable_adjunct();
  ::std::string* release_adjunct();
  void set_allocated_adjunct(::std::string* adjunct);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_adjunct();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_adjunct(
      ::std::string* adjunct);

  // required bytes attribute_add = 11;
  bool has_attribute_add() const;
  void clear_attribute_add();
  static const int kAttributeAddFieldNumber = 11;
  const ::std::string& attribute_add() const;
  void set_attribute_add(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute_add(::std::string&& value);
  #endif
  void set_attribute_add(const char* value);
  void set_attribute_add(const void* value, size_t size);
  ::std::string* mutable_attribute_add();
  ::std::string* release_attribute_add();
  void set_allocated_attribute_add(::std::string* attribute_add);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_attribute_add();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attribute_add(
      ::std::string* attribute_add);

  // required bytes enemy_weaken = 12;
  bool has_enemy_weaken() const;
  void clear_enemy_weaken();
  static const int kEnemyWeakenFieldNumber = 12;
  const ::std::string& enemy_weaken() const;
  void set_enemy_weaken(const ::std::string& value);
  #if LANG_CXX11
  void set_enemy_weaken(::std::string&& value);
  #endif
  void set_enemy_weaken(const char* value);
  void set_enemy_weaken(const void* value, size_t size);
  ::std::string* mutable_enemy_weaken();
  ::std::string* release_enemy_weaken();
  void set_allocated_enemy_weaken(::std::string* enemy_weaken);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_enemy_weaken();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enemy_weaken(
      ::std::string* enemy_weaken);

  // required bytes event_weaken = 13;
  bool has_event_weaken() const;
  void clear_event_weaken();
  static const int kEventWeakenFieldNumber = 13;
  const ::std::string& event_weaken() const;
  void set_event_weaken(const ::std::string& value);
  #if LANG_CXX11
  void set_event_weaken(::std::string&& value);
  #endif
  void set_event_weaken(const char* value);
  void set_event_weaken(const void* value, size_t size);
  ::std::string* mutable_event_weaken();
  ::std::string* release_event_weaken();
  void set_allocated_event_weaken(::std::string* event_weaken);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_event_weaken();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_weaken(
      ::std::string* event_weaken);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 max_level = 3;
  bool has_max_level() const;
  void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  ::google::protobuf::int32 max_level() const;
  void set_max_level(::google::protobuf::int32 value);

  // required int32 cost = 4;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 4;
  ::google::protobuf::int32 cost() const;
  void set_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigBeaconTalent)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_level();
  void clear_has_level();
  void set_has_max_level();
  void clear_has_max_level();
  void set_has_cost();
  void clear_has_cost();
  void set_has_pre_talent();
  void clear_has_pre_talent();
  void set_has_get_item();
  void clear_has_get_item();
  void set_has_event_reward_add();
  void clear_has_event_reward_add();
  void set_has_point_cost_down();
  void clear_has_point_cost_down();
  void set_has_point_get_up();
  void clear_has_point_get_up();
  void set_has_adjunct();
  void clear_has_adjunct();
  void set_has_attribute_add();
  void clear_has_attribute_add();
  void set_has_enemy_weaken();
  void clear_has_enemy_weaken();
  void set_has_event_weaken();
  void clear_has_event_weaken();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pre_talent_;
  ::google::protobuf::internal::ArenaStringPtr get_item_;
  ::google::protobuf::internal::ArenaStringPtr event_reward_add_;
  ::google::protobuf::internal::ArenaStringPtr point_cost_down_;
  ::google::protobuf::internal::ArenaStringPtr point_get_up_;
  ::google::protobuf::internal::ArenaStringPtr adjunct_;
  ::google::protobuf::internal::ArenaStringPtr attribute_add_;
  ::google::protobuf::internal::ArenaStringPtr enemy_weaken_;
  ::google::protobuf::internal::ArenaStringPtr event_weaken_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 max_level_;
  ::google::protobuf::int32 cost_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigBeaconTalentGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigBeaconTalentGroup) */ {
 public:
  ConfigBeaconTalentGroup();
  virtual ~ConfigBeaconTalentGroup();

  ConfigBeaconTalentGroup(const ConfigBeaconTalentGroup& from);

  inline ConfigBeaconTalentGroup& operator=(const ConfigBeaconTalentGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigBeaconTalentGroup(ConfigBeaconTalentGroup&& from) noexcept
    : ConfigBeaconTalentGroup() {
    *this = ::std::move(from);
  }

  inline ConfigBeaconTalentGroup& operator=(ConfigBeaconTalentGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigBeaconTalentGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigBeaconTalentGroup* internal_default_instance() {
    return reinterpret_cast<const ConfigBeaconTalentGroup*>(
               &_ConfigBeaconTalentGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void UnsafeArenaSwap(ConfigBeaconTalentGroup* other);
  void Swap(ConfigBeaconTalentGroup* other);
  friend void swap(ConfigBeaconTalentGroup& a, ConfigBeaconTalentGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigBeaconTalentGroup* New() const final {
    return CreateMaybeMessage<ConfigBeaconTalentGroup>(NULL);
  }

  ConfigBeaconTalentGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigBeaconTalentGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigBeaconTalentGroup& from);
  void MergeFrom(const ConfigBeaconTalentGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigBeaconTalentGroup* other);
  protected:
  explicit ConfigBeaconTalentGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigBeaconTalentGroup)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_content();
  void clear_has_content();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDungeonChest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigDungeonChest) */ {
 public:
  ConfigDungeonChest();
  virtual ~ConfigDungeonChest();

  ConfigDungeonChest(const ConfigDungeonChest& from);

  inline ConfigDungeonChest& operator=(const ConfigDungeonChest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDungeonChest(ConfigDungeonChest&& from) noexcept
    : ConfigDungeonChest() {
    *this = ::std::move(from);
  }

  inline ConfigDungeonChest& operator=(ConfigDungeonChest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDungeonChest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDungeonChest* internal_default_instance() {
    return reinterpret_cast<const ConfigDungeonChest*>(
               &_ConfigDungeonChest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void UnsafeArenaSwap(ConfigDungeonChest* other);
  void Swap(ConfigDungeonChest* other);
  friend void swap(ConfigDungeonChest& a, ConfigDungeonChest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDungeonChest* New() const final {
    return CreateMaybeMessage<ConfigDungeonChest>(NULL);
  }

  ConfigDungeonChest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDungeonChest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDungeonChest& from);
  void MergeFrom(const ConfigDungeonChest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDungeonChest* other);
  protected:
  explicit ConfigDungeonChest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 6;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 6;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required bytes cost_in_dungeon = 7;
  bool has_cost_in_dungeon() const;
  void clear_cost_in_dungeon();
  static const int kCostInDungeonFieldNumber = 7;
  const ::std::string& cost_in_dungeon() const;
  void set_cost_in_dungeon(const ::std::string& value);
  #if LANG_CXX11
  void set_cost_in_dungeon(::std::string&& value);
  #endif
  void set_cost_in_dungeon(const char* value);
  void set_cost_in_dungeon(const void* value, size_t size);
  ::std::string* mutable_cost_in_dungeon();
  ::std::string* release_cost_in_dungeon();
  void set_allocated_cost_in_dungeon(::std::string* cost_in_dungeon);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost_in_dungeon();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost_in_dungeon(
      ::std::string* cost_in_dungeon);

  // required bytes get = 8;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 8;
  const ::std::string& get() const;
  void set_get(const ::std::string& value);
  #if LANG_CXX11
  void set_get(::std::string&& value);
  #endif
  void set_get(const char* value);
  void set_get(const void* value, size_t size);
  ::std::string* mutable_get();
  ::std::string* release_get();
  void set_allocated_get(::std::string* get);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_get();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_get(
      ::std::string* get);

  // required bytes get_in_dungeon = 9;
  bool has_get_in_dungeon() const;
  void clear_get_in_dungeon();
  static const int kGetInDungeonFieldNumber = 9;
  const ::std::string& get_in_dungeon() const;
  void set_get_in_dungeon(const ::std::string& value);
  #if LANG_CXX11
  void set_get_in_dungeon(::std::string&& value);
  #endif
  void set_get_in_dungeon(const char* value);
  void set_get_in_dungeon(const void* value, size_t size);
  ::std::string* mutable_get_in_dungeon();
  ::std::string* release_get_in_dungeon();
  void set_allocated_get_in_dungeon(::std::string* get_in_dungeon);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_get_in_dungeon();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_get_in_dungeon(
      ::std::string* get_in_dungeon);

  // required bytes need_level = 10;
  bool has_need_level() const;
  void clear_need_level();
  static const int kNeedLevelFieldNumber = 10;
  const ::std::string& need_level() const;
  void set_need_level(const ::std::string& value);
  #if LANG_CXX11
  void set_need_level(::std::string&& value);
  #endif
  void set_need_level(const char* value);
  void set_need_level(const void* value, size_t size);
  ::std::string* mutable_need_level();
  ::std::string* release_need_level();
  void set_allocated_need_level(::std::string* need_level);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_need_level();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_need_level(
      ::std::string* need_level);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 max_times = 3;
  bool has_max_times() const;
  void clear_max_times();
  static const int kMaxTimesFieldNumber = 3;
  ::google::protobuf::int32 max_times() const;
  void set_max_times(::google::protobuf::int32 value);

  // required float probability = 4;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 4;
  float probability() const;
  void set_probability(float value);

  // required float add_probability = 5;
  bool has_add_probability() const;
  void clear_add_probability();
  static const int kAddProbabilityFieldNumber = 5;
  float add_probability() const;
  void set_add_probability(float value);

  // @@protoc_insertion_point(class_scope:db.ConfigDungeonChest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_max_times();
  void clear_has_max_times();
  void set_has_probability();
  void clear_has_probability();
  void set_has_add_probability();
  void clear_has_add_probability();
  void set_has_cost();
  void clear_has_cost();
  void set_has_cost_in_dungeon();
  void clear_has_cost_in_dungeon();
  void set_has_get();
  void clear_has_get();
  void set_has_get_in_dungeon();
  void clear_has_get_in_dungeon();
  void set_has_need_level();
  void clear_has_need_level();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::internal::ArenaStringPtr cost_in_dungeon_;
  ::google::protobuf::internal::ArenaStringPtr get_;
  ::google::protobuf::internal::ArenaStringPtr get_in_dungeon_;
  ::google::protobuf::internal::ArenaStringPtr need_level_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 max_times_;
  float probability_;
  float add_probability_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigGuildStore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigGuildStore) */ {
 public:
  ConfigGuildStore();
  virtual ~ConfigGuildStore();

  ConfigGuildStore(const ConfigGuildStore& from);

  inline ConfigGuildStore& operator=(const ConfigGuildStore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigGuildStore(ConfigGuildStore&& from) noexcept
    : ConfigGuildStore() {
    *this = ::std::move(from);
  }

  inline ConfigGuildStore& operator=(ConfigGuildStore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigGuildStore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigGuildStore* internal_default_instance() {
    return reinterpret_cast<const ConfigGuildStore*>(
               &_ConfigGuildStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void UnsafeArenaSwap(ConfigGuildStore* other);
  void Swap(ConfigGuildStore* other);
  friend void swap(ConfigGuildStore& a, ConfigGuildStore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigGuildStore* New() const final {
    return CreateMaybeMessage<ConfigGuildStore>(NULL);
  }

  ConfigGuildStore* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigGuildStore>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigGuildStore& from);
  void MergeFrom(const ConfigGuildStore& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigGuildStore* other);
  protected:
  explicit ConfigGuildStore(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes normal_goods = 3;
  bool has_normal_goods() const;
  void clear_normal_goods();
  static const int kNormalGoodsFieldNumber = 3;
  const ::std::string& normal_goods() const;
  void set_normal_goods(const ::std::string& value);
  #if LANG_CXX11
  void set_normal_goods(::std::string&& value);
  #endif
  void set_normal_goods(const char* value);
  void set_normal_goods(const void* value, size_t size);
  ::std::string* mutable_normal_goods();
  ::std::string* release_normal_goods();
  void set_allocated_normal_goods(::std::string* normal_goods);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_normal_goods();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_normal_goods(
      ::std::string* normal_goods);

  // required bytes extra_goods = 4;
  bool has_extra_goods() const;
  void clear_extra_goods();
  static const int kExtraGoodsFieldNumber = 4;
  const ::std::string& extra_goods() const;
  void set_extra_goods(const ::std::string& value);
  #if LANG_CXX11
  void set_extra_goods(::std::string&& value);
  #endif
  void set_extra_goods(const char* value);
  void set_extra_goods(const void* value, size_t size);
  ::std::string* mutable_extra_goods();
  ::std::string* release_extra_goods();
  void set_allocated_extra_goods(::std::string* extra_goods);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_extra_goods();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_extra_goods(
      ::std::string* extra_goods);

  // required bytes refresh_times = 5;
  bool has_refresh_times() const;
  void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 5;
  const ::std::string& refresh_times() const;
  void set_refresh_times(const ::std::string& value);
  #if LANG_CXX11
  void set_refresh_times(::std::string&& value);
  #endif
  void set_refresh_times(const char* value);
  void set_refresh_times(const void* value, size_t size);
  ::std::string* mutable_refresh_times();
  ::std::string* release_refresh_times();
  void set_allocated_refresh_times(::std::string* refresh_times);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_refresh_times();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_refresh_times(
      ::std::string* refresh_times);

  // required bytes discount = 6;
  bool has_discount() const;
  void clear_discount();
  static const int kDiscountFieldNumber = 6;
  const ::std::string& discount() const;
  void set_discount(const ::std::string& value);
  #if LANG_CXX11
  void set_discount(::std::string&& value);
  #endif
  void set_discount(const char* value);
  void set_discount(const void* value, size_t size);
  ::std::string* mutable_discount();
  ::std::string* release_discount();
  void set_allocated_discount(::std::string* discount);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_discount();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_discount(
      ::std::string* discount);

  // required int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 extra_goods_num = 2;
  bool has_extra_goods_num() const;
  void clear_extra_goods_num();
  static const int kExtraGoodsNumFieldNumber = 2;
  ::google::protobuf::int32 extra_goods_num() const;
  void set_extra_goods_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigGuildStore)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_extra_goods_num();
  void clear_has_extra_goods_num();
  void set_has_normal_goods();
  void clear_has_normal_goods();
  void set_has_extra_goods();
  void clear_has_extra_goods();
  void set_has_refresh_times();
  void clear_has_refresh_times();
  void set_has_discount();
  void clear_has_discount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr normal_goods_;
  ::google::protobuf::internal::ArenaStringPtr extra_goods_;
  ::google::protobuf::internal::ArenaStringPtr refresh_times_;
  ::google::protobuf::internal::ArenaStringPtr discount_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 extra_goods_num_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigGameExchange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigGameExchange) */ {
 public:
  ConfigGameExchange();
  virtual ~ConfigGameExchange();

  ConfigGameExchange(const ConfigGameExchange& from);

  inline ConfigGameExchange& operator=(const ConfigGameExchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigGameExchange(ConfigGameExchange&& from) noexcept
    : ConfigGameExchange() {
    *this = ::std::move(from);
  }

  inline ConfigGameExchange& operator=(ConfigGameExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigGameExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigGameExchange* internal_default_instance() {
    return reinterpret_cast<const ConfigGameExchange*>(
               &_ConfigGameExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void UnsafeArenaSwap(ConfigGameExchange* other);
  void Swap(ConfigGameExchange* other);
  friend void swap(ConfigGameExchange& a, ConfigGameExchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigGameExchange* New() const final {
    return CreateMaybeMessage<ConfigGameExchange>(NULL);
  }

  ConfigGameExchange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigGameExchange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigGameExchange& from);
  void MergeFrom(const ConfigGameExchange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigGameExchange* other);
  protected:
  explicit ConfigGameExchange(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes cost = 2;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 2;
  const ::std::string& cost() const;
  void set_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_cost(::std::string&& value);
  #endif
  void set_cost(const char* value);
  void set_cost(const void* value, size_t size);
  ::std::string* mutable_cost();
  ::std::string* release_cost();
  void set_allocated_cost(::std::string* cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cost(
      ::std::string* cost);

  // required bytes get = 3;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 3;
  const ::std::string& get() const;
  void set_get(const ::std::string& value);
  #if LANG_CXX11
  void set_get(::std::string&& value);
  #endif
  void set_get(const char* value);
  void set_get(const void* value, size_t size);
  ::std::string* mutable_get();
  ::std::string* release_get();
  void set_allocated_get(::std::string* get);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_get();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_get(
      ::std::string* get);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigGameExchange)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_cost();
  void clear_has_cost();
  void set_has_get();
  void clear_has_get();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cost_;
  ::google::protobuf::internal::ArenaStringPtr get_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigName) */ {
 public:
  ConfigName();
  virtual ~ConfigName();

  ConfigName(const ConfigName& from);

  inline ConfigName& operator=(const ConfigName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigName(ConfigName&& from) noexcept
    : ConfigName() {
    *this = ::std::move(from);
  }

  inline ConfigName& operator=(ConfigName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigName* internal_default_instance() {
    return reinterpret_cast<const ConfigName*>(
               &_ConfigName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void UnsafeArenaSwap(ConfigName* other);
  void Swap(ConfigName* other);
  friend void swap(ConfigName& a, ConfigName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigName* New() const final {
    return CreateMaybeMessage<ConfigName>(NULL);
  }

  ConfigName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigName& from);
  void MergeFrom(const ConfigName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigName* other);
  protected:
  explicit ConfigName(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigName)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigFirstname : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigFirstname) */ {
 public:
  ConfigFirstname();
  virtual ~ConfigFirstname();

  ConfigFirstname(const ConfigFirstname& from);

  inline ConfigFirstname& operator=(const ConfigFirstname& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFirstname(ConfigFirstname&& from) noexcept
    : ConfigFirstname() {
    *this = ::std::move(from);
  }

  inline ConfigFirstname& operator=(ConfigFirstname&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigFirstname& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFirstname* internal_default_instance() {
    return reinterpret_cast<const ConfigFirstname*>(
               &_ConfigFirstname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void UnsafeArenaSwap(ConfigFirstname* other);
  void Swap(ConfigFirstname* other);
  friend void swap(ConfigFirstname& a, ConfigFirstname& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFirstname* New() const final {
    return CreateMaybeMessage<ConfigFirstname>(NULL);
  }

  ConfigFirstname* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFirstname>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFirstname& from);
  void MergeFrom(const ConfigFirstname& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFirstname* other);
  protected:
  explicit ConfigFirstname(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 order = 4;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 4;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigFirstname)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_order();
  void clear_has_order();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 order_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigLastname : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigLastname) */ {
 public:
  ConfigLastname();
  virtual ~ConfigLastname();

  ConfigLastname(const ConfigLastname& from);

  inline ConfigLastname& operator=(const ConfigLastname& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigLastname(ConfigLastname&& from) noexcept
    : ConfigLastname() {
    *this = ::std::move(from);
  }

  inline ConfigLastname& operator=(ConfigLastname&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigLastname& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigLastname* internal_default_instance() {
    return reinterpret_cast<const ConfigLastname*>(
               &_ConfigLastname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void UnsafeArenaSwap(ConfigLastname* other);
  void Swap(ConfigLastname* other);
  friend void swap(ConfigLastname& a, ConfigLastname& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigLastname* New() const final {
    return CreateMaybeMessage<ConfigLastname>(NULL);
  }

  ConfigLastname* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigLastname>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigLastname& from);
  void MergeFrom(const ConfigLastname& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigLastname* other);
  protected:
  explicit ConfigLastname(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 order = 4;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 4;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigLastname)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_order();
  void clear_has_order();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 order_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigPlayerInvade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigPlayerInvade) */ {
 public:
  ConfigPlayerInvade();
  virtual ~ConfigPlayerInvade();

  ConfigPlayerInvade(const ConfigPlayerInvade& from);

  inline ConfigPlayerInvade& operator=(const ConfigPlayerInvade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigPlayerInvade(ConfigPlayerInvade&& from) noexcept
    : ConfigPlayerInvade() {
    *this = ::std::move(from);
  }

  inline ConfigPlayerInvade& operator=(ConfigPlayerInvade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigPlayerInvade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPlayerInvade* internal_default_instance() {
    return reinterpret_cast<const ConfigPlayerInvade*>(
               &_ConfigPlayerInvade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void UnsafeArenaSwap(ConfigPlayerInvade* other);
  void Swap(ConfigPlayerInvade* other);
  friend void swap(ConfigPlayerInvade& a, ConfigPlayerInvade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigPlayerInvade* New() const final {
    return CreateMaybeMessage<ConfigPlayerInvade>(NULL);
  }

  ConfigPlayerInvade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPlayerInvade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigPlayerInvade& from);
  void MergeFrom(const ConfigPlayerInvade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPlayerInvade* other);
  protected:
  explicit ConfigPlayerInvade(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes match_score = 1;
  bool has_match_score() const;
  void clear_match_score();
  static const int kMatchScoreFieldNumber = 1;
  const ::std::string& match_score() const;
  void set_match_score(const ::std::string& value);
  #if LANG_CXX11
  void set_match_score(::std::string&& value);
  #endif
  void set_match_score(const char* value);
  void set_match_score(const void* value, size_t size);
  ::std::string* mutable_match_score();
  ::std::string* release_match_score();
  void set_allocated_match_score(::std::string* match_score);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_match_score();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_match_score(
      ::std::string* match_score);

  // required bytes refresh_times = 3;
  bool has_refresh_times() const;
  void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 3;
  const ::std::string& refresh_times() const;
  void set_refresh_times(const ::std::string& value);
  #if LANG_CXX11
  void set_refresh_times(::std::string&& value);
  #endif
  void set_refresh_times(const char* value);
  void set_refresh_times(const void* value, size_t size);
  ::std::string* mutable_refresh_times();
  ::std::string* release_refresh_times();
  void set_allocated_refresh_times(::std::string* refresh_times);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_refresh_times();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_refresh_times(
      ::std::string* refresh_times);

  // required bytes entrys = 4;
  bool has_entrys() const;
  void clear_entrys();
  static const int kEntrysFieldNumber = 4;
  const ::std::string& entrys() const;
  void set_entrys(const ::std::string& value);
  #if LANG_CXX11
  void set_entrys(::std::string&& value);
  #endif
  void set_entrys(const char* value);
  void set_entrys(const void* value, size_t size);
  ::std::string* mutable_entrys();
  ::std::string* release_entrys();
  void set_allocated_entrys(::std::string* entrys);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_entrys();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entrys(
      ::std::string* entrys);

  // required bytes defend_time = 5;
  bool has_defend_time() const;
  void clear_defend_time();
  static const int kDefendTimeFieldNumber = 5;
  const ::std::string& defend_time() const;
  void set_defend_time(const ::std::string& value);
  #if LANG_CXX11
  void set_defend_time(::std::string&& value);
  #endif
  void set_defend_time(const char* value);
  void set_defend_time(const void* value, size_t size);
  ::std::string* mutable_defend_time();
  ::std::string* release_defend_time();
  void set_allocated_defend_time(::std::string* defend_time);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_defend_time();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_defend_time(
      ::std::string* defend_time);

  // required bytes win_room = 6;
  bool has_win_room() const;
  void clear_win_room();
  static const int kWinRoomFieldNumber = 6;
  const ::std::string& win_room() const;
  void set_win_room(const ::std::string& value);
  #if LANG_CXX11
  void set_win_room(::std::string&& value);
  #endif
  void set_win_room(const char* value);
  void set_win_room(const void* value, size_t size);
  ::std::string* mutable_win_room();
  ::std::string* release_win_room();
  void set_allocated_win_room(::std::string* win_room);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_win_room();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_win_room(
      ::std::string* win_room);

  // required bytes reward_ratio = 8;
  bool has_reward_ratio() const;
  void clear_reward_ratio();
  static const int kRewardRatioFieldNumber = 8;
  const ::std::string& reward_ratio() const;
  void set_reward_ratio(const ::std::string& value);
  #if LANG_CXX11
  void set_reward_ratio(::std::string&& value);
  #endif
  void set_reward_ratio(const char* value);
  void set_reward_ratio(const void* value, size_t size);
  ::std::string* mutable_reward_ratio();
  ::std::string* release_reward_ratio();
  void set_allocated_reward_ratio(::std::string* reward_ratio);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_reward_ratio();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward_ratio(
      ::std::string* reward_ratio);

  // required bytes invade_cost = 10;
  bool has_invade_cost() const;
  void clear_invade_cost();
  static const int kInvadeCostFieldNumber = 10;
  const ::std::string& invade_cost() const;
  void set_invade_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_invade_cost(::std::string&& value);
  #endif
  void set_invade_cost(const char* value);
  void set_invade_cost(const void* value, size_t size);
  ::std::string* mutable_invade_cost();
  ::std::string* release_invade_cost();
  void set_allocated_invade_cost(::std::string* invade_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_invade_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invade_cost(
      ::std::string* invade_cost);

  // required bytes room_effect = 12;
  bool has_room_effect() const;
  void clear_room_effect();
  static const int kRoomEffectFieldNumber = 12;
  const ::std::string& room_effect() const;
  void set_room_effect(const ::std::string& value);
  #if LANG_CXX11
  void set_room_effect(::std::string&& value);
  #endif
  void set_room_effect(const char* value);
  void set_room_effect(const void* value, size_t size);
  ::std::string* mutable_room_effect();
  ::std::string* release_room_effect();
  void set_allocated_room_effect(::std::string* room_effect);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_room_effect();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room_effect(
      ::std::string* room_effect);

  // required bytes drop_limit = 13;
  bool has_drop_limit() const;
  void clear_drop_limit();
  static const int kDropLimitFieldNumber = 13;
  const ::std::string& drop_limit() const;
  void set_drop_limit(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_limit(::std::string&& value);
  #endif
  void set_drop_limit(const char* value);
  void set_drop_limit(const void* value, size_t size);
  ::std::string* mutable_drop_limit();
  ::std::string* release_drop_limit();
  void set_allocated_drop_limit(::std::string* drop_limit);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop_limit();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop_limit(
      ::std::string* drop_limit);

  // required bytes drop_limit_once = 14;
  bool has_drop_limit_once() const;
  void clear_drop_limit_once();
  static const int kDropLimitOnceFieldNumber = 14;
  const ::std::string& drop_limit_once() const;
  void set_drop_limit_once(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_limit_once(::std::string&& value);
  #endif
  void set_drop_limit_once(const char* value);
  void set_drop_limit_once(const void* value, size_t size);
  ::std::string* mutable_drop_limit_once();
  ::std::string* release_drop_limit_once();
  void set_allocated_drop_limit_once(::std::string* drop_limit_once);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_drop_limit_once();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_drop_limit_once(
      ::std::string* drop_limit_once);

  // required int32 match_remain = 2;
  bool has_match_remain() const;
  void clear_match_remain();
  static const int kMatchRemainFieldNumber = 2;
  ::google::protobuf::int32 match_remain() const;
  void set_match_remain(::google::protobuf::int32 value);

  // required int32 revenge_time = 7;
  bool has_revenge_time() const;
  void clear_revenge_time();
  static const int kRevengeTimeFieldNumber = 7;
  ::google::protobuf::int32 revenge_time() const;
  void set_revenge_time(::google::protobuf::int32 value);

  // required float extra_reward_ratio = 9;
  bool has_extra_reward_ratio() const;
  void clear_extra_reward_ratio();
  static const int kExtraRewardRatioFieldNumber = 9;
  float extra_reward_ratio() const;
  void set_extra_reward_ratio(float value);

  // required int32 record_remain_time = 11;
  bool has_record_remain_time() const;
  void clear_record_remain_time();
  static const int kRecordRemainTimeFieldNumber = 11;
  ::google::protobuf::int32 record_remain_time() const;
  void set_record_remain_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigPlayerInvade)
 private:
  void set_has_match_score();
  void clear_has_match_score();
  void set_has_match_remain();
  void clear_has_match_remain();
  void set_has_refresh_times();
  void clear_has_refresh_times();
  void set_has_entrys();
  void clear_has_entrys();
  void set_has_defend_time();
  void clear_has_defend_time();
  void set_has_win_room();
  void clear_has_win_room();
  void set_has_revenge_time();
  void clear_has_revenge_time();
  void set_has_reward_ratio();
  void clear_has_reward_ratio();
  void set_has_extra_reward_ratio();
  void clear_has_extra_reward_ratio();
  void set_has_invade_cost();
  void clear_has_invade_cost();
  void set_has_record_remain_time();
  void clear_has_record_remain_time();
  void set_has_room_effect();
  void clear_has_room_effect();
  void set_has_drop_limit();
  void clear_has_drop_limit();
  void set_has_drop_limit_once();
  void clear_has_drop_limit_once();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr match_score_;
  ::google::protobuf::internal::ArenaStringPtr refresh_times_;
  ::google::protobuf::internal::ArenaStringPtr entrys_;
  ::google::protobuf::internal::ArenaStringPtr defend_time_;
  ::google::protobuf::internal::ArenaStringPtr win_room_;
  ::google::protobuf::internal::ArenaStringPtr reward_ratio_;
  ::google::protobuf::internal::ArenaStringPtr invade_cost_;
  ::google::protobuf::internal::ArenaStringPtr room_effect_;
  ::google::protobuf::internal::ArenaStringPtr drop_limit_;
  ::google::protobuf::internal::ArenaStringPtr drop_limit_once_;
  ::google::protobuf::int32 match_remain_;
  ::google::protobuf::int32 revenge_time_;
  float extra_reward_ratio_;
  ::google::protobuf::int32 record_remain_time_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigRoomModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigRoomModel) */ {
 public:
  ConfigRoomModel();
  virtual ~ConfigRoomModel();

  ConfigRoomModel(const ConfigRoomModel& from);

  inline ConfigRoomModel& operator=(const ConfigRoomModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigRoomModel(ConfigRoomModel&& from) noexcept
    : ConfigRoomModel() {
    *this = ::std::move(from);
  }

  inline ConfigRoomModel& operator=(ConfigRoomModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRoomModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRoomModel* internal_default_instance() {
    return reinterpret_cast<const ConfigRoomModel*>(
               &_ConfigRoomModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void UnsafeArenaSwap(ConfigRoomModel* other);
  void Swap(ConfigRoomModel* other);
  friend void swap(ConfigRoomModel& a, ConfigRoomModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigRoomModel* New() const final {
    return CreateMaybeMessage<ConfigRoomModel>(NULL);
  }

  ConfigRoomModel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRoomModel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigRoomModel& from);
  void MergeFrom(const ConfigRoomModel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRoomModel* other);
  protected:
  explicit ConfigRoomModel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  const ::std::string& size() const;
  void set_size(const ::std::string& value);
  #if LANG_CXX11
  void set_size(::std::string&& value);
  #endif
  void set_size(const char* value);
  void set_size(const void* value, size_t size);
  ::std::string* mutable_size();
  ::std::string* release_size();
  void set_allocated_size(::std::string* size);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_size();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_size(
      ::std::string* size);

  // required bytes shape = 4;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  const ::std::string& shape() const;
  void set_shape(const ::std::string& value);
  #if LANG_CXX11
  void set_shape(::std::string&& value);
  #endif
  void set_shape(const char* value);
  void set_shape(const void* value, size_t size);
  ::std::string* mutable_shape();
  ::std::string* release_shape();
  void set_allocated_shape(::std::string* shape);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_shape();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shape(
      ::std::string* shape);

  // required bytes unlock_cost = 5;
  bool has_unlock_cost() const;
  void clear_unlock_cost();
  static const int kUnlockCostFieldNumber = 5;
  const ::std::string& unlock_cost() const;
  void set_unlock_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_unlock_cost(::std::string&& value);
  #endif
  void set_unlock_cost(const char* value);
  void set_unlock_cost(const void* value, size_t size);
  ::std::string* mutable_unlock_cost();
  ::std::string* release_unlock_cost();
  void set_allocated_unlock_cost(::std::string* unlock_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unlock_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unlock_cost(
      ::std::string* unlock_cost);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigRoomModel)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_size();
  void clear_has_size();
  void set_has_shape();
  void clear_has_shape();
  void set_has_unlock_cost();
  void clear_has_unlock_cost();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr size_;
  ::google::protobuf::internal::ArenaStringPtr shape_;
  ::google::protobuf::internal::ArenaStringPtr unlock_cost_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_StoredProcConfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigFacility

// required int32 id = 1;
inline bool ConfigFacility::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigFacility::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigFacility::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigFacility::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigFacility::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.id)
  return id_;
}
inline void ConfigFacility::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.id)
}

// required bytes name = 2;
inline bool ConfigFacility::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFacility::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFacility::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFacility::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigFacility::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.name)
  return name_.Get();
}
inline void ConfigFacility::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacility.name)
}
#if LANG_CXX11
inline void ConfigFacility::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacility.name)
}
#endif
inline void ConfigFacility::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacility.name)
}
inline void ConfigFacility::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacility.name)
}
inline ::std::string* ConfigFacility::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacility.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacility::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigFacility.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacility::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacility.name)
}
inline ::std::string* ConfigFacility::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacility.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacility::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacility.name)
}

// required int32 maintype = 3;
inline bool ConfigFacility::has_maintype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigFacility::set_has_maintype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigFacility::clear_has_maintype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigFacility::clear_maintype() {
  maintype_ = 0;
  clear_has_maintype();
}
inline ::google::protobuf::int32 ConfigFacility::maintype() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.maintype)
  return maintype_;
}
inline void ConfigFacility::set_maintype(::google::protobuf::int32 value) {
  set_has_maintype();
  maintype_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.maintype)
}

// required int32 func_type = 4;
inline bool ConfigFacility::has_func_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigFacility::set_has_func_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigFacility::clear_has_func_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigFacility::clear_func_type() {
  func_type_ = 0;
  clear_has_func_type();
}
inline ::google::protobuf::int32 ConfigFacility::func_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.func_type)
  return func_type_;
}
inline void ConfigFacility::set_func_type(::google::protobuf::int32 value) {
  set_has_func_type();
  func_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.func_type)
}

// required int32 style_id = 5;
inline bool ConfigFacility::has_style_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigFacility::set_has_style_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigFacility::clear_has_style_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigFacility::clear_style_id() {
  style_id_ = 0;
  clear_has_style_id();
}
inline ::google::protobuf::int32 ConfigFacility::style_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.style_id)
  return style_id_;
}
inline void ConfigFacility::set_style_id(::google::protobuf::int32 value) {
  set_has_style_id();
  style_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.style_id)
}

// required int32 build_type = 6;
inline bool ConfigFacility::has_build_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigFacility::set_has_build_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigFacility::clear_has_build_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigFacility::clear_build_type() {
  build_type_ = 0;
  clear_has_build_type();
}
inline ::google::protobuf::int32 ConfigFacility::build_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.build_type)
  return build_type_;
}
inline void ConfigFacility::set_build_type(::google::protobuf::int32 value) {
  set_has_build_type();
  build_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.build_type)
}

// required bytes property = 7;
inline bool ConfigFacility::has_property() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFacility::set_has_property() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFacility::clear_has_property() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFacility::clear_property() {
  property_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_property();
}
inline const ::std::string& ConfigFacility::property() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.property)
  return property_.Get();
}
inline void ConfigFacility::set_property(const ::std::string& value) {
  set_has_property();
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacility.property)
}
#if LANG_CXX11
inline void ConfigFacility::set_property(::std::string&& value) {
  set_has_property();
  property_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacility.property)
}
#endif
inline void ConfigFacility::set_property(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_property();
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacility.property)
}
inline void ConfigFacility::set_property(const void* value,
    size_t size) {
  set_has_property();
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacility.property)
}
inline ::std::string* ConfigFacility::mutable_property() {
  set_has_property();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacility.property)
  return property_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacility::release_property() {
  // @@protoc_insertion_point(field_release:db.ConfigFacility.property)
  if (!has_property()) {
    return NULL;
  }
  clear_has_property();
  return property_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacility::set_allocated_property(::std::string* property) {
  if (property != NULL) {
    set_has_property();
  } else {
    clear_has_property();
  }
  property_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacility.property)
}
inline ::std::string* ConfigFacility::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacility.property)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_property();
  return property_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacility::unsafe_arena_set_allocated_property(
    ::std::string* property) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (property != NULL) {
    set_has_property();
  } else {
    clear_has_property();
  }
  property_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      property, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacility.property)
}

// required int32 price = 8;
inline bool ConfigFacility::has_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigFacility::set_has_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigFacility::clear_has_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigFacility::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ConfigFacility::price() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.price)
  return price_;
}
inline void ConfigFacility::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.price)
}

// required int32 seize_row = 9;
inline bool ConfigFacility::has_seize_row() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigFacility::set_has_seize_row() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigFacility::clear_has_seize_row() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigFacility::clear_seize_row() {
  seize_row_ = 0;
  clear_has_seize_row();
}
inline ::google::protobuf::int32 ConfigFacility::seize_row() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.seize_row)
  return seize_row_;
}
inline void ConfigFacility::set_seize_row(::google::protobuf::int32 value) {
  set_has_seize_row();
  seize_row_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.seize_row)
}

// required int32 seize_col = 10;
inline bool ConfigFacility::has_seize_col() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigFacility::set_has_seize_col() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigFacility::clear_has_seize_col() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigFacility::clear_seize_col() {
  seize_col_ = 0;
  clear_has_seize_col();
}
inline ::google::protobuf::int32 ConfigFacility::seize_col() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.seize_col)
  return seize_col_;
}
inline void ConfigFacility::set_seize_col(::google::protobuf::int32 value) {
  set_has_seize_col();
  seize_col_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.seize_col)
}

// required int32 seconds = 11;
inline bool ConfigFacility::has_seconds() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigFacility::set_has_seconds() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigFacility::clear_has_seconds() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigFacility::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
inline ::google::protobuf::int32 ConfigFacility::seconds() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.seconds)
  return seconds_;
}
inline void ConfigFacility::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.seconds)
}

// required int32 float = 12;
inline bool ConfigFacility::has_float_() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigFacility::set_has_float_() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigFacility::clear_has_float_() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigFacility::clear_float_() {
  float__ = 0;
  clear_has_float_();
}
inline ::google::protobuf::int32 ConfigFacility::float_() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.float)
  return float__;
}
inline void ConfigFacility::set_float_(::google::protobuf::int32 value) {
  set_has_float_();
  float__ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.float)
}

// required int32 node = 13;
inline bool ConfigFacility::has_node() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfigFacility::set_has_node() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfigFacility::clear_has_node() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfigFacility::clear_node() {
  node_ = 0;
  clear_has_node();
}
inline ::google::protobuf::int32 ConfigFacility::node() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.node)
  return node_;
}
inline void ConfigFacility::set_node(::google::protobuf::int32 value) {
  set_has_node();
  node_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.node)
}

// required int32 room_must = 14;
inline bool ConfigFacility::has_room_must() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConfigFacility::set_has_room_must() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConfigFacility::clear_has_room_must() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConfigFacility::clear_room_must() {
  room_must_ = 0;
  clear_has_room_must();
}
inline ::google::protobuf::int32 ConfigFacility::room_must() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.room_must)
  return room_must_;
}
inline void ConfigFacility::set_room_must(::google::protobuf::int32 value) {
  set_has_room_must();
  room_must_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.room_must)
}

// required int32 base_device_id = 15;
inline bool ConfigFacility::has_base_device_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ConfigFacility::set_has_base_device_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ConfigFacility::clear_has_base_device_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ConfigFacility::clear_base_device_id() {
  base_device_id_ = 0;
  clear_has_base_device_id();
}
inline ::google::protobuf::int32 ConfigFacility::base_device_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.base_device_id)
  return base_device_id_;
}
inline void ConfigFacility::set_base_device_id(::google::protobuf::int32 value) {
  set_has_base_device_id();
  base_device_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.base_device_id)
}

// required bytes level_up_require = 16;
inline bool ConfigFacility::has_level_up_require() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFacility::set_has_level_up_require() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFacility::clear_has_level_up_require() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFacility::clear_level_up_require() {
  level_up_require_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level_up_require();
}
inline const ::std::string& ConfigFacility::level_up_require() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.level_up_require)
  return level_up_require_.Get();
}
inline void ConfigFacility::set_level_up_require(const ::std::string& value) {
  set_has_level_up_require();
  level_up_require_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacility.level_up_require)
}
#if LANG_CXX11
inline void ConfigFacility::set_level_up_require(::std::string&& value) {
  set_has_level_up_require();
  level_up_require_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacility.level_up_require)
}
#endif
inline void ConfigFacility::set_level_up_require(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level_up_require();
  level_up_require_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacility.level_up_require)
}
inline void ConfigFacility::set_level_up_require(const void* value,
    size_t size) {
  set_has_level_up_require();
  level_up_require_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacility.level_up_require)
}
inline ::std::string* ConfigFacility::mutable_level_up_require() {
  set_has_level_up_require();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacility.level_up_require)
  return level_up_require_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacility::release_level_up_require() {
  // @@protoc_insertion_point(field_release:db.ConfigFacility.level_up_require)
  if (!has_level_up_require()) {
    return NULL;
  }
  clear_has_level_up_require();
  return level_up_require_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacility::set_allocated_level_up_require(::std::string* level_up_require) {
  if (level_up_require != NULL) {
    set_has_level_up_require();
  } else {
    clear_has_level_up_require();
  }
  level_up_require_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_up_require,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacility.level_up_require)
}
inline ::std::string* ConfigFacility::unsafe_arena_release_level_up_require() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacility.level_up_require)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level_up_require();
  return level_up_require_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacility::unsafe_arena_set_allocated_level_up_require(
    ::std::string* level_up_require) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level_up_require != NULL) {
    set_has_level_up_require();
  } else {
    clear_has_level_up_require();
  }
  level_up_require_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level_up_require, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacility.level_up_require)
}

// required int32 level_up_grade = 17;
inline bool ConfigFacility::has_level_up_grade() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ConfigFacility::set_has_level_up_grade() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ConfigFacility::clear_has_level_up_grade() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ConfigFacility::clear_level_up_grade() {
  level_up_grade_ = 0;
  clear_has_level_up_grade();
}
inline ::google::protobuf::int32 ConfigFacility::level_up_grade() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.level_up_grade)
  return level_up_grade_;
}
inline void ConfigFacility::set_level_up_grade(::google::protobuf::int32 value) {
  set_has_level_up_grade();
  level_up_grade_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.level_up_grade)
}

// required int32 level_up_id = 18;
inline bool ConfigFacility::has_level_up_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ConfigFacility::set_has_level_up_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ConfigFacility::clear_has_level_up_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ConfigFacility::clear_level_up_id() {
  level_up_id_ = 0;
  clear_has_level_up_id();
}
inline ::google::protobuf::int32 ConfigFacility::level_up_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.level_up_id)
  return level_up_id_;
}
inline void ConfigFacility::set_level_up_id(::google::protobuf::int32 value) {
  set_has_level_up_id();
  level_up_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.level_up_id)
}

// required int32 facility_level = 19;
inline bool ConfigFacility::has_facility_level() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ConfigFacility::set_has_facility_level() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ConfigFacility::clear_has_facility_level() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ConfigFacility::clear_facility_level() {
  facility_level_ = 0;
  clear_has_facility_level();
}
inline ::google::protobuf::int32 ConfigFacility::facility_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.facility_level)
  return facility_level_;
}
inline void ConfigFacility::set_facility_level(::google::protobuf::int32 value) {
  set_has_facility_level();
  facility_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.facility_level)
}

// required int32 people_node = 20;
inline bool ConfigFacility::has_people_node() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ConfigFacility::set_has_people_node() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ConfigFacility::clear_has_people_node() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ConfigFacility::clear_people_node() {
  people_node_ = 0;
  clear_has_people_node();
}
inline ::google::protobuf::int32 ConfigFacility::people_node() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.people_node)
  return people_node_;
}
inline void ConfigFacility::set_people_node(::google::protobuf::int32 value) {
  set_has_people_node();
  people_node_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.people_node)
}

// required int32 level_up_ship_level = 21;
inline bool ConfigFacility::has_level_up_ship_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ConfigFacility::set_has_level_up_ship_level() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ConfigFacility::clear_has_level_up_ship_level() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ConfigFacility::clear_level_up_ship_level() {
  level_up_ship_level_ = 0;
  clear_has_level_up_ship_level();
}
inline ::google::protobuf::int32 ConfigFacility::level_up_ship_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.level_up_ship_level)
  return level_up_ship_level_;
}
inline void ConfigFacility::set_level_up_ship_level(::google::protobuf::int32 value) {
  set_has_level_up_ship_level();
  level_up_ship_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.level_up_ship_level)
}

// required bytes formula_unlock = 22;
inline bool ConfigFacility::has_formula_unlock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFacility::set_has_formula_unlock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigFacility::clear_has_formula_unlock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigFacility::clear_formula_unlock() {
  formula_unlock_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_formula_unlock();
}
inline const ::std::string& ConfigFacility::formula_unlock() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.formula_unlock)
  return formula_unlock_.Get();
}
inline void ConfigFacility::set_formula_unlock(const ::std::string& value) {
  set_has_formula_unlock();
  formula_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacility.formula_unlock)
}
#if LANG_CXX11
inline void ConfigFacility::set_formula_unlock(::std::string&& value) {
  set_has_formula_unlock();
  formula_unlock_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacility.formula_unlock)
}
#endif
inline void ConfigFacility::set_formula_unlock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_formula_unlock();
  formula_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacility.formula_unlock)
}
inline void ConfigFacility::set_formula_unlock(const void* value,
    size_t size) {
  set_has_formula_unlock();
  formula_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacility.formula_unlock)
}
inline ::std::string* ConfigFacility::mutable_formula_unlock() {
  set_has_formula_unlock();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacility.formula_unlock)
  return formula_unlock_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacility::release_formula_unlock() {
  // @@protoc_insertion_point(field_release:db.ConfigFacility.formula_unlock)
  if (!has_formula_unlock()) {
    return NULL;
  }
  clear_has_formula_unlock();
  return formula_unlock_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacility::set_allocated_formula_unlock(::std::string* formula_unlock) {
  if (formula_unlock != NULL) {
    set_has_formula_unlock();
  } else {
    clear_has_formula_unlock();
  }
  formula_unlock_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), formula_unlock,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacility.formula_unlock)
}
inline ::std::string* ConfigFacility::unsafe_arena_release_formula_unlock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacility.formula_unlock)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_formula_unlock();
  return formula_unlock_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacility::unsafe_arena_set_allocated_formula_unlock(
    ::std::string* formula_unlock) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (formula_unlock != NULL) {
    set_has_formula_unlock();
  } else {
    clear_has_formula_unlock();
  }
  formula_unlock_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      formula_unlock, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacility.formula_unlock)
}

// required int32 level_up_captain_level = 23;
inline bool ConfigFacility::has_level_up_captain_level() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ConfigFacility::set_has_level_up_captain_level() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ConfigFacility::clear_has_level_up_captain_level() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ConfigFacility::clear_level_up_captain_level() {
  level_up_captain_level_ = 0;
  clear_has_level_up_captain_level();
}
inline ::google::protobuf::int32 ConfigFacility::level_up_captain_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.level_up_captain_level)
  return level_up_captain_level_;
}
inline void ConfigFacility::set_level_up_captain_level(::google::protobuf::int32 value) {
  set_has_level_up_captain_level();
  level_up_captain_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.level_up_captain_level)
}

// required bytes level_up_need_device = 24;
inline bool ConfigFacility::has_level_up_need_device() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigFacility::set_has_level_up_need_device() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigFacility::clear_has_level_up_need_device() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigFacility::clear_level_up_need_device() {
  level_up_need_device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level_up_need_device();
}
inline const ::std::string& ConfigFacility::level_up_need_device() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.level_up_need_device)
  return level_up_need_device_.Get();
}
inline void ConfigFacility::set_level_up_need_device(const ::std::string& value) {
  set_has_level_up_need_device();
  level_up_need_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacility.level_up_need_device)
}
#if LANG_CXX11
inline void ConfigFacility::set_level_up_need_device(::std::string&& value) {
  set_has_level_up_need_device();
  level_up_need_device_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacility.level_up_need_device)
}
#endif
inline void ConfigFacility::set_level_up_need_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level_up_need_device();
  level_up_need_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacility.level_up_need_device)
}
inline void ConfigFacility::set_level_up_need_device(const void* value,
    size_t size) {
  set_has_level_up_need_device();
  level_up_need_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacility.level_up_need_device)
}
inline ::std::string* ConfigFacility::mutable_level_up_need_device() {
  set_has_level_up_need_device();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacility.level_up_need_device)
  return level_up_need_device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacility::release_level_up_need_device() {
  // @@protoc_insertion_point(field_release:db.ConfigFacility.level_up_need_device)
  if (!has_level_up_need_device()) {
    return NULL;
  }
  clear_has_level_up_need_device();
  return level_up_need_device_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacility::set_allocated_level_up_need_device(::std::string* level_up_need_device) {
  if (level_up_need_device != NULL) {
    set_has_level_up_need_device();
  } else {
    clear_has_level_up_need_device();
  }
  level_up_need_device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_up_need_device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacility.level_up_need_device)
}
inline ::std::string* ConfigFacility::unsafe_arena_release_level_up_need_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacility.level_up_need_device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level_up_need_device();
  return level_up_need_device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacility::unsafe_arena_set_allocated_level_up_need_device(
    ::std::string* level_up_need_device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level_up_need_device != NULL) {
    set_has_level_up_need_device();
  } else {
    clear_has_level_up_need_device();
  }
  level_up_need_device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level_up_need_device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacility.level_up_need_device)
}

// required bytes level_up_need_facility = 25;
inline bool ConfigFacility::has_level_up_need_facility() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigFacility::set_has_level_up_need_facility() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigFacility::clear_has_level_up_need_facility() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigFacility::clear_level_up_need_facility() {
  level_up_need_facility_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level_up_need_facility();
}
inline const ::std::string& ConfigFacility::level_up_need_facility() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.level_up_need_facility)
  return level_up_need_facility_.Get();
}
inline void ConfigFacility::set_level_up_need_facility(const ::std::string& value) {
  set_has_level_up_need_facility();
  level_up_need_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacility.level_up_need_facility)
}
#if LANG_CXX11
inline void ConfigFacility::set_level_up_need_facility(::std::string&& value) {
  set_has_level_up_need_facility();
  level_up_need_facility_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacility.level_up_need_facility)
}
#endif
inline void ConfigFacility::set_level_up_need_facility(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level_up_need_facility();
  level_up_need_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacility.level_up_need_facility)
}
inline void ConfigFacility::set_level_up_need_facility(const void* value,
    size_t size) {
  set_has_level_up_need_facility();
  level_up_need_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacility.level_up_need_facility)
}
inline ::std::string* ConfigFacility::mutable_level_up_need_facility() {
  set_has_level_up_need_facility();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacility.level_up_need_facility)
  return level_up_need_facility_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacility::release_level_up_need_facility() {
  // @@protoc_insertion_point(field_release:db.ConfigFacility.level_up_need_facility)
  if (!has_level_up_need_facility()) {
    return NULL;
  }
  clear_has_level_up_need_facility();
  return level_up_need_facility_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacility::set_allocated_level_up_need_facility(::std::string* level_up_need_facility) {
  if (level_up_need_facility != NULL) {
    set_has_level_up_need_facility();
  } else {
    clear_has_level_up_need_facility();
  }
  level_up_need_facility_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_up_need_facility,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacility.level_up_need_facility)
}
inline ::std::string* ConfigFacility::unsafe_arena_release_level_up_need_facility() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacility.level_up_need_facility)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level_up_need_facility();
  return level_up_need_facility_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacility::unsafe_arena_set_allocated_level_up_need_facility(
    ::std::string* level_up_need_facility) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level_up_need_facility != NULL) {
    set_has_level_up_need_facility();
  } else {
    clear_has_level_up_need_facility();
  }
  level_up_need_facility_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level_up_need_facility, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacility.level_up_need_facility)
}

// required bytes special_property = 26;
inline bool ConfigFacility::has_special_property() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigFacility::set_has_special_property() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigFacility::clear_has_special_property() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigFacility::clear_special_property() {
  special_property_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_special_property();
}
inline const ::std::string& ConfigFacility::special_property() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.special_property)
  return special_property_.Get();
}
inline void ConfigFacility::set_special_property(const ::std::string& value) {
  set_has_special_property();
  special_property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacility.special_property)
}
#if LANG_CXX11
inline void ConfigFacility::set_special_property(::std::string&& value) {
  set_has_special_property();
  special_property_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacility.special_property)
}
#endif
inline void ConfigFacility::set_special_property(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_special_property();
  special_property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacility.special_property)
}
inline void ConfigFacility::set_special_property(const void* value,
    size_t size) {
  set_has_special_property();
  special_property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacility.special_property)
}
inline ::std::string* ConfigFacility::mutable_special_property() {
  set_has_special_property();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacility.special_property)
  return special_property_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacility::release_special_property() {
  // @@protoc_insertion_point(field_release:db.ConfigFacility.special_property)
  if (!has_special_property()) {
    return NULL;
  }
  clear_has_special_property();
  return special_property_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacility::set_allocated_special_property(::std::string* special_property) {
  if (special_property != NULL) {
    set_has_special_property();
  } else {
    clear_has_special_property();
  }
  special_property_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), special_property,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacility.special_property)
}
inline ::std::string* ConfigFacility::unsafe_arena_release_special_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacility.special_property)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_special_property();
  return special_property_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacility::unsafe_arena_set_allocated_special_property(
    ::std::string* special_property) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (special_property != NULL) {
    set_has_special_property();
  } else {
    clear_has_special_property();
  }
  special_property_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      special_property, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacility.special_property)
}

// required int32 machine_id_in_fight = 27;
inline bool ConfigFacility::has_machine_id_in_fight() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ConfigFacility::set_has_machine_id_in_fight() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ConfigFacility::clear_has_machine_id_in_fight() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ConfigFacility::clear_machine_id_in_fight() {
  machine_id_in_fight_ = 0;
  clear_has_machine_id_in_fight();
}
inline ::google::protobuf::int32 ConfigFacility::machine_id_in_fight() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.machine_id_in_fight)
  return machine_id_in_fight_;
}
inline void ConfigFacility::set_machine_id_in_fight(::google::protobuf::int32 value) {
  set_has_machine_id_in_fight();
  machine_id_in_fight_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.machine_id_in_fight)
}

// required bytes slot_unlock_condition = 28;
inline bool ConfigFacility::has_slot_unlock_condition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigFacility::set_has_slot_unlock_condition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigFacility::clear_has_slot_unlock_condition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigFacility::clear_slot_unlock_condition() {
  slot_unlock_condition_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_slot_unlock_condition();
}
inline const ::std::string& ConfigFacility::slot_unlock_condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.slot_unlock_condition)
  return slot_unlock_condition_.Get();
}
inline void ConfigFacility::set_slot_unlock_condition(const ::std::string& value) {
  set_has_slot_unlock_condition();
  slot_unlock_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacility.slot_unlock_condition)
}
#if LANG_CXX11
inline void ConfigFacility::set_slot_unlock_condition(::std::string&& value) {
  set_has_slot_unlock_condition();
  slot_unlock_condition_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacility.slot_unlock_condition)
}
#endif
inline void ConfigFacility::set_slot_unlock_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_slot_unlock_condition();
  slot_unlock_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacility.slot_unlock_condition)
}
inline void ConfigFacility::set_slot_unlock_condition(const void* value,
    size_t size) {
  set_has_slot_unlock_condition();
  slot_unlock_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacility.slot_unlock_condition)
}
inline ::std::string* ConfigFacility::mutable_slot_unlock_condition() {
  set_has_slot_unlock_condition();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacility.slot_unlock_condition)
  return slot_unlock_condition_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacility::release_slot_unlock_condition() {
  // @@protoc_insertion_point(field_release:db.ConfigFacility.slot_unlock_condition)
  if (!has_slot_unlock_condition()) {
    return NULL;
  }
  clear_has_slot_unlock_condition();
  return slot_unlock_condition_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacility::set_allocated_slot_unlock_condition(::std::string* slot_unlock_condition) {
  if (slot_unlock_condition != NULL) {
    set_has_slot_unlock_condition();
  } else {
    clear_has_slot_unlock_condition();
  }
  slot_unlock_condition_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot_unlock_condition,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacility.slot_unlock_condition)
}
inline ::std::string* ConfigFacility::unsafe_arena_release_slot_unlock_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacility.slot_unlock_condition)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_slot_unlock_condition();
  return slot_unlock_condition_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacility::unsafe_arena_set_allocated_slot_unlock_condition(
    ::std::string* slot_unlock_condition) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (slot_unlock_condition != NULL) {
    set_has_slot_unlock_condition();
  } else {
    clear_has_slot_unlock_condition();
  }
  slot_unlock_condition_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      slot_unlock_condition, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacility.slot_unlock_condition)
}

// required int32 machine_capacity = 29;
inline bool ConfigFacility::has_machine_capacity() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ConfigFacility::set_has_machine_capacity() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ConfigFacility::clear_has_machine_capacity() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ConfigFacility::clear_machine_capacity() {
  machine_capacity_ = 0;
  clear_has_machine_capacity();
}
inline ::google::protobuf::int32 ConfigFacility::machine_capacity() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.machine_capacity)
  return machine_capacity_;
}
inline void ConfigFacility::set_machine_capacity(::google::protobuf::int32 value) {
  set_has_machine_capacity();
  machine_capacity_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.machine_capacity)
}

// required int32 level_up_need_time = 30;
inline bool ConfigFacility::has_level_up_need_time() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ConfigFacility::set_has_level_up_need_time() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ConfigFacility::clear_has_level_up_need_time() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ConfigFacility::clear_level_up_need_time() {
  level_up_need_time_ = 0;
  clear_has_level_up_need_time();
}
inline ::google::protobuf::int32 ConfigFacility::level_up_need_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacility.level_up_need_time)
  return level_up_need_time_;
}
inline void ConfigFacility::set_level_up_need_time(::google::protobuf::int32 value) {
  set_has_level_up_need_time();
  level_up_need_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacility.level_up_need_time)
}

// -------------------------------------------------------------------

// ConfigItem

// required int32 id = 1;
inline bool ConfigItem::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigItem::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigItem::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigItem.id)
  return id_;
}
inline void ConfigItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigItem.id)
}

// required bytes name = 2;
inline bool ConfigItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigItem::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigItem::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigItem.name)
  return name_.Get();
}
inline void ConfigItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigItem.name)
}
#if LANG_CXX11
inline void ConfigItem::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigItem.name)
}
#endif
inline void ConfigItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigItem.name)
}
inline void ConfigItem::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigItem.name)
}
inline ::std::string* ConfigItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigItem.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigItem::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigItem.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigItem.name)
}
inline ::std::string* ConfigItem::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigItem.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigItem::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigItem.name)
}

// required int32 type = 3;
inline bool ConfigItem::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigItem::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigItem::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigItem.type)
  return type_;
}
inline void ConfigItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigItem.type)
}

// required int32 star = 4;
inline bool ConfigItem::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigItem::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigItem::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigItem::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 ConfigItem::star() const {
  // @@protoc_insertion_point(field_get:db.ConfigItem.star)
  return star_;
}
inline void ConfigItem::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigItem.star)
}

// required int32 quality = 5;
inline bool ConfigItem::has_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigItem::set_has_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigItem::clear_has_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigItem::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 ConfigItem::quality() const {
  // @@protoc_insertion_point(field_get:db.ConfigItem.quality)
  return quality_;
}
inline void ConfigItem::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigItem.quality)
}

// required bytes property = 6;
inline bool ConfigItem::has_property() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigItem::set_has_property() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigItem::clear_has_property() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigItem::clear_property() {
  property_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_property();
}
inline const ::std::string& ConfigItem::property() const {
  // @@protoc_insertion_point(field_get:db.ConfigItem.property)
  return property_.Get();
}
inline void ConfigItem::set_property(const ::std::string& value) {
  set_has_property();
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigItem.property)
}
#if LANG_CXX11
inline void ConfigItem::set_property(::std::string&& value) {
  set_has_property();
  property_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigItem.property)
}
#endif
inline void ConfigItem::set_property(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_property();
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigItem.property)
}
inline void ConfigItem::set_property(const void* value,
    size_t size) {
  set_has_property();
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigItem.property)
}
inline ::std::string* ConfigItem::mutable_property() {
  set_has_property();
  // @@protoc_insertion_point(field_mutable:db.ConfigItem.property)
  return property_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigItem::release_property() {
  // @@protoc_insertion_point(field_release:db.ConfigItem.property)
  if (!has_property()) {
    return NULL;
  }
  clear_has_property();
  return property_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigItem::set_allocated_property(::std::string* property) {
  if (property != NULL) {
    set_has_property();
  } else {
    clear_has_property();
  }
  property_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigItem.property)
}
inline ::std::string* ConfigItem::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigItem.property)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_property();
  return property_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigItem::unsafe_arena_set_allocated_property(
    ::std::string* property) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (property != NULL) {
    set_has_property();
  } else {
    clear_has_property();
  }
  property_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      property, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigItem.property)
}

// required int32 price = 7;
inline bool ConfigItem::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigItem::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigItem::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ConfigItem::price() const {
  // @@protoc_insertion_point(field_get:db.ConfigItem.price)
  return price_;
}
inline void ConfigItem::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigItem.price)
}

// required int64 max_num = 8;
inline bool ConfigItem::has_max_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigItem::set_has_max_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigItem::clear_has_max_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigItem::clear_max_num() {
  max_num_ = GOOGLE_LONGLONG(0);
  clear_has_max_num();
}
inline ::google::protobuf::int64 ConfigItem::max_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigItem.max_num)
  return max_num_;
}
inline void ConfigItem::set_max_num(::google::protobuf::int64 value) {
  set_has_max_num();
  max_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigItem.max_num)
}

// -------------------------------------------------------------------

// ConfigCard

// required int32 id = 1;
inline bool ConfigCard::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigCard::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigCard::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigCard::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigCard::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.id)
  return id_;
}
inline void ConfigCard::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.id)
}

// required bytes name = 2;
inline bool ConfigCard::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigCard::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigCard::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigCard::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigCard::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.name)
  return name_.Get();
}
inline void ConfigCard::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCard.name)
}
#if LANG_CXX11
inline void ConfigCard::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCard.name)
}
#endif
inline void ConfigCard::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCard.name)
}
inline void ConfigCard::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCard.name)
}
inline ::std::string* ConfigCard::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigCard.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCard::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigCard.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCard::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCard.name)
}
inline ::std::string* ConfigCard::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCard.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCard::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCard.name)
}

// required int32 profession = 4;
inline bool ConfigCard::has_profession() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigCard::set_has_profession() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigCard::clear_has_profession() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigCard::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 ConfigCard::profession() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.profession)
  return profession_;
}
inline void ConfigCard::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.profession)
}

// required int32 star = 5;
inline bool ConfigCard::has_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigCard::set_has_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigCard::clear_has_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigCard::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 ConfigCard::star() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.star)
  return star_;
}
inline void ConfigCard::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.star)
}

// required int32 attack_range = 6;
inline bool ConfigCard::has_attack_range() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigCard::set_has_attack_range() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigCard::clear_has_attack_range() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigCard::clear_attack_range() {
  attack_range_ = 0;
  clear_has_attack_range();
}
inline ::google::protobuf::int32 ConfigCard::attack_range() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.attack_range)
  return attack_range_;
}
inline void ConfigCard::set_attack_range(::google::protobuf::int32 value) {
  set_has_attack_range();
  attack_range_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.attack_range)
}

// required int32 attack_mode = 7;
inline bool ConfigCard::has_attack_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigCard::set_has_attack_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigCard::clear_has_attack_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigCard::clear_attack_mode() {
  attack_mode_ = 0;
  clear_has_attack_mode();
}
inline ::google::protobuf::int32 ConfigCard::attack_mode() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.attack_mode)
  return attack_mode_;
}
inline void ConfigCard::set_attack_mode(::google::protobuf::int32 value) {
  set_has_attack_mode();
  attack_mode_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.attack_mode)
}

// required int32 energy_cost = 8;
inline bool ConfigCard::has_energy_cost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigCard::set_has_energy_cost() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigCard::clear_has_energy_cost() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigCard::clear_energy_cost() {
  energy_cost_ = 0;
  clear_has_energy_cost();
}
inline ::google::protobuf::int32 ConfigCard::energy_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.energy_cost)
  return energy_cost_;
}
inline void ConfigCard::set_energy_cost(::google::protobuf::int32 value) {
  set_has_energy_cost();
  energy_cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.energy_cost)
}

// required float attack_time = 9;
inline bool ConfigCard::has_attack_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigCard::set_has_attack_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigCard::clear_has_attack_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigCard::clear_attack_time() {
  attack_time_ = 0;
  clear_has_attack_time();
}
inline float ConfigCard::attack_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.attack_time)
  return attack_time_;
}
inline void ConfigCard::set_attack_time(float value) {
  set_has_attack_time();
  attack_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.attack_time)
}

// required float wait_time = 10;
inline bool ConfigCard::has_wait_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigCard::set_has_wait_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigCard::clear_has_wait_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigCard::clear_wait_time() {
  wait_time_ = 0;
  clear_has_wait_time();
}
inline float ConfigCard::wait_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.wait_time)
  return wait_time_;
}
inline void ConfigCard::set_wait_time(float value) {
  set_has_wait_time();
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.wait_time)
}

// required float move_time = 11;
inline bool ConfigCard::has_move_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigCard::set_has_move_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigCard::clear_has_move_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigCard::clear_move_time() {
  move_time_ = 0;
  clear_has_move_time();
}
inline float ConfigCard::move_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.move_time)
  return move_time_;
}
inline void ConfigCard::set_move_time(float value) {
  set_has_move_time();
  move_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.move_time)
}

// required int32 move_distance = 12;
inline bool ConfigCard::has_move_distance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigCard::set_has_move_distance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigCard::clear_has_move_distance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigCard::clear_move_distance() {
  move_distance_ = 0;
  clear_has_move_distance();
}
inline ::google::protobuf::int32 ConfigCard::move_distance() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.move_distance)
  return move_distance_;
}
inline void ConfigCard::set_move_distance(::google::protobuf::int32 value) {
  set_has_move_distance();
  move_distance_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.move_distance)
}

// required int32 run_distance = 13;
inline bool ConfigCard::has_run_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigCard::set_has_run_distance() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigCard::clear_has_run_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigCard::clear_run_distance() {
  run_distance_ = 0;
  clear_has_run_distance();
}
inline ::google::protobuf::int32 ConfigCard::run_distance() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.run_distance)
  return run_distance_;
}
inline void ConfigCard::set_run_distance(::google::protobuf::int32 value) {
  set_has_run_distance();
  run_distance_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.run_distance)
}

// required int32 can_move = 14;
inline bool ConfigCard::has_can_move() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigCard::set_has_can_move() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigCard::clear_has_can_move() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigCard::clear_can_move() {
  can_move_ = 0;
  clear_has_can_move();
}
inline ::google::protobuf::int32 ConfigCard::can_move() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.can_move)
  return can_move_;
}
inline void ConfigCard::set_can_move(::google::protobuf::int32 value) {
  set_has_can_move();
  can_move_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.can_move)
}

// required int32 action_mode = 15;
inline bool ConfigCard::has_action_mode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfigCard::set_has_action_mode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfigCard::clear_has_action_mode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfigCard::clear_action_mode() {
  action_mode_ = 0;
  clear_has_action_mode();
}
inline ::google::protobuf::int32 ConfigCard::action_mode() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.action_mode)
  return action_mode_;
}
inline void ConfigCard::set_action_mode(::google::protobuf::int32 value) {
  set_has_action_mode();
  action_mode_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.action_mode)
}

// required int32 width = 16;
inline bool ConfigCard::has_width() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConfigCard::set_has_width() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConfigCard::clear_has_width() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConfigCard::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ConfigCard::width() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.width)
  return width_;
}
inline void ConfigCard::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.width)
}

// required int32 height = 17;
inline bool ConfigCard::has_height() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ConfigCard::set_has_height() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ConfigCard::clear_has_height() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ConfigCard::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ConfigCard::height() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.height)
  return height_;
}
inline void ConfigCard::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.height)
}

// required bytes initial_equip = 18;
inline bool ConfigCard::has_initial_equip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigCard::set_has_initial_equip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigCard::clear_has_initial_equip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigCard::clear_initial_equip() {
  initial_equip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_initial_equip();
}
inline const ::std::string& ConfigCard::initial_equip() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.initial_equip)
  return initial_equip_.Get();
}
inline void ConfigCard::set_initial_equip(const ::std::string& value) {
  set_has_initial_equip();
  initial_equip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCard.initial_equip)
}
#if LANG_CXX11
inline void ConfigCard::set_initial_equip(::std::string&& value) {
  set_has_initial_equip();
  initial_equip_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCard.initial_equip)
}
#endif
inline void ConfigCard::set_initial_equip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_initial_equip();
  initial_equip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCard.initial_equip)
}
inline void ConfigCard::set_initial_equip(const void* value,
    size_t size) {
  set_has_initial_equip();
  initial_equip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCard.initial_equip)
}
inline ::std::string* ConfigCard::mutable_initial_equip() {
  set_has_initial_equip();
  // @@protoc_insertion_point(field_mutable:db.ConfigCard.initial_equip)
  return initial_equip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCard::release_initial_equip() {
  // @@protoc_insertion_point(field_release:db.ConfigCard.initial_equip)
  if (!has_initial_equip()) {
    return NULL;
  }
  clear_has_initial_equip();
  return initial_equip_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCard::set_allocated_initial_equip(::std::string* initial_equip) {
  if (initial_equip != NULL) {
    set_has_initial_equip();
  } else {
    clear_has_initial_equip();
  }
  initial_equip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_equip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCard.initial_equip)
}
inline ::std::string* ConfigCard::unsafe_arena_release_initial_equip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCard.initial_equip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_initial_equip();
  return initial_equip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCard::unsafe_arena_set_allocated_initial_equip(
    ::std::string* initial_equip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (initial_equip != NULL) {
    set_has_initial_equip();
  } else {
    clear_has_initial_equip();
  }
  initial_equip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      initial_equip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCard.initial_equip)
}

// required uint64 talent = 19;
inline bool ConfigCard::has_talent() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ConfigCard::set_has_talent() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ConfigCard::clear_has_talent() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ConfigCard::clear_talent() {
  talent_ = GOOGLE_ULONGLONG(0);
  clear_has_talent();
}
inline ::google::protobuf::uint64 ConfigCard::talent() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.talent)
  return talent_;
}
inline void ConfigCard::set_talent(::google::protobuf::uint64 value) {
  set_has_talent();
  talent_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.talent)
}

// required int32 practice_group = 20;
inline bool ConfigCard::has_practice_group() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ConfigCard::set_has_practice_group() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ConfigCard::clear_has_practice_group() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ConfigCard::clear_practice_group() {
  practice_group_ = 0;
  clear_has_practice_group();
}
inline ::google::protobuf::int32 ConfigCard::practice_group() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.practice_group)
  return practice_group_;
}
inline void ConfigCard::set_practice_group(::google::protobuf::int32 value) {
  set_has_practice_group();
  practice_group_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.practice_group)
}

// required bytes farm_skill = 21;
inline bool ConfigCard::has_farm_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigCard::set_has_farm_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigCard::clear_has_farm_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigCard::clear_farm_skill() {
  farm_skill_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_farm_skill();
}
inline const ::std::string& ConfigCard::farm_skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.farm_skill)
  return farm_skill_.Get();
}
inline void ConfigCard::set_farm_skill(const ::std::string& value) {
  set_has_farm_skill();
  farm_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCard.farm_skill)
}
#if LANG_CXX11
inline void ConfigCard::set_farm_skill(::std::string&& value) {
  set_has_farm_skill();
  farm_skill_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCard.farm_skill)
}
#endif
inline void ConfigCard::set_farm_skill(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_farm_skill();
  farm_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCard.farm_skill)
}
inline void ConfigCard::set_farm_skill(const void* value,
    size_t size) {
  set_has_farm_skill();
  farm_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCard.farm_skill)
}
inline ::std::string* ConfigCard::mutable_farm_skill() {
  set_has_farm_skill();
  // @@protoc_insertion_point(field_mutable:db.ConfigCard.farm_skill)
  return farm_skill_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCard::release_farm_skill() {
  // @@protoc_insertion_point(field_release:db.ConfigCard.farm_skill)
  if (!has_farm_skill()) {
    return NULL;
  }
  clear_has_farm_skill();
  return farm_skill_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCard::set_allocated_farm_skill(::std::string* farm_skill) {
  if (farm_skill != NULL) {
    set_has_farm_skill();
  } else {
    clear_has_farm_skill();
  }
  farm_skill_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), farm_skill,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCard.farm_skill)
}
inline ::std::string* ConfigCard::unsafe_arena_release_farm_skill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCard.farm_skill)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_farm_skill();
  return farm_skill_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCard::unsafe_arena_set_allocated_farm_skill(
    ::std::string* farm_skill) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (farm_skill != NULL) {
    set_has_farm_skill();
  } else {
    clear_has_farm_skill();
  }
  farm_skill_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      farm_skill, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCard.farm_skill)
}

// required bytes skill = 22;
inline bool ConfigCard::has_skill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigCard::set_has_skill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigCard::clear_has_skill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigCard::clear_skill() {
  skill_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_skill();
}
inline const ::std::string& ConfigCard::skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.skill)
  return skill_.Get();
}
inline void ConfigCard::set_skill(const ::std::string& value) {
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCard.skill)
}
#if LANG_CXX11
inline void ConfigCard::set_skill(::std::string&& value) {
  set_has_skill();
  skill_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCard.skill)
}
#endif
inline void ConfigCard::set_skill(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCard.skill)
}
inline void ConfigCard::set_skill(const void* value,
    size_t size) {
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCard.skill)
}
inline ::std::string* ConfigCard::mutable_skill() {
  set_has_skill();
  // @@protoc_insertion_point(field_mutable:db.ConfigCard.skill)
  return skill_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCard::release_skill() {
  // @@protoc_insertion_point(field_release:db.ConfigCard.skill)
  if (!has_skill()) {
    return NULL;
  }
  clear_has_skill();
  return skill_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCard::set_allocated_skill(::std::string* skill) {
  if (skill != NULL) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  skill_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCard.skill)
}
inline ::std::string* ConfigCard::unsafe_arena_release_skill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCard.skill)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_skill();
  return skill_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCard::unsafe_arena_set_allocated_skill(
    ::std::string* skill) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (skill != NULL) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  skill_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      skill, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCard.skill)
}

// required int32 chip_id = 23;
inline bool ConfigCard::has_chip_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ConfigCard::set_has_chip_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ConfigCard::clear_has_chip_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ConfigCard::clear_chip_id() {
  chip_id_ = 0;
  clear_has_chip_id();
}
inline ::google::protobuf::int32 ConfigCard::chip_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.chip_id)
  return chip_id_;
}
inline void ConfigCard::set_chip_id(::google::protobuf::int32 value) {
  set_has_chip_id();
  chip_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.chip_id)
}

// required int32 chip_cost = 24;
inline bool ConfigCard::has_chip_cost() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ConfigCard::set_has_chip_cost() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ConfigCard::clear_has_chip_cost() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ConfigCard::clear_chip_cost() {
  chip_cost_ = 0;
  clear_has_chip_cost();
}
inline ::google::protobuf::int32 ConfigCard::chip_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.chip_cost)
  return chip_cost_;
}
inline void ConfigCard::set_chip_cost(::google::protobuf::int32 value) {
  set_has_chip_cost();
  chip_cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.chip_cost)
}

// required int32 chip_convert = 25;
inline bool ConfigCard::has_chip_convert() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ConfigCard::set_has_chip_convert() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ConfigCard::clear_has_chip_convert() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ConfigCard::clear_chip_convert() {
  chip_convert_ = 0;
  clear_has_chip_convert();
}
inline ::google::protobuf::int32 ConfigCard::chip_convert() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.chip_convert)
  return chip_convert_;
}
inline void ConfigCard::set_chip_convert(::google::protobuf::int32 value) {
  set_has_chip_convert();
  chip_convert_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.chip_convert)
}

// required bytes chip_exchange = 26;
inline bool ConfigCard::has_chip_exchange() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigCard::set_has_chip_exchange() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigCard::clear_has_chip_exchange() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigCard::clear_chip_exchange() {
  chip_exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_chip_exchange();
}
inline const ::std::string& ConfigCard::chip_exchange() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.chip_exchange)
  return chip_exchange_.Get();
}
inline void ConfigCard::set_chip_exchange(const ::std::string& value) {
  set_has_chip_exchange();
  chip_exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCard.chip_exchange)
}
#if LANG_CXX11
inline void ConfigCard::set_chip_exchange(::std::string&& value) {
  set_has_chip_exchange();
  chip_exchange_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCard.chip_exchange)
}
#endif
inline void ConfigCard::set_chip_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chip_exchange();
  chip_exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCard.chip_exchange)
}
inline void ConfigCard::set_chip_exchange(const void* value,
    size_t size) {
  set_has_chip_exchange();
  chip_exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCard.chip_exchange)
}
inline ::std::string* ConfigCard::mutable_chip_exchange() {
  set_has_chip_exchange();
  // @@protoc_insertion_point(field_mutable:db.ConfigCard.chip_exchange)
  return chip_exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCard::release_chip_exchange() {
  // @@protoc_insertion_point(field_release:db.ConfigCard.chip_exchange)
  if (!has_chip_exchange()) {
    return NULL;
  }
  clear_has_chip_exchange();
  return chip_exchange_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCard::set_allocated_chip_exchange(::std::string* chip_exchange) {
  if (chip_exchange != NULL) {
    set_has_chip_exchange();
  } else {
    clear_has_chip_exchange();
  }
  chip_exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chip_exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCard.chip_exchange)
}
inline ::std::string* ConfigCard::unsafe_arena_release_chip_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCard.chip_exchange)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_chip_exchange();
  return chip_exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCard::unsafe_arena_set_allocated_chip_exchange(
    ::std::string* chip_exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (chip_exchange != NULL) {
    set_has_chip_exchange();
  } else {
    clear_has_chip_exchange();
  }
  chip_exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      chip_exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCard.chip_exchange)
}

// required float gather_add_ratio = 27;
inline bool ConfigCard::has_gather_add_ratio() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ConfigCard::set_has_gather_add_ratio() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ConfigCard::clear_has_gather_add_ratio() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ConfigCard::clear_gather_add_ratio() {
  gather_add_ratio_ = 0;
  clear_has_gather_add_ratio();
}
inline float ConfigCard::gather_add_ratio() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.gather_add_ratio)
  return gather_add_ratio_;
}
inline void ConfigCard::set_gather_add_ratio(float value) {
  set_has_gather_add_ratio();
  gather_add_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.gather_add_ratio)
}

// required bytes penetration_args = 28;
inline bool ConfigCard::has_penetration_args() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigCard::set_has_penetration_args() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigCard::clear_has_penetration_args() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigCard::clear_penetration_args() {
  penetration_args_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_penetration_args();
}
inline const ::std::string& ConfigCard::penetration_args() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.penetration_args)
  return penetration_args_.Get();
}
inline void ConfigCard::set_penetration_args(const ::std::string& value) {
  set_has_penetration_args();
  penetration_args_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCard.penetration_args)
}
#if LANG_CXX11
inline void ConfigCard::set_penetration_args(::std::string&& value) {
  set_has_penetration_args();
  penetration_args_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCard.penetration_args)
}
#endif
inline void ConfigCard::set_penetration_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_penetration_args();
  penetration_args_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCard.penetration_args)
}
inline void ConfigCard::set_penetration_args(const void* value,
    size_t size) {
  set_has_penetration_args();
  penetration_args_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCard.penetration_args)
}
inline ::std::string* ConfigCard::mutable_penetration_args() {
  set_has_penetration_args();
  // @@protoc_insertion_point(field_mutable:db.ConfigCard.penetration_args)
  return penetration_args_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCard::release_penetration_args() {
  // @@protoc_insertion_point(field_release:db.ConfigCard.penetration_args)
  if (!has_penetration_args()) {
    return NULL;
  }
  clear_has_penetration_args();
  return penetration_args_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCard::set_allocated_penetration_args(::std::string* penetration_args) {
  if (penetration_args != NULL) {
    set_has_penetration_args();
  } else {
    clear_has_penetration_args();
  }
  penetration_args_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), penetration_args,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCard.penetration_args)
}
inline ::std::string* ConfigCard::unsafe_arena_release_penetration_args() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCard.penetration_args)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_penetration_args();
  return penetration_args_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCard::unsafe_arena_set_allocated_penetration_args(
    ::std::string* penetration_args) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (penetration_args != NULL) {
    set_has_penetration_args();
  } else {
    clear_has_penetration_args();
  }
  penetration_args_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      penetration_args, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCard.penetration_args)
}

// required int64 init_fall_skill = 29;
inline bool ConfigCard::has_init_fall_skill() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ConfigCard::set_has_init_fall_skill() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ConfigCard::clear_has_init_fall_skill() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ConfigCard::clear_init_fall_skill() {
  init_fall_skill_ = GOOGLE_LONGLONG(0);
  clear_has_init_fall_skill();
}
inline ::google::protobuf::int64 ConfigCard::init_fall_skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.init_fall_skill)
  return init_fall_skill_;
}
inline void ConfigCard::set_init_fall_skill(::google::protobuf::int64 value) {
  set_has_init_fall_skill();
  init_fall_skill_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.init_fall_skill)
}

// required int32 quality = 30;
inline bool ConfigCard::has_quality() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ConfigCard::set_has_quality() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ConfigCard::clear_has_quality() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ConfigCard::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 ConfigCard::quality() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.quality)
  return quality_;
}
inline void ConfigCard::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.quality)
}

// required float init_hunger = 31;
inline bool ConfigCard::has_init_hunger() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ConfigCard::set_has_init_hunger() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ConfigCard::clear_has_init_hunger() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ConfigCard::clear_init_hunger() {
  init_hunger_ = 0;
  clear_has_init_hunger();
}
inline float ConfigCard::init_hunger() const {
  // @@protoc_insertion_point(field_get:db.ConfigCard.init_hunger)
  return init_hunger_;
}
inline void ConfigCard::set_init_hunger(float value) {
  set_has_init_hunger();
  init_hunger_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCard.init_hunger)
}

// -------------------------------------------------------------------

// ConfigCardStrengthen

// required int32 typeid = 1;
inline bool ConfigCardStrengthen::has_typeid_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigCardStrengthen::set_has_typeid_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigCardStrengthen::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigCardStrengthen::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 ConfigCardStrengthen::typeid_() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardStrengthen.typeid)
  return typeid__;
}
inline void ConfigCardStrengthen::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardStrengthen.typeid)
}

// required int32 star = 2;
inline bool ConfigCardStrengthen::has_star() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigCardStrengthen::set_has_star() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigCardStrengthen::clear_has_star() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigCardStrengthen::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 ConfigCardStrengthen::star() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardStrengthen.star)
  return star_;
}
inline void ConfigCardStrengthen::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardStrengthen.star)
}

// required bytes initial_attribute = 3;
inline bool ConfigCardStrengthen::has_initial_attribute() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigCardStrengthen::set_has_initial_attribute() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigCardStrengthen::clear_has_initial_attribute() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigCardStrengthen::clear_initial_attribute() {
  initial_attribute_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_initial_attribute();
}
inline const ::std::string& ConfigCardStrengthen::initial_attribute() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardStrengthen.initial_attribute)
  return initial_attribute_.Get();
}
inline void ConfigCardStrengthen::set_initial_attribute(const ::std::string& value) {
  set_has_initial_attribute();
  initial_attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardStrengthen.initial_attribute)
}
#if LANG_CXX11
inline void ConfigCardStrengthen::set_initial_attribute(::std::string&& value) {
  set_has_initial_attribute();
  initial_attribute_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardStrengthen.initial_attribute)
}
#endif
inline void ConfigCardStrengthen::set_initial_attribute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_initial_attribute();
  initial_attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardStrengthen.initial_attribute)
}
inline void ConfigCardStrengthen::set_initial_attribute(const void* value,
    size_t size) {
  set_has_initial_attribute();
  initial_attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardStrengthen.initial_attribute)
}
inline ::std::string* ConfigCardStrengthen::mutable_initial_attribute() {
  set_has_initial_attribute();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardStrengthen.initial_attribute)
  return initial_attribute_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardStrengthen::release_initial_attribute() {
  // @@protoc_insertion_point(field_release:db.ConfigCardStrengthen.initial_attribute)
  if (!has_initial_attribute()) {
    return NULL;
  }
  clear_has_initial_attribute();
  return initial_attribute_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::set_allocated_initial_attribute(::std::string* initial_attribute) {
  if (initial_attribute != NULL) {
    set_has_initial_attribute();
  } else {
    clear_has_initial_attribute();
  }
  initial_attribute_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_attribute,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardStrengthen.initial_attribute)
}
inline ::std::string* ConfigCardStrengthen::unsafe_arena_release_initial_attribute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardStrengthen.initial_attribute)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_initial_attribute();
  return initial_attribute_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::unsafe_arena_set_allocated_initial_attribute(
    ::std::string* initial_attribute) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (initial_attribute != NULL) {
    set_has_initial_attribute();
  } else {
    clear_has_initial_attribute();
  }
  initial_attribute_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      initial_attribute, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardStrengthen.initial_attribute)
}

// required bytes aptitude = 4;
inline bool ConfigCardStrengthen::has_aptitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigCardStrengthen::set_has_aptitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigCardStrengthen::clear_has_aptitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigCardStrengthen::clear_aptitude() {
  aptitude_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_aptitude();
}
inline const ::std::string& ConfigCardStrengthen::aptitude() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardStrengthen.aptitude)
  return aptitude_.Get();
}
inline void ConfigCardStrengthen::set_aptitude(const ::std::string& value) {
  set_has_aptitude();
  aptitude_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardStrengthen.aptitude)
}
#if LANG_CXX11
inline void ConfigCardStrengthen::set_aptitude(::std::string&& value) {
  set_has_aptitude();
  aptitude_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardStrengthen.aptitude)
}
#endif
inline void ConfigCardStrengthen::set_aptitude(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aptitude();
  aptitude_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardStrengthen.aptitude)
}
inline void ConfigCardStrengthen::set_aptitude(const void* value,
    size_t size) {
  set_has_aptitude();
  aptitude_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardStrengthen.aptitude)
}
inline ::std::string* ConfigCardStrengthen::mutable_aptitude() {
  set_has_aptitude();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardStrengthen.aptitude)
  return aptitude_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardStrengthen::release_aptitude() {
  // @@protoc_insertion_point(field_release:db.ConfigCardStrengthen.aptitude)
  if (!has_aptitude()) {
    return NULL;
  }
  clear_has_aptitude();
  return aptitude_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::set_allocated_aptitude(::std::string* aptitude) {
  if (aptitude != NULL) {
    set_has_aptitude();
  } else {
    clear_has_aptitude();
  }
  aptitude_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aptitude,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardStrengthen.aptitude)
}
inline ::std::string* ConfigCardStrengthen::unsafe_arena_release_aptitude() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardStrengthen.aptitude)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_aptitude();
  return aptitude_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::unsafe_arena_set_allocated_aptitude(
    ::std::string* aptitude) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (aptitude != NULL) {
    set_has_aptitude();
  } else {
    clear_has_aptitude();
  }
  aptitude_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      aptitude, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardStrengthen.aptitude)
}

// required int32 level_max = 5;
inline bool ConfigCardStrengthen::has_level_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigCardStrengthen::set_has_level_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigCardStrengthen::clear_has_level_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigCardStrengthen::clear_level_max() {
  level_max_ = 0;
  clear_has_level_max();
}
inline ::google::protobuf::int32 ConfigCardStrengthen::level_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardStrengthen.level_max)
  return level_max_;
}
inline void ConfigCardStrengthen::set_level_max(::google::protobuf::int32 value) {
  set_has_level_max();
  level_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardStrengthen.level_max)
}

// required bytes item_cost = 6;
inline bool ConfigCardStrengthen::has_item_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigCardStrengthen::set_has_item_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigCardStrengthen::clear_has_item_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigCardStrengthen::clear_item_cost() {
  item_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_item_cost();
}
inline const ::std::string& ConfigCardStrengthen::item_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardStrengthen.item_cost)
  return item_cost_.Get();
}
inline void ConfigCardStrengthen::set_item_cost(const ::std::string& value) {
  set_has_item_cost();
  item_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardStrengthen.item_cost)
}
#if LANG_CXX11
inline void ConfigCardStrengthen::set_item_cost(::std::string&& value) {
  set_has_item_cost();
  item_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardStrengthen.item_cost)
}
#endif
inline void ConfigCardStrengthen::set_item_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_cost();
  item_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardStrengthen.item_cost)
}
inline void ConfigCardStrengthen::set_item_cost(const void* value,
    size_t size) {
  set_has_item_cost();
  item_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardStrengthen.item_cost)
}
inline ::std::string* ConfigCardStrengthen::mutable_item_cost() {
  set_has_item_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardStrengthen.item_cost)
  return item_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardStrengthen::release_item_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigCardStrengthen.item_cost)
  if (!has_item_cost()) {
    return NULL;
  }
  clear_has_item_cost();
  return item_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::set_allocated_item_cost(::std::string* item_cost) {
  if (item_cost != NULL) {
    set_has_item_cost();
  } else {
    clear_has_item_cost();
  }
  item_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardStrengthen.item_cost)
}
inline ::std::string* ConfigCardStrengthen::unsafe_arena_release_item_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardStrengthen.item_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_item_cost();
  return item_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::unsafe_arena_set_allocated_item_cost(
    ::std::string* item_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (item_cost != NULL) {
    set_has_item_cost();
  } else {
    clear_has_item_cost();
  }
  item_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      item_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardStrengthen.item_cost)
}

// required bytes chip_cost = 7;
inline bool ConfigCardStrengthen::has_chip_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigCardStrengthen::set_has_chip_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigCardStrengthen::clear_has_chip_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigCardStrengthen::clear_chip_cost() {
  chip_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_chip_cost();
}
inline const ::std::string& ConfigCardStrengthen::chip_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardStrengthen.chip_cost)
  return chip_cost_.Get();
}
inline void ConfigCardStrengthen::set_chip_cost(const ::std::string& value) {
  set_has_chip_cost();
  chip_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardStrengthen.chip_cost)
}
#if LANG_CXX11
inline void ConfigCardStrengthen::set_chip_cost(::std::string&& value) {
  set_has_chip_cost();
  chip_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardStrengthen.chip_cost)
}
#endif
inline void ConfigCardStrengthen::set_chip_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chip_cost();
  chip_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardStrengthen.chip_cost)
}
inline void ConfigCardStrengthen::set_chip_cost(const void* value,
    size_t size) {
  set_has_chip_cost();
  chip_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardStrengthen.chip_cost)
}
inline ::std::string* ConfigCardStrengthen::mutable_chip_cost() {
  set_has_chip_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardStrengthen.chip_cost)
  return chip_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardStrengthen::release_chip_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigCardStrengthen.chip_cost)
  if (!has_chip_cost()) {
    return NULL;
  }
  clear_has_chip_cost();
  return chip_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::set_allocated_chip_cost(::std::string* chip_cost) {
  if (chip_cost != NULL) {
    set_has_chip_cost();
  } else {
    clear_has_chip_cost();
  }
  chip_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chip_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardStrengthen.chip_cost)
}
inline ::std::string* ConfigCardStrengthen::unsafe_arena_release_chip_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardStrengthen.chip_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_chip_cost();
  return chip_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::unsafe_arena_set_allocated_chip_cost(
    ::std::string* chip_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (chip_cost != NULL) {
    set_has_chip_cost();
  } else {
    clear_has_chip_cost();
  }
  chip_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      chip_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardStrengthen.chip_cost)
}

// required bytes rising_star_cost = 8;
inline bool ConfigCardStrengthen::has_rising_star_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigCardStrengthen::set_has_rising_star_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigCardStrengthen::clear_has_rising_star_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigCardStrengthen::clear_rising_star_cost() {
  rising_star_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_rising_star_cost();
}
inline const ::std::string& ConfigCardStrengthen::rising_star_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardStrengthen.rising_star_cost)
  return rising_star_cost_.Get();
}
inline void ConfigCardStrengthen::set_rising_star_cost(const ::std::string& value) {
  set_has_rising_star_cost();
  rising_star_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardStrengthen.rising_star_cost)
}
#if LANG_CXX11
inline void ConfigCardStrengthen::set_rising_star_cost(::std::string&& value) {
  set_has_rising_star_cost();
  rising_star_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardStrengthen.rising_star_cost)
}
#endif
inline void ConfigCardStrengthen::set_rising_star_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rising_star_cost();
  rising_star_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardStrengthen.rising_star_cost)
}
inline void ConfigCardStrengthen::set_rising_star_cost(const void* value,
    size_t size) {
  set_has_rising_star_cost();
  rising_star_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardStrengthen.rising_star_cost)
}
inline ::std::string* ConfigCardStrengthen::mutable_rising_star_cost() {
  set_has_rising_star_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardStrengthen.rising_star_cost)
  return rising_star_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardStrengthen::release_rising_star_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigCardStrengthen.rising_star_cost)
  if (!has_rising_star_cost()) {
    return NULL;
  }
  clear_has_rising_star_cost();
  return rising_star_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::set_allocated_rising_star_cost(::std::string* rising_star_cost) {
  if (rising_star_cost != NULL) {
    set_has_rising_star_cost();
  } else {
    clear_has_rising_star_cost();
  }
  rising_star_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rising_star_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardStrengthen.rising_star_cost)
}
inline ::std::string* ConfigCardStrengthen::unsafe_arena_release_rising_star_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardStrengthen.rising_star_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_rising_star_cost();
  return rising_star_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardStrengthen::unsafe_arena_set_allocated_rising_star_cost(
    ::std::string* rising_star_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (rising_star_cost != NULL) {
    set_has_rising_star_cost();
  } else {
    clear_has_rising_star_cost();
  }
  rising_star_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      rising_star_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardStrengthen.rising_star_cost)
}

// -------------------------------------------------------------------

// ConfigLevel

// required int32 level = 1;
inline bool ConfigLevel::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigLevel::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigLevel::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigLevel::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.level)
  return level_;
}
inline void ConfigLevel::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLevel.level)
}

// required int32 need_exp = 2;
inline bool ConfigLevel::has_need_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigLevel::set_has_need_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigLevel::clear_has_need_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigLevel::clear_need_exp() {
  need_exp_ = 0;
  clear_has_need_exp();
}
inline ::google::protobuf::int32 ConfigLevel::need_exp() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.need_exp)
  return need_exp_;
}
inline void ConfigLevel::set_need_exp(::google::protobuf::int32 value) {
  set_has_need_exp();
  need_exp_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLevel.need_exp)
}

// required bytes add_facility = 3;
inline bool ConfigLevel::has_add_facility() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigLevel::set_has_add_facility() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigLevel::clear_has_add_facility() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigLevel::clear_add_facility() {
  add_facility_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_add_facility();
}
inline const ::std::string& ConfigLevel::add_facility() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.add_facility)
  return add_facility_.Get();
}
inline void ConfigLevel::set_add_facility(const ::std::string& value) {
  set_has_add_facility();
  add_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigLevel.add_facility)
}
#if LANG_CXX11
inline void ConfigLevel::set_add_facility(::std::string&& value) {
  set_has_add_facility();
  add_facility_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigLevel.add_facility)
}
#endif
inline void ConfigLevel::set_add_facility(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_add_facility();
  add_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigLevel.add_facility)
}
inline void ConfigLevel::set_add_facility(const void* value,
    size_t size) {
  set_has_add_facility();
  add_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigLevel.add_facility)
}
inline ::std::string* ConfigLevel::mutable_add_facility() {
  set_has_add_facility();
  // @@protoc_insertion_point(field_mutable:db.ConfigLevel.add_facility)
  return add_facility_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigLevel::release_add_facility() {
  // @@protoc_insertion_point(field_release:db.ConfigLevel.add_facility)
  if (!has_add_facility()) {
    return NULL;
  }
  clear_has_add_facility();
  return add_facility_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigLevel::set_allocated_add_facility(::std::string* add_facility) {
  if (add_facility != NULL) {
    set_has_add_facility();
  } else {
    clear_has_add_facility();
  }
  add_facility_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_facility,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigLevel.add_facility)
}
inline ::std::string* ConfigLevel::unsafe_arena_release_add_facility() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigLevel.add_facility)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_add_facility();
  return add_facility_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigLevel::unsafe_arena_set_allocated_add_facility(
    ::std::string* add_facility) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (add_facility != NULL) {
    set_has_add_facility();
  } else {
    clear_has_add_facility();
  }
  add_facility_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      add_facility, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigLevel.add_facility)
}

// required bytes add_item = 4;
inline bool ConfigLevel::has_add_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigLevel::set_has_add_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigLevel::clear_has_add_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigLevel::clear_add_item() {
  add_item_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_add_item();
}
inline const ::std::string& ConfigLevel::add_item() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.add_item)
  return add_item_.Get();
}
inline void ConfigLevel::set_add_item(const ::std::string& value) {
  set_has_add_item();
  add_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigLevel.add_item)
}
#if LANG_CXX11
inline void ConfigLevel::set_add_item(::std::string&& value) {
  set_has_add_item();
  add_item_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigLevel.add_item)
}
#endif
inline void ConfigLevel::set_add_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_add_item();
  add_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigLevel.add_item)
}
inline void ConfigLevel::set_add_item(const void* value,
    size_t size) {
  set_has_add_item();
  add_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigLevel.add_item)
}
inline ::std::string* ConfigLevel::mutable_add_item() {
  set_has_add_item();
  // @@protoc_insertion_point(field_mutable:db.ConfigLevel.add_item)
  return add_item_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigLevel::release_add_item() {
  // @@protoc_insertion_point(field_release:db.ConfigLevel.add_item)
  if (!has_add_item()) {
    return NULL;
  }
  clear_has_add_item();
  return add_item_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigLevel::set_allocated_add_item(::std::string* add_item) {
  if (add_item != NULL) {
    set_has_add_item();
  } else {
    clear_has_add_item();
  }
  add_item_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_item,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigLevel.add_item)
}
inline ::std::string* ConfigLevel::unsafe_arena_release_add_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigLevel.add_item)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_add_item();
  return add_item_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigLevel::unsafe_arena_set_allocated_add_item(
    ::std::string* add_item) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (add_item != NULL) {
    set_has_add_item();
  } else {
    clear_has_add_item();
  }
  add_item_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      add_item, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigLevel.add_item)
}

// required int32 add_exp = 5;
inline bool ConfigLevel::has_add_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigLevel::set_has_add_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigLevel::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigLevel::clear_add_exp() {
  add_exp_ = 0;
  clear_has_add_exp();
}
inline ::google::protobuf::int32 ConfigLevel::add_exp() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.add_exp)
  return add_exp_;
}
inline void ConfigLevel::set_add_exp(::google::protobuf::int32 value) {
  set_has_add_exp();
  add_exp_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLevel.add_exp)
}

// required int32 max_sailor_level = 6;
inline bool ConfigLevel::has_max_sailor_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigLevel::set_has_max_sailor_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigLevel::clear_has_max_sailor_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigLevel::clear_max_sailor_level() {
  max_sailor_level_ = 0;
  clear_has_max_sailor_level();
}
inline ::google::protobuf::int32 ConfigLevel::max_sailor_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.max_sailor_level)
  return max_sailor_level_;
}
inline void ConfigLevel::set_max_sailor_level(::google::protobuf::int32 value) {
  set_has_max_sailor_level();
  max_sailor_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLevel.max_sailor_level)
}

// required int32 max_vitality = 7;
inline bool ConfigLevel::has_max_vitality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigLevel::set_has_max_vitality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigLevel::clear_has_max_vitality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigLevel::clear_max_vitality() {
  max_vitality_ = 0;
  clear_has_max_vitality();
}
inline ::google::protobuf::int32 ConfigLevel::max_vitality() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.max_vitality)
  return max_vitality_;
}
inline void ConfigLevel::set_max_vitality(::google::protobuf::int32 value) {
  set_has_max_vitality();
  max_vitality_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLevel.max_vitality)
}

// required int32 max_take_items = 8;
inline bool ConfigLevel::has_max_take_items() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigLevel::set_has_max_take_items() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigLevel::clear_has_max_take_items() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigLevel::clear_max_take_items() {
  max_take_items_ = 0;
  clear_has_max_take_items();
}
inline ::google::protobuf::int32 ConfigLevel::max_take_items() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.max_take_items)
  return max_take_items_;
}
inline void ConfigLevel::set_max_take_items(::google::protobuf::int32 value) {
  set_has_max_take_items();
  max_take_items_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLevel.max_take_items)
}

// required bytes fail_reward = 9;
inline bool ConfigLevel::has_fail_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigLevel::set_has_fail_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigLevel::clear_has_fail_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigLevel::clear_fail_reward() {
  fail_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_fail_reward();
}
inline const ::std::string& ConfigLevel::fail_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigLevel.fail_reward)
  return fail_reward_.Get();
}
inline void ConfigLevel::set_fail_reward(const ::std::string& value) {
  set_has_fail_reward();
  fail_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigLevel.fail_reward)
}
#if LANG_CXX11
inline void ConfigLevel::set_fail_reward(::std::string&& value) {
  set_has_fail_reward();
  fail_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigLevel.fail_reward)
}
#endif
inline void ConfigLevel::set_fail_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fail_reward();
  fail_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigLevel.fail_reward)
}
inline void ConfigLevel::set_fail_reward(const void* value,
    size_t size) {
  set_has_fail_reward();
  fail_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigLevel.fail_reward)
}
inline ::std::string* ConfigLevel::mutable_fail_reward() {
  set_has_fail_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigLevel.fail_reward)
  return fail_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigLevel::release_fail_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigLevel.fail_reward)
  if (!has_fail_reward()) {
    return NULL;
  }
  clear_has_fail_reward();
  return fail_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigLevel::set_allocated_fail_reward(::std::string* fail_reward) {
  if (fail_reward != NULL) {
    set_has_fail_reward();
  } else {
    clear_has_fail_reward();
  }
  fail_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fail_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigLevel.fail_reward)
}
inline ::std::string* ConfigLevel::unsafe_arena_release_fail_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigLevel.fail_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_fail_reward();
  return fail_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigLevel::unsafe_arena_set_allocated_fail_reward(
    ::std::string* fail_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fail_reward != NULL) {
    set_has_fail_reward();
  } else {
    clear_has_fail_reward();
  }
  fail_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fail_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigLevel.fail_reward)
}

// -------------------------------------------------------------------

// ConfigModel

// required int32 id = 1;
inline bool ConfigModel::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigModel::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigModel::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigModel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigModel::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.id)
  return id_;
}
inline void ConfigModel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigModel.id)
}

// required int32 style = 2;
inline bool ConfigModel::has_style() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigModel::set_has_style() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigModel::clear_has_style() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigModel::clear_style() {
  style_ = 0;
  clear_has_style();
}
inline ::google::protobuf::int32 ConfigModel::style() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.style)
  return style_;
}
inline void ConfigModel::set_style(::google::protobuf::int32 value) {
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigModel.style)
}

// required int32 level = 3;
inline bool ConfigModel::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigModel::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigModel::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigModel::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigModel::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.level)
  return level_;
}
inline void ConfigModel::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigModel.level)
}

// required bytes room_open = 4;
inline bool ConfigModel::has_room_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigModel::set_has_room_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigModel::clear_has_room_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigModel::clear_room_open() {
  room_open_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_room_open();
}
inline const ::std::string& ConfigModel::room_open() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.room_open)
  return room_open_.Get();
}
inline void ConfigModel::set_room_open(const ::std::string& value) {
  set_has_room_open();
  room_open_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigModel.room_open)
}
#if LANG_CXX11
inline void ConfigModel::set_room_open(::std::string&& value) {
  set_has_room_open();
  room_open_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigModel.room_open)
}
#endif
inline void ConfigModel::set_room_open(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_room_open();
  room_open_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigModel.room_open)
}
inline void ConfigModel::set_room_open(const void* value,
    size_t size) {
  set_has_room_open();
  room_open_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigModel.room_open)
}
inline ::std::string* ConfigModel::mutable_room_open() {
  set_has_room_open();
  // @@protoc_insertion_point(field_mutable:db.ConfigModel.room_open)
  return room_open_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigModel::release_room_open() {
  // @@protoc_insertion_point(field_release:db.ConfigModel.room_open)
  if (!has_room_open()) {
    return NULL;
  }
  clear_has_room_open();
  return room_open_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigModel::set_allocated_room_open(::std::string* room_open) {
  if (room_open != NULL) {
    set_has_room_open();
  } else {
    clear_has_room_open();
  }
  room_open_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_open,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigModel.room_open)
}
inline ::std::string* ConfigModel::unsafe_arena_release_room_open() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigModel.room_open)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_room_open();
  return room_open_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigModel::unsafe_arena_set_allocated_room_open(
    ::std::string* room_open) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_open != NULL) {
    set_has_room_open();
  } else {
    clear_has_room_open();
  }
  room_open_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_open, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigModel.room_open)
}

// required bytes map_size = 5;
inline bool ConfigModel::has_map_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigModel::set_has_map_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigModel::clear_has_map_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigModel::clear_map_size() {
  map_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_map_size();
}
inline const ::std::string& ConfigModel::map_size() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.map_size)
  return map_size_.Get();
}
inline void ConfigModel::set_map_size(const ::std::string& value) {
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigModel.map_size)
}
#if LANG_CXX11
inline void ConfigModel::set_map_size(::std::string&& value) {
  set_has_map_size();
  map_size_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigModel.map_size)
}
#endif
inline void ConfigModel::set_map_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigModel.map_size)
}
inline void ConfigModel::set_map_size(const void* value,
    size_t size) {
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigModel.map_size)
}
inline ::std::string* ConfigModel::mutable_map_size() {
  set_has_map_size();
  // @@protoc_insertion_point(field_mutable:db.ConfigModel.map_size)
  return map_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigModel::release_map_size() {
  // @@protoc_insertion_point(field_release:db.ConfigModel.map_size)
  if (!has_map_size()) {
    return NULL;
  }
  clear_has_map_size();
  return map_size_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigModel::set_allocated_map_size(::std::string* map_size) {
  if (map_size != NULL) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  map_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigModel.map_size)
}
inline ::std::string* ConfigModel::unsafe_arena_release_map_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigModel.map_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_map_size();
  return map_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigModel::unsafe_arena_set_allocated_map_size(
    ::std::string* map_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (map_size != NULL) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  map_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      map_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigModel.map_size)
}

// required bytes ship_template = 6;
inline bool ConfigModel::has_ship_template() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigModel::set_has_ship_template() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigModel::clear_has_ship_template() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigModel::clear_ship_template() {
  ship_template_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ship_template();
}
inline const ::std::string& ConfigModel::ship_template() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.ship_template)
  return ship_template_.Get();
}
inline void ConfigModel::set_ship_template(const ::std::string& value) {
  set_has_ship_template();
  ship_template_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigModel.ship_template)
}
#if LANG_CXX11
inline void ConfigModel::set_ship_template(::std::string&& value) {
  set_has_ship_template();
  ship_template_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigModel.ship_template)
}
#endif
inline void ConfigModel::set_ship_template(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ship_template();
  ship_template_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigModel.ship_template)
}
inline void ConfigModel::set_ship_template(const void* value,
    size_t size) {
  set_has_ship_template();
  ship_template_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigModel.ship_template)
}
inline ::std::string* ConfigModel::mutable_ship_template() {
  set_has_ship_template();
  // @@protoc_insertion_point(field_mutable:db.ConfigModel.ship_template)
  return ship_template_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigModel::release_ship_template() {
  // @@protoc_insertion_point(field_release:db.ConfigModel.ship_template)
  if (!has_ship_template()) {
    return NULL;
  }
  clear_has_ship_template();
  return ship_template_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigModel::set_allocated_ship_template(::std::string* ship_template) {
  if (ship_template != NULL) {
    set_has_ship_template();
  } else {
    clear_has_ship_template();
  }
  ship_template_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ship_template,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigModel.ship_template)
}
inline ::std::string* ConfigModel::unsafe_arena_release_ship_template() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigModel.ship_template)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ship_template();
  return ship_template_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigModel::unsafe_arena_set_allocated_ship_template(
    ::std::string* ship_template) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ship_template != NULL) {
    set_has_ship_template();
  } else {
    clear_has_ship_template();
  }
  ship_template_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ship_template, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigModel.ship_template)
}

// required bytes null_template = 7;
inline bool ConfigModel::has_null_template() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigModel::set_has_null_template() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigModel::clear_has_null_template() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigModel::clear_null_template() {
  null_template_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_null_template();
}
inline const ::std::string& ConfigModel::null_template() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.null_template)
  return null_template_.Get();
}
inline void ConfigModel::set_null_template(const ::std::string& value) {
  set_has_null_template();
  null_template_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigModel.null_template)
}
#if LANG_CXX11
inline void ConfigModel::set_null_template(::std::string&& value) {
  set_has_null_template();
  null_template_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigModel.null_template)
}
#endif
inline void ConfigModel::set_null_template(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_null_template();
  null_template_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigModel.null_template)
}
inline void ConfigModel::set_null_template(const void* value,
    size_t size) {
  set_has_null_template();
  null_template_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigModel.null_template)
}
inline ::std::string* ConfigModel::mutable_null_template() {
  set_has_null_template();
  // @@protoc_insertion_point(field_mutable:db.ConfigModel.null_template)
  return null_template_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigModel::release_null_template() {
  // @@protoc_insertion_point(field_release:db.ConfigModel.null_template)
  if (!has_null_template()) {
    return NULL;
  }
  clear_has_null_template();
  return null_template_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigModel::set_allocated_null_template(::std::string* null_template) {
  if (null_template != NULL) {
    set_has_null_template();
  } else {
    clear_has_null_template();
  }
  null_template_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), null_template,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigModel.null_template)
}
inline ::std::string* ConfigModel::unsafe_arena_release_null_template() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigModel.null_template)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_null_template();
  return null_template_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigModel::unsafe_arena_set_allocated_null_template(
    ::std::string* null_template) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (null_template != NULL) {
    set_has_null_template();
  } else {
    clear_has_null_template();
  }
  null_template_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      null_template, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigModel.null_template)
}

// required bytes ship_facility = 8;
inline bool ConfigModel::has_ship_facility() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigModel::set_has_ship_facility() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigModel::clear_has_ship_facility() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigModel::clear_ship_facility() {
  ship_facility_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ship_facility();
}
inline const ::std::string& ConfigModel::ship_facility() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.ship_facility)
  return ship_facility_.Get();
}
inline void ConfigModel::set_ship_facility(const ::std::string& value) {
  set_has_ship_facility();
  ship_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigModel.ship_facility)
}
#if LANG_CXX11
inline void ConfigModel::set_ship_facility(::std::string&& value) {
  set_has_ship_facility();
  ship_facility_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigModel.ship_facility)
}
#endif
inline void ConfigModel::set_ship_facility(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ship_facility();
  ship_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigModel.ship_facility)
}
inline void ConfigModel::set_ship_facility(const void* value,
    size_t size) {
  set_has_ship_facility();
  ship_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigModel.ship_facility)
}
inline ::std::string* ConfigModel::mutable_ship_facility() {
  set_has_ship_facility();
  // @@protoc_insertion_point(field_mutable:db.ConfigModel.ship_facility)
  return ship_facility_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigModel::release_ship_facility() {
  // @@protoc_insertion_point(field_release:db.ConfigModel.ship_facility)
  if (!has_ship_facility()) {
    return NULL;
  }
  clear_has_ship_facility();
  return ship_facility_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigModel::set_allocated_ship_facility(::std::string* ship_facility) {
  if (ship_facility != NULL) {
    set_has_ship_facility();
  } else {
    clear_has_ship_facility();
  }
  ship_facility_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ship_facility,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigModel.ship_facility)
}
inline ::std::string* ConfigModel::unsafe_arena_release_ship_facility() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigModel.ship_facility)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ship_facility();
  return ship_facility_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigModel::unsafe_arena_set_allocated_ship_facility(
    ::std::string* ship_facility) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ship_facility != NULL) {
    set_has_ship_facility();
  } else {
    clear_has_ship_facility();
  }
  ship_facility_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ship_facility, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigModel.ship_facility)
}

// required int32 need_level = 9;
inline bool ConfigModel::has_need_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigModel::set_has_need_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigModel::clear_has_need_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigModel::clear_need_level() {
  need_level_ = 0;
  clear_has_need_level();
}
inline ::google::protobuf::int32 ConfigModel::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.need_level)
  return need_level_;
}
inline void ConfigModel::set_need_level(::google::protobuf::int32 value) {
  set_has_need_level();
  need_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigModel.need_level)
}

// required int32 pre_model = 10;
inline bool ConfigModel::has_pre_model() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigModel::set_has_pre_model() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigModel::clear_has_pre_model() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigModel::clear_pre_model() {
  pre_model_ = 0;
  clear_has_pre_model();
}
inline ::google::protobuf::int32 ConfigModel::pre_model() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.pre_model)
  return pre_model_;
}
inline void ConfigModel::set_pre_model(::google::protobuf::int32 value) {
  set_has_pre_model();
  pre_model_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigModel.pre_model)
}

// required bytes unlock_cost = 11;
inline bool ConfigModel::has_unlock_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigModel::set_has_unlock_cost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigModel::clear_has_unlock_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigModel::clear_unlock_cost() {
  unlock_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_cost();
}
inline const ::std::string& ConfigModel::unlock_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.unlock_cost)
  return unlock_cost_.Get();
}
inline void ConfigModel::set_unlock_cost(const ::std::string& value) {
  set_has_unlock_cost();
  unlock_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigModel.unlock_cost)
}
#if LANG_CXX11
inline void ConfigModel::set_unlock_cost(::std::string&& value) {
  set_has_unlock_cost();
  unlock_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigModel.unlock_cost)
}
#endif
inline void ConfigModel::set_unlock_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_cost();
  unlock_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigModel.unlock_cost)
}
inline void ConfigModel::set_unlock_cost(const void* value,
    size_t size) {
  set_has_unlock_cost();
  unlock_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigModel.unlock_cost)
}
inline ::std::string* ConfigModel::mutable_unlock_cost() {
  set_has_unlock_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigModel.unlock_cost)
  return unlock_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigModel::release_unlock_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigModel.unlock_cost)
  if (!has_unlock_cost()) {
    return NULL;
  }
  clear_has_unlock_cost();
  return unlock_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigModel::set_allocated_unlock_cost(::std::string* unlock_cost) {
  if (unlock_cost != NULL) {
    set_has_unlock_cost();
  } else {
    clear_has_unlock_cost();
  }
  unlock_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigModel.unlock_cost)
}
inline ::std::string* ConfigModel::unsafe_arena_release_unlock_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigModel.unlock_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_cost();
  return unlock_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigModel::unsafe_arena_set_allocated_unlock_cost(
    ::std::string* unlock_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_cost != NULL) {
    set_has_unlock_cost();
  } else {
    clear_has_unlock_cost();
  }
  unlock_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigModel.unlock_cost)
}

// required int32 capacity = 12;
inline bool ConfigModel::has_capacity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigModel::set_has_capacity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigModel::clear_has_capacity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigModel::clear_capacity() {
  capacity_ = 0;
  clear_has_capacity();
}
inline ::google::protobuf::int32 ConfigModel::capacity() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.capacity)
  return capacity_;
}
inline void ConfigModel::set_capacity(::google::protobuf::int32 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigModel.capacity)
}

// required bytes unlock_reward = 13;
inline bool ConfigModel::has_unlock_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigModel::set_has_unlock_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigModel::clear_has_unlock_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigModel::clear_unlock_reward() {
  unlock_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_reward();
}
inline const ::std::string& ConfigModel::unlock_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.unlock_reward)
  return unlock_reward_.Get();
}
inline void ConfigModel::set_unlock_reward(const ::std::string& value) {
  set_has_unlock_reward();
  unlock_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigModel.unlock_reward)
}
#if LANG_CXX11
inline void ConfigModel::set_unlock_reward(::std::string&& value) {
  set_has_unlock_reward();
  unlock_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigModel.unlock_reward)
}
#endif
inline void ConfigModel::set_unlock_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_reward();
  unlock_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigModel.unlock_reward)
}
inline void ConfigModel::set_unlock_reward(const void* value,
    size_t size) {
  set_has_unlock_reward();
  unlock_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigModel.unlock_reward)
}
inline ::std::string* ConfigModel::mutable_unlock_reward() {
  set_has_unlock_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigModel.unlock_reward)
  return unlock_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigModel::release_unlock_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigModel.unlock_reward)
  if (!has_unlock_reward()) {
    return NULL;
  }
  clear_has_unlock_reward();
  return unlock_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigModel::set_allocated_unlock_reward(::std::string* unlock_reward) {
  if (unlock_reward != NULL) {
    set_has_unlock_reward();
  } else {
    clear_has_unlock_reward();
  }
  unlock_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigModel.unlock_reward)
}
inline ::std::string* ConfigModel::unsafe_arena_release_unlock_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigModel.unlock_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_reward();
  return unlock_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigModel::unsafe_arena_set_allocated_unlock_reward(
    ::std::string* unlock_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_reward != NULL) {
    set_has_unlock_reward();
  } else {
    clear_has_unlock_reward();
  }
  unlock_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigModel.unlock_reward)
}

// required float machine_param = 14;
inline bool ConfigModel::has_machine_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigModel::set_has_machine_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigModel::clear_has_machine_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigModel::clear_machine_param() {
  machine_param_ = 0;
  clear_has_machine_param();
}
inline float ConfigModel::machine_param() const {
  // @@protoc_insertion_point(field_get:db.ConfigModel.machine_param)
  return machine_param_;
}
inline void ConfigModel::set_machine_param(float value) {
  set_has_machine_param();
  machine_param_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigModel.machine_param)
}

// -------------------------------------------------------------------

// ConfigPlace

// required int32 id = 1;
inline bool ConfigPlace::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigPlace::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigPlace::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigPlace::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigPlace::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.id)
  return id_;
}
inline void ConfigPlace::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlace.id)
}

// required bytes name = 2;
inline bool ConfigPlace::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigPlace::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigPlace::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigPlace::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigPlace::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.name)
  return name_.Get();
}
inline void ConfigPlace::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlace.name)
}
#if LANG_CXX11
inline void ConfigPlace::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlace.name)
}
#endif
inline void ConfigPlace::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlace.name)
}
inline void ConfigPlace::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlace.name)
}
inline ::std::string* ConfigPlace::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlace.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlace::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigPlace.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlace::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlace.name)
}
inline ::std::string* ConfigPlace::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlace.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlace::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlace.name)
}

// required bytes time = 3;
inline bool ConfigPlace::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigPlace::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigPlace::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigPlace::clear_time() {
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_time();
}
inline const ::std::string& ConfigPlace::time() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.time)
  return time_.Get();
}
inline void ConfigPlace::set_time(const ::std::string& value) {
  set_has_time();
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlace.time)
}
#if LANG_CXX11
inline void ConfigPlace::set_time(::std::string&& value) {
  set_has_time();
  time_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlace.time)
}
#endif
inline void ConfigPlace::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlace.time)
}
inline void ConfigPlace::set_time(const void* value,
    size_t size) {
  set_has_time();
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlace.time)
}
inline ::std::string* ConfigPlace::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlace.time)
  return time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlace::release_time() {
  // @@protoc_insertion_point(field_release:db.ConfigPlace.time)
  if (!has_time()) {
    return NULL;
  }
  clear_has_time();
  return time_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlace::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlace.time)
}
inline ::std::string* ConfigPlace::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlace.time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_time();
  return time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlace::unsafe_arena_set_allocated_time(
    ::std::string* time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlace.time)
}

// required int32 location = 4;
inline bool ConfigPlace::has_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigPlace::set_has_location() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigPlace::clear_has_location() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigPlace::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 ConfigPlace::location() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.location)
  return location_;
}
inline void ConfigPlace::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlace.location)
}

// required bytes start_pos = 5;
inline bool ConfigPlace::has_start_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigPlace::set_has_start_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigPlace::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigPlace::clear_start_pos() {
  start_pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_start_pos();
}
inline const ::std::string& ConfigPlace::start_pos() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.start_pos)
  return start_pos_.Get();
}
inline void ConfigPlace::set_start_pos(const ::std::string& value) {
  set_has_start_pos();
  start_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlace.start_pos)
}
#if LANG_CXX11
inline void ConfigPlace::set_start_pos(::std::string&& value) {
  set_has_start_pos();
  start_pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlace.start_pos)
}
#endif
inline void ConfigPlace::set_start_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_pos();
  start_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlace.start_pos)
}
inline void ConfigPlace::set_start_pos(const void* value,
    size_t size) {
  set_has_start_pos();
  start_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlace.start_pos)
}
inline ::std::string* ConfigPlace::mutable_start_pos() {
  set_has_start_pos();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlace.start_pos)
  return start_pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlace::release_start_pos() {
  // @@protoc_insertion_point(field_release:db.ConfigPlace.start_pos)
  if (!has_start_pos()) {
    return NULL;
  }
  clear_has_start_pos();
  return start_pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlace::set_allocated_start_pos(::std::string* start_pos) {
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlace.start_pos)
}
inline ::std::string* ConfigPlace::unsafe_arena_release_start_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlace.start_pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_start_pos();
  return start_pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlace::unsafe_arena_set_allocated_start_pos(
    ::std::string* start_pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (start_pos != NULL) {
    set_has_start_pos();
  } else {
    clear_has_start_pos();
  }
  start_pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      start_pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlace.start_pos)
}

// required int32 width = 6;
inline bool ConfigPlace::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigPlace::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigPlace::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigPlace::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ConfigPlace::width() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.width)
  return width_;
}
inline void ConfigPlace::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlace.width)
}

// required int32 height = 7;
inline bool ConfigPlace::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigPlace::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigPlace::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigPlace::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ConfigPlace::height() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.height)
  return height_;
}
inline void ConfigPlace::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlace.height)
}

// required bytes tiled_map = 8;
inline bool ConfigPlace::has_tiled_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigPlace::set_has_tiled_map() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigPlace::clear_has_tiled_map() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigPlace::clear_tiled_map() {
  tiled_map_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_tiled_map();
}
inline const ::std::string& ConfigPlace::tiled_map() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.tiled_map)
  return tiled_map_.Get();
}
inline void ConfigPlace::set_tiled_map(const ::std::string& value) {
  set_has_tiled_map();
  tiled_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlace.tiled_map)
}
#if LANG_CXX11
inline void ConfigPlace::set_tiled_map(::std::string&& value) {
  set_has_tiled_map();
  tiled_map_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlace.tiled_map)
}
#endif
inline void ConfigPlace::set_tiled_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tiled_map();
  tiled_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlace.tiled_map)
}
inline void ConfigPlace::set_tiled_map(const void* value,
    size_t size) {
  set_has_tiled_map();
  tiled_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlace.tiled_map)
}
inline ::std::string* ConfigPlace::mutable_tiled_map() {
  set_has_tiled_map();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlace.tiled_map)
  return tiled_map_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlace::release_tiled_map() {
  // @@protoc_insertion_point(field_release:db.ConfigPlace.tiled_map)
  if (!has_tiled_map()) {
    return NULL;
  }
  clear_has_tiled_map();
  return tiled_map_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlace::set_allocated_tiled_map(::std::string* tiled_map) {
  if (tiled_map != NULL) {
    set_has_tiled_map();
  } else {
    clear_has_tiled_map();
  }
  tiled_map_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tiled_map,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlace.tiled_map)
}
inline ::std::string* ConfigPlace::unsafe_arena_release_tiled_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlace.tiled_map)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_tiled_map();
  return tiled_map_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlace::unsafe_arena_set_allocated_tiled_map(
    ::std::string* tiled_map) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tiled_map != NULL) {
    set_has_tiled_map();
  } else {
    clear_has_tiled_map();
  }
  tiled_map_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tiled_map, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlace.tiled_map)
}

// required int32 boom = 9;
inline bool ConfigPlace::has_boom() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigPlace::set_has_boom() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigPlace::clear_has_boom() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigPlace::clear_boom() {
  boom_ = 0;
  clear_has_boom();
}
inline ::google::protobuf::int32 ConfigPlace::boom() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlace.boom)
  return boom_;
}
inline void ConfigPlace::set_boom(::google::protobuf::int32 value) {
  set_has_boom();
  boom_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlace.boom)
}

// -------------------------------------------------------------------

// ConfigSceneInfo

// required int32 sceneid = 1;
inline bool ConfigSceneInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ConfigSceneInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ConfigSceneInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ConfigSceneInfo::clear_sceneid() {
  sceneid_ = 0;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 ConfigSceneInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.sceneid)
  return sceneid_;
}
inline void ConfigSceneInfo::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.sceneid)
}

// required bytes scene_name = 2;
inline bool ConfigSceneInfo::has_scene_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigSceneInfo::set_has_scene_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigSceneInfo::clear_has_scene_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigSceneInfo::clear_scene_name() {
  scene_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_scene_name();
}
inline const ::std::string& ConfigSceneInfo::scene_name() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.scene_name)
  return scene_name_.Get();
}
inline void ConfigSceneInfo::set_scene_name(const ::std::string& value) {
  set_has_scene_name();
  scene_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.scene_name)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_scene_name(::std::string&& value) {
  set_has_scene_name();
  scene_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.scene_name)
}
#endif
inline void ConfigSceneInfo::set_scene_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scene_name();
  scene_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.scene_name)
}
inline void ConfigSceneInfo::set_scene_name(const void* value,
    size_t size) {
  set_has_scene_name();
  scene_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.scene_name)
}
inline ::std::string* ConfigSceneInfo::mutable_scene_name() {
  set_has_scene_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.scene_name)
  return scene_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_scene_name() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.scene_name)
  if (!has_scene_name()) {
    return NULL;
  }
  clear_has_scene_name();
  return scene_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_scene_name(::std::string* scene_name) {
  if (scene_name != NULL) {
    set_has_scene_name();
  } else {
    clear_has_scene_name();
  }
  scene_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.scene_name)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_scene_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.scene_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_scene_name();
  return scene_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_scene_name(
    ::std::string* scene_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (scene_name != NULL) {
    set_has_scene_name();
  } else {
    clear_has_scene_name();
  }
  scene_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      scene_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.scene_name)
}

// required int32 type = 3;
inline bool ConfigSceneInfo::has_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ConfigSceneInfo::set_has_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ConfigSceneInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ConfigSceneInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigSceneInfo::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.type)
  return type_;
}
inline void ConfigSceneInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.type)
}

// required int32 belong_to = 4;
inline bool ConfigSceneInfo::has_belong_to() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ConfigSceneInfo::set_has_belong_to() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ConfigSceneInfo::clear_has_belong_to() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ConfigSceneInfo::clear_belong_to() {
  belong_to_ = 0;
  clear_has_belong_to();
}
inline ::google::protobuf::int32 ConfigSceneInfo::belong_to() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.belong_to)
  return belong_to_;
}
inline void ConfigSceneInfo::set_belong_to(::google::protobuf::int32 value) {
  set_has_belong_to();
  belong_to_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.belong_to)
}

// required int32 checkpoint_num = 5;
inline bool ConfigSceneInfo::has_checkpoint_num() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ConfigSceneInfo::set_has_checkpoint_num() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ConfigSceneInfo::clear_has_checkpoint_num() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ConfigSceneInfo::clear_checkpoint_num() {
  checkpoint_num_ = 0;
  clear_has_checkpoint_num();
}
inline ::google::protobuf::int32 ConfigSceneInfo::checkpoint_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.checkpoint_num)
  return checkpoint_num_;
}
inline void ConfigSceneInfo::set_checkpoint_num(::google::protobuf::int32 value) {
  set_has_checkpoint_num();
  checkpoint_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.checkpoint_num)
}

// required bytes pos = 6;
inline bool ConfigSceneInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigSceneInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigSceneInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigSceneInfo::clear_pos() {
  pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pos();
}
inline const ::std::string& ConfigSceneInfo::pos() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.pos)
  return pos_.Get();
}
inline void ConfigSceneInfo::set_pos(const ::std::string& value) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.pos)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_pos(::std::string&& value) {
  set_has_pos();
  pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.pos)
}
#endif
inline void ConfigSceneInfo::set_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.pos)
}
inline void ConfigSceneInfo::set_pos(const void* value,
    size_t size) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.pos)
}
inline ::std::string* ConfigSceneInfo::mutable_pos() {
  set_has_pos();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.pos)
  return pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_pos() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.pos)
  if (!has_pos()) {
    return NULL;
  }
  clear_has_pos();
  return pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_pos(::std::string* pos) {
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.pos)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pos();
  return pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_pos(
    ::std::string* pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.pos)
}

// required bytes drop_item = 7;
inline bool ConfigSceneInfo::has_drop_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigSceneInfo::set_has_drop_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigSceneInfo::clear_has_drop_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigSceneInfo::clear_drop_item() {
  drop_item_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop_item();
}
inline const ::std::string& ConfigSceneInfo::drop_item() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.drop_item)
  return drop_item_.Get();
}
inline void ConfigSceneInfo::set_drop_item(const ::std::string& value) {
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.drop_item)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_drop_item(::std::string&& value) {
  set_has_drop_item();
  drop_item_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.drop_item)
}
#endif
inline void ConfigSceneInfo::set_drop_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.drop_item)
}
inline void ConfigSceneInfo::set_drop_item(const void* value,
    size_t size) {
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.drop_item)
}
inline ::std::string* ConfigSceneInfo::mutable_drop_item() {
  set_has_drop_item();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.drop_item)
  return drop_item_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_drop_item() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.drop_item)
  if (!has_drop_item()) {
    return NULL;
  }
  clear_has_drop_item();
  return drop_item_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_drop_item(::std::string* drop_item) {
  if (drop_item != NULL) {
    set_has_drop_item();
  } else {
    clear_has_drop_item();
  }
  drop_item_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_item,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.drop_item)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_drop_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.drop_item)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop_item();
  return drop_item_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_drop_item(
    ::std::string* drop_item) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop_item != NULL) {
    set_has_drop_item();
  } else {
    clear_has_drop_item();
  }
  drop_item_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop_item, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.drop_item)
}

// required bytes formula_unlock = 8;
inline bool ConfigSceneInfo::has_formula_unlock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigSceneInfo::set_has_formula_unlock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigSceneInfo::clear_has_formula_unlock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigSceneInfo::clear_formula_unlock() {
  formula_unlock_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_formula_unlock();
}
inline const ::std::string& ConfigSceneInfo::formula_unlock() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.formula_unlock)
  return formula_unlock_.Get();
}
inline void ConfigSceneInfo::set_formula_unlock(const ::std::string& value) {
  set_has_formula_unlock();
  formula_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.formula_unlock)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_formula_unlock(::std::string&& value) {
  set_has_formula_unlock();
  formula_unlock_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.formula_unlock)
}
#endif
inline void ConfigSceneInfo::set_formula_unlock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_formula_unlock();
  formula_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.formula_unlock)
}
inline void ConfigSceneInfo::set_formula_unlock(const void* value,
    size_t size) {
  set_has_formula_unlock();
  formula_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.formula_unlock)
}
inline ::std::string* ConfigSceneInfo::mutable_formula_unlock() {
  set_has_formula_unlock();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.formula_unlock)
  return formula_unlock_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_formula_unlock() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.formula_unlock)
  if (!has_formula_unlock()) {
    return NULL;
  }
  clear_has_formula_unlock();
  return formula_unlock_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_formula_unlock(::std::string* formula_unlock) {
  if (formula_unlock != NULL) {
    set_has_formula_unlock();
  } else {
    clear_has_formula_unlock();
  }
  formula_unlock_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), formula_unlock,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.formula_unlock)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_formula_unlock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.formula_unlock)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_formula_unlock();
  return formula_unlock_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_formula_unlock(
    ::std::string* formula_unlock) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (formula_unlock != NULL) {
    set_has_formula_unlock();
  } else {
    clear_has_formula_unlock();
  }
  formula_unlock_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      formula_unlock, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.formula_unlock)
}

// required int32 add_exp = 9;
inline bool ConfigSceneInfo::has_add_exp() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ConfigSceneInfo::set_has_add_exp() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ConfigSceneInfo::clear_has_add_exp() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ConfigSceneInfo::clear_add_exp() {
  add_exp_ = 0;
  clear_has_add_exp();
}
inline ::google::protobuf::int32 ConfigSceneInfo::add_exp() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.add_exp)
  return add_exp_;
}
inline void ConfigSceneInfo::set_add_exp(::google::protobuf::int32 value) {
  set_has_add_exp();
  add_exp_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.add_exp)
}

// required bytes end_condition = 10;
inline bool ConfigSceneInfo::has_end_condition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigSceneInfo::set_has_end_condition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigSceneInfo::clear_has_end_condition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigSceneInfo::clear_end_condition() {
  end_condition_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_end_condition();
}
inline const ::std::string& ConfigSceneInfo::end_condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.end_condition)
  return end_condition_.Get();
}
inline void ConfigSceneInfo::set_end_condition(const ::std::string& value) {
  set_has_end_condition();
  end_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.end_condition)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_end_condition(::std::string&& value) {
  set_has_end_condition();
  end_condition_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.end_condition)
}
#endif
inline void ConfigSceneInfo::set_end_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_end_condition();
  end_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.end_condition)
}
inline void ConfigSceneInfo::set_end_condition(const void* value,
    size_t size) {
  set_has_end_condition();
  end_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.end_condition)
}
inline ::std::string* ConfigSceneInfo::mutable_end_condition() {
  set_has_end_condition();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.end_condition)
  return end_condition_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_end_condition() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.end_condition)
  if (!has_end_condition()) {
    return NULL;
  }
  clear_has_end_condition();
  return end_condition_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_end_condition(::std::string* end_condition) {
  if (end_condition != NULL) {
    set_has_end_condition();
  } else {
    clear_has_end_condition();
  }
  end_condition_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_condition,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.end_condition)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_end_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.end_condition)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_end_condition();
  return end_condition_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_end_condition(
    ::std::string* end_condition) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (end_condition != NULL) {
    set_has_end_condition();
  } else {
    clear_has_end_condition();
  }
  end_condition_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      end_condition, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.end_condition)
}

// required int32 consume_num = 11;
inline bool ConfigSceneInfo::has_consume_num() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ConfigSceneInfo::set_has_consume_num() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ConfigSceneInfo::clear_has_consume_num() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ConfigSceneInfo::clear_consume_num() {
  consume_num_ = 0;
  clear_has_consume_num();
}
inline ::google::protobuf::int32 ConfigSceneInfo::consume_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.consume_num)
  return consume_num_;
}
inline void ConfigSceneInfo::set_consume_num(::google::protobuf::int32 value) {
  set_has_consume_num();
  consume_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.consume_num)
}

// required bytes star_condition = 12;
inline bool ConfigSceneInfo::has_star_condition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigSceneInfo::set_has_star_condition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigSceneInfo::clear_has_star_condition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigSceneInfo::clear_star_condition() {
  star_condition_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_star_condition();
}
inline const ::std::string& ConfigSceneInfo::star_condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.star_condition)
  return star_condition_.Get();
}
inline void ConfigSceneInfo::set_star_condition(const ::std::string& value) {
  set_has_star_condition();
  star_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.star_condition)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_star_condition(::std::string&& value) {
  set_has_star_condition();
  star_condition_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.star_condition)
}
#endif
inline void ConfigSceneInfo::set_star_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_star_condition();
  star_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.star_condition)
}
inline void ConfigSceneInfo::set_star_condition(const void* value,
    size_t size) {
  set_has_star_condition();
  star_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.star_condition)
}
inline ::std::string* ConfigSceneInfo::mutable_star_condition() {
  set_has_star_condition();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.star_condition)
  return star_condition_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_star_condition() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.star_condition)
  if (!has_star_condition()) {
    return NULL;
  }
  clear_has_star_condition();
  return star_condition_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_star_condition(::std::string* star_condition) {
  if (star_condition != NULL) {
    set_has_star_condition();
  } else {
    clear_has_star_condition();
  }
  star_condition_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), star_condition,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.star_condition)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_star_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.star_condition)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_star_condition();
  return star_condition_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_star_condition(
    ::std::string* star_condition) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (star_condition != NULL) {
    set_has_star_condition();
  } else {
    clear_has_star_condition();
  }
  star_condition_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      star_condition, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.star_condition)
}

// required bytes fight_map = 13;
inline bool ConfigSceneInfo::has_fight_map() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigSceneInfo::set_has_fight_map() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigSceneInfo::clear_has_fight_map() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigSceneInfo::clear_fight_map() {
  fight_map_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_fight_map();
}
inline const ::std::string& ConfigSceneInfo::fight_map() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.fight_map)
  return fight_map_.Get();
}
inline void ConfigSceneInfo::set_fight_map(const ::std::string& value) {
  set_has_fight_map();
  fight_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.fight_map)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_fight_map(::std::string&& value) {
  set_has_fight_map();
  fight_map_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.fight_map)
}
#endif
inline void ConfigSceneInfo::set_fight_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fight_map();
  fight_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.fight_map)
}
inline void ConfigSceneInfo::set_fight_map(const void* value,
    size_t size) {
  set_has_fight_map();
  fight_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.fight_map)
}
inline ::std::string* ConfigSceneInfo::mutable_fight_map() {
  set_has_fight_map();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.fight_map)
  return fight_map_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_fight_map() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.fight_map)
  if (!has_fight_map()) {
    return NULL;
  }
  clear_has_fight_map();
  return fight_map_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_fight_map(::std::string* fight_map) {
  if (fight_map != NULL) {
    set_has_fight_map();
  } else {
    clear_has_fight_map();
  }
  fight_map_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fight_map,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.fight_map)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_fight_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.fight_map)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_fight_map();
  return fight_map_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_fight_map(
    ::std::string* fight_map) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fight_map != NULL) {
    set_has_fight_map();
  } else {
    clear_has_fight_map();
  }
  fight_map_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fight_map, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.fight_map)
}

// required int32 max_layer = 14;
inline bool ConfigSceneInfo::has_max_layer() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ConfigSceneInfo::set_has_max_layer() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ConfigSceneInfo::clear_has_max_layer() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ConfigSceneInfo::clear_max_layer() {
  max_layer_ = 0;
  clear_has_max_layer();
}
inline ::google::protobuf::int32 ConfigSceneInfo::max_layer() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.max_layer)
  return max_layer_;
}
inline void ConfigSceneInfo::set_max_layer(::google::protobuf::int32 value) {
  set_has_max_layer();
  max_layer_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.max_layer)
}

// required bytes content = 16;
inline bool ConfigSceneInfo::has_content() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigSceneInfo::set_has_content() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigSceneInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigSceneInfo::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& ConfigSceneInfo::content() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.content)
  return content_.Get();
}
inline void ConfigSceneInfo::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.content)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.content)
}
#endif
inline void ConfigSceneInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.content)
}
inline void ConfigSceneInfo::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.content)
}
inline ::std::string* ConfigSceneInfo::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_content() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.content)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.content)
}

// required bytes port_unlock = 17;
inline bool ConfigSceneInfo::has_port_unlock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigSceneInfo::set_has_port_unlock() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigSceneInfo::clear_has_port_unlock() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigSceneInfo::clear_port_unlock() {
  port_unlock_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_port_unlock();
}
inline const ::std::string& ConfigSceneInfo::port_unlock() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.port_unlock)
  return port_unlock_.Get();
}
inline void ConfigSceneInfo::set_port_unlock(const ::std::string& value) {
  set_has_port_unlock();
  port_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.port_unlock)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_port_unlock(::std::string&& value) {
  set_has_port_unlock();
  port_unlock_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.port_unlock)
}
#endif
inline void ConfigSceneInfo::set_port_unlock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_port_unlock();
  port_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.port_unlock)
}
inline void ConfigSceneInfo::set_port_unlock(const void* value,
    size_t size) {
  set_has_port_unlock();
  port_unlock_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.port_unlock)
}
inline ::std::string* ConfigSceneInfo::mutable_port_unlock() {
  set_has_port_unlock();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.port_unlock)
  return port_unlock_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_port_unlock() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.port_unlock)
  if (!has_port_unlock()) {
    return NULL;
  }
  clear_has_port_unlock();
  return port_unlock_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_port_unlock(::std::string* port_unlock) {
  if (port_unlock != NULL) {
    set_has_port_unlock();
  } else {
    clear_has_port_unlock();
  }
  port_unlock_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_unlock,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.port_unlock)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_port_unlock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.port_unlock)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_port_unlock();
  return port_unlock_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_port_unlock(
    ::std::string* port_unlock) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (port_unlock != NULL) {
    set_has_port_unlock();
  } else {
    clear_has_port_unlock();
  }
  port_unlock_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      port_unlock, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.port_unlock)
}

// required bytes pre_task = 18;
inline bool ConfigSceneInfo::has_pre_task() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigSceneInfo::set_has_pre_task() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigSceneInfo::clear_has_pre_task() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigSceneInfo::clear_pre_task() {
  pre_task_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pre_task();
}
inline const ::std::string& ConfigSceneInfo::pre_task() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.pre_task)
  return pre_task_.Get();
}
inline void ConfigSceneInfo::set_pre_task(const ::std::string& value) {
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.pre_task)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_pre_task(::std::string&& value) {
  set_has_pre_task();
  pre_task_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.pre_task)
}
#endif
inline void ConfigSceneInfo::set_pre_task(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.pre_task)
}
inline void ConfigSceneInfo::set_pre_task(const void* value,
    size_t size) {
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.pre_task)
}
inline ::std::string* ConfigSceneInfo::mutable_pre_task() {
  set_has_pre_task();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.pre_task)
  return pre_task_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_pre_task() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.pre_task)
  if (!has_pre_task()) {
    return NULL;
  }
  clear_has_pre_task();
  return pre_task_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_pre_task(::std::string* pre_task) {
  if (pre_task != NULL) {
    set_has_pre_task();
  } else {
    clear_has_pre_task();
  }
  pre_task_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pre_task,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.pre_task)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_pre_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.pre_task)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pre_task();
  return pre_task_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_pre_task(
    ::std::string* pre_task) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pre_task != NULL) {
    set_has_pre_task();
  } else {
    clear_has_pre_task();
  }
  pre_task_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pre_task, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.pre_task)
}

// required bytes secret_room = 19;
inline bool ConfigSceneInfo::has_secret_room() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigSceneInfo::set_has_secret_room() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigSceneInfo::clear_has_secret_room() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigSceneInfo::clear_secret_room() {
  secret_room_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_secret_room();
}
inline const ::std::string& ConfigSceneInfo::secret_room() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.secret_room)
  return secret_room_.Get();
}
inline void ConfigSceneInfo::set_secret_room(const ::std::string& value) {
  set_has_secret_room();
  secret_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.secret_room)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_secret_room(::std::string&& value) {
  set_has_secret_room();
  secret_room_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.secret_room)
}
#endif
inline void ConfigSceneInfo::set_secret_room(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secret_room();
  secret_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.secret_room)
}
inline void ConfigSceneInfo::set_secret_room(const void* value,
    size_t size) {
  set_has_secret_room();
  secret_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.secret_room)
}
inline ::std::string* ConfigSceneInfo::mutable_secret_room() {
  set_has_secret_room();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.secret_room)
  return secret_room_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_secret_room() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.secret_room)
  if (!has_secret_room()) {
    return NULL;
  }
  clear_has_secret_room();
  return secret_room_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_secret_room(::std::string* secret_room) {
  if (secret_room != NULL) {
    set_has_secret_room();
  } else {
    clear_has_secret_room();
  }
  secret_room_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_room,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.secret_room)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_secret_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.secret_room)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_secret_room();
  return secret_room_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_secret_room(
    ::std::string* secret_room) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (secret_room != NULL) {
    set_has_secret_room();
  } else {
    clear_has_secret_room();
  }
  secret_room_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      secret_room, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.secret_room)
}

// required bytes start_res = 20;
inline bool ConfigSceneInfo::has_start_res() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigSceneInfo::set_has_start_res() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigSceneInfo::clear_has_start_res() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigSceneInfo::clear_start_res() {
  start_res_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_start_res();
}
inline const ::std::string& ConfigSceneInfo::start_res() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.start_res)
  return start_res_.Get();
}
inline void ConfigSceneInfo::set_start_res(const ::std::string& value) {
  set_has_start_res();
  start_res_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.start_res)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_start_res(::std::string&& value) {
  set_has_start_res();
  start_res_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.start_res)
}
#endif
inline void ConfigSceneInfo::set_start_res(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_res();
  start_res_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.start_res)
}
inline void ConfigSceneInfo::set_start_res(const void* value,
    size_t size) {
  set_has_start_res();
  start_res_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.start_res)
}
inline ::std::string* ConfigSceneInfo::mutable_start_res() {
  set_has_start_res();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.start_res)
  return start_res_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_start_res() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.start_res)
  if (!has_start_res()) {
    return NULL;
  }
  clear_has_start_res();
  return start_res_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_start_res(::std::string* start_res) {
  if (start_res != NULL) {
    set_has_start_res();
  } else {
    clear_has_start_res();
  }
  start_res_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_res,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.start_res)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_start_res() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.start_res)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_start_res();
  return start_res_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_start_res(
    ::std::string* start_res) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (start_res != NULL) {
    set_has_start_res();
  } else {
    clear_has_start_res();
  }
  start_res_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      start_res, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.start_res)
}

// required bytes fight_machine = 21;
inline bool ConfigSceneInfo::has_fight_machine() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigSceneInfo::set_has_fight_machine() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigSceneInfo::clear_has_fight_machine() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigSceneInfo::clear_fight_machine() {
  fight_machine_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_fight_machine();
}
inline const ::std::string& ConfigSceneInfo::fight_machine() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.fight_machine)
  return fight_machine_.Get();
}
inline void ConfigSceneInfo::set_fight_machine(const ::std::string& value) {
  set_has_fight_machine();
  fight_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.fight_machine)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_fight_machine(::std::string&& value) {
  set_has_fight_machine();
  fight_machine_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.fight_machine)
}
#endif
inline void ConfigSceneInfo::set_fight_machine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fight_machine();
  fight_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.fight_machine)
}
inline void ConfigSceneInfo::set_fight_machine(const void* value,
    size_t size) {
  set_has_fight_machine();
  fight_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.fight_machine)
}
inline ::std::string* ConfigSceneInfo::mutable_fight_machine() {
  set_has_fight_machine();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.fight_machine)
  return fight_machine_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_fight_machine() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.fight_machine)
  if (!has_fight_machine()) {
    return NULL;
  }
  clear_has_fight_machine();
  return fight_machine_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_fight_machine(::std::string* fight_machine) {
  if (fight_machine != NULL) {
    set_has_fight_machine();
  } else {
    clear_has_fight_machine();
  }
  fight_machine_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fight_machine,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.fight_machine)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_fight_machine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.fight_machine)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_fight_machine();
  return fight_machine_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_fight_machine(
    ::std::string* fight_machine) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fight_machine != NULL) {
    set_has_fight_machine();
  } else {
    clear_has_fight_machine();
  }
  fight_machine_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fight_machine, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.fight_machine)
}

// required bytes enter_condition = 22;
inline bool ConfigSceneInfo::has_enter_condition() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigSceneInfo::set_has_enter_condition() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigSceneInfo::clear_has_enter_condition() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigSceneInfo::clear_enter_condition() {
  enter_condition_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_enter_condition();
}
inline const ::std::string& ConfigSceneInfo::enter_condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.enter_condition)
  return enter_condition_.Get();
}
inline void ConfigSceneInfo::set_enter_condition(const ::std::string& value) {
  set_has_enter_condition();
  enter_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.enter_condition)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_enter_condition(::std::string&& value) {
  set_has_enter_condition();
  enter_condition_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.enter_condition)
}
#endif
inline void ConfigSceneInfo::set_enter_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enter_condition();
  enter_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.enter_condition)
}
inline void ConfigSceneInfo::set_enter_condition(const void* value,
    size_t size) {
  set_has_enter_condition();
  enter_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.enter_condition)
}
inline ::std::string* ConfigSceneInfo::mutable_enter_condition() {
  set_has_enter_condition();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.enter_condition)
  return enter_condition_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_enter_condition() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.enter_condition)
  if (!has_enter_condition()) {
    return NULL;
  }
  clear_has_enter_condition();
  return enter_condition_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_enter_condition(::std::string* enter_condition) {
  if (enter_condition != NULL) {
    set_has_enter_condition();
  } else {
    clear_has_enter_condition();
  }
  enter_condition_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enter_condition,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.enter_condition)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_enter_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.enter_condition)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_enter_condition();
  return enter_condition_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_enter_condition(
    ::std::string* enter_condition) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (enter_condition != NULL) {
    set_has_enter_condition();
  } else {
    clear_has_enter_condition();
  }
  enter_condition_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      enter_condition, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.enter_condition)
}

// required bytes dungeon_event = 23;
inline bool ConfigSceneInfo::has_dungeon_event() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigSceneInfo::set_has_dungeon_event() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigSceneInfo::clear_has_dungeon_event() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigSceneInfo::clear_dungeon_event() {
  dungeon_event_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_dungeon_event();
}
inline const ::std::string& ConfigSceneInfo::dungeon_event() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.dungeon_event)
  return dungeon_event_.Get();
}
inline void ConfigSceneInfo::set_dungeon_event(const ::std::string& value) {
  set_has_dungeon_event();
  dungeon_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.dungeon_event)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_dungeon_event(::std::string&& value) {
  set_has_dungeon_event();
  dungeon_event_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.dungeon_event)
}
#endif
inline void ConfigSceneInfo::set_dungeon_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dungeon_event();
  dungeon_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.dungeon_event)
}
inline void ConfigSceneInfo::set_dungeon_event(const void* value,
    size_t size) {
  set_has_dungeon_event();
  dungeon_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.dungeon_event)
}
inline ::std::string* ConfigSceneInfo::mutable_dungeon_event() {
  set_has_dungeon_event();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.dungeon_event)
  return dungeon_event_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_dungeon_event() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.dungeon_event)
  if (!has_dungeon_event()) {
    return NULL;
  }
  clear_has_dungeon_event();
  return dungeon_event_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_dungeon_event(::std::string* dungeon_event) {
  if (dungeon_event != NULL) {
    set_has_dungeon_event();
  } else {
    clear_has_dungeon_event();
  }
  dungeon_event_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dungeon_event,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.dungeon_event)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_dungeon_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.dungeon_event)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_dungeon_event();
  return dungeon_event_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_dungeon_event(
    ::std::string* dungeon_event) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dungeon_event != NULL) {
    set_has_dungeon_event();
  } else {
    clear_has_dungeon_event();
  }
  dungeon_event_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dungeon_event, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.dungeon_event)
}

// required bytes final_reward = 24;
inline bool ConfigSceneInfo::has_final_reward() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigSceneInfo::set_has_final_reward() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigSceneInfo::clear_has_final_reward() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigSceneInfo::clear_final_reward() {
  final_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_final_reward();
}
inline const ::std::string& ConfigSceneInfo::final_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.final_reward)
  return final_reward_.Get();
}
inline void ConfigSceneInfo::set_final_reward(const ::std::string& value) {
  set_has_final_reward();
  final_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.final_reward)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_final_reward(::std::string&& value) {
  set_has_final_reward();
  final_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.final_reward)
}
#endif
inline void ConfigSceneInfo::set_final_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_final_reward();
  final_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.final_reward)
}
inline void ConfigSceneInfo::set_final_reward(const void* value,
    size_t size) {
  set_has_final_reward();
  final_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.final_reward)
}
inline ::std::string* ConfigSceneInfo::mutable_final_reward() {
  set_has_final_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.final_reward)
  return final_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_final_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.final_reward)
  if (!has_final_reward()) {
    return NULL;
  }
  clear_has_final_reward();
  return final_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_final_reward(::std::string* final_reward) {
  if (final_reward != NULL) {
    set_has_final_reward();
  } else {
    clear_has_final_reward();
  }
  final_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.final_reward)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_final_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.final_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_final_reward();
  return final_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_final_reward(
    ::std::string* final_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (final_reward != NULL) {
    set_has_final_reward();
  } else {
    clear_has_final_reward();
  }
  final_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      final_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.final_reward)
}

// required int32 need_point = 25;
inline bool ConfigSceneInfo::has_need_point() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ConfigSceneInfo::set_has_need_point() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ConfigSceneInfo::clear_has_need_point() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ConfigSceneInfo::clear_need_point() {
  need_point_ = 0;
  clear_has_need_point();
}
inline ::google::protobuf::int32 ConfigSceneInfo::need_point() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.need_point)
  return need_point_;
}
inline void ConfigSceneInfo::set_need_point(::google::protobuf::int32 value) {
  set_has_need_point();
  need_point_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.need_point)
}

// required bytes first_reward = 26;
inline bool ConfigSceneInfo::has_first_reward() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigSceneInfo::set_has_first_reward() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigSceneInfo::clear_has_first_reward() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigSceneInfo::clear_first_reward() {
  first_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_first_reward();
}
inline const ::std::string& ConfigSceneInfo::first_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.first_reward)
  return first_reward_.Get();
}
inline void ConfigSceneInfo::set_first_reward(const ::std::string& value) {
  set_has_first_reward();
  first_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.first_reward)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_first_reward(::std::string&& value) {
  set_has_first_reward();
  first_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.first_reward)
}
#endif
inline void ConfigSceneInfo::set_first_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first_reward();
  first_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.first_reward)
}
inline void ConfigSceneInfo::set_first_reward(const void* value,
    size_t size) {
  set_has_first_reward();
  first_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.first_reward)
}
inline ::std::string* ConfigSceneInfo::mutable_first_reward() {
  set_has_first_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.first_reward)
  return first_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_first_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.first_reward)
  if (!has_first_reward()) {
    return NULL;
  }
  clear_has_first_reward();
  return first_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_first_reward(::std::string* first_reward) {
  if (first_reward != NULL) {
    set_has_first_reward();
  } else {
    clear_has_first_reward();
  }
  first_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.first_reward)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_first_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.first_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_first_reward();
  return first_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_first_reward(
    ::std::string* first_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (first_reward != NULL) {
    set_has_first_reward();
  } else {
    clear_has_first_reward();
  }
  first_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      first_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.first_reward)
}

// required bytes clear_reward = 27;
inline bool ConfigSceneInfo::has_clear_reward() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigSceneInfo::set_has_clear_reward() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigSceneInfo::clear_has_clear_reward() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigSceneInfo::clear_clear_reward() {
  clear_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_clear_reward();
}
inline const ::std::string& ConfigSceneInfo::clear_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.clear_reward)
  return clear_reward_.Get();
}
inline void ConfigSceneInfo::set_clear_reward(const ::std::string& value) {
  set_has_clear_reward();
  clear_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.clear_reward)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_clear_reward(::std::string&& value) {
  set_has_clear_reward();
  clear_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.clear_reward)
}
#endif
inline void ConfigSceneInfo::set_clear_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clear_reward();
  clear_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.clear_reward)
}
inline void ConfigSceneInfo::set_clear_reward(const void* value,
    size_t size) {
  set_has_clear_reward();
  clear_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.clear_reward)
}
inline ::std::string* ConfigSceneInfo::mutable_clear_reward() {
  set_has_clear_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.clear_reward)
  return clear_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_clear_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.clear_reward)
  if (!has_clear_reward()) {
    return NULL;
  }
  clear_has_clear_reward();
  return clear_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_clear_reward(::std::string* clear_reward) {
  if (clear_reward != NULL) {
    set_has_clear_reward();
  } else {
    clear_has_clear_reward();
  }
  clear_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clear_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.clear_reward)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_clear_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.clear_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_clear_reward();
  return clear_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_clear_reward(
    ::std::string* clear_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (clear_reward != NULL) {
    set_has_clear_reward();
  } else {
    clear_has_clear_reward();
  }
  clear_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      clear_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.clear_reward)
}

// required bytes boss_info = 28;
inline bool ConfigSceneInfo::has_boss_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfigSceneInfo::set_has_boss_info() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfigSceneInfo::clear_has_boss_info() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfigSceneInfo::clear_boss_info() {
  boss_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_boss_info();
}
inline const ::std::string& ConfigSceneInfo::boss_info() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.boss_info)
  return boss_info_.Get();
}
inline void ConfigSceneInfo::set_boss_info(const ::std::string& value) {
  set_has_boss_info();
  boss_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.boss_info)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_boss_info(::std::string&& value) {
  set_has_boss_info();
  boss_info_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.boss_info)
}
#endif
inline void ConfigSceneInfo::set_boss_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_boss_info();
  boss_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.boss_info)
}
inline void ConfigSceneInfo::set_boss_info(const void* value,
    size_t size) {
  set_has_boss_info();
  boss_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.boss_info)
}
inline ::std::string* ConfigSceneInfo::mutable_boss_info() {
  set_has_boss_info();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.boss_info)
  return boss_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_boss_info() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.boss_info)
  if (!has_boss_info()) {
    return NULL;
  }
  clear_has_boss_info();
  return boss_info_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_boss_info(::std::string* boss_info) {
  if (boss_info != NULL) {
    set_has_boss_info();
  } else {
    clear_has_boss_info();
  }
  boss_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boss_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.boss_info)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_boss_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.boss_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_boss_info();
  return boss_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_boss_info(
    ::std::string* boss_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (boss_info != NULL) {
    set_has_boss_info();
  } else {
    clear_has_boss_info();
  }
  boss_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      boss_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.boss_info)
}

// required bytes layer_reward = 29;
inline bool ConfigSceneInfo::has_layer_reward() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConfigSceneInfo::set_has_layer_reward() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConfigSceneInfo::clear_has_layer_reward() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConfigSceneInfo::clear_layer_reward() {
  layer_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_layer_reward();
}
inline const ::std::string& ConfigSceneInfo::layer_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.layer_reward)
  return layer_reward_.Get();
}
inline void ConfigSceneInfo::set_layer_reward(const ::std::string& value) {
  set_has_layer_reward();
  layer_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.layer_reward)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_layer_reward(::std::string&& value) {
  set_has_layer_reward();
  layer_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.layer_reward)
}
#endif
inline void ConfigSceneInfo::set_layer_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer_reward();
  layer_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.layer_reward)
}
inline void ConfigSceneInfo::set_layer_reward(const void* value,
    size_t size) {
  set_has_layer_reward();
  layer_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.layer_reward)
}
inline ::std::string* ConfigSceneInfo::mutable_layer_reward() {
  set_has_layer_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.layer_reward)
  return layer_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_layer_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.layer_reward)
  if (!has_layer_reward()) {
    return NULL;
  }
  clear_has_layer_reward();
  return layer_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_layer_reward(::std::string* layer_reward) {
  if (layer_reward != NULL) {
    set_has_layer_reward();
  } else {
    clear_has_layer_reward();
  }
  layer_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.layer_reward)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_layer_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.layer_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_layer_reward();
  return layer_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_layer_reward(
    ::std::string* layer_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (layer_reward != NULL) {
    set_has_layer_reward();
  } else {
    clear_has_layer_reward();
  }
  layer_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      layer_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.layer_reward)
}

// required int32 can_repeat = 30;
inline bool ConfigSceneInfo::has_can_repeat() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ConfigSceneInfo::set_has_can_repeat() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ConfigSceneInfo::clear_has_can_repeat() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ConfigSceneInfo::clear_can_repeat() {
  can_repeat_ = 0;
  clear_has_can_repeat();
}
inline ::google::protobuf::int32 ConfigSceneInfo::can_repeat() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.can_repeat)
  return can_repeat_;
}
inline void ConfigSceneInfo::set_can_repeat(::google::protobuf::int32 value) {
  set_has_can_repeat();
  can_repeat_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.can_repeat)
}

// required int32 daily_times_limit = 31;
inline bool ConfigSceneInfo::has_daily_times_limit() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ConfigSceneInfo::set_has_daily_times_limit() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ConfigSceneInfo::clear_has_daily_times_limit() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ConfigSceneInfo::clear_daily_times_limit() {
  daily_times_limit_ = 0;
  clear_has_daily_times_limit();
}
inline ::google::protobuf::int32 ConfigSceneInfo::daily_times_limit() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.daily_times_limit)
  return daily_times_limit_;
}
inline void ConfigSceneInfo::set_daily_times_limit(::google::protobuf::int32 value) {
  set_has_daily_times_limit();
  daily_times_limit_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.daily_times_limit)
}

// required bytes saved_customer = 32;
inline bool ConfigSceneInfo::has_saved_customer() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ConfigSceneInfo::set_has_saved_customer() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ConfigSceneInfo::clear_has_saved_customer() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ConfigSceneInfo::clear_saved_customer() {
  saved_customer_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_saved_customer();
}
inline const ::std::string& ConfigSceneInfo::saved_customer() const {
  // @@protoc_insertion_point(field_get:db.ConfigSceneInfo.saved_customer)
  return saved_customer_.Get();
}
inline void ConfigSceneInfo::set_saved_customer(const ::std::string& value) {
  set_has_saved_customer();
  saved_customer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSceneInfo.saved_customer)
}
#if LANG_CXX11
inline void ConfigSceneInfo::set_saved_customer(::std::string&& value) {
  set_has_saved_customer();
  saved_customer_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSceneInfo.saved_customer)
}
#endif
inline void ConfigSceneInfo::set_saved_customer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_saved_customer();
  saved_customer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSceneInfo.saved_customer)
}
inline void ConfigSceneInfo::set_saved_customer(const void* value,
    size_t size) {
  set_has_saved_customer();
  saved_customer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSceneInfo.saved_customer)
}
inline ::std::string* ConfigSceneInfo::mutable_saved_customer() {
  set_has_saved_customer();
  // @@protoc_insertion_point(field_mutable:db.ConfigSceneInfo.saved_customer)
  return saved_customer_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSceneInfo::release_saved_customer() {
  // @@protoc_insertion_point(field_release:db.ConfigSceneInfo.saved_customer)
  if (!has_saved_customer()) {
    return NULL;
  }
  clear_has_saved_customer();
  return saved_customer_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSceneInfo::set_allocated_saved_customer(::std::string* saved_customer) {
  if (saved_customer != NULL) {
    set_has_saved_customer();
  } else {
    clear_has_saved_customer();
  }
  saved_customer_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), saved_customer,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSceneInfo.saved_customer)
}
inline ::std::string* ConfigSceneInfo::unsafe_arena_release_saved_customer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSceneInfo.saved_customer)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_saved_customer();
  return saved_customer_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSceneInfo::unsafe_arena_set_allocated_saved_customer(
    ::std::string* saved_customer) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (saved_customer != NULL) {
    set_has_saved_customer();
  } else {
    clear_has_saved_customer();
  }
  saved_customer_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      saved_customer, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSceneInfo.saved_customer)
}

// -------------------------------------------------------------------

// ConfigExploreEvent

// required int32 id = 1;
inline bool ConfigExploreEvent::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigExploreEvent::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigExploreEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigExploreEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigExploreEvent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.id)
  return id_;
}
inline void ConfigExploreEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.id)
}

// required int32 type = 2;
inline bool ConfigExploreEvent::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigExploreEvent::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigExploreEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigExploreEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigExploreEvent::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.type)
  return type_;
}
inline void ConfigExploreEvent::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.type)
}

// required int32 trigger_type = 3;
inline bool ConfigExploreEvent::has_trigger_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigExploreEvent::set_has_trigger_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigExploreEvent::clear_has_trigger_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigExploreEvent::clear_trigger_type() {
  trigger_type_ = 0;
  clear_has_trigger_type();
}
inline ::google::protobuf::int32 ConfigExploreEvent::trigger_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.trigger_type)
  return trigger_type_;
}
inline void ConfigExploreEvent::set_trigger_type(::google::protobuf::int32 value) {
  set_has_trigger_type();
  trigger_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.trigger_type)
}

// required bytes condition = 4;
inline bool ConfigExploreEvent::has_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigExploreEvent::set_has_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigExploreEvent::clear_has_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigExploreEvent::clear_condition() {
  condition_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_condition();
}
inline const ::std::string& ConfigExploreEvent::condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.condition)
  return condition_.Get();
}
inline void ConfigExploreEvent::set_condition(const ::std::string& value) {
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.condition)
}
#if LANG_CXX11
inline void ConfigExploreEvent::set_condition(::std::string&& value) {
  set_has_condition();
  condition_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigExploreEvent.condition)
}
#endif
inline void ConfigExploreEvent::set_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigExploreEvent.condition)
}
inline void ConfigExploreEvent::set_condition(const void* value,
    size_t size) {
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigExploreEvent.condition)
}
inline ::std::string* ConfigExploreEvent::mutable_condition() {
  set_has_condition();
  // @@protoc_insertion_point(field_mutable:db.ConfigExploreEvent.condition)
  return condition_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigExploreEvent::release_condition() {
  // @@protoc_insertion_point(field_release:db.ConfigExploreEvent.condition)
  if (!has_condition()) {
    return NULL;
  }
  clear_has_condition();
  return condition_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigExploreEvent::set_allocated_condition(::std::string* condition) {
  if (condition != NULL) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  condition_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigExploreEvent.condition)
}
inline ::std::string* ConfigExploreEvent::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigExploreEvent.condition)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_condition();
  return condition_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigExploreEvent::unsafe_arena_set_allocated_condition(
    ::std::string* condition) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (condition != NULL) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  condition_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      condition, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigExploreEvent.condition)
}

// required bytes landform_condition = 5;
inline bool ConfigExploreEvent::has_landform_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigExploreEvent::set_has_landform_condition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigExploreEvent::clear_has_landform_condition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigExploreEvent::clear_landform_condition() {
  landform_condition_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_landform_condition();
}
inline const ::std::string& ConfigExploreEvent::landform_condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.landform_condition)
  return landform_condition_.Get();
}
inline void ConfigExploreEvent::set_landform_condition(const ::std::string& value) {
  set_has_landform_condition();
  landform_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.landform_condition)
}
#if LANG_CXX11
inline void ConfigExploreEvent::set_landform_condition(::std::string&& value) {
  set_has_landform_condition();
  landform_condition_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigExploreEvent.landform_condition)
}
#endif
inline void ConfigExploreEvent::set_landform_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_landform_condition();
  landform_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigExploreEvent.landform_condition)
}
inline void ConfigExploreEvent::set_landform_condition(const void* value,
    size_t size) {
  set_has_landform_condition();
  landform_condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigExploreEvent.landform_condition)
}
inline ::std::string* ConfigExploreEvent::mutable_landform_condition() {
  set_has_landform_condition();
  // @@protoc_insertion_point(field_mutable:db.ConfigExploreEvent.landform_condition)
  return landform_condition_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigExploreEvent::release_landform_condition() {
  // @@protoc_insertion_point(field_release:db.ConfigExploreEvent.landform_condition)
  if (!has_landform_condition()) {
    return NULL;
  }
  clear_has_landform_condition();
  return landform_condition_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigExploreEvent::set_allocated_landform_condition(::std::string* landform_condition) {
  if (landform_condition != NULL) {
    set_has_landform_condition();
  } else {
    clear_has_landform_condition();
  }
  landform_condition_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), landform_condition,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigExploreEvent.landform_condition)
}
inline ::std::string* ConfigExploreEvent::unsafe_arena_release_landform_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigExploreEvent.landform_condition)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_landform_condition();
  return landform_condition_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigExploreEvent::unsafe_arena_set_allocated_landform_condition(
    ::std::string* landform_condition) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (landform_condition != NULL) {
    set_has_landform_condition();
  } else {
    clear_has_landform_condition();
  }
  landform_condition_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      landform_condition, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigExploreEvent.landform_condition)
}

// required bytes content = 6;
inline bool ConfigExploreEvent::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigExploreEvent::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigExploreEvent::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigExploreEvent::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& ConfigExploreEvent::content() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.content)
  return content_.Get();
}
inline void ConfigExploreEvent::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.content)
}
#if LANG_CXX11
inline void ConfigExploreEvent::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigExploreEvent.content)
}
#endif
inline void ConfigExploreEvent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigExploreEvent.content)
}
inline void ConfigExploreEvent::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigExploreEvent.content)
}
inline ::std::string* ConfigExploreEvent::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:db.ConfigExploreEvent.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigExploreEvent::release_content() {
  // @@protoc_insertion_point(field_release:db.ConfigExploreEvent.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigExploreEvent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigExploreEvent.content)
}
inline ::std::string* ConfigExploreEvent::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigExploreEvent.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigExploreEvent::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigExploreEvent.content)
}

// required bytes pos = 7;
inline bool ConfigExploreEvent::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigExploreEvent::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigExploreEvent::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigExploreEvent::clear_pos() {
  pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pos();
}
inline const ::std::string& ConfigExploreEvent::pos() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.pos)
  return pos_.Get();
}
inline void ConfigExploreEvent::set_pos(const ::std::string& value) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.pos)
}
#if LANG_CXX11
inline void ConfigExploreEvent::set_pos(::std::string&& value) {
  set_has_pos();
  pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigExploreEvent.pos)
}
#endif
inline void ConfigExploreEvent::set_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigExploreEvent.pos)
}
inline void ConfigExploreEvent::set_pos(const void* value,
    size_t size) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigExploreEvent.pos)
}
inline ::std::string* ConfigExploreEvent::mutable_pos() {
  set_has_pos();
  // @@protoc_insertion_point(field_mutable:db.ConfigExploreEvent.pos)
  return pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigExploreEvent::release_pos() {
  // @@protoc_insertion_point(field_release:db.ConfigExploreEvent.pos)
  if (!has_pos()) {
    return NULL;
  }
  clear_has_pos();
  return pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigExploreEvent::set_allocated_pos(::std::string* pos) {
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigExploreEvent.pos)
}
inline ::std::string* ConfigExploreEvent::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigExploreEvent.pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pos();
  return pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigExploreEvent::unsafe_arena_set_allocated_pos(
    ::std::string* pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigExploreEvent.pos)
}

// required float probability = 8;
inline bool ConfigExploreEvent::has_probability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigExploreEvent::set_has_probability() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigExploreEvent::clear_has_probability() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigExploreEvent::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline float ConfigExploreEvent::probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.probability)
  return probability_;
}
inline void ConfigExploreEvent::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.probability)
}

// required int32 cd = 9;
inline bool ConfigExploreEvent::has_cd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigExploreEvent::set_has_cd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigExploreEvent::clear_has_cd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigExploreEvent::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 ConfigExploreEvent::cd() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.cd)
  return cd_;
}
inline void ConfigExploreEvent::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.cd)
}

// required int32 time = 10;
inline bool ConfigExploreEvent::has_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigExploreEvent::set_has_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigExploreEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigExploreEvent::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ConfigExploreEvent::time() const {
  // @@protoc_insertion_point(field_get:db.ConfigExploreEvent.time)
  return time_;
}
inline void ConfigExploreEvent::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigExploreEvent.time)
}

// -------------------------------------------------------------------

// ConfigBaseRoom

// required int32 id = 1;
inline bool ConfigBaseRoom::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigBaseRoom::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigBaseRoom::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigBaseRoom::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigBaseRoom::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.id)
  return id_;
}
inline void ConfigBaseRoom::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.id)
}

// required bytes name = 2;
inline bool ConfigBaseRoom::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigBaseRoom::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigBaseRoom::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigBaseRoom::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigBaseRoom::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.name)
  return name_.Get();
}
inline void ConfigBaseRoom::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.name)
}
#if LANG_CXX11
inline void ConfigBaseRoom::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBaseRoom.name)
}
#endif
inline void ConfigBaseRoom::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBaseRoom.name)
}
inline void ConfigBaseRoom::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBaseRoom.name)
}
inline ::std::string* ConfigBaseRoom::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigBaseRoom.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBaseRoom::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigBaseRoom.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBaseRoom::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBaseRoom.name)
}
inline ::std::string* ConfigBaseRoom::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBaseRoom.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBaseRoom::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBaseRoom.name)
}

// required int32 room_type = 3;
inline bool ConfigBaseRoom::has_room_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigBaseRoom::set_has_room_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigBaseRoom::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigBaseRoom::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 ConfigBaseRoom::room_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.room_type)
  return room_type_;
}
inline void ConfigBaseRoom::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.room_type)
}

// required int32 room_num_min = 4;
inline bool ConfigBaseRoom::has_room_num_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigBaseRoom::set_has_room_num_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigBaseRoom::clear_has_room_num_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigBaseRoom::clear_room_num_min() {
  room_num_min_ = 0;
  clear_has_room_num_min();
}
inline ::google::protobuf::int32 ConfigBaseRoom::room_num_min() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.room_num_min)
  return room_num_min_;
}
inline void ConfigBaseRoom::set_room_num_min(::google::protobuf::int32 value) {
  set_has_room_num_min();
  room_num_min_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.room_num_min)
}

// required int32 attribute = 5;
inline bool ConfigBaseRoom::has_attribute() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigBaseRoom::set_has_attribute() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigBaseRoom::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigBaseRoom::clear_attribute() {
  attribute_ = 0;
  clear_has_attribute();
}
inline ::google::protobuf::int32 ConfigBaseRoom::attribute() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.attribute)
  return attribute_;
}
inline void ConfigBaseRoom::set_attribute(::google::protobuf::int32 value) {
  set_has_attribute();
  attribute_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.attribute)
}

// required int32 efficiency = 6;
inline bool ConfigBaseRoom::has_efficiency() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigBaseRoom::set_has_efficiency() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigBaseRoom::clear_has_efficiency() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigBaseRoom::clear_efficiency() {
  efficiency_ = 0;
  clear_has_efficiency();
}
inline ::google::protobuf::int32 ConfigBaseRoom::efficiency() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.efficiency)
  return efficiency_;
}
inline void ConfigBaseRoom::set_efficiency(::google::protobuf::int32 value) {
  set_has_efficiency();
  efficiency_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.efficiency)
}

// required int32 pre_room = 7;
inline bool ConfigBaseRoom::has_pre_room() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigBaseRoom::set_has_pre_room() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigBaseRoom::clear_has_pre_room() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigBaseRoom::clear_pre_room() {
  pre_room_ = 0;
  clear_has_pre_room();
}
inline ::google::protobuf::int32 ConfigBaseRoom::pre_room() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.pre_room)
  return pre_room_;
}
inline void ConfigBaseRoom::set_pre_room(::google::protobuf::int32 value) {
  set_has_pre_room();
  pre_room_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.pre_room)
}

// required int32 need_level = 8;
inline bool ConfigBaseRoom::has_need_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigBaseRoom::set_has_need_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigBaseRoom::clear_has_need_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigBaseRoom::clear_need_level() {
  need_level_ = 0;
  clear_has_need_level();
}
inline ::google::protobuf::int32 ConfigBaseRoom::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.need_level)
  return need_level_;
}
inline void ConfigBaseRoom::set_need_level(::google::protobuf::int32 value) {
  set_has_need_level();
  need_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.need_level)
}

// required bytes need_material = 9;
inline bool ConfigBaseRoom::has_need_material() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigBaseRoom::set_has_need_material() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigBaseRoom::clear_has_need_material() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigBaseRoom::clear_need_material() {
  need_material_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_need_material();
}
inline const ::std::string& ConfigBaseRoom::need_material() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.need_material)
  return need_material_.Get();
}
inline void ConfigBaseRoom::set_need_material(const ::std::string& value) {
  set_has_need_material();
  need_material_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.need_material)
}
#if LANG_CXX11
inline void ConfigBaseRoom::set_need_material(::std::string&& value) {
  set_has_need_material();
  need_material_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBaseRoom.need_material)
}
#endif
inline void ConfigBaseRoom::set_need_material(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_need_material();
  need_material_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBaseRoom.need_material)
}
inline void ConfigBaseRoom::set_need_material(const void* value,
    size_t size) {
  set_has_need_material();
  need_material_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBaseRoom.need_material)
}
inline ::std::string* ConfigBaseRoom::mutable_need_material() {
  set_has_need_material();
  // @@protoc_insertion_point(field_mutable:db.ConfigBaseRoom.need_material)
  return need_material_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBaseRoom::release_need_material() {
  // @@protoc_insertion_point(field_release:db.ConfigBaseRoom.need_material)
  if (!has_need_material()) {
    return NULL;
  }
  clear_has_need_material();
  return need_material_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBaseRoom::set_allocated_need_material(::std::string* need_material) {
  if (need_material != NULL) {
    set_has_need_material();
  } else {
    clear_has_need_material();
  }
  need_material_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), need_material,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBaseRoom.need_material)
}
inline ::std::string* ConfigBaseRoom::unsafe_arena_release_need_material() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBaseRoom.need_material)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_need_material();
  return need_material_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBaseRoom::unsafe_arena_set_allocated_need_material(
    ::std::string* need_material) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (need_material != NULL) {
    set_has_need_material();
  } else {
    clear_has_need_material();
  }
  need_material_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      need_material, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBaseRoom.need_material)
}

// required int32 farm_skill = 10;
inline bool ConfigBaseRoom::has_farm_skill() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigBaseRoom::set_has_farm_skill() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigBaseRoom::clear_has_farm_skill() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigBaseRoom::clear_farm_skill() {
  farm_skill_ = 0;
  clear_has_farm_skill();
}
inline ::google::protobuf::int32 ConfigBaseRoom::farm_skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.farm_skill)
  return farm_skill_;
}
inline void ConfigBaseRoom::set_farm_skill(::google::protobuf::int32 value) {
  set_has_farm_skill();
  farm_skill_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.farm_skill)
}

// required bytes machine_param = 11;
inline bool ConfigBaseRoom::has_machine_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigBaseRoom::set_has_machine_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigBaseRoom::clear_has_machine_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigBaseRoom::clear_machine_param() {
  machine_param_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_machine_param();
}
inline const ::std::string& ConfigBaseRoom::machine_param() const {
  // @@protoc_insertion_point(field_get:db.ConfigBaseRoom.machine_param)
  return machine_param_.Get();
}
inline void ConfigBaseRoom::set_machine_param(const ::std::string& value) {
  set_has_machine_param();
  machine_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBaseRoom.machine_param)
}
#if LANG_CXX11
inline void ConfigBaseRoom::set_machine_param(::std::string&& value) {
  set_has_machine_param();
  machine_param_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBaseRoom.machine_param)
}
#endif
inline void ConfigBaseRoom::set_machine_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_param();
  machine_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBaseRoom.machine_param)
}
inline void ConfigBaseRoom::set_machine_param(const void* value,
    size_t size) {
  set_has_machine_param();
  machine_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBaseRoom.machine_param)
}
inline ::std::string* ConfigBaseRoom::mutable_machine_param() {
  set_has_machine_param();
  // @@protoc_insertion_point(field_mutable:db.ConfigBaseRoom.machine_param)
  return machine_param_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBaseRoom::release_machine_param() {
  // @@protoc_insertion_point(field_release:db.ConfigBaseRoom.machine_param)
  if (!has_machine_param()) {
    return NULL;
  }
  clear_has_machine_param();
  return machine_param_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBaseRoom::set_allocated_machine_param(::std::string* machine_param) {
  if (machine_param != NULL) {
    set_has_machine_param();
  } else {
    clear_has_machine_param();
  }
  machine_param_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_param,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBaseRoom.machine_param)
}
inline ::std::string* ConfigBaseRoom::unsafe_arena_release_machine_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBaseRoom.machine_param)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_machine_param();
  return machine_param_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBaseRoom::unsafe_arena_set_allocated_machine_param(
    ::std::string* machine_param) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (machine_param != NULL) {
    set_has_machine_param();
  } else {
    clear_has_machine_param();
  }
  machine_param_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      machine_param, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBaseRoom.machine_param)
}

// -------------------------------------------------------------------

// ConfigFormula

// required int32 id = 1;
inline bool ConfigFormula::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigFormula::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigFormula::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigFormula::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigFormula::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.id)
  return id_;
}
inline void ConfigFormula::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFormula.id)
}

// required int32 level = 2;
inline bool ConfigFormula::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigFormula::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigFormula::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigFormula::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigFormula::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.level)
  return level_;
}
inline void ConfigFormula::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFormula.level)
}

// required bytes product_id = 3;
inline bool ConfigFormula::has_product_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFormula::set_has_product_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFormula::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFormula::clear_product_id() {
  product_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_product_id();
}
inline const ::std::string& ConfigFormula::product_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.product_id)
  return product_id_.Get();
}
inline void ConfigFormula::set_product_id(const ::std::string& value) {
  set_has_product_id();
  product_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFormula.product_id)
}
#if LANG_CXX11
inline void ConfigFormula::set_product_id(::std::string&& value) {
  set_has_product_id();
  product_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFormula.product_id)
}
#endif
inline void ConfigFormula::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_id();
  product_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFormula.product_id)
}
inline void ConfigFormula::set_product_id(const void* value,
    size_t size) {
  set_has_product_id();
  product_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFormula.product_id)
}
inline ::std::string* ConfigFormula::mutable_product_id() {
  set_has_product_id();
  // @@protoc_insertion_point(field_mutable:db.ConfigFormula.product_id)
  return product_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFormula::release_product_id() {
  // @@protoc_insertion_point(field_release:db.ConfigFormula.product_id)
  if (!has_product_id()) {
    return NULL;
  }
  clear_has_product_id();
  return product_id_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFormula::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFormula.product_id)
}
inline ::std::string* ConfigFormula::unsafe_arena_release_product_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFormula.product_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_product_id();
  return product_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFormula::unsafe_arena_set_allocated_product_id(
    ::std::string* product_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      product_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFormula.product_id)
}

// required bytes formula_name = 4;
inline bool ConfigFormula::has_formula_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFormula::set_has_formula_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFormula::clear_has_formula_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFormula::clear_formula_name() {
  formula_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_formula_name();
}
inline const ::std::string& ConfigFormula::formula_name() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.formula_name)
  return formula_name_.Get();
}
inline void ConfigFormula::set_formula_name(const ::std::string& value) {
  set_has_formula_name();
  formula_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFormula.formula_name)
}
#if LANG_CXX11
inline void ConfigFormula::set_formula_name(::std::string&& value) {
  set_has_formula_name();
  formula_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFormula.formula_name)
}
#endif
inline void ConfigFormula::set_formula_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_formula_name();
  formula_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFormula.formula_name)
}
inline void ConfigFormula::set_formula_name(const void* value,
    size_t size) {
  set_has_formula_name();
  formula_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFormula.formula_name)
}
inline ::std::string* ConfigFormula::mutable_formula_name() {
  set_has_formula_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigFormula.formula_name)
  return formula_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFormula::release_formula_name() {
  // @@protoc_insertion_point(field_release:db.ConfigFormula.formula_name)
  if (!has_formula_name()) {
    return NULL;
  }
  clear_has_formula_name();
  return formula_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFormula::set_allocated_formula_name(::std::string* formula_name) {
  if (formula_name != NULL) {
    set_has_formula_name();
  } else {
    clear_has_formula_name();
  }
  formula_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), formula_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFormula.formula_name)
}
inline ::std::string* ConfigFormula::unsafe_arena_release_formula_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFormula.formula_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_formula_name();
  return formula_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFormula::unsafe_arena_set_allocated_formula_name(
    ::std::string* formula_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (formula_name != NULL) {
    set_has_formula_name();
  } else {
    clear_has_formula_name();
  }
  formula_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      formula_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFormula.formula_name)
}

// required int32 type = 5;
inline bool ConfigFormula::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigFormula::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigFormula::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigFormula::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigFormula::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.type)
  return type_;
}
inline void ConfigFormula::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFormula.type)
}

// required bytes material = 6;
inline bool ConfigFormula::has_material() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFormula::set_has_material() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFormula::clear_has_material() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFormula::clear_material() {
  material_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_material();
}
inline const ::std::string& ConfigFormula::material() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.material)
  return material_.Get();
}
inline void ConfigFormula::set_material(const ::std::string& value) {
  set_has_material();
  material_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFormula.material)
}
#if LANG_CXX11
inline void ConfigFormula::set_material(::std::string&& value) {
  set_has_material();
  material_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFormula.material)
}
#endif
inline void ConfigFormula::set_material(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_material();
  material_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFormula.material)
}
inline void ConfigFormula::set_material(const void* value,
    size_t size) {
  set_has_material();
  material_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFormula.material)
}
inline ::std::string* ConfigFormula::mutable_material() {
  set_has_material();
  // @@protoc_insertion_point(field_mutable:db.ConfigFormula.material)
  return material_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFormula::release_material() {
  // @@protoc_insertion_point(field_release:db.ConfigFormula.material)
  if (!has_material()) {
    return NULL;
  }
  clear_has_material();
  return material_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFormula::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    set_has_material();
  } else {
    clear_has_material();
  }
  material_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFormula.material)
}
inline ::std::string* ConfigFormula::unsafe_arena_release_material() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFormula.material)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_material();
  return material_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFormula::unsafe_arena_set_allocated_material(
    ::std::string* material) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (material != NULL) {
    set_has_material();
  } else {
    clear_has_material();
  }
  material_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      material, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFormula.material)
}

// required int32 seconds = 7;
inline bool ConfigFormula::has_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigFormula::set_has_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigFormula::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigFormula::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
inline ::google::protobuf::int32 ConfigFormula::seconds() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.seconds)
  return seconds_;
}
inline void ConfigFormula::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFormula.seconds)
}

// required int32 belong_to = 8;
inline bool ConfigFormula::has_belong_to() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigFormula::set_has_belong_to() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigFormula::clear_has_belong_to() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigFormula::clear_belong_to() {
  belong_to_ = 0;
  clear_has_belong_to();
}
inline ::google::protobuf::int32 ConfigFormula::belong_to() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.belong_to)
  return belong_to_;
}
inline void ConfigFormula::set_belong_to(::google::protobuf::int32 value) {
  set_has_belong_to();
  belong_to_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFormula.belong_to)
}

// required int32 add_exp = 9;
inline bool ConfigFormula::has_add_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigFormula::set_has_add_exp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigFormula::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigFormula::clear_add_exp() {
  add_exp_ = 0;
  clear_has_add_exp();
}
inline ::google::protobuf::int32 ConfigFormula::add_exp() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.add_exp)
  return add_exp_;
}
inline void ConfigFormula::set_add_exp(::google::protobuf::int32 value) {
  set_has_add_exp();
  add_exp_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFormula.add_exp)
}

// required bytes speed_up_cost = 10;
inline bool ConfigFormula::has_speed_up_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFormula::set_has_speed_up_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigFormula::clear_has_speed_up_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigFormula::clear_speed_up_cost() {
  speed_up_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_speed_up_cost();
}
inline const ::std::string& ConfigFormula::speed_up_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.speed_up_cost)
  return speed_up_cost_.Get();
}
inline void ConfigFormula::set_speed_up_cost(const ::std::string& value) {
  set_has_speed_up_cost();
  speed_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFormula.speed_up_cost)
}
#if LANG_CXX11
inline void ConfigFormula::set_speed_up_cost(::std::string&& value) {
  set_has_speed_up_cost();
  speed_up_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFormula.speed_up_cost)
}
#endif
inline void ConfigFormula::set_speed_up_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_speed_up_cost();
  speed_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFormula.speed_up_cost)
}
inline void ConfigFormula::set_speed_up_cost(const void* value,
    size_t size) {
  set_has_speed_up_cost();
  speed_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFormula.speed_up_cost)
}
inline ::std::string* ConfigFormula::mutable_speed_up_cost() {
  set_has_speed_up_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigFormula.speed_up_cost)
  return speed_up_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFormula::release_speed_up_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigFormula.speed_up_cost)
  if (!has_speed_up_cost()) {
    return NULL;
  }
  clear_has_speed_up_cost();
  return speed_up_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFormula::set_allocated_speed_up_cost(::std::string* speed_up_cost) {
  if (speed_up_cost != NULL) {
    set_has_speed_up_cost();
  } else {
    clear_has_speed_up_cost();
  }
  speed_up_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speed_up_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFormula.speed_up_cost)
}
inline ::std::string* ConfigFormula::unsafe_arena_release_speed_up_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFormula.speed_up_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_speed_up_cost();
  return speed_up_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFormula::unsafe_arena_set_allocated_speed_up_cost(
    ::std::string* speed_up_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (speed_up_cost != NULL) {
    set_has_speed_up_cost();
  } else {
    clear_has_speed_up_cost();
  }
  speed_up_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      speed_up_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFormula.speed_up_cost)
}

// required int32 output = 11;
inline bool ConfigFormula::has_output() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigFormula::set_has_output() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigFormula::clear_has_output() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigFormula::clear_output() {
  output_ = 0;
  clear_has_output();
}
inline ::google::protobuf::int32 ConfigFormula::output() const {
  // @@protoc_insertion_point(field_get:db.ConfigFormula.output)
  return output_;
}
inline void ConfigFormula::set_output(::google::protobuf::int32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFormula.output)
}

// -------------------------------------------------------------------

// ConfigShopping

// required int32 id = 1;
inline bool ConfigShopping::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigShopping::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigShopping::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigShopping::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigShopping::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.id)
  return id_;
}
inline void ConfigShopping::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShopping.id)
}

// required int32 groupid = 2;
inline bool ConfigShopping::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigShopping::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigShopping::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigShopping::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 ConfigShopping::groupid() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.groupid)
  return groupid_;
}
inline void ConfigShopping::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShopping.groupid)
}

// required int32 category = 3;
inline bool ConfigShopping::has_category() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigShopping::set_has_category() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigShopping::clear_has_category() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigShopping::clear_category() {
  category_ = 0;
  clear_has_category();
}
inline ::google::protobuf::int32 ConfigShopping::category() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.category)
  return category_;
}
inline void ConfigShopping::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShopping.category)
}

// required int32 belong_store = 4;
inline bool ConfigShopping::has_belong_store() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigShopping::set_has_belong_store() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigShopping::clear_has_belong_store() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigShopping::clear_belong_store() {
  belong_store_ = 0;
  clear_has_belong_store();
}
inline ::google::protobuf::int32 ConfigShopping::belong_store() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.belong_store)
  return belong_store_;
}
inline void ConfigShopping::set_belong_store(::google::protobuf::int32 value) {
  set_has_belong_store();
  belong_store_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShopping.belong_store)
}

// required bytes goods = 5;
inline bool ConfigShopping::has_goods() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigShopping::set_has_goods() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigShopping::clear_has_goods() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigShopping::clear_goods() {
  goods_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_goods();
}
inline const ::std::string& ConfigShopping::goods() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.goods)
  return goods_.Get();
}
inline void ConfigShopping::set_goods(const ::std::string& value) {
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShopping.goods)
}
#if LANG_CXX11
inline void ConfigShopping::set_goods(::std::string&& value) {
  set_has_goods();
  goods_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShopping.goods)
}
#endif
inline void ConfigShopping::set_goods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShopping.goods)
}
inline void ConfigShopping::set_goods(const void* value,
    size_t size) {
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShopping.goods)
}
inline ::std::string* ConfigShopping::mutable_goods() {
  set_has_goods();
  // @@protoc_insertion_point(field_mutable:db.ConfigShopping.goods)
  return goods_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShopping::release_goods() {
  // @@protoc_insertion_point(field_release:db.ConfigShopping.goods)
  if (!has_goods()) {
    return NULL;
  }
  clear_has_goods();
  return goods_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShopping::set_allocated_goods(::std::string* goods) {
  if (goods != NULL) {
    set_has_goods();
  } else {
    clear_has_goods();
  }
  goods_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goods,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShopping.goods)
}
inline ::std::string* ConfigShopping::unsafe_arena_release_goods() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShopping.goods)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_goods();
  return goods_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShopping::unsafe_arena_set_allocated_goods(
    ::std::string* goods) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (goods != NULL) {
    set_has_goods();
  } else {
    clear_has_goods();
  }
  goods_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      goods, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShopping.goods)
}

// required bytes price = 6;
inline bool ConfigShopping::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigShopping::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigShopping::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigShopping::clear_price() {
  price_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_price();
}
inline const ::std::string& ConfigShopping::price() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.price)
  return price_.Get();
}
inline void ConfigShopping::set_price(const ::std::string& value) {
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShopping.price)
}
#if LANG_CXX11
inline void ConfigShopping::set_price(::std::string&& value) {
  set_has_price();
  price_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShopping.price)
}
#endif
inline void ConfigShopping::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShopping.price)
}
inline void ConfigShopping::set_price(const void* value,
    size_t size) {
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShopping.price)
}
inline ::std::string* ConfigShopping::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:db.ConfigShopping.price)
  return price_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShopping::release_price() {
  // @@protoc_insertion_point(field_release:db.ConfigShopping.price)
  if (!has_price()) {
    return NULL;
  }
  clear_has_price();
  return price_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShopping::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShopping.price)
}
inline ::std::string* ConfigShopping::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShopping.price)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_price();
  return price_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShopping::unsafe_arena_set_allocated_price(
    ::std::string* price) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      price, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShopping.price)
}

// required bytes date = 7;
inline bool ConfigShopping::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigShopping::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigShopping::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigShopping::clear_date() {
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_date();
}
inline const ::std::string& ConfigShopping::date() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.date)
  return date_.Get();
}
inline void ConfigShopping::set_date(const ::std::string& value) {
  set_has_date();
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShopping.date)
}
#if LANG_CXX11
inline void ConfigShopping::set_date(::std::string&& value) {
  set_has_date();
  date_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShopping.date)
}
#endif
inline void ConfigShopping::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_date();
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShopping.date)
}
inline void ConfigShopping::set_date(const void* value,
    size_t size) {
  set_has_date();
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShopping.date)
}
inline ::std::string* ConfigShopping::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:db.ConfigShopping.date)
  return date_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShopping::release_date() {
  // @@protoc_insertion_point(field_release:db.ConfigShopping.date)
  if (!has_date()) {
    return NULL;
  }
  clear_has_date();
  return date_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShopping::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShopping.date)
}
inline ::std::string* ConfigShopping::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShopping.date)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_date();
  return date_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShopping::unsafe_arena_set_allocated_date(
    ::std::string* date) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      date, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShopping.date)
}

// required int32 limit_num = 8;
inline bool ConfigShopping::has_limit_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigShopping::set_has_limit_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigShopping::clear_has_limit_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigShopping::clear_limit_num() {
  limit_num_ = 0;
  clear_has_limit_num();
}
inline ::google::protobuf::int32 ConfigShopping::limit_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.limit_num)
  return limit_num_;
}
inline void ConfigShopping::set_limit_num(::google::protobuf::int32 value) {
  set_has_limit_num();
  limit_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShopping.limit_num)
}

// required int32 double = 9;
inline bool ConfigShopping::has_double_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigShopping::set_has_double_() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigShopping::clear_has_double_() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigShopping::clear_double_() {
  double__ = 0;
  clear_has_double_();
}
inline ::google::protobuf::int32 ConfigShopping::double_() const {
  // @@protoc_insertion_point(field_get:db.ConfigShopping.double)
  return double__;
}
inline void ConfigShopping::set_double_(::google::protobuf::int32 value) {
  set_has_double_();
  double__ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShopping.double)
}

// -------------------------------------------------------------------

// ConfigCardAttribute

// required int32 id = 1;
inline bool ConfigCardAttribute::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigCardAttribute::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigCardAttribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigCardAttribute::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigCardAttribute::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardAttribute.id)
  return id_;
}
inline void ConfigCardAttribute::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardAttribute.id)
}

// required int32 type = 2;
inline bool ConfigCardAttribute::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigCardAttribute::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigCardAttribute::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigCardAttribute::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigCardAttribute::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardAttribute.type)
  return type_;
}
inline void ConfigCardAttribute::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardAttribute.type)
}

// required bytes name = 3;
inline bool ConfigCardAttribute::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigCardAttribute::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigCardAttribute::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigCardAttribute::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigCardAttribute::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardAttribute.name)
  return name_.Get();
}
inline void ConfigCardAttribute::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardAttribute.name)
}
#if LANG_CXX11
inline void ConfigCardAttribute::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardAttribute.name)
}
#endif
inline void ConfigCardAttribute::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardAttribute.name)
}
inline void ConfigCardAttribute::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardAttribute.name)
}
inline ::std::string* ConfigCardAttribute::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardAttribute.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardAttribute::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigCardAttribute.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardAttribute.name)
}
inline ::std::string* ConfigCardAttribute::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardAttribute.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardAttribute::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardAttribute.name)
}

// required bytes influence = 4;
inline bool ConfigCardAttribute::has_influence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigCardAttribute::set_has_influence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigCardAttribute::clear_has_influence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigCardAttribute::clear_influence() {
  influence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_influence();
}
inline const ::std::string& ConfigCardAttribute::influence() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardAttribute.influence)
  return influence_.Get();
}
inline void ConfigCardAttribute::set_influence(const ::std::string& value) {
  set_has_influence();
  influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardAttribute.influence)
}
#if LANG_CXX11
inline void ConfigCardAttribute::set_influence(::std::string&& value) {
  set_has_influence();
  influence_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardAttribute.influence)
}
#endif
inline void ConfigCardAttribute::set_influence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_influence();
  influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardAttribute.influence)
}
inline void ConfigCardAttribute::set_influence(const void* value,
    size_t size) {
  set_has_influence();
  influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardAttribute.influence)
}
inline ::std::string* ConfigCardAttribute::mutable_influence() {
  set_has_influence();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardAttribute.influence)
  return influence_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardAttribute::release_influence() {
  // @@protoc_insertion_point(field_release:db.ConfigCardAttribute.influence)
  if (!has_influence()) {
    return NULL;
  }
  clear_has_influence();
  return influence_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardAttribute::set_allocated_influence(::std::string* influence) {
  if (influence != NULL) {
    set_has_influence();
  } else {
    clear_has_influence();
  }
  influence_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), influence,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardAttribute.influence)
}
inline ::std::string* ConfigCardAttribute::unsafe_arena_release_influence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardAttribute.influence)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_influence();
  return influence_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardAttribute::unsafe_arena_set_allocated_influence(
    ::std::string* influence) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (influence != NULL) {
    set_has_influence();
  } else {
    clear_has_influence();
  }
  influence_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      influence, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardAttribute.influence)
}

// -------------------------------------------------------------------

// ConfigCardEquip

// required int32 id = 1;
inline bool ConfigCardEquip::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigCardEquip::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigCardEquip::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigCardEquip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigCardEquip::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.id)
  return id_;
}
inline void ConfigCardEquip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.id)
}

// required bytes name = 2;
inline bool ConfigCardEquip::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigCardEquip::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigCardEquip::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigCardEquip::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigCardEquip::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.name)
  return name_.Get();
}
inline void ConfigCardEquip::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.name)
}
#if LANG_CXX11
inline void ConfigCardEquip::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquip.name)
}
#endif
inline void ConfigCardEquip::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquip.name)
}
inline void ConfigCardEquip::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquip.name)
}
inline ::std::string* ConfigCardEquip::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquip.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquip::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquip.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquip::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquip.name)
}
inline ::std::string* ConfigCardEquip::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquip.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquip::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquip.name)
}

// required int32 star = 3;
inline bool ConfigCardEquip::has_star() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigCardEquip::set_has_star() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigCardEquip::clear_has_star() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigCardEquip::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 ConfigCardEquip::star() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.star)
  return star_;
}
inline void ConfigCardEquip::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.star)
}

// required int32 quality = 4;
inline bool ConfigCardEquip::has_quality() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigCardEquip::set_has_quality() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigCardEquip::clear_has_quality() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigCardEquip::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 ConfigCardEquip::quality() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.quality)
  return quality_;
}
inline void ConfigCardEquip::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.quality)
}

// required int32 part = 5;
inline bool ConfigCardEquip::has_part() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigCardEquip::set_has_part() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigCardEquip::clear_has_part() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigCardEquip::clear_part() {
  part_ = 0;
  clear_has_part();
}
inline ::google::protobuf::int32 ConfigCardEquip::part() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.part)
  return part_;
}
inline void ConfigCardEquip::set_part(::google::protobuf::int32 value) {
  set_has_part();
  part_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.part)
}

// required int32 need_level = 6;
inline bool ConfigCardEquip::has_need_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigCardEquip::set_has_need_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigCardEquip::clear_has_need_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigCardEquip::clear_need_level() {
  need_level_ = 0;
  clear_has_need_level();
}
inline ::google::protobuf::int32 ConfigCardEquip::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.need_level)
  return need_level_;
}
inline void ConfigCardEquip::set_need_level(::google::protobuf::int32 value) {
  set_has_need_level();
  need_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.need_level)
}

// required int32 occupation = 7;
inline bool ConfigCardEquip::has_occupation() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigCardEquip::set_has_occupation() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigCardEquip::clear_has_occupation() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigCardEquip::clear_occupation() {
  occupation_ = 0;
  clear_has_occupation();
}
inline ::google::protobuf::int32 ConfigCardEquip::occupation() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.occupation)
  return occupation_;
}
inline void ConfigCardEquip::set_occupation(::google::protobuf::int32 value) {
  set_has_occupation();
  occupation_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.occupation)
}

// required int32 farm_skill = 8;
inline bool ConfigCardEquip::has_farm_skill() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigCardEquip::set_has_farm_skill() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigCardEquip::clear_has_farm_skill() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigCardEquip::clear_farm_skill() {
  farm_skill_ = 0;
  clear_has_farm_skill();
}
inline ::google::protobuf::int32 ConfigCardEquip::farm_skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.farm_skill)
  return farm_skill_;
}
inline void ConfigCardEquip::set_farm_skill(::google::protobuf::int32 value) {
  set_has_farm_skill();
  farm_skill_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.farm_skill)
}

// required int32 type = 9;
inline bool ConfigCardEquip::has_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigCardEquip::set_has_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigCardEquip::clear_has_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigCardEquip::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigCardEquip::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.type)
  return type_;
}
inline void ConfigCardEquip::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.type)
}

// required int32 initial_slot = 10;
inline bool ConfigCardEquip::has_initial_slot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigCardEquip::set_has_initial_slot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigCardEquip::clear_has_initial_slot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigCardEquip::clear_initial_slot() {
  initial_slot_ = 0;
  clear_has_initial_slot();
}
inline ::google::protobuf::int32 ConfigCardEquip::initial_slot() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.initial_slot)
  return initial_slot_;
}
inline void ConfigCardEquip::set_initial_slot(::google::protobuf::int32 value) {
  set_has_initial_slot();
  initial_slot_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.initial_slot)
}

// required bytes attribute = 11;
inline bool ConfigCardEquip::has_attribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigCardEquip::set_has_attribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigCardEquip::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigCardEquip::clear_attribute() {
  attribute_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attribute();
}
inline const ::std::string& ConfigCardEquip::attribute() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.attribute)
  return attribute_.Get();
}
inline void ConfigCardEquip::set_attribute(const ::std::string& value) {
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.attribute)
}
#if LANG_CXX11
inline void ConfigCardEquip::set_attribute(::std::string&& value) {
  set_has_attribute();
  attribute_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquip.attribute)
}
#endif
inline void ConfigCardEquip::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquip.attribute)
}
inline void ConfigCardEquip::set_attribute(const void* value,
    size_t size) {
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquip.attribute)
}
inline ::std::string* ConfigCardEquip::mutable_attribute() {
  set_has_attribute();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquip.attribute)
  return attribute_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquip::release_attribute() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquip.attribute)
  if (!has_attribute()) {
    return NULL;
  }
  clear_has_attribute();
  return attribute_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquip::set_allocated_attribute(::std::string* attribute) {
  if (attribute != NULL) {
    set_has_attribute();
  } else {
    clear_has_attribute();
  }
  attribute_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquip.attribute)
}
inline ::std::string* ConfigCardEquip::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquip.attribute)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attribute();
  return attribute_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquip::unsafe_arena_set_allocated_attribute(
    ::std::string* attribute) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attribute != NULL) {
    set_has_attribute();
  } else {
    clear_has_attribute();
  }
  attribute_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attribute, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquip.attribute)
}

// required bytes special_attr = 12;
inline bool ConfigCardEquip::has_special_attr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigCardEquip::set_has_special_attr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigCardEquip::clear_has_special_attr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigCardEquip::clear_special_attr() {
  special_attr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_special_attr();
}
inline const ::std::string& ConfigCardEquip::special_attr() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.special_attr)
  return special_attr_.Get();
}
inline void ConfigCardEquip::set_special_attr(const ::std::string& value) {
  set_has_special_attr();
  special_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.special_attr)
}
#if LANG_CXX11
inline void ConfigCardEquip::set_special_attr(::std::string&& value) {
  set_has_special_attr();
  special_attr_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquip.special_attr)
}
#endif
inline void ConfigCardEquip::set_special_attr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_special_attr();
  special_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquip.special_attr)
}
inline void ConfigCardEquip::set_special_attr(const void* value,
    size_t size) {
  set_has_special_attr();
  special_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquip.special_attr)
}
inline ::std::string* ConfigCardEquip::mutable_special_attr() {
  set_has_special_attr();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquip.special_attr)
  return special_attr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquip::release_special_attr() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquip.special_attr)
  if (!has_special_attr()) {
    return NULL;
  }
  clear_has_special_attr();
  return special_attr_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquip::set_allocated_special_attr(::std::string* special_attr) {
  if (special_attr != NULL) {
    set_has_special_attr();
  } else {
    clear_has_special_attr();
  }
  special_attr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), special_attr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquip.special_attr)
}
inline ::std::string* ConfigCardEquip::unsafe_arena_release_special_attr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquip.special_attr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_special_attr();
  return special_attr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquip::unsafe_arena_set_allocated_special_attr(
    ::std::string* special_attr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (special_attr != NULL) {
    set_has_special_attr();
  } else {
    clear_has_special_attr();
  }
  special_attr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      special_attr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquip.special_attr)
}

// required bytes advanced_attr = 13;
inline bool ConfigCardEquip::has_advanced_attr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigCardEquip::set_has_advanced_attr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigCardEquip::clear_has_advanced_attr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigCardEquip::clear_advanced_attr() {
  advanced_attr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_advanced_attr();
}
inline const ::std::string& ConfigCardEquip::advanced_attr() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.advanced_attr)
  return advanced_attr_.Get();
}
inline void ConfigCardEquip::set_advanced_attr(const ::std::string& value) {
  set_has_advanced_attr();
  advanced_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.advanced_attr)
}
#if LANG_CXX11
inline void ConfigCardEquip::set_advanced_attr(::std::string&& value) {
  set_has_advanced_attr();
  advanced_attr_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquip.advanced_attr)
}
#endif
inline void ConfigCardEquip::set_advanced_attr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_advanced_attr();
  advanced_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquip.advanced_attr)
}
inline void ConfigCardEquip::set_advanced_attr(const void* value,
    size_t size) {
  set_has_advanced_attr();
  advanced_attr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquip.advanced_attr)
}
inline ::std::string* ConfigCardEquip::mutable_advanced_attr() {
  set_has_advanced_attr();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquip.advanced_attr)
  return advanced_attr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquip::release_advanced_attr() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquip.advanced_attr)
  if (!has_advanced_attr()) {
    return NULL;
  }
  clear_has_advanced_attr();
  return advanced_attr_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquip::set_allocated_advanced_attr(::std::string* advanced_attr) {
  if (advanced_attr != NULL) {
    set_has_advanced_attr();
  } else {
    clear_has_advanced_attr();
  }
  advanced_attr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), advanced_attr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquip.advanced_attr)
}
inline ::std::string* ConfigCardEquip::unsafe_arena_release_advanced_attr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquip.advanced_attr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_advanced_attr();
  return advanced_attr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquip::unsafe_arena_set_allocated_advanced_attr(
    ::std::string* advanced_attr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (advanced_attr != NULL) {
    set_has_advanced_attr();
  } else {
    clear_has_advanced_attr();
  }
  advanced_attr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      advanced_attr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquip.advanced_attr)
}

// required bytes forge_cost = 14;
inline bool ConfigCardEquip::has_forge_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigCardEquip::set_has_forge_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigCardEquip::clear_has_forge_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigCardEquip::clear_forge_cost() {
  forge_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_forge_cost();
}
inline const ::std::string& ConfigCardEquip::forge_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.forge_cost)
  return forge_cost_.Get();
}
inline void ConfigCardEquip::set_forge_cost(const ::std::string& value) {
  set_has_forge_cost();
  forge_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.forge_cost)
}
#if LANG_CXX11
inline void ConfigCardEquip::set_forge_cost(::std::string&& value) {
  set_has_forge_cost();
  forge_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquip.forge_cost)
}
#endif
inline void ConfigCardEquip::set_forge_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_forge_cost();
  forge_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquip.forge_cost)
}
inline void ConfigCardEquip::set_forge_cost(const void* value,
    size_t size) {
  set_has_forge_cost();
  forge_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquip.forge_cost)
}
inline ::std::string* ConfigCardEquip::mutable_forge_cost() {
  set_has_forge_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquip.forge_cost)
  return forge_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquip::release_forge_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquip.forge_cost)
  if (!has_forge_cost()) {
    return NULL;
  }
  clear_has_forge_cost();
  return forge_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquip::set_allocated_forge_cost(::std::string* forge_cost) {
  if (forge_cost != NULL) {
    set_has_forge_cost();
  } else {
    clear_has_forge_cost();
  }
  forge_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forge_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquip.forge_cost)
}
inline ::std::string* ConfigCardEquip::unsafe_arena_release_forge_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquip.forge_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_forge_cost();
  return forge_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquip::unsafe_arena_set_allocated_forge_cost(
    ::std::string* forge_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (forge_cost != NULL) {
    set_has_forge_cost();
  } else {
    clear_has_forge_cost();
  }
  forge_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      forge_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquip.forge_cost)
}

// required int32 price = 15;
inline bool ConfigCardEquip::has_price() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigCardEquip::set_has_price() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigCardEquip::clear_has_price() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigCardEquip::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ConfigCardEquip::price() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.price)
  return price_;
}
inline void ConfigCardEquip::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.price)
}

// required bytes base_attribute_add = 16;
inline bool ConfigCardEquip::has_base_attribute_add() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigCardEquip::set_has_base_attribute_add() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigCardEquip::clear_has_base_attribute_add() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigCardEquip::clear_base_attribute_add() {
  base_attribute_add_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_base_attribute_add();
}
inline const ::std::string& ConfigCardEquip::base_attribute_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.base_attribute_add)
  return base_attribute_add_.Get();
}
inline void ConfigCardEquip::set_base_attribute_add(const ::std::string& value) {
  set_has_base_attribute_add();
  base_attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.base_attribute_add)
}
#if LANG_CXX11
inline void ConfigCardEquip::set_base_attribute_add(::std::string&& value) {
  set_has_base_attribute_add();
  base_attribute_add_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquip.base_attribute_add)
}
#endif
inline void ConfigCardEquip::set_base_attribute_add(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base_attribute_add();
  base_attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquip.base_attribute_add)
}
inline void ConfigCardEquip::set_base_attribute_add(const void* value,
    size_t size) {
  set_has_base_attribute_add();
  base_attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquip.base_attribute_add)
}
inline ::std::string* ConfigCardEquip::mutable_base_attribute_add() {
  set_has_base_attribute_add();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquip.base_attribute_add)
  return base_attribute_add_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquip::release_base_attribute_add() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquip.base_attribute_add)
  if (!has_base_attribute_add()) {
    return NULL;
  }
  clear_has_base_attribute_add();
  return base_attribute_add_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquip::set_allocated_base_attribute_add(::std::string* base_attribute_add) {
  if (base_attribute_add != NULL) {
    set_has_base_attribute_add();
  } else {
    clear_has_base_attribute_add();
  }
  base_attribute_add_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_attribute_add,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquip.base_attribute_add)
}
inline ::std::string* ConfigCardEquip::unsafe_arena_release_base_attribute_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquip.base_attribute_add)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_base_attribute_add();
  return base_attribute_add_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquip::unsafe_arena_set_allocated_base_attribute_add(
    ::std::string* base_attribute_add) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (base_attribute_add != NULL) {
    set_has_base_attribute_add();
  } else {
    clear_has_base_attribute_add();
  }
  base_attribute_add_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      base_attribute_add, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquip.base_attribute_add)
}

// required int32 quality_refine_times = 17;
inline bool ConfigCardEquip::has_quality_refine_times() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfigCardEquip::set_has_quality_refine_times() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfigCardEquip::clear_has_quality_refine_times() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfigCardEquip::clear_quality_refine_times() {
  quality_refine_times_ = 0;
  clear_has_quality_refine_times();
}
inline ::google::protobuf::int32 ConfigCardEquip::quality_refine_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.quality_refine_times)
  return quality_refine_times_;
}
inline void ConfigCardEquip::set_quality_refine_times(::google::protobuf::int32 value) {
  set_has_quality_refine_times();
  quality_refine_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.quality_refine_times)
}

// required bytes skill = 18;
inline bool ConfigCardEquip::has_skill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigCardEquip::set_has_skill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigCardEquip::clear_has_skill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigCardEquip::clear_skill() {
  skill_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_skill();
}
inline const ::std::string& ConfigCardEquip::skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.skill)
  return skill_.Get();
}
inline void ConfigCardEquip::set_skill(const ::std::string& value) {
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.skill)
}
#if LANG_CXX11
inline void ConfigCardEquip::set_skill(::std::string&& value) {
  set_has_skill();
  skill_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquip.skill)
}
#endif
inline void ConfigCardEquip::set_skill(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquip.skill)
}
inline void ConfigCardEquip::set_skill(const void* value,
    size_t size) {
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquip.skill)
}
inline ::std::string* ConfigCardEquip::mutable_skill() {
  set_has_skill();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquip.skill)
  return skill_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquip::release_skill() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquip.skill)
  if (!has_skill()) {
    return NULL;
  }
  clear_has_skill();
  return skill_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquip::set_allocated_skill(::std::string* skill) {
  if (skill != NULL) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  skill_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquip.skill)
}
inline ::std::string* ConfigCardEquip::unsafe_arena_release_skill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquip.skill)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_skill();
  return skill_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquip::unsafe_arena_set_allocated_skill(
    ::std::string* skill) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (skill != NULL) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  skill_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      skill, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquip.skill)
}

// required bytes quality_up_cost = 19;
inline bool ConfigCardEquip::has_quality_up_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigCardEquip::set_has_quality_up_cost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigCardEquip::clear_has_quality_up_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigCardEquip::clear_quality_up_cost() {
  quality_up_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_quality_up_cost();
}
inline const ::std::string& ConfigCardEquip::quality_up_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquip.quality_up_cost)
  return quality_up_cost_.Get();
}
inline void ConfigCardEquip::set_quality_up_cost(const ::std::string& value) {
  set_has_quality_up_cost();
  quality_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquip.quality_up_cost)
}
#if LANG_CXX11
inline void ConfigCardEquip::set_quality_up_cost(::std::string&& value) {
  set_has_quality_up_cost();
  quality_up_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquip.quality_up_cost)
}
#endif
inline void ConfigCardEquip::set_quality_up_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_quality_up_cost();
  quality_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquip.quality_up_cost)
}
inline void ConfigCardEquip::set_quality_up_cost(const void* value,
    size_t size) {
  set_has_quality_up_cost();
  quality_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquip.quality_up_cost)
}
inline ::std::string* ConfigCardEquip::mutable_quality_up_cost() {
  set_has_quality_up_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquip.quality_up_cost)
  return quality_up_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquip::release_quality_up_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquip.quality_up_cost)
  if (!has_quality_up_cost()) {
    return NULL;
  }
  clear_has_quality_up_cost();
  return quality_up_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquip::set_allocated_quality_up_cost(::std::string* quality_up_cost) {
  if (quality_up_cost != NULL) {
    set_has_quality_up_cost();
  } else {
    clear_has_quality_up_cost();
  }
  quality_up_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quality_up_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquip.quality_up_cost)
}
inline ::std::string* ConfigCardEquip::unsafe_arena_release_quality_up_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquip.quality_up_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_quality_up_cost();
  return quality_up_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquip::unsafe_arena_set_allocated_quality_up_cost(
    ::std::string* quality_up_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (quality_up_cost != NULL) {
    set_has_quality_up_cost();
  } else {
    clear_has_quality_up_cost();
  }
  quality_up_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      quality_up_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquip.quality_up_cost)
}

// -------------------------------------------------------------------

// ConfigCardEquipStrengthen

// required int32 id = 1;
inline bool ConfigCardEquipStrengthen::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigCardEquipStrengthen::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigCardEquipStrengthen::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigCardEquipStrengthen::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigCardEquipStrengthen::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquipStrengthen.id)
  return id_;
}
inline void ConfigCardEquipStrengthen::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquipStrengthen.id)
}

// required int32 level = 2;
inline bool ConfigCardEquipStrengthen::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigCardEquipStrengthen::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigCardEquipStrengthen::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigCardEquipStrengthen::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigCardEquipStrengthen::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquipStrengthen.level)
  return level_;
}
inline void ConfigCardEquipStrengthen::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquipStrengthen.level)
}

// required int32 quality = 3;
inline bool ConfigCardEquipStrengthen::has_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigCardEquipStrengthen::set_has_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigCardEquipStrengthen::clear_has_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigCardEquipStrengthen::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 ConfigCardEquipStrengthen::quality() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquipStrengthen.quality)
  return quality_;
}
inline void ConfigCardEquipStrengthen::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquipStrengthen.quality)
}

// required int32 part = 4;
inline bool ConfigCardEquipStrengthen::has_part() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigCardEquipStrengthen::set_has_part() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigCardEquipStrengthen::clear_has_part() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigCardEquipStrengthen::clear_part() {
  part_ = 0;
  clear_has_part();
}
inline ::google::protobuf::int32 ConfigCardEquipStrengthen::part() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquipStrengthen.part)
  return part_;
}
inline void ConfigCardEquipStrengthen::set_part(::google::protobuf::int32 value) {
  set_has_part();
  part_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquipStrengthen.part)
}

// required int32 strengthen_level_max = 5;
inline bool ConfigCardEquipStrengthen::has_strengthen_level_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigCardEquipStrengthen::set_has_strengthen_level_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigCardEquipStrengthen::clear_has_strengthen_level_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigCardEquipStrengthen::clear_strengthen_level_max() {
  strengthen_level_max_ = 0;
  clear_has_strengthen_level_max();
}
inline ::google::protobuf::int32 ConfigCardEquipStrengthen::strengthen_level_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquipStrengthen.strengthen_level_max)
  return strengthen_level_max_;
}
inline void ConfigCardEquipStrengthen::set_strengthen_level_max(::google::protobuf::int32 value) {
  set_has_strengthen_level_max();
  strengthen_level_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardEquipStrengthen.strengthen_level_max)
}

// required bytes cost = 6;
inline bool ConfigCardEquipStrengthen::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigCardEquipStrengthen::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigCardEquipStrengthen::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigCardEquipStrengthen::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigCardEquipStrengthen::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquipStrengthen.cost)
  return cost_.Get();
}
inline void ConfigCardEquipStrengthen::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquipStrengthen.cost)
}
#if LANG_CXX11
inline void ConfigCardEquipStrengthen::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquipStrengthen.cost)
}
#endif
inline void ConfigCardEquipStrengthen::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquipStrengthen.cost)
}
inline void ConfigCardEquipStrengthen::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquipStrengthen.cost)
}
inline ::std::string* ConfigCardEquipStrengthen::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquipStrengthen.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquipStrengthen::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquipStrengthen.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquipStrengthen::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquipStrengthen.cost)
}
inline ::std::string* ConfigCardEquipStrengthen::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquipStrengthen.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquipStrengthen::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquipStrengthen.cost)
}

// required bytes gold = 7;
inline bool ConfigCardEquipStrengthen::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigCardEquipStrengthen::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigCardEquipStrengthen::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigCardEquipStrengthen::clear_gold() {
  gold_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_gold();
}
inline const ::std::string& ConfigCardEquipStrengthen::gold() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquipStrengthen.gold)
  return gold_.Get();
}
inline void ConfigCardEquipStrengthen::set_gold(const ::std::string& value) {
  set_has_gold();
  gold_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquipStrengthen.gold)
}
#if LANG_CXX11
inline void ConfigCardEquipStrengthen::set_gold(::std::string&& value) {
  set_has_gold();
  gold_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquipStrengthen.gold)
}
#endif
inline void ConfigCardEquipStrengthen::set_gold(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gold();
  gold_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquipStrengthen.gold)
}
inline void ConfigCardEquipStrengthen::set_gold(const void* value,
    size_t size) {
  set_has_gold();
  gold_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquipStrengthen.gold)
}
inline ::std::string* ConfigCardEquipStrengthen::mutable_gold() {
  set_has_gold();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquipStrengthen.gold)
  return gold_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquipStrengthen::release_gold() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquipStrengthen.gold)
  if (!has_gold()) {
    return NULL;
  }
  clear_has_gold();
  return gold_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquipStrengthen::set_allocated_gold(::std::string* gold) {
  if (gold != NULL) {
    set_has_gold();
  } else {
    clear_has_gold();
  }
  gold_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gold,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquipStrengthen.gold)
}
inline ::std::string* ConfigCardEquipStrengthen::unsafe_arena_release_gold() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquipStrengthen.gold)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_gold();
  return gold_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquipStrengthen::unsafe_arena_set_allocated_gold(
    ::std::string* gold) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gold != NULL) {
    set_has_gold();
  } else {
    clear_has_gold();
  }
  gold_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gold, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquipStrengthen.gold)
}

// required bytes attribute_add = 8;
inline bool ConfigCardEquipStrengthen::has_attribute_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigCardEquipStrengthen::set_has_attribute_add() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigCardEquipStrengthen::clear_has_attribute_add() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigCardEquipStrengthen::clear_attribute_add() {
  attribute_add_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attribute_add();
}
inline const ::std::string& ConfigCardEquipStrengthen::attribute_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardEquipStrengthen.attribute_add)
  return attribute_add_.Get();
}
inline void ConfigCardEquipStrengthen::set_attribute_add(const ::std::string& value) {
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardEquipStrengthen.attribute_add)
}
#if LANG_CXX11
inline void ConfigCardEquipStrengthen::set_attribute_add(::std::string&& value) {
  set_has_attribute_add();
  attribute_add_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardEquipStrengthen.attribute_add)
}
#endif
inline void ConfigCardEquipStrengthen::set_attribute_add(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardEquipStrengthen.attribute_add)
}
inline void ConfigCardEquipStrengthen::set_attribute_add(const void* value,
    size_t size) {
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardEquipStrengthen.attribute_add)
}
inline ::std::string* ConfigCardEquipStrengthen::mutable_attribute_add() {
  set_has_attribute_add();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardEquipStrengthen.attribute_add)
  return attribute_add_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardEquipStrengthen::release_attribute_add() {
  // @@protoc_insertion_point(field_release:db.ConfigCardEquipStrengthen.attribute_add)
  if (!has_attribute_add()) {
    return NULL;
  }
  clear_has_attribute_add();
  return attribute_add_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardEquipStrengthen::set_allocated_attribute_add(::std::string* attribute_add) {
  if (attribute_add != NULL) {
    set_has_attribute_add();
  } else {
    clear_has_attribute_add();
  }
  attribute_add_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute_add,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardEquipStrengthen.attribute_add)
}
inline ::std::string* ConfigCardEquipStrengthen::unsafe_arena_release_attribute_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardEquipStrengthen.attribute_add)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attribute_add();
  return attribute_add_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardEquipStrengthen::unsafe_arena_set_allocated_attribute_add(
    ::std::string* attribute_add) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attribute_add != NULL) {
    set_has_attribute_add();
  } else {
    clear_has_attribute_add();
  }
  attribute_add_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attribute_add, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardEquipStrengthen.attribute_add)
}

// -------------------------------------------------------------------

// ConfigCardLevel

// required int32 level = 1;
inline bool ConfigCardLevel::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigCardLevel::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigCardLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigCardLevel::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigCardLevel::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardLevel.level)
  return level_;
}
inline void ConfigCardLevel::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardLevel.level)
}

// required int32 exp_max = 2;
inline bool ConfigCardLevel::has_exp_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigCardLevel::set_has_exp_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigCardLevel::clear_has_exp_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigCardLevel::clear_exp_max() {
  exp_max_ = 0;
  clear_has_exp_max();
}
inline ::google::protobuf::int32 ConfigCardLevel::exp_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardLevel.exp_max)
  return exp_max_;
}
inline void ConfigCardLevel::set_exp_max(::google::protobuf::int32 value) {
  set_has_exp_max();
  exp_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardLevel.exp_max)
}

// -------------------------------------------------------------------

// ConfigWanted

// required int32 id = 1;
inline bool ConfigWanted::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigWanted::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigWanted::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigWanted::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigWanted::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigWanted.id)
  return id_;
}
inline void ConfigWanted::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWanted.id)
}

// required int32 type = 2;
inline bool ConfigWanted::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigWanted::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigWanted::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigWanted::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigWanted::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigWanted.type)
  return type_;
}
inline void ConfigWanted::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWanted.type)
}

// required bytes content = 3;
inline bool ConfigWanted::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigWanted::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigWanted::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigWanted::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& ConfigWanted::content() const {
  // @@protoc_insertion_point(field_get:db.ConfigWanted.content)
  return content_.Get();
}
inline void ConfigWanted::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWanted.content)
}
#if LANG_CXX11
inline void ConfigWanted::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWanted.content)
}
#endif
inline void ConfigWanted::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWanted.content)
}
inline void ConfigWanted::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWanted.content)
}
inline ::std::string* ConfigWanted::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:db.ConfigWanted.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWanted::release_content() {
  // @@protoc_insertion_point(field_release:db.ConfigWanted.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWanted::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWanted.content)
}
inline ::std::string* ConfigWanted::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWanted.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWanted::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWanted.content)
}

// required bytes place = 4;
inline bool ConfigWanted::has_place() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigWanted::set_has_place() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigWanted::clear_has_place() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigWanted::clear_place() {
  place_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_place();
}
inline const ::std::string& ConfigWanted::place() const {
  // @@protoc_insertion_point(field_get:db.ConfigWanted.place)
  return place_.Get();
}
inline void ConfigWanted::set_place(const ::std::string& value) {
  set_has_place();
  place_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWanted.place)
}
#if LANG_CXX11
inline void ConfigWanted::set_place(::std::string&& value) {
  set_has_place();
  place_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWanted.place)
}
#endif
inline void ConfigWanted::set_place(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_place();
  place_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWanted.place)
}
inline void ConfigWanted::set_place(const void* value,
    size_t size) {
  set_has_place();
  place_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWanted.place)
}
inline ::std::string* ConfigWanted::mutable_place() {
  set_has_place();
  // @@protoc_insertion_point(field_mutable:db.ConfigWanted.place)
  return place_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWanted::release_place() {
  // @@protoc_insertion_point(field_release:db.ConfigWanted.place)
  if (!has_place()) {
    return NULL;
  }
  clear_has_place();
  return place_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWanted::set_allocated_place(::std::string* place) {
  if (place != NULL) {
    set_has_place();
  } else {
    clear_has_place();
  }
  place_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWanted.place)
}
inline ::std::string* ConfigWanted::unsafe_arena_release_place() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWanted.place)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_place();
  return place_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWanted::unsafe_arena_set_allocated_place(
    ::std::string* place) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (place != NULL) {
    set_has_place();
  } else {
    clear_has_place();
  }
  place_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      place, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWanted.place)
}

// required bytes event = 5;
inline bool ConfigWanted::has_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigWanted::set_has_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigWanted::clear_has_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigWanted::clear_event() {
  event_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_event();
}
inline const ::std::string& ConfigWanted::event() const {
  // @@protoc_insertion_point(field_get:db.ConfigWanted.event)
  return event_.Get();
}
inline void ConfigWanted::set_event(const ::std::string& value) {
  set_has_event();
  event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWanted.event)
}
#if LANG_CXX11
inline void ConfigWanted::set_event(::std::string&& value) {
  set_has_event();
  event_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWanted.event)
}
#endif
inline void ConfigWanted::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event();
  event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWanted.event)
}
inline void ConfigWanted::set_event(const void* value,
    size_t size) {
  set_has_event();
  event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWanted.event)
}
inline ::std::string* ConfigWanted::mutable_event() {
  set_has_event();
  // @@protoc_insertion_point(field_mutable:db.ConfigWanted.event)
  return event_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWanted::release_event() {
  // @@protoc_insertion_point(field_release:db.ConfigWanted.event)
  if (!has_event()) {
    return NULL;
  }
  clear_has_event();
  return event_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWanted::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    set_has_event();
  } else {
    clear_has_event();
  }
  event_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWanted.event)
}
inline ::std::string* ConfigWanted::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWanted.event)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_event();
  return event_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWanted::unsafe_arena_set_allocated_event(
    ::std::string* event) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (event != NULL) {
    set_has_event();
  } else {
    clear_has_event();
  }
  event_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      event, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWanted.event)
}

// required bytes reward = 6;
inline bool ConfigWanted::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigWanted::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigWanted::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigWanted::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigWanted::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigWanted.reward)
  return reward_.Get();
}
inline void ConfigWanted::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWanted.reward)
}
#if LANG_CXX11
inline void ConfigWanted::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWanted.reward)
}
#endif
inline void ConfigWanted::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWanted.reward)
}
inline void ConfigWanted::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWanted.reward)
}
inline ::std::string* ConfigWanted::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigWanted.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWanted::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigWanted.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWanted::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWanted.reward)
}
inline ::std::string* ConfigWanted::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWanted.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWanted::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWanted.reward)
}

// -------------------------------------------------------------------

// ConfigTask

// required int32 id = 1;
inline bool ConfigTask::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigTask::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigTask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigTask::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.id)
  return id_;
}
inline void ConfigTask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigTask.id)
}

// required bytes name = 2;
inline bool ConfigTask::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigTask::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigTask::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigTask::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigTask::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.name)
  return name_.Get();
}
inline void ConfigTask::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigTask.name)
}
#if LANG_CXX11
inline void ConfigTask::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigTask.name)
}
#endif
inline void ConfigTask::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigTask.name)
}
inline void ConfigTask::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigTask.name)
}
inline ::std::string* ConfigTask::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigTask.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigTask::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigTask.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigTask::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigTask.name)
}
inline ::std::string* ConfigTask::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigTask.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigTask::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigTask.name)
}

// required int32 type = 3;
inline bool ConfigTask::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigTask::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigTask::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigTask::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigTask::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.type)
  return type_;
}
inline void ConfigTask::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigTask.type)
}

// required int32 need_level = 4;
inline bool ConfigTask::has_need_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigTask::set_has_need_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigTask::clear_has_need_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigTask::clear_need_level() {
  need_level_ = 0;
  clear_has_need_level();
}
inline ::google::protobuf::int32 ConfigTask::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.need_level)
  return need_level_;
}
inline void ConfigTask::set_need_level(::google::protobuf::int32 value) {
  set_has_need_level();
  need_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigTask.need_level)
}

// required int32 pre_task = 5;
inline bool ConfigTask::has_pre_task() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigTask::set_has_pre_task() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigTask::clear_has_pre_task() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigTask::clear_pre_task() {
  pre_task_ = 0;
  clear_has_pre_task();
}
inline ::google::protobuf::int32 ConfigTask::pre_task() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.pre_task)
  return pre_task_;
}
inline void ConfigTask::set_pre_task(::google::protobuf::int32 value) {
  set_has_pre_task();
  pre_task_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigTask.pre_task)
}

// required bytes npc_state = 8;
inline bool ConfigTask::has_npc_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigTask::set_has_npc_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigTask::clear_has_npc_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigTask::clear_npc_state() {
  npc_state_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_npc_state();
}
inline const ::std::string& ConfigTask::npc_state() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.npc_state)
  return npc_state_.Get();
}
inline void ConfigTask::set_npc_state(const ::std::string& value) {
  set_has_npc_state();
  npc_state_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigTask.npc_state)
}
#if LANG_CXX11
inline void ConfigTask::set_npc_state(::std::string&& value) {
  set_has_npc_state();
  npc_state_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigTask.npc_state)
}
#endif
inline void ConfigTask::set_npc_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_npc_state();
  npc_state_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigTask.npc_state)
}
inline void ConfigTask::set_npc_state(const void* value,
    size_t size) {
  set_has_npc_state();
  npc_state_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigTask.npc_state)
}
inline ::std::string* ConfigTask::mutable_npc_state() {
  set_has_npc_state();
  // @@protoc_insertion_point(field_mutable:db.ConfigTask.npc_state)
  return npc_state_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigTask::release_npc_state() {
  // @@protoc_insertion_point(field_release:db.ConfigTask.npc_state)
  if (!has_npc_state()) {
    return NULL;
  }
  clear_has_npc_state();
  return npc_state_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigTask::set_allocated_npc_state(::std::string* npc_state) {
  if (npc_state != NULL) {
    set_has_npc_state();
  } else {
    clear_has_npc_state();
  }
  npc_state_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), npc_state,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigTask.npc_state)
}
inline ::std::string* ConfigTask::unsafe_arena_release_npc_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigTask.npc_state)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_npc_state();
  return npc_state_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigTask::unsafe_arena_set_allocated_npc_state(
    ::std::string* npc_state) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (npc_state != NULL) {
    set_has_npc_state();
  } else {
    clear_has_npc_state();
  }
  npc_state_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      npc_state, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigTask.npc_state)
}

// required bytes reward = 9;
inline bool ConfigTask::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigTask::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigTask::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigTask::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigTask::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.reward)
  return reward_.Get();
}
inline void ConfigTask::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigTask.reward)
}
#if LANG_CXX11
inline void ConfigTask::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigTask.reward)
}
#endif
inline void ConfigTask::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigTask.reward)
}
inline void ConfigTask::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigTask.reward)
}
inline ::std::string* ConfigTask::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigTask.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigTask::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigTask.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigTask::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigTask.reward)
}
inline ::std::string* ConfigTask::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigTask.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigTask::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigTask.reward)
}

// required int32 add_exp = 10;
inline bool ConfigTask::has_add_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigTask::set_has_add_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigTask::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigTask::clear_add_exp() {
  add_exp_ = 0;
  clear_has_add_exp();
}
inline ::google::protobuf::int32 ConfigTask::add_exp() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.add_exp)
  return add_exp_;
}
inline void ConfigTask::set_add_exp(::google::protobuf::int32 value) {
  set_has_add_exp();
  add_exp_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigTask.add_exp)
}

// required bytes harbor_flush = 11;
inline bool ConfigTask::has_harbor_flush() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigTask::set_has_harbor_flush() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigTask::clear_has_harbor_flush() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigTask::clear_harbor_flush() {
  harbor_flush_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_harbor_flush();
}
inline const ::std::string& ConfigTask::harbor_flush() const {
  // @@protoc_insertion_point(field_get:db.ConfigTask.harbor_flush)
  return harbor_flush_.Get();
}
inline void ConfigTask::set_harbor_flush(const ::std::string& value) {
  set_has_harbor_flush();
  harbor_flush_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigTask.harbor_flush)
}
#if LANG_CXX11
inline void ConfigTask::set_harbor_flush(::std::string&& value) {
  set_has_harbor_flush();
  harbor_flush_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigTask.harbor_flush)
}
#endif
inline void ConfigTask::set_harbor_flush(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_harbor_flush();
  harbor_flush_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigTask.harbor_flush)
}
inline void ConfigTask::set_harbor_flush(const void* value,
    size_t size) {
  set_has_harbor_flush();
  harbor_flush_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigTask.harbor_flush)
}
inline ::std::string* ConfigTask::mutable_harbor_flush() {
  set_has_harbor_flush();
  // @@protoc_insertion_point(field_mutable:db.ConfigTask.harbor_flush)
  return harbor_flush_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigTask::release_harbor_flush() {
  // @@protoc_insertion_point(field_release:db.ConfigTask.harbor_flush)
  if (!has_harbor_flush()) {
    return NULL;
  }
  clear_has_harbor_flush();
  return harbor_flush_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigTask::set_allocated_harbor_flush(::std::string* harbor_flush) {
  if (harbor_flush != NULL) {
    set_has_harbor_flush();
  } else {
    clear_has_harbor_flush();
  }
  harbor_flush_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), harbor_flush,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigTask.harbor_flush)
}
inline ::std::string* ConfigTask::unsafe_arena_release_harbor_flush() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigTask.harbor_flush)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_harbor_flush();
  return harbor_flush_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigTask::unsafe_arena_set_allocated_harbor_flush(
    ::std::string* harbor_flush) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (harbor_flush != NULL) {
    set_has_harbor_flush();
  } else {
    clear_has_harbor_flush();
  }
  harbor_flush_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      harbor_flush, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigTask.harbor_flush)
}

// -------------------------------------------------------------------

// ConfigTaskStep

// required int32 taskid = 1;
inline bool ConfigTaskStep::has_taskid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigTaskStep::set_has_taskid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigTaskStep::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigTaskStep::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 ConfigTaskStep::taskid() const {
  // @@protoc_insertion_point(field_get:db.ConfigTaskStep.taskid)
  return taskid_;
}
inline void ConfigTaskStep::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigTaskStep.taskid)
}

// required int32 step = 2;
inline bool ConfigTaskStep::has_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigTaskStep::set_has_step() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigTaskStep::clear_has_step() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigTaskStep::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 ConfigTaskStep::step() const {
  // @@protoc_insertion_point(field_get:db.ConfigTaskStep.step)
  return step_;
}
inline void ConfigTaskStep::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigTaskStep.step)
}

// required bytes npc_state = 3;
inline bool ConfigTaskStep::has_npc_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigTaskStep::set_has_npc_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigTaskStep::clear_has_npc_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigTaskStep::clear_npc_state() {
  npc_state_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_npc_state();
}
inline const ::std::string& ConfigTaskStep::npc_state() const {
  // @@protoc_insertion_point(field_get:db.ConfigTaskStep.npc_state)
  return npc_state_.Get();
}
inline void ConfigTaskStep::set_npc_state(const ::std::string& value) {
  set_has_npc_state();
  npc_state_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigTaskStep.npc_state)
}
#if LANG_CXX11
inline void ConfigTaskStep::set_npc_state(::std::string&& value) {
  set_has_npc_state();
  npc_state_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigTaskStep.npc_state)
}
#endif
inline void ConfigTaskStep::set_npc_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_npc_state();
  npc_state_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigTaskStep.npc_state)
}
inline void ConfigTaskStep::set_npc_state(const void* value,
    size_t size) {
  set_has_npc_state();
  npc_state_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigTaskStep.npc_state)
}
inline ::std::string* ConfigTaskStep::mutable_npc_state() {
  set_has_npc_state();
  // @@protoc_insertion_point(field_mutable:db.ConfigTaskStep.npc_state)
  return npc_state_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigTaskStep::release_npc_state() {
  // @@protoc_insertion_point(field_release:db.ConfigTaskStep.npc_state)
  if (!has_npc_state()) {
    return NULL;
  }
  clear_has_npc_state();
  return npc_state_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigTaskStep::set_allocated_npc_state(::std::string* npc_state) {
  if (npc_state != NULL) {
    set_has_npc_state();
  } else {
    clear_has_npc_state();
  }
  npc_state_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), npc_state,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigTaskStep.npc_state)
}
inline ::std::string* ConfigTaskStep::unsafe_arena_release_npc_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigTaskStep.npc_state)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_npc_state();
  return npc_state_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigTaskStep::unsafe_arena_set_allocated_npc_state(
    ::std::string* npc_state) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (npc_state != NULL) {
    set_has_npc_state();
  } else {
    clear_has_npc_state();
  }
  npc_state_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      npc_state, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigTaskStep.npc_state)
}

// required bytes content = 4;
inline bool ConfigTaskStep::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigTaskStep::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigTaskStep::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigTaskStep::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& ConfigTaskStep::content() const {
  // @@protoc_insertion_point(field_get:db.ConfigTaskStep.content)
  return content_.Get();
}
inline void ConfigTaskStep::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigTaskStep.content)
}
#if LANG_CXX11
inline void ConfigTaskStep::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigTaskStep.content)
}
#endif
inline void ConfigTaskStep::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigTaskStep.content)
}
inline void ConfigTaskStep::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigTaskStep.content)
}
inline ::std::string* ConfigTaskStep::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:db.ConfigTaskStep.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigTaskStep::release_content() {
  // @@protoc_insertion_point(field_release:db.ConfigTaskStep.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigTaskStep::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigTaskStep.content)
}
inline ::std::string* ConfigTaskStep::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigTaskStep.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigTaskStep::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigTaskStep.content)
}

// required bytes harbor_flush = 5;
inline bool ConfigTaskStep::has_harbor_flush() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigTaskStep::set_has_harbor_flush() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigTaskStep::clear_has_harbor_flush() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigTaskStep::clear_harbor_flush() {
  harbor_flush_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_harbor_flush();
}
inline const ::std::string& ConfigTaskStep::harbor_flush() const {
  // @@protoc_insertion_point(field_get:db.ConfigTaskStep.harbor_flush)
  return harbor_flush_.Get();
}
inline void ConfigTaskStep::set_harbor_flush(const ::std::string& value) {
  set_has_harbor_flush();
  harbor_flush_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigTaskStep.harbor_flush)
}
#if LANG_CXX11
inline void ConfigTaskStep::set_harbor_flush(::std::string&& value) {
  set_has_harbor_flush();
  harbor_flush_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigTaskStep.harbor_flush)
}
#endif
inline void ConfigTaskStep::set_harbor_flush(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_harbor_flush();
  harbor_flush_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigTaskStep.harbor_flush)
}
inline void ConfigTaskStep::set_harbor_flush(const void* value,
    size_t size) {
  set_has_harbor_flush();
  harbor_flush_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigTaskStep.harbor_flush)
}
inline ::std::string* ConfigTaskStep::mutable_harbor_flush() {
  set_has_harbor_flush();
  // @@protoc_insertion_point(field_mutable:db.ConfigTaskStep.harbor_flush)
  return harbor_flush_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigTaskStep::release_harbor_flush() {
  // @@protoc_insertion_point(field_release:db.ConfigTaskStep.harbor_flush)
  if (!has_harbor_flush()) {
    return NULL;
  }
  clear_has_harbor_flush();
  return harbor_flush_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigTaskStep::set_allocated_harbor_flush(::std::string* harbor_flush) {
  if (harbor_flush != NULL) {
    set_has_harbor_flush();
  } else {
    clear_has_harbor_flush();
  }
  harbor_flush_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), harbor_flush,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigTaskStep.harbor_flush)
}
inline ::std::string* ConfigTaskStep::unsafe_arena_release_harbor_flush() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigTaskStep.harbor_flush)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_harbor_flush();
  return harbor_flush_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigTaskStep::unsafe_arena_set_allocated_harbor_flush(
    ::std::string* harbor_flush) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (harbor_flush != NULL) {
    set_has_harbor_flush();
  } else {
    clear_has_harbor_flush();
  }
  harbor_flush_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      harbor_flush, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigTaskStep.harbor_flush)
}

// required bytes ship_event = 6;
inline bool ConfigTaskStep::has_ship_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigTaskStep::set_has_ship_event() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigTaskStep::clear_has_ship_event() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigTaskStep::clear_ship_event() {
  ship_event_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ship_event();
}
inline const ::std::string& ConfigTaskStep::ship_event() const {
  // @@protoc_insertion_point(field_get:db.ConfigTaskStep.ship_event)
  return ship_event_.Get();
}
inline void ConfigTaskStep::set_ship_event(const ::std::string& value) {
  set_has_ship_event();
  ship_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigTaskStep.ship_event)
}
#if LANG_CXX11
inline void ConfigTaskStep::set_ship_event(::std::string&& value) {
  set_has_ship_event();
  ship_event_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigTaskStep.ship_event)
}
#endif
inline void ConfigTaskStep::set_ship_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ship_event();
  ship_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigTaskStep.ship_event)
}
inline void ConfigTaskStep::set_ship_event(const void* value,
    size_t size) {
  set_has_ship_event();
  ship_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigTaskStep.ship_event)
}
inline ::std::string* ConfigTaskStep::mutable_ship_event() {
  set_has_ship_event();
  // @@protoc_insertion_point(field_mutable:db.ConfigTaskStep.ship_event)
  return ship_event_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigTaskStep::release_ship_event() {
  // @@protoc_insertion_point(field_release:db.ConfigTaskStep.ship_event)
  if (!has_ship_event()) {
    return NULL;
  }
  clear_has_ship_event();
  return ship_event_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigTaskStep::set_allocated_ship_event(::std::string* ship_event) {
  if (ship_event != NULL) {
    set_has_ship_event();
  } else {
    clear_has_ship_event();
  }
  ship_event_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ship_event,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigTaskStep.ship_event)
}
inline ::std::string* ConfigTaskStep::unsafe_arena_release_ship_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigTaskStep.ship_event)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ship_event();
  return ship_event_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigTaskStep::unsafe_arena_set_allocated_ship_event(
    ::std::string* ship_event) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ship_event != NULL) {
    set_has_ship_event();
  } else {
    clear_has_ship_event();
  }
  ship_event_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ship_event, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigTaskStep.ship_event)
}

// -------------------------------------------------------------------

// ConfigNpc

// required int32 id = 1;
inline bool ConfigNpc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigNpc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigNpc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigNpc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigNpc::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpc.id)
  return id_;
}
inline void ConfigNpc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNpc.id)
}

// required int32 type = 2;
inline bool ConfigNpc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigNpc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigNpc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigNpc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigNpc::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpc.type)
  return type_;
}
inline void ConfigNpc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNpc.type)
}

// required int32 state = 3;
inline bool ConfigNpc::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigNpc::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigNpc::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigNpc::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ConfigNpc::state() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpc.state)
  return state_;
}
inline void ConfigNpc::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNpc.state)
}

// required int32 place = 4;
inline bool ConfigNpc::has_place() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigNpc::set_has_place() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigNpc::clear_has_place() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigNpc::clear_place() {
  place_ = 0;
  clear_has_place();
}
inline ::google::protobuf::int32 ConfigNpc::place() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpc.place)
  return place_;
}
inline void ConfigNpc::set_place(::google::protobuf::int32 value) {
  set_has_place();
  place_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNpc.place)
}

// required int32 pos_type = 5;
inline bool ConfigNpc::has_pos_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigNpc::set_has_pos_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigNpc::clear_has_pos_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigNpc::clear_pos_type() {
  pos_type_ = 0;
  clear_has_pos_type();
}
inline ::google::protobuf::int32 ConfigNpc::pos_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpc.pos_type)
  return pos_type_;
}
inline void ConfigNpc::set_pos_type(::google::protobuf::int32 value) {
  set_has_pos_type();
  pos_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNpc.pos_type)
}

// required bytes pos = 6;
inline bool ConfigNpc::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigNpc::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigNpc::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigNpc::clear_pos() {
  pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pos();
}
inline const ::std::string& ConfigNpc::pos() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpc.pos)
  return pos_.Get();
}
inline void ConfigNpc::set_pos(const ::std::string& value) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigNpc.pos)
}
#if LANG_CXX11
inline void ConfigNpc::set_pos(::std::string&& value) {
  set_has_pos();
  pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigNpc.pos)
}
#endif
inline void ConfigNpc::set_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigNpc.pos)
}
inline void ConfigNpc::set_pos(const void* value,
    size_t size) {
  set_has_pos();
  pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigNpc.pos)
}
inline ::std::string* ConfigNpc::mutable_pos() {
  set_has_pos();
  // @@protoc_insertion_point(field_mutable:db.ConfigNpc.pos)
  return pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigNpc::release_pos() {
  // @@protoc_insertion_point(field_release:db.ConfigNpc.pos)
  if (!has_pos()) {
    return NULL;
  }
  clear_has_pos();
  return pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigNpc::set_allocated_pos(::std::string* pos) {
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigNpc.pos)
}
inline ::std::string* ConfigNpc::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigNpc.pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pos();
  return pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigNpc::unsafe_arena_set_allocated_pos(
    ::std::string* pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pos != NULL) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigNpc.pos)
}

// -------------------------------------------------------------------

// ConfigAchievement

// required int32 id = 1;
inline bool ConfigAchievement::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigAchievement::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigAchievement::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigAchievement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigAchievement::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.id)
  return id_;
}
inline void ConfigAchievement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.id)
}

// required int32 phase = 2;
inline bool ConfigAchievement::has_phase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigAchievement::set_has_phase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigAchievement::clear_has_phase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigAchievement::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 ConfigAchievement::phase() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.phase)
  return phase_;
}
inline void ConfigAchievement::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.phase)
}

// required int32 type = 3;
inline bool ConfigAchievement::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigAchievement::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigAchievement::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigAchievement::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigAchievement::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.type)
  return type_;
}
inline void ConfigAchievement::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.type)
}

// required int32 action = 4;
inline bool ConfigAchievement::has_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigAchievement::set_has_action() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigAchievement::clear_has_action() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigAchievement::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 ConfigAchievement::action() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.action)
  return action_;
}
inline void ConfigAchievement::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.action)
}

// required int32 target = 5;
inline bool ConfigAchievement::has_target() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigAchievement::set_has_target() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigAchievement::clear_has_target() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigAchievement::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 ConfigAchievement::target() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.target)
  return target_;
}
inline void ConfigAchievement::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.target)
}

// required int32 param = 6;
inline bool ConfigAchievement::has_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigAchievement::set_has_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigAchievement::clear_has_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigAchievement::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 ConfigAchievement::param() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.param)
  return param_;
}
inline void ConfigAchievement::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.param)
}

// required int32 require = 7;
inline bool ConfigAchievement::has_require() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigAchievement::set_has_require() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigAchievement::clear_has_require() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigAchievement::clear_require() {
  require_ = 0;
  clear_has_require();
}
inline ::google::protobuf::int32 ConfigAchievement::require() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.require)
  return require_;
}
inline void ConfigAchievement::set_require(::google::protobuf::int32 value) {
  set_has_require();
  require_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.require)
}

// required int32 get_point = 8;
inline bool ConfigAchievement::has_get_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigAchievement::set_has_get_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigAchievement::clear_has_get_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigAchievement::clear_get_point() {
  get_point_ = 0;
  clear_has_get_point();
}
inline ::google::protobuf::int32 ConfigAchievement::get_point() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.get_point)
  return get_point_;
}
inline void ConfigAchievement::set_get_point(::google::protobuf::int32 value) {
  set_has_get_point();
  get_point_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.get_point)
}

// required bytes reward = 9;
inline bool ConfigAchievement::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigAchievement::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigAchievement::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigAchievement::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigAchievement::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievement.reward)
  return reward_.Get();
}
inline void ConfigAchievement::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigAchievement.reward)
}
#if LANG_CXX11
inline void ConfigAchievement::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigAchievement.reward)
}
#endif
inline void ConfigAchievement::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigAchievement.reward)
}
inline void ConfigAchievement::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigAchievement.reward)
}
inline ::std::string* ConfigAchievement::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigAchievement.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigAchievement::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigAchievement.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigAchievement::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigAchievement.reward)
}
inline ::std::string* ConfigAchievement::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigAchievement.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigAchievement::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigAchievement.reward)
}

// -------------------------------------------------------------------

// ConfigAchievementTask

// required int32 id = 1;
inline bool ConfigAchievementTask::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigAchievementTask::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigAchievementTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigAchievementTask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigAchievementTask::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievementTask.id)
  return id_;
}
inline void ConfigAchievementTask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievementTask.id)
}

// required int32 dungeon_id = 2;
inline bool ConfigAchievementTask::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigAchievementTask::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigAchievementTask::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigAchievementTask::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 ConfigAchievementTask::dungeon_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievementTask.dungeon_id)
  return dungeon_id_;
}
inline void ConfigAchievementTask::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievementTask.dungeon_id)
}

// required int32 require = 3;
inline bool ConfigAchievementTask::has_require() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigAchievementTask::set_has_require() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigAchievementTask::clear_has_require() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigAchievementTask::clear_require() {
  require_ = 0;
  clear_has_require();
}
inline ::google::protobuf::int32 ConfigAchievementTask::require() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievementTask.require)
  return require_;
}
inline void ConfigAchievementTask::set_require(::google::protobuf::int32 value) {
  set_has_require();
  require_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigAchievementTask.require)
}

// required bytes reward = 4;
inline bool ConfigAchievementTask::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigAchievementTask::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigAchievementTask::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigAchievementTask::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigAchievementTask::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigAchievementTask.reward)
  return reward_.Get();
}
inline void ConfigAchievementTask::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigAchievementTask.reward)
}
#if LANG_CXX11
inline void ConfigAchievementTask::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigAchievementTask.reward)
}
#endif
inline void ConfigAchievementTask::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigAchievementTask.reward)
}
inline void ConfigAchievementTask::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigAchievementTask.reward)
}
inline ::std::string* ConfigAchievementTask::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigAchievementTask.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigAchievementTask::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigAchievementTask.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigAchievementTask::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigAchievementTask.reward)
}
inline ::std::string* ConfigAchievementTask::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigAchievementTask.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigAchievementTask::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigAchievementTask.reward)
}

// -------------------------------------------------------------------

// ConfigSystemTask

// required int32 id = 1;
inline bool ConfigSystemTask::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigSystemTask::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigSystemTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigSystemTask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigSystemTask::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.id)
  return id_;
}
inline void ConfigSystemTask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.id)
}

// required int32 type = 2;
inline bool ConfigSystemTask::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigSystemTask::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigSystemTask::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigSystemTask::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigSystemTask::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.type)
  return type_;
}
inline void ConfigSystemTask::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.type)
}

// required int32 condition_type = 3;
inline bool ConfigSystemTask::has_condition_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigSystemTask::set_has_condition_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigSystemTask::clear_has_condition_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigSystemTask::clear_condition_type() {
  condition_type_ = 0;
  clear_has_condition_type();
}
inline ::google::protobuf::int32 ConfigSystemTask::condition_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.condition_type)
  return condition_type_;
}
inline void ConfigSystemTask::set_condition_type(::google::protobuf::int32 value) {
  set_has_condition_type();
  condition_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.condition_type)
}

// required bytes condition = 4;
inline bool ConfigSystemTask::has_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigSystemTask::set_has_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigSystemTask::clear_has_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigSystemTask::clear_condition() {
  condition_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_condition();
}
inline const ::std::string& ConfigSystemTask::condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.condition)
  return condition_.Get();
}
inline void ConfigSystemTask::set_condition(const ::std::string& value) {
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.condition)
}
#if LANG_CXX11
inline void ConfigSystemTask::set_condition(::std::string&& value) {
  set_has_condition();
  condition_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSystemTask.condition)
}
#endif
inline void ConfigSystemTask::set_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSystemTask.condition)
}
inline void ConfigSystemTask::set_condition(const void* value,
    size_t size) {
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSystemTask.condition)
}
inline ::std::string* ConfigSystemTask::mutable_condition() {
  set_has_condition();
  // @@protoc_insertion_point(field_mutable:db.ConfigSystemTask.condition)
  return condition_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSystemTask::release_condition() {
  // @@protoc_insertion_point(field_release:db.ConfigSystemTask.condition)
  if (!has_condition()) {
    return NULL;
  }
  clear_has_condition();
  return condition_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSystemTask::set_allocated_condition(::std::string* condition) {
  if (condition != NULL) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  condition_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSystemTask.condition)
}
inline ::std::string* ConfigSystemTask::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSystemTask.condition)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_condition();
  return condition_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSystemTask::unsafe_arena_set_allocated_condition(
    ::std::string* condition) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (condition != NULL) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  condition_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      condition, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSystemTask.condition)
}

// required int32 require = 5;
inline bool ConfigSystemTask::has_require() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigSystemTask::set_has_require() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigSystemTask::clear_has_require() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigSystemTask::clear_require() {
  require_ = 0;
  clear_has_require();
}
inline ::google::protobuf::int32 ConfigSystemTask::require() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.require)
  return require_;
}
inline void ConfigSystemTask::set_require(::google::protobuf::int32 value) {
  set_has_require();
  require_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.require)
}

// required bytes reward = 6;
inline bool ConfigSystemTask::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigSystemTask::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigSystemTask::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigSystemTask::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigSystemTask::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.reward)
  return reward_.Get();
}
inline void ConfigSystemTask::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.reward)
}
#if LANG_CXX11
inline void ConfigSystemTask::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSystemTask.reward)
}
#endif
inline void ConfigSystemTask::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSystemTask.reward)
}
inline void ConfigSystemTask::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSystemTask.reward)
}
inline ::std::string* ConfigSystemTask::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigSystemTask.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSystemTask::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigSystemTask.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSystemTask::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSystemTask.reward)
}
inline ::std::string* ConfigSystemTask::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSystemTask.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSystemTask::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSystemTask.reward)
}

// required int32 exp = 7;
inline bool ConfigSystemTask::has_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigSystemTask::set_has_exp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigSystemTask::clear_has_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigSystemTask::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 ConfigSystemTask::exp() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.exp)
  return exp_;
}
inline void ConfigSystemTask::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.exp)
}

// required bytes refresh_date_weekly = 8;
inline bool ConfigSystemTask::has_refresh_date_weekly() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigSystemTask::set_has_refresh_date_weekly() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigSystemTask::clear_has_refresh_date_weekly() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigSystemTask::clear_refresh_date_weekly() {
  refresh_date_weekly_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_refresh_date_weekly();
}
inline const ::std::string& ConfigSystemTask::refresh_date_weekly() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.refresh_date_weekly)
  return refresh_date_weekly_.Get();
}
inline void ConfigSystemTask::set_refresh_date_weekly(const ::std::string& value) {
  set_has_refresh_date_weekly();
  refresh_date_weekly_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.refresh_date_weekly)
}
#if LANG_CXX11
inline void ConfigSystemTask::set_refresh_date_weekly(::std::string&& value) {
  set_has_refresh_date_weekly();
  refresh_date_weekly_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSystemTask.refresh_date_weekly)
}
#endif
inline void ConfigSystemTask::set_refresh_date_weekly(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_refresh_date_weekly();
  refresh_date_weekly_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSystemTask.refresh_date_weekly)
}
inline void ConfigSystemTask::set_refresh_date_weekly(const void* value,
    size_t size) {
  set_has_refresh_date_weekly();
  refresh_date_weekly_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSystemTask.refresh_date_weekly)
}
inline ::std::string* ConfigSystemTask::mutable_refresh_date_weekly() {
  set_has_refresh_date_weekly();
  // @@protoc_insertion_point(field_mutable:db.ConfigSystemTask.refresh_date_weekly)
  return refresh_date_weekly_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSystemTask::release_refresh_date_weekly() {
  // @@protoc_insertion_point(field_release:db.ConfigSystemTask.refresh_date_weekly)
  if (!has_refresh_date_weekly()) {
    return NULL;
  }
  clear_has_refresh_date_weekly();
  return refresh_date_weekly_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSystemTask::set_allocated_refresh_date_weekly(::std::string* refresh_date_weekly) {
  if (refresh_date_weekly != NULL) {
    set_has_refresh_date_weekly();
  } else {
    clear_has_refresh_date_weekly();
  }
  refresh_date_weekly_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refresh_date_weekly,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSystemTask.refresh_date_weekly)
}
inline ::std::string* ConfigSystemTask::unsafe_arena_release_refresh_date_weekly() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSystemTask.refresh_date_weekly)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_refresh_date_weekly();
  return refresh_date_weekly_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSystemTask::unsafe_arena_set_allocated_refresh_date_weekly(
    ::std::string* refresh_date_weekly) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (refresh_date_weekly != NULL) {
    set_has_refresh_date_weekly();
  } else {
    clear_has_refresh_date_weekly();
  }
  refresh_date_weekly_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      refresh_date_weekly, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSystemTask.refresh_date_weekly)
}

// required bytes need_level = 9;
inline bool ConfigSystemTask::has_need_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigSystemTask::set_has_need_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigSystemTask::clear_has_need_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigSystemTask::clear_need_level() {
  need_level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_need_level();
}
inline const ::std::string& ConfigSystemTask::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.need_level)
  return need_level_.Get();
}
inline void ConfigSystemTask::set_need_level(const ::std::string& value) {
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.need_level)
}
#if LANG_CXX11
inline void ConfigSystemTask::set_need_level(::std::string&& value) {
  set_has_need_level();
  need_level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSystemTask.need_level)
}
#endif
inline void ConfigSystemTask::set_need_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSystemTask.need_level)
}
inline void ConfigSystemTask::set_need_level(const void* value,
    size_t size) {
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSystemTask.need_level)
}
inline ::std::string* ConfigSystemTask::mutable_need_level() {
  set_has_need_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigSystemTask.need_level)
  return need_level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSystemTask::release_need_level() {
  // @@protoc_insertion_point(field_release:db.ConfigSystemTask.need_level)
  if (!has_need_level()) {
    return NULL;
  }
  clear_has_need_level();
  return need_level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSystemTask::set_allocated_need_level(::std::string* need_level) {
  if (need_level != NULL) {
    set_has_need_level();
  } else {
    clear_has_need_level();
  }
  need_level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), need_level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSystemTask.need_level)
}
inline ::std::string* ConfigSystemTask::unsafe_arena_release_need_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSystemTask.need_level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_need_level();
  return need_level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSystemTask::unsafe_arena_set_allocated_need_level(
    ::std::string* need_level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (need_level != NULL) {
    set_has_need_level();
  } else {
    clear_has_need_level();
  }
  need_level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      need_level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSystemTask.need_level)
}

// required bytes pre_task = 10;
inline bool ConfigSystemTask::has_pre_task() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigSystemTask::set_has_pre_task() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigSystemTask::clear_has_pre_task() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigSystemTask::clear_pre_task() {
  pre_task_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pre_task();
}
inline const ::std::string& ConfigSystemTask::pre_task() const {
  // @@protoc_insertion_point(field_get:db.ConfigSystemTask.pre_task)
  return pre_task_.Get();
}
inline void ConfigSystemTask::set_pre_task(const ::std::string& value) {
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSystemTask.pre_task)
}
#if LANG_CXX11
inline void ConfigSystemTask::set_pre_task(::std::string&& value) {
  set_has_pre_task();
  pre_task_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSystemTask.pre_task)
}
#endif
inline void ConfigSystemTask::set_pre_task(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSystemTask.pre_task)
}
inline void ConfigSystemTask::set_pre_task(const void* value,
    size_t size) {
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSystemTask.pre_task)
}
inline ::std::string* ConfigSystemTask::mutable_pre_task() {
  set_has_pre_task();
  // @@protoc_insertion_point(field_mutable:db.ConfigSystemTask.pre_task)
  return pre_task_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSystemTask::release_pre_task() {
  // @@protoc_insertion_point(field_release:db.ConfigSystemTask.pre_task)
  if (!has_pre_task()) {
    return NULL;
  }
  clear_has_pre_task();
  return pre_task_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSystemTask::set_allocated_pre_task(::std::string* pre_task) {
  if (pre_task != NULL) {
    set_has_pre_task();
  } else {
    clear_has_pre_task();
  }
  pre_task_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pre_task,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSystemTask.pre_task)
}
inline ::std::string* ConfigSystemTask::unsafe_arena_release_pre_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSystemTask.pre_task)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pre_task();
  return pre_task_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSystemTask::unsafe_arena_set_allocated_pre_task(
    ::std::string* pre_task) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pre_task != NULL) {
    set_has_pre_task();
  } else {
    clear_has_pre_task();
  }
  pre_task_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pre_task, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSystemTask.pre_task)
}

// -------------------------------------------------------------------

// ConfigRandomGift

// required int32 id = 1;
inline bool ConfigRandomGift::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigRandomGift::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigRandomGift::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigRandomGift::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigRandomGift::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigRandomGift.id)
  return id_;
}
inline void ConfigRandomGift::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRandomGift.id)
}

// required int32 type = 2;
inline bool ConfigRandomGift::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigRandomGift::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigRandomGift::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigRandomGift::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigRandomGift::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigRandomGift.type)
  return type_;
}
inline void ConfigRandomGift::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRandomGift.type)
}

// required int32 probability = 3;
inline bool ConfigRandomGift::has_probability() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigRandomGift::set_has_probability() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigRandomGift::clear_has_probability() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigRandomGift::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline ::google::protobuf::int32 ConfigRandomGift::probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigRandomGift.probability)
  return probability_;
}
inline void ConfigRandomGift::set_probability(::google::protobuf::int32 value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRandomGift.probability)
}

// required bytes price = 4;
inline bool ConfigRandomGift::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRandomGift::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRandomGift::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRandomGift::clear_price() {
  price_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_price();
}
inline const ::std::string& ConfigRandomGift::price() const {
  // @@protoc_insertion_point(field_get:db.ConfigRandomGift.price)
  return price_.Get();
}
inline void ConfigRandomGift::set_price(const ::std::string& value) {
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRandomGift.price)
}
#if LANG_CXX11
inline void ConfigRandomGift::set_price(::std::string&& value) {
  set_has_price();
  price_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRandomGift.price)
}
#endif
inline void ConfigRandomGift::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRandomGift.price)
}
inline void ConfigRandomGift::set_price(const void* value,
    size_t size) {
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRandomGift.price)
}
inline ::std::string* ConfigRandomGift::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:db.ConfigRandomGift.price)
  return price_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRandomGift::release_price() {
  // @@protoc_insertion_point(field_release:db.ConfigRandomGift.price)
  if (!has_price()) {
    return NULL;
  }
  clear_has_price();
  return price_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRandomGift::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRandomGift.price)
}
inline ::std::string* ConfigRandomGift::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRandomGift.price)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_price();
  return price_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRandomGift::unsafe_arena_set_allocated_price(
    ::std::string* price) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      price, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRandomGift.price)
}

// required bytes goods = 5;
inline bool ConfigRandomGift::has_goods() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRandomGift::set_has_goods() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRandomGift::clear_has_goods() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRandomGift::clear_goods() {
  goods_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_goods();
}
inline const ::std::string& ConfigRandomGift::goods() const {
  // @@protoc_insertion_point(field_get:db.ConfigRandomGift.goods)
  return goods_.Get();
}
inline void ConfigRandomGift::set_goods(const ::std::string& value) {
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRandomGift.goods)
}
#if LANG_CXX11
inline void ConfigRandomGift::set_goods(::std::string&& value) {
  set_has_goods();
  goods_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRandomGift.goods)
}
#endif
inline void ConfigRandomGift::set_goods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRandomGift.goods)
}
inline void ConfigRandomGift::set_goods(const void* value,
    size_t size) {
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRandomGift.goods)
}
inline ::std::string* ConfigRandomGift::mutable_goods() {
  set_has_goods();
  // @@protoc_insertion_point(field_mutable:db.ConfigRandomGift.goods)
  return goods_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRandomGift::release_goods() {
  // @@protoc_insertion_point(field_release:db.ConfigRandomGift.goods)
  if (!has_goods()) {
    return NULL;
  }
  clear_has_goods();
  return goods_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRandomGift::set_allocated_goods(::std::string* goods) {
  if (goods != NULL) {
    set_has_goods();
  } else {
    clear_has_goods();
  }
  goods_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goods,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRandomGift.goods)
}
inline ::std::string* ConfigRandomGift::unsafe_arena_release_goods() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRandomGift.goods)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_goods();
  return goods_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRandomGift::unsafe_arena_set_allocated_goods(
    ::std::string* goods) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (goods != NULL) {
    set_has_goods();
  } else {
    clear_has_goods();
  }
  goods_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      goods, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRandomGift.goods)
}

// required int32 limit_num = 6;
inline bool ConfigRandomGift::has_limit_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigRandomGift::set_has_limit_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigRandomGift::clear_has_limit_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigRandomGift::clear_limit_num() {
  limit_num_ = 0;
  clear_has_limit_num();
}
inline ::google::protobuf::int32 ConfigRandomGift::limit_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigRandomGift.limit_num)
  return limit_num_;
}
inline void ConfigRandomGift::set_limit_num(::google::protobuf::int32 value) {
  set_has_limit_num();
  limit_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRandomGift.limit_num)
}

// -------------------------------------------------------------------

// ConfigDungeonEvent

// required int32 id = 1;
inline bool ConfigDungeonEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDungeonEvent::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDungeonEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDungeonEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigDungeonEvent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonEvent.id)
  return id_;
}
inline void ConfigDungeonEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonEvent.id)
}

// required int32 action = 2;
inline bool ConfigDungeonEvent::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigDungeonEvent::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigDungeonEvent::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigDungeonEvent::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 ConfigDungeonEvent::action() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonEvent.action)
  return action_;
}
inline void ConfigDungeonEvent::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonEvent.action)
}

// required bytes condition = 3;
inline bool ConfigDungeonEvent::has_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDungeonEvent::set_has_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDungeonEvent::clear_has_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDungeonEvent::clear_condition() {
  condition_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_condition();
}
inline const ::std::string& ConfigDungeonEvent::condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonEvent.condition)
  return condition_.Get();
}
inline void ConfigDungeonEvent::set_condition(const ::std::string& value) {
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonEvent.condition)
}
#if LANG_CXX11
inline void ConfigDungeonEvent::set_condition(::std::string&& value) {
  set_has_condition();
  condition_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonEvent.condition)
}
#endif
inline void ConfigDungeonEvent::set_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonEvent.condition)
}
inline void ConfigDungeonEvent::set_condition(const void* value,
    size_t size) {
  set_has_condition();
  condition_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonEvent.condition)
}
inline ::std::string* ConfigDungeonEvent::mutable_condition() {
  set_has_condition();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonEvent.condition)
  return condition_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonEvent::release_condition() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonEvent.condition)
  if (!has_condition()) {
    return NULL;
  }
  clear_has_condition();
  return condition_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonEvent::set_allocated_condition(::std::string* condition) {
  if (condition != NULL) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  condition_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonEvent.condition)
}
inline ::std::string* ConfigDungeonEvent::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonEvent.condition)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_condition();
  return condition_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonEvent::unsafe_arena_set_allocated_condition(
    ::std::string* condition) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (condition != NULL) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  condition_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      condition, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonEvent.condition)
}

// required int32 require = 4;
inline bool ConfigDungeonEvent::has_require() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigDungeonEvent::set_has_require() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigDungeonEvent::clear_has_require() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigDungeonEvent::clear_require() {
  require_ = 0;
  clear_has_require();
}
inline ::google::protobuf::int32 ConfigDungeonEvent::require() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonEvent.require)
  return require_;
}
inline void ConfigDungeonEvent::set_require(::google::protobuf::int32 value) {
  set_has_require();
  require_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonEvent.require)
}

// required int32 get_point = 5;
inline bool ConfigDungeonEvent::has_get_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigDungeonEvent::set_has_get_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigDungeonEvent::clear_has_get_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigDungeonEvent::clear_get_point() {
  get_point_ = 0;
  clear_has_get_point();
}
inline ::google::protobuf::int32 ConfigDungeonEvent::get_point() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonEvent.get_point)
  return get_point_;
}
inline void ConfigDungeonEvent::set_get_point(::google::protobuf::int32 value) {
  set_has_get_point();
  get_point_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonEvent.get_point)
}

// required int32 dungeon_id = 6;
inline bool ConfigDungeonEvent::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigDungeonEvent::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigDungeonEvent::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigDungeonEvent::clear_dungeon_id() {
  dungeon_id_ = 0;
  clear_has_dungeon_id();
}
inline ::google::protobuf::int32 ConfigDungeonEvent::dungeon_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonEvent.dungeon_id)
  return dungeon_id_;
}
inline void ConfigDungeonEvent::set_dungeon_id(::google::protobuf::int32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonEvent.dungeon_id)
}

// required bytes reward = 7;
inline bool ConfigDungeonEvent::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDungeonEvent::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDungeonEvent::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDungeonEvent::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigDungeonEvent::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonEvent.reward)
  return reward_.Get();
}
inline void ConfigDungeonEvent::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonEvent.reward)
}
#if LANG_CXX11
inline void ConfigDungeonEvent::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonEvent.reward)
}
#endif
inline void ConfigDungeonEvent::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonEvent.reward)
}
inline void ConfigDungeonEvent::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonEvent.reward)
}
inline ::std::string* ConfigDungeonEvent::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonEvent.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonEvent::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonEvent.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonEvent::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonEvent.reward)
}
inline ::std::string* ConfigDungeonEvent::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonEvent.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonEvent::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonEvent.reward)
}

// -------------------------------------------------------------------

// ConfigDungeonContentGroup

// required int32 id = 1;
inline bool ConfigDungeonContentGroup::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigDungeonContentGroup::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigDungeonContentGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigDungeonContentGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigDungeonContentGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonContentGroup.id)
  return id_;
}
inline void ConfigDungeonContentGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonContentGroup.id)
}

// required bytes base_element = 2;
inline bool ConfigDungeonContentGroup::has_base_element() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDungeonContentGroup::set_has_base_element() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDungeonContentGroup::clear_has_base_element() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDungeonContentGroup::clear_base_element() {
  base_element_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_base_element();
}
inline const ::std::string& ConfigDungeonContentGroup::base_element() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonContentGroup.base_element)
  return base_element_.Get();
}
inline void ConfigDungeonContentGroup::set_base_element(const ::std::string& value) {
  set_has_base_element();
  base_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonContentGroup.base_element)
}
#if LANG_CXX11
inline void ConfigDungeonContentGroup::set_base_element(::std::string&& value) {
  set_has_base_element();
  base_element_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonContentGroup.base_element)
}
#endif
inline void ConfigDungeonContentGroup::set_base_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base_element();
  base_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonContentGroup.base_element)
}
inline void ConfigDungeonContentGroup::set_base_element(const void* value,
    size_t size) {
  set_has_base_element();
  base_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonContentGroup.base_element)
}
inline ::std::string* ConfigDungeonContentGroup::mutable_base_element() {
  set_has_base_element();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonContentGroup.base_element)
  return base_element_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonContentGroup::release_base_element() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonContentGroup.base_element)
  if (!has_base_element()) {
    return NULL;
  }
  clear_has_base_element();
  return base_element_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::set_allocated_base_element(::std::string* base_element) {
  if (base_element != NULL) {
    set_has_base_element();
  } else {
    clear_has_base_element();
  }
  base_element_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_element,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonContentGroup.base_element)
}
inline ::std::string* ConfigDungeonContentGroup::unsafe_arena_release_base_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonContentGroup.base_element)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_base_element();
  return base_element_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::unsafe_arena_set_allocated_base_element(
    ::std::string* base_element) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (base_element != NULL) {
    set_has_base_element();
  } else {
    clear_has_base_element();
  }
  base_element_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      base_element, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonContentGroup.base_element)
}

// required bytes random_element = 3;
inline bool ConfigDungeonContentGroup::has_random_element() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDungeonContentGroup::set_has_random_element() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDungeonContentGroup::clear_has_random_element() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDungeonContentGroup::clear_random_element() {
  random_element_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_element();
}
inline const ::std::string& ConfigDungeonContentGroup::random_element() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonContentGroup.random_element)
  return random_element_.Get();
}
inline void ConfigDungeonContentGroup::set_random_element(const ::std::string& value) {
  set_has_random_element();
  random_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonContentGroup.random_element)
}
#if LANG_CXX11
inline void ConfigDungeonContentGroup::set_random_element(::std::string&& value) {
  set_has_random_element();
  random_element_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonContentGroup.random_element)
}
#endif
inline void ConfigDungeonContentGroup::set_random_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_element();
  random_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonContentGroup.random_element)
}
inline void ConfigDungeonContentGroup::set_random_element(const void* value,
    size_t size) {
  set_has_random_element();
  random_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonContentGroup.random_element)
}
inline ::std::string* ConfigDungeonContentGroup::mutable_random_element() {
  set_has_random_element();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonContentGroup.random_element)
  return random_element_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonContentGroup::release_random_element() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonContentGroup.random_element)
  if (!has_random_element()) {
    return NULL;
  }
  clear_has_random_element();
  return random_element_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::set_allocated_random_element(::std::string* random_element) {
  if (random_element != NULL) {
    set_has_random_element();
  } else {
    clear_has_random_element();
  }
  random_element_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_element,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonContentGroup.random_element)
}
inline ::std::string* ConfigDungeonContentGroup::unsafe_arena_release_random_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonContentGroup.random_element)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_element();
  return random_element_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::unsafe_arena_set_allocated_random_element(
    ::std::string* random_element) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_element != NULL) {
    set_has_random_element();
  } else {
    clear_has_random_element();
  }
  random_element_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_element, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonContentGroup.random_element)
}

// required bytes spider_info = 4;
inline bool ConfigDungeonContentGroup::has_spider_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDungeonContentGroup::set_has_spider_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDungeonContentGroup::clear_has_spider_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDungeonContentGroup::clear_spider_info() {
  spider_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_spider_info();
}
inline const ::std::string& ConfigDungeonContentGroup::spider_info() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonContentGroup.spider_info)
  return spider_info_.Get();
}
inline void ConfigDungeonContentGroup::set_spider_info(const ::std::string& value) {
  set_has_spider_info();
  spider_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonContentGroup.spider_info)
}
#if LANG_CXX11
inline void ConfigDungeonContentGroup::set_spider_info(::std::string&& value) {
  set_has_spider_info();
  spider_info_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonContentGroup.spider_info)
}
#endif
inline void ConfigDungeonContentGroup::set_spider_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spider_info();
  spider_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonContentGroup.spider_info)
}
inline void ConfigDungeonContentGroup::set_spider_info(const void* value,
    size_t size) {
  set_has_spider_info();
  spider_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonContentGroup.spider_info)
}
inline ::std::string* ConfigDungeonContentGroup::mutable_spider_info() {
  set_has_spider_info();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonContentGroup.spider_info)
  return spider_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonContentGroup::release_spider_info() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonContentGroup.spider_info)
  if (!has_spider_info()) {
    return NULL;
  }
  clear_has_spider_info();
  return spider_info_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::set_allocated_spider_info(::std::string* spider_info) {
  if (spider_info != NULL) {
    set_has_spider_info();
  } else {
    clear_has_spider_info();
  }
  spider_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spider_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonContentGroup.spider_info)
}
inline ::std::string* ConfigDungeonContentGroup::unsafe_arena_release_spider_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonContentGroup.spider_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_spider_info();
  return spider_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::unsafe_arena_set_allocated_spider_info(
    ::std::string* spider_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (spider_info != NULL) {
    set_has_spider_info();
  } else {
    clear_has_spider_info();
  }
  spider_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      spider_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonContentGroup.spider_info)
}

// required bytes stairs_enemy = 5;
inline bool ConfigDungeonContentGroup::has_stairs_enemy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigDungeonContentGroup::set_has_stairs_enemy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigDungeonContentGroup::clear_has_stairs_enemy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigDungeonContentGroup::clear_stairs_enemy() {
  stairs_enemy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_stairs_enemy();
}
inline const ::std::string& ConfigDungeonContentGroup::stairs_enemy() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonContentGroup.stairs_enemy)
  return stairs_enemy_.Get();
}
inline void ConfigDungeonContentGroup::set_stairs_enemy(const ::std::string& value) {
  set_has_stairs_enemy();
  stairs_enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonContentGroup.stairs_enemy)
}
#if LANG_CXX11
inline void ConfigDungeonContentGroup::set_stairs_enemy(::std::string&& value) {
  set_has_stairs_enemy();
  stairs_enemy_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonContentGroup.stairs_enemy)
}
#endif
inline void ConfigDungeonContentGroup::set_stairs_enemy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stairs_enemy();
  stairs_enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonContentGroup.stairs_enemy)
}
inline void ConfigDungeonContentGroup::set_stairs_enemy(const void* value,
    size_t size) {
  set_has_stairs_enemy();
  stairs_enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonContentGroup.stairs_enemy)
}
inline ::std::string* ConfigDungeonContentGroup::mutable_stairs_enemy() {
  set_has_stairs_enemy();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonContentGroup.stairs_enemy)
  return stairs_enemy_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonContentGroup::release_stairs_enemy() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonContentGroup.stairs_enemy)
  if (!has_stairs_enemy()) {
    return NULL;
  }
  clear_has_stairs_enemy();
  return stairs_enemy_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::set_allocated_stairs_enemy(::std::string* stairs_enemy) {
  if (stairs_enemy != NULL) {
    set_has_stairs_enemy();
  } else {
    clear_has_stairs_enemy();
  }
  stairs_enemy_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stairs_enemy,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonContentGroup.stairs_enemy)
}
inline ::std::string* ConfigDungeonContentGroup::unsafe_arena_release_stairs_enemy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonContentGroup.stairs_enemy)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_stairs_enemy();
  return stairs_enemy_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::unsafe_arena_set_allocated_stairs_enemy(
    ::std::string* stairs_enemy) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stairs_enemy != NULL) {
    set_has_stairs_enemy();
  } else {
    clear_has_stairs_enemy();
  }
  stairs_enemy_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stairs_enemy, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonContentGroup.stairs_enemy)
}

// required bytes npc = 6;
inline bool ConfigDungeonContentGroup::has_npc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigDungeonContentGroup::set_has_npc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigDungeonContentGroup::clear_has_npc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigDungeonContentGroup::clear_npc() {
  npc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_npc();
}
inline const ::std::string& ConfigDungeonContentGroup::npc() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonContentGroup.npc)
  return npc_.Get();
}
inline void ConfigDungeonContentGroup::set_npc(const ::std::string& value) {
  set_has_npc();
  npc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonContentGroup.npc)
}
#if LANG_CXX11
inline void ConfigDungeonContentGroup::set_npc(::std::string&& value) {
  set_has_npc();
  npc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonContentGroup.npc)
}
#endif
inline void ConfigDungeonContentGroup::set_npc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_npc();
  npc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonContentGroup.npc)
}
inline void ConfigDungeonContentGroup::set_npc(const void* value,
    size_t size) {
  set_has_npc();
  npc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonContentGroup.npc)
}
inline ::std::string* ConfigDungeonContentGroup::mutable_npc() {
  set_has_npc();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonContentGroup.npc)
  return npc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonContentGroup::release_npc() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonContentGroup.npc)
  if (!has_npc()) {
    return NULL;
  }
  clear_has_npc();
  return npc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::set_allocated_npc(::std::string* npc) {
  if (npc != NULL) {
    set_has_npc();
  } else {
    clear_has_npc();
  }
  npc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), npc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonContentGroup.npc)
}
inline ::std::string* ConfigDungeonContentGroup::unsafe_arena_release_npc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonContentGroup.npc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_npc();
  return npc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::unsafe_arena_set_allocated_npc(
    ::std::string* npc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (npc != NULL) {
    set_has_npc();
  } else {
    clear_has_npc();
  }
  npc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      npc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonContentGroup.npc)
}

// required bytes path_choice = 7;
inline bool ConfigDungeonContentGroup::has_path_choice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigDungeonContentGroup::set_has_path_choice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigDungeonContentGroup::clear_has_path_choice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigDungeonContentGroup::clear_path_choice() {
  path_choice_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_path_choice();
}
inline const ::std::string& ConfigDungeonContentGroup::path_choice() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonContentGroup.path_choice)
  return path_choice_.Get();
}
inline void ConfigDungeonContentGroup::set_path_choice(const ::std::string& value) {
  set_has_path_choice();
  path_choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonContentGroup.path_choice)
}
#if LANG_CXX11
inline void ConfigDungeonContentGroup::set_path_choice(::std::string&& value) {
  set_has_path_choice();
  path_choice_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonContentGroup.path_choice)
}
#endif
inline void ConfigDungeonContentGroup::set_path_choice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path_choice();
  path_choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonContentGroup.path_choice)
}
inline void ConfigDungeonContentGroup::set_path_choice(const void* value,
    size_t size) {
  set_has_path_choice();
  path_choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonContentGroup.path_choice)
}
inline ::std::string* ConfigDungeonContentGroup::mutable_path_choice() {
  set_has_path_choice();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonContentGroup.path_choice)
  return path_choice_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonContentGroup::release_path_choice() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonContentGroup.path_choice)
  if (!has_path_choice()) {
    return NULL;
  }
  clear_has_path_choice();
  return path_choice_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::set_allocated_path_choice(::std::string* path_choice) {
  if (path_choice != NULL) {
    set_has_path_choice();
  } else {
    clear_has_path_choice();
  }
  path_choice_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_choice,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonContentGroup.path_choice)
}
inline ::std::string* ConfigDungeonContentGroup::unsafe_arena_release_path_choice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonContentGroup.path_choice)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_path_choice();
  return path_choice_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::unsafe_arena_set_allocated_path_choice(
    ::std::string* path_choice) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path_choice != NULL) {
    set_has_path_choice();
  } else {
    clear_has_path_choice();
  }
  path_choice_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path_choice, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonContentGroup.path_choice)
}

// required bytes altar = 8;
inline bool ConfigDungeonContentGroup::has_altar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigDungeonContentGroup::set_has_altar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigDungeonContentGroup::clear_has_altar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigDungeonContentGroup::clear_altar() {
  altar_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_altar();
}
inline const ::std::string& ConfigDungeonContentGroup::altar() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonContentGroup.altar)
  return altar_.Get();
}
inline void ConfigDungeonContentGroup::set_altar(const ::std::string& value) {
  set_has_altar();
  altar_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonContentGroup.altar)
}
#if LANG_CXX11
inline void ConfigDungeonContentGroup::set_altar(::std::string&& value) {
  set_has_altar();
  altar_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonContentGroup.altar)
}
#endif
inline void ConfigDungeonContentGroup::set_altar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_altar();
  altar_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonContentGroup.altar)
}
inline void ConfigDungeonContentGroup::set_altar(const void* value,
    size_t size) {
  set_has_altar();
  altar_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonContentGroup.altar)
}
inline ::std::string* ConfigDungeonContentGroup::mutable_altar() {
  set_has_altar();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonContentGroup.altar)
  return altar_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonContentGroup::release_altar() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonContentGroup.altar)
  if (!has_altar()) {
    return NULL;
  }
  clear_has_altar();
  return altar_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::set_allocated_altar(::std::string* altar) {
  if (altar != NULL) {
    set_has_altar();
  } else {
    clear_has_altar();
  }
  altar_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), altar,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonContentGroup.altar)
}
inline ::std::string* ConfigDungeonContentGroup::unsafe_arena_release_altar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonContentGroup.altar)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_altar();
  return altar_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonContentGroup::unsafe_arena_set_allocated_altar(
    ::std::string* altar) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (altar != NULL) {
    set_has_altar();
  } else {
    clear_has_altar();
  }
  altar_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      altar, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonContentGroup.altar)
}

// -------------------------------------------------------------------

// ConfigEnemy

// required int32 id = 1;
inline bool ConfigEnemy::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigEnemy::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigEnemy::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigEnemy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigEnemy::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.id)
  return id_;
}
inline void ConfigEnemy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.id)
}

// required bytes name = 2;
inline bool ConfigEnemy::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigEnemy::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigEnemy::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigEnemy::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigEnemy::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.name)
  return name_.Get();
}
inline void ConfigEnemy::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.name)
}
#if LANG_CXX11
inline void ConfigEnemy::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEnemy.name)
}
#endif
inline void ConfigEnemy::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEnemy.name)
}
inline void ConfigEnemy::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEnemy.name)
}
inline ::std::string* ConfigEnemy::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigEnemy.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEnemy::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigEnemy.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEnemy::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEnemy.name)
}
inline ::std::string* ConfigEnemy::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEnemy.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEnemy::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEnemy.name)
}

// required int32 profession = 3;
inline bool ConfigEnemy::has_profession() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigEnemy::set_has_profession() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigEnemy::clear_has_profession() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigEnemy::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 ConfigEnemy::profession() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.profession)
  return profession_;
}
inline void ConfigEnemy::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.profession)
}

// required int32 enemy_model = 4;
inline bool ConfigEnemy::has_enemy_model() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigEnemy::set_has_enemy_model() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigEnemy::clear_has_enemy_model() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigEnemy::clear_enemy_model() {
  enemy_model_ = 0;
  clear_has_enemy_model();
}
inline ::google::protobuf::int32 ConfigEnemy::enemy_model() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.enemy_model)
  return enemy_model_;
}
inline void ConfigEnemy::set_enemy_model(::google::protobuf::int32 value) {
  set_has_enemy_model();
  enemy_model_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.enemy_model)
}

// required int32 camp = 5;
inline bool ConfigEnemy::has_camp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigEnemy::set_has_camp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigEnemy::clear_has_camp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigEnemy::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 ConfigEnemy::camp() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.camp)
  return camp_;
}
inline void ConfigEnemy::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.camp)
}

// required int32 hp = 6;
inline bool ConfigEnemy::has_hp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigEnemy::set_has_hp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigEnemy::clear_has_hp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigEnemy::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 ConfigEnemy::hp() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.hp)
  return hp_;
}
inline void ConfigEnemy::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.hp)
}

// required float physical_attack = 7;
inline bool ConfigEnemy::has_physical_attack() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigEnemy::set_has_physical_attack() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigEnemy::clear_has_physical_attack() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigEnemy::clear_physical_attack() {
  physical_attack_ = 0;
  clear_has_physical_attack();
}
inline float ConfigEnemy::physical_attack() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.physical_attack)
  return physical_attack_;
}
inline void ConfigEnemy::set_physical_attack(float value) {
  set_has_physical_attack();
  physical_attack_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.physical_attack)
}

// required float magic_attack = 8;
inline bool ConfigEnemy::has_magic_attack() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigEnemy::set_has_magic_attack() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigEnemy::clear_has_magic_attack() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigEnemy::clear_magic_attack() {
  magic_attack_ = 0;
  clear_has_magic_attack();
}
inline float ConfigEnemy::magic_attack() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.magic_attack)
  return magic_attack_;
}
inline void ConfigEnemy::set_magic_attack(float value) {
  set_has_magic_attack();
  magic_attack_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.magic_attack)
}

// required float physical_defense = 9;
inline bool ConfigEnemy::has_physical_defense() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigEnemy::set_has_physical_defense() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigEnemy::clear_has_physical_defense() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigEnemy::clear_physical_defense() {
  physical_defense_ = 0;
  clear_has_physical_defense();
}
inline float ConfigEnemy::physical_defense() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.physical_defense)
  return physical_defense_;
}
inline void ConfigEnemy::set_physical_defense(float value) {
  set_has_physical_defense();
  physical_defense_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.physical_defense)
}

// required float magic_defense = 10;
inline bool ConfigEnemy::has_magic_defense() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigEnemy::set_has_magic_defense() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigEnemy::clear_has_magic_defense() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigEnemy::clear_magic_defense() {
  magic_defense_ = 0;
  clear_has_magic_defense();
}
inline float ConfigEnemy::magic_defense() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.magic_defense)
  return magic_defense_;
}
inline void ConfigEnemy::set_magic_defense(float value) {
  set_has_magic_defense();
  magic_defense_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.magic_defense)
}

// required int32 summon = 11;
inline bool ConfigEnemy::has_summon() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigEnemy::set_has_summon() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigEnemy::clear_has_summon() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigEnemy::clear_summon() {
  summon_ = 0;
  clear_has_summon();
}
inline ::google::protobuf::int32 ConfigEnemy::summon() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.summon)
  return summon_;
}
inline void ConfigEnemy::set_summon(::google::protobuf::int32 value) {
  set_has_summon();
  summon_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.summon)
}

// required float width = 12;
inline bool ConfigEnemy::has_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigEnemy::set_has_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigEnemy::clear_has_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigEnemy::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float ConfigEnemy::width() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.width)
  return width_;
}
inline void ConfigEnemy::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.width)
}

// required float height = 13;
inline bool ConfigEnemy::has_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigEnemy::set_has_height() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigEnemy::clear_has_height() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigEnemy::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float ConfigEnemy::height() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.height)
  return height_;
}
inline void ConfigEnemy::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.height)
}

// required int32 wait_time = 14;
inline bool ConfigEnemy::has_wait_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigEnemy::set_has_wait_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigEnemy::clear_has_wait_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigEnemy::clear_wait_time() {
  wait_time_ = 0;
  clear_has_wait_time();
}
inline ::google::protobuf::int32 ConfigEnemy::wait_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.wait_time)
  return wait_time_;
}
inline void ConfigEnemy::set_wait_time(::google::protobuf::int32 value) {
  set_has_wait_time();
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.wait_time)
}

// required int32 attack_mode = 15;
inline bool ConfigEnemy::has_attack_mode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigEnemy::set_has_attack_mode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigEnemy::clear_has_attack_mode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigEnemy::clear_attack_mode() {
  attack_mode_ = 0;
  clear_has_attack_mode();
}
inline ::google::protobuf::int32 ConfigEnemy::attack_mode() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.attack_mode)
  return attack_mode_;
}
inline void ConfigEnemy::set_attack_mode(::google::protobuf::int32 value) {
  set_has_attack_mode();
  attack_mode_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.attack_mode)
}

// required int32 move_distance = 16;
inline bool ConfigEnemy::has_move_distance() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfigEnemy::set_has_move_distance() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfigEnemy::clear_has_move_distance() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfigEnemy::clear_move_distance() {
  move_distance_ = 0;
  clear_has_move_distance();
}
inline ::google::protobuf::int32 ConfigEnemy::move_distance() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.move_distance)
  return move_distance_;
}
inline void ConfigEnemy::set_move_distance(::google::protobuf::int32 value) {
  set_has_move_distance();
  move_distance_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.move_distance)
}

// required int32 run_distance = 17;
inline bool ConfigEnemy::has_run_distance() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConfigEnemy::set_has_run_distance() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConfigEnemy::clear_has_run_distance() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConfigEnemy::clear_run_distance() {
  run_distance_ = 0;
  clear_has_run_distance();
}
inline ::google::protobuf::int32 ConfigEnemy::run_distance() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.run_distance)
  return run_distance_;
}
inline void ConfigEnemy::set_run_distance(::google::protobuf::int32 value) {
  set_has_run_distance();
  run_distance_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.run_distance)
}

// required int32 can_move = 18;
inline bool ConfigEnemy::has_can_move() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ConfigEnemy::set_has_can_move() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ConfigEnemy::clear_has_can_move() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ConfigEnemy::clear_can_move() {
  can_move_ = 0;
  clear_has_can_move();
}
inline ::google::protobuf::int32 ConfigEnemy::can_move() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.can_move)
  return can_move_;
}
inline void ConfigEnemy::set_can_move(::google::protobuf::int32 value) {
  set_has_can_move();
  can_move_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.can_move)
}

// required int32 enemy_type = 19;
inline bool ConfigEnemy::has_enemy_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ConfigEnemy::set_has_enemy_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ConfigEnemy::clear_has_enemy_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ConfigEnemy::clear_enemy_type() {
  enemy_type_ = 0;
  clear_has_enemy_type();
}
inline ::google::protobuf::int32 ConfigEnemy::enemy_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.enemy_type)
  return enemy_type_;
}
inline void ConfigEnemy::set_enemy_type(::google::protobuf::int32 value) {
  set_has_enemy_type();
  enemy_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.enemy_type)
}

// required int32 action_mode = 20;
inline bool ConfigEnemy::has_action_mode() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ConfigEnemy::set_has_action_mode() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ConfigEnemy::clear_has_action_mode() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ConfigEnemy::clear_action_mode() {
  action_mode_ = 0;
  clear_has_action_mode();
}
inline ::google::protobuf::int32 ConfigEnemy::action_mode() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.action_mode)
  return action_mode_;
}
inline void ConfigEnemy::set_action_mode(::google::protobuf::int32 value) {
  set_has_action_mode();
  action_mode_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.action_mode)
}

// required bytes skill = 21;
inline bool ConfigEnemy::has_skill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigEnemy::set_has_skill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigEnemy::clear_has_skill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigEnemy::clear_skill() {
  skill_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_skill();
}
inline const ::std::string& ConfigEnemy::skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.skill)
  return skill_.Get();
}
inline void ConfigEnemy::set_skill(const ::std::string& value) {
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.skill)
}
#if LANG_CXX11
inline void ConfigEnemy::set_skill(::std::string&& value) {
  set_has_skill();
  skill_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEnemy.skill)
}
#endif
inline void ConfigEnemy::set_skill(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEnemy.skill)
}
inline void ConfigEnemy::set_skill(const void* value,
    size_t size) {
  set_has_skill();
  skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEnemy.skill)
}
inline ::std::string* ConfigEnemy::mutable_skill() {
  set_has_skill();
  // @@protoc_insertion_point(field_mutable:db.ConfigEnemy.skill)
  return skill_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEnemy::release_skill() {
  // @@protoc_insertion_point(field_release:db.ConfigEnemy.skill)
  if (!has_skill()) {
    return NULL;
  }
  clear_has_skill();
  return skill_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEnemy::set_allocated_skill(::std::string* skill) {
  if (skill != NULL) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  skill_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEnemy.skill)
}
inline ::std::string* ConfigEnemy::unsafe_arena_release_skill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEnemy.skill)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_skill();
  return skill_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEnemy::unsafe_arena_set_allocated_skill(
    ::std::string* skill) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (skill != NULL) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  skill_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      skill, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEnemy.skill)
}

// required bytes drop_item = 22;
inline bool ConfigEnemy::has_drop_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigEnemy::set_has_drop_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigEnemy::clear_has_drop_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigEnemy::clear_drop_item() {
  drop_item_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop_item();
}
inline const ::std::string& ConfigEnemy::drop_item() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.drop_item)
  return drop_item_.Get();
}
inline void ConfigEnemy::set_drop_item(const ::std::string& value) {
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.drop_item)
}
#if LANG_CXX11
inline void ConfigEnemy::set_drop_item(::std::string&& value) {
  set_has_drop_item();
  drop_item_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEnemy.drop_item)
}
#endif
inline void ConfigEnemy::set_drop_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEnemy.drop_item)
}
inline void ConfigEnemy::set_drop_item(const void* value,
    size_t size) {
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEnemy.drop_item)
}
inline ::std::string* ConfigEnemy::mutable_drop_item() {
  set_has_drop_item();
  // @@protoc_insertion_point(field_mutable:db.ConfigEnemy.drop_item)
  return drop_item_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEnemy::release_drop_item() {
  // @@protoc_insertion_point(field_release:db.ConfigEnemy.drop_item)
  if (!has_drop_item()) {
    return NULL;
  }
  clear_has_drop_item();
  return drop_item_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEnemy::set_allocated_drop_item(::std::string* drop_item) {
  if (drop_item != NULL) {
    set_has_drop_item();
  } else {
    clear_has_drop_item();
  }
  drop_item_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_item,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEnemy.drop_item)
}
inline ::std::string* ConfigEnemy::unsafe_arena_release_drop_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEnemy.drop_item)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop_item();
  return drop_item_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEnemy::unsafe_arena_set_allocated_drop_item(
    ::std::string* drop_item) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop_item != NULL) {
    set_has_drop_item();
  } else {
    clear_has_drop_item();
  }
  drop_item_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop_item, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEnemy.drop_item)
}

// required bytes drop_element = 23;
inline bool ConfigEnemy::has_drop_element() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigEnemy::set_has_drop_element() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigEnemy::clear_has_drop_element() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigEnemy::clear_drop_element() {
  drop_element_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop_element();
}
inline const ::std::string& ConfigEnemy::drop_element() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemy.drop_element)
  return drop_element_.Get();
}
inline void ConfigEnemy::set_drop_element(const ::std::string& value) {
  set_has_drop_element();
  drop_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEnemy.drop_element)
}
#if LANG_CXX11
inline void ConfigEnemy::set_drop_element(::std::string&& value) {
  set_has_drop_element();
  drop_element_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEnemy.drop_element)
}
#endif
inline void ConfigEnemy::set_drop_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop_element();
  drop_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEnemy.drop_element)
}
inline void ConfigEnemy::set_drop_element(const void* value,
    size_t size) {
  set_has_drop_element();
  drop_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEnemy.drop_element)
}
inline ::std::string* ConfigEnemy::mutable_drop_element() {
  set_has_drop_element();
  // @@protoc_insertion_point(field_mutable:db.ConfigEnemy.drop_element)
  return drop_element_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEnemy::release_drop_element() {
  // @@protoc_insertion_point(field_release:db.ConfigEnemy.drop_element)
  if (!has_drop_element()) {
    return NULL;
  }
  clear_has_drop_element();
  return drop_element_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEnemy::set_allocated_drop_element(::std::string* drop_element) {
  if (drop_element != NULL) {
    set_has_drop_element();
  } else {
    clear_has_drop_element();
  }
  drop_element_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_element,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEnemy.drop_element)
}
inline ::std::string* ConfigEnemy::unsafe_arena_release_drop_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEnemy.drop_element)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop_element();
  return drop_element_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEnemy::unsafe_arena_set_allocated_drop_element(
    ::std::string* drop_element) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop_element != NULL) {
    set_has_drop_element();
  } else {
    clear_has_drop_element();
  }
  drop_element_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop_element, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEnemy.drop_element)
}

// -------------------------------------------------------------------

// ConfigEnemyEvent

// required int32 id = 1;
inline bool ConfigEnemyEvent::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigEnemyEvent::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigEnemyEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigEnemyEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigEnemyEvent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemyEvent.id)
  return id_;
}
inline void ConfigEnemyEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemyEvent.id)
}

// required bytes trigger_info = 2;
inline bool ConfigEnemyEvent::has_trigger_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigEnemyEvent::set_has_trigger_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigEnemyEvent::clear_has_trigger_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigEnemyEvent::clear_trigger_info() {
  trigger_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_trigger_info();
}
inline const ::std::string& ConfigEnemyEvent::trigger_info() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemyEvent.trigger_info)
  return trigger_info_.Get();
}
inline void ConfigEnemyEvent::set_trigger_info(const ::std::string& value) {
  set_has_trigger_info();
  trigger_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEnemyEvent.trigger_info)
}
#if LANG_CXX11
inline void ConfigEnemyEvent::set_trigger_info(::std::string&& value) {
  set_has_trigger_info();
  trigger_info_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEnemyEvent.trigger_info)
}
#endif
inline void ConfigEnemyEvent::set_trigger_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trigger_info();
  trigger_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEnemyEvent.trigger_info)
}
inline void ConfigEnemyEvent::set_trigger_info(const void* value,
    size_t size) {
  set_has_trigger_info();
  trigger_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEnemyEvent.trigger_info)
}
inline ::std::string* ConfigEnemyEvent::mutable_trigger_info() {
  set_has_trigger_info();
  // @@protoc_insertion_point(field_mutable:db.ConfigEnemyEvent.trigger_info)
  return trigger_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEnemyEvent::release_trigger_info() {
  // @@protoc_insertion_point(field_release:db.ConfigEnemyEvent.trigger_info)
  if (!has_trigger_info()) {
    return NULL;
  }
  clear_has_trigger_info();
  return trigger_info_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEnemyEvent::set_allocated_trigger_info(::std::string* trigger_info) {
  if (trigger_info != NULL) {
    set_has_trigger_info();
  } else {
    clear_has_trigger_info();
  }
  trigger_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEnemyEvent.trigger_info)
}
inline ::std::string* ConfigEnemyEvent::unsafe_arena_release_trigger_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEnemyEvent.trigger_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_trigger_info();
  return trigger_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEnemyEvent::unsafe_arena_set_allocated_trigger_info(
    ::std::string* trigger_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trigger_info != NULL) {
    set_has_trigger_info();
  } else {
    clear_has_trigger_info();
  }
  trigger_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trigger_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEnemyEvent.trigger_info)
}

// -------------------------------------------------------------------

// ConfigEnemyGroup

// required int32 id = 1;
inline bool ConfigEnemyGroup::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigEnemyGroup::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigEnemyGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigEnemyGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigEnemyGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemyGroup.id)
  return id_;
}
inline void ConfigEnemyGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemyGroup.id)
}

// required int32 eventid = 2;
inline bool ConfigEnemyGroup::has_eventid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigEnemyGroup::set_has_eventid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigEnemyGroup::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigEnemyGroup::clear_eventid() {
  eventid_ = 0;
  clear_has_eventid();
}
inline ::google::protobuf::int32 ConfigEnemyGroup::eventid() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemyGroup.eventid)
  return eventid_;
}
inline void ConfigEnemyGroup::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEnemyGroup.eventid)
}

// required bytes group_info = 3;
inline bool ConfigEnemyGroup::has_group_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigEnemyGroup::set_has_group_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigEnemyGroup::clear_has_group_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigEnemyGroup::clear_group_info() {
  group_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_group_info();
}
inline const ::std::string& ConfigEnemyGroup::group_info() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemyGroup.group_info)
  return group_info_.Get();
}
inline void ConfigEnemyGroup::set_group_info(const ::std::string& value) {
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEnemyGroup.group_info)
}
#if LANG_CXX11
inline void ConfigEnemyGroup::set_group_info(::std::string&& value) {
  set_has_group_info();
  group_info_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEnemyGroup.group_info)
}
#endif
inline void ConfigEnemyGroup::set_group_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEnemyGroup.group_info)
}
inline void ConfigEnemyGroup::set_group_info(const void* value,
    size_t size) {
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEnemyGroup.group_info)
}
inline ::std::string* ConfigEnemyGroup::mutable_group_info() {
  set_has_group_info();
  // @@protoc_insertion_point(field_mutable:db.ConfigEnemyGroup.group_info)
  return group_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEnemyGroup::release_group_info() {
  // @@protoc_insertion_point(field_release:db.ConfigEnemyGroup.group_info)
  if (!has_group_info()) {
    return NULL;
  }
  clear_has_group_info();
  return group_info_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEnemyGroup::set_allocated_group_info(::std::string* group_info) {
  if (group_info != NULL) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  group_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEnemyGroup.group_info)
}
inline ::std::string* ConfigEnemyGroup::unsafe_arena_release_group_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEnemyGroup.group_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_group_info();
  return group_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEnemyGroup::unsafe_arena_set_allocated_group_info(
    ::std::string* group_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_info != NULL) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  group_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEnemyGroup.group_info)
}

// required bytes random_enemy = 4;
inline bool ConfigEnemyGroup::has_random_enemy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigEnemyGroup::set_has_random_enemy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigEnemyGroup::clear_has_random_enemy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigEnemyGroup::clear_random_enemy() {
  random_enemy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_enemy();
}
inline const ::std::string& ConfigEnemyGroup::random_enemy() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemyGroup.random_enemy)
  return random_enemy_.Get();
}
inline void ConfigEnemyGroup::set_random_enemy(const ::std::string& value) {
  set_has_random_enemy();
  random_enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEnemyGroup.random_enemy)
}
#if LANG_CXX11
inline void ConfigEnemyGroup::set_random_enemy(::std::string&& value) {
  set_has_random_enemy();
  random_enemy_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEnemyGroup.random_enemy)
}
#endif
inline void ConfigEnemyGroup::set_random_enemy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_enemy();
  random_enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEnemyGroup.random_enemy)
}
inline void ConfigEnemyGroup::set_random_enemy(const void* value,
    size_t size) {
  set_has_random_enemy();
  random_enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEnemyGroup.random_enemy)
}
inline ::std::string* ConfigEnemyGroup::mutable_random_enemy() {
  set_has_random_enemy();
  // @@protoc_insertion_point(field_mutable:db.ConfigEnemyGroup.random_enemy)
  return random_enemy_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEnemyGroup::release_random_enemy() {
  // @@protoc_insertion_point(field_release:db.ConfigEnemyGroup.random_enemy)
  if (!has_random_enemy()) {
    return NULL;
  }
  clear_has_random_enemy();
  return random_enemy_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEnemyGroup::set_allocated_random_enemy(::std::string* random_enemy) {
  if (random_enemy != NULL) {
    set_has_random_enemy();
  } else {
    clear_has_random_enemy();
  }
  random_enemy_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_enemy,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEnemyGroup.random_enemy)
}
inline ::std::string* ConfigEnemyGroup::unsafe_arena_release_random_enemy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEnemyGroup.random_enemy)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_enemy();
  return random_enemy_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEnemyGroup::unsafe_arena_set_allocated_random_enemy(
    ::std::string* random_enemy) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_enemy != NULL) {
    set_has_random_enemy();
  } else {
    clear_has_random_enemy();
  }
  random_enemy_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_enemy, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEnemyGroup.random_enemy)
}

// required bytes random_event = 5;
inline bool ConfigEnemyGroup::has_random_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigEnemyGroup::set_has_random_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigEnemyGroup::clear_has_random_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigEnemyGroup::clear_random_event() {
  random_event_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_event();
}
inline const ::std::string& ConfigEnemyGroup::random_event() const {
  // @@protoc_insertion_point(field_get:db.ConfigEnemyGroup.random_event)
  return random_event_.Get();
}
inline void ConfigEnemyGroup::set_random_event(const ::std::string& value) {
  set_has_random_event();
  random_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEnemyGroup.random_event)
}
#if LANG_CXX11
inline void ConfigEnemyGroup::set_random_event(::std::string&& value) {
  set_has_random_event();
  random_event_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEnemyGroup.random_event)
}
#endif
inline void ConfigEnemyGroup::set_random_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_event();
  random_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEnemyGroup.random_event)
}
inline void ConfigEnemyGroup::set_random_event(const void* value,
    size_t size) {
  set_has_random_event();
  random_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEnemyGroup.random_event)
}
inline ::std::string* ConfigEnemyGroup::mutable_random_event() {
  set_has_random_event();
  // @@protoc_insertion_point(field_mutable:db.ConfigEnemyGroup.random_event)
  return random_event_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEnemyGroup::release_random_event() {
  // @@protoc_insertion_point(field_release:db.ConfigEnemyGroup.random_event)
  if (!has_random_event()) {
    return NULL;
  }
  clear_has_random_event();
  return random_event_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEnemyGroup::set_allocated_random_event(::std::string* random_event) {
  if (random_event != NULL) {
    set_has_random_event();
  } else {
    clear_has_random_event();
  }
  random_event_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_event,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEnemyGroup.random_event)
}
inline ::std::string* ConfigEnemyGroup::unsafe_arena_release_random_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEnemyGroup.random_event)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_event();
  return random_event_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEnemyGroup::unsafe_arena_set_allocated_random_event(
    ::std::string* random_event) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_event != NULL) {
    set_has_random_event();
  } else {
    clear_has_random_event();
  }
  random_event_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_event, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEnemyGroup.random_event)
}

// -------------------------------------------------------------------

// ConfigFightItem

// required int32 id = 1;
inline bool ConfigFightItem::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigFightItem::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigFightItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigFightItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigFightItem::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.id)
  return id_;
}
inline void ConfigFightItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.id)
}

// required bytes name = 2;
inline bool ConfigFightItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFightItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFightItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFightItem::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigFightItem::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.name)
  return name_.Get();
}
inline void ConfigFightItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.name)
}
#if LANG_CXX11
inline void ConfigFightItem::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFightItem.name)
}
#endif
inline void ConfigFightItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFightItem.name)
}
inline void ConfigFightItem::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFightItem.name)
}
inline ::std::string* ConfigFightItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigFightItem.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFightItem::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigFightItem.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFightItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFightItem.name)
}
inline ::std::string* ConfigFightItem::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFightItem.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFightItem::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFightItem.name)
}

// required int32 type = 3;
inline bool ConfigFightItem::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigFightItem::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigFightItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigFightItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigFightItem::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.type)
  return type_;
}
inline void ConfigFightItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.type)
}

// required int32 use_type = 4;
inline bool ConfigFightItem::has_use_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigFightItem::set_has_use_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigFightItem::clear_has_use_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigFightItem::clear_use_type() {
  use_type_ = 0;
  clear_has_use_type();
}
inline ::google::protobuf::int32 ConfigFightItem::use_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.use_type)
  return use_type_;
}
inline void ConfigFightItem::set_use_type(::google::protobuf::int32 value) {
  set_has_use_type();
  use_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.use_type)
}

// required bytes effect = 5;
inline bool ConfigFightItem::has_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFightItem::set_has_effect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFightItem::clear_has_effect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFightItem::clear_effect() {
  effect_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_effect();
}
inline const ::std::string& ConfigFightItem::effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.effect)
  return effect_.Get();
}
inline void ConfigFightItem::set_effect(const ::std::string& value) {
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.effect)
}
#if LANG_CXX11
inline void ConfigFightItem::set_effect(::std::string&& value) {
  set_has_effect();
  effect_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFightItem.effect)
}
#endif
inline void ConfigFightItem::set_effect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFightItem.effect)
}
inline void ConfigFightItem::set_effect(const void* value,
    size_t size) {
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFightItem.effect)
}
inline ::std::string* ConfigFightItem::mutable_effect() {
  set_has_effect();
  // @@protoc_insertion_point(field_mutable:db.ConfigFightItem.effect)
  return effect_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFightItem::release_effect() {
  // @@protoc_insertion_point(field_release:db.ConfigFightItem.effect)
  if (!has_effect()) {
    return NULL;
  }
  clear_has_effect();
  return effect_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFightItem::set_allocated_effect(::std::string* effect) {
  if (effect != NULL) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  effect_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), effect,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFightItem.effect)
}
inline ::std::string* ConfigFightItem::unsafe_arena_release_effect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFightItem.effect)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_effect();
  return effect_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFightItem::unsafe_arena_set_allocated_effect(
    ::std::string* effect) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (effect != NULL) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  effect_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      effect, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFightItem.effect)
}

// required int32 package_max = 6;
inline bool ConfigFightItem::has_package_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigFightItem::set_has_package_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigFightItem::clear_has_package_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigFightItem::clear_package_max() {
  package_max_ = 0;
  clear_has_package_max();
}
inline ::google::protobuf::int32 ConfigFightItem::package_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.package_max)
  return package_max_;
}
inline void ConfigFightItem::set_package_max(::google::protobuf::int32 value) {
  set_has_package_max();
  package_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.package_max)
}

// required int32 exchange_num = 7;
inline bool ConfigFightItem::has_exchange_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigFightItem::set_has_exchange_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigFightItem::clear_has_exchange_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigFightItem::clear_exchange_num() {
  exchange_num_ = 0;
  clear_has_exchange_num();
}
inline ::google::protobuf::int32 ConfigFightItem::exchange_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.exchange_num)
  return exchange_num_;
}
inline void ConfigFightItem::set_exchange_num(::google::protobuf::int32 value) {
  set_has_exchange_num();
  exchange_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.exchange_num)
}

// required bytes exchange = 8;
inline bool ConfigFightItem::has_exchange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFightItem::set_has_exchange() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFightItem::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFightItem::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_exchange();
}
inline const ::std::string& ConfigFightItem::exchange() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.exchange)
  return exchange_.Get();
}
inline void ConfigFightItem::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.exchange)
}
#if LANG_CXX11
inline void ConfigFightItem::set_exchange(::std::string&& value) {
  set_has_exchange();
  exchange_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFightItem.exchange)
}
#endif
inline void ConfigFightItem::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange();
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFightItem.exchange)
}
inline void ConfigFightItem::set_exchange(const void* value,
    size_t size) {
  set_has_exchange();
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFightItem.exchange)
}
inline ::std::string* ConfigFightItem::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:db.ConfigFightItem.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFightItem::release_exchange() {
  // @@protoc_insertion_point(field_release:db.ConfigFightItem.exchange)
  if (!has_exchange()) {
    return NULL;
  }
  clear_has_exchange();
  return exchange_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFightItem::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFightItem.exchange)
}
inline ::std::string* ConfigFightItem::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFightItem.exchange)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_exchange();
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFightItem::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFightItem.exchange)
}

// required bytes price = 9;
inline bool ConfigFightItem::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFightItem::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigFightItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigFightItem::clear_price() {
  price_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_price();
}
inline const ::std::string& ConfigFightItem::price() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightItem.price)
  return price_.Get();
}
inline void ConfigFightItem::set_price(const ::std::string& value) {
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFightItem.price)
}
#if LANG_CXX11
inline void ConfigFightItem::set_price(::std::string&& value) {
  set_has_price();
  price_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFightItem.price)
}
#endif
inline void ConfigFightItem::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFightItem.price)
}
inline void ConfigFightItem::set_price(const void* value,
    size_t size) {
  set_has_price();
  price_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFightItem.price)
}
inline ::std::string* ConfigFightItem::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:db.ConfigFightItem.price)
  return price_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFightItem::release_price() {
  // @@protoc_insertion_point(field_release:db.ConfigFightItem.price)
  if (!has_price()) {
    return NULL;
  }
  clear_has_price();
  return price_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFightItem::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFightItem.price)
}
inline ::std::string* ConfigFightItem::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFightItem.price)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_price();
  return price_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFightItem::unsafe_arena_set_allocated_price(
    ::std::string* price) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      price, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFightItem.price)
}

// -------------------------------------------------------------------

// ConfigFightMachine

// required int32 id = 1;
inline bool ConfigFightMachine::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFightMachine::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFightMachine::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFightMachine::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigFightMachine::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.id)
  return id_;
}
inline void ConfigFightMachine::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.id)
}

// required int32 condition_type = 2;
inline bool ConfigFightMachine::has_condition_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFightMachine::set_has_condition_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigFightMachine::clear_has_condition_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigFightMachine::clear_condition_type() {
  condition_type_ = 0;
  clear_has_condition_type();
}
inline ::google::protobuf::int32 ConfigFightMachine::condition_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.condition_type)
  return condition_type_;
}
inline void ConfigFightMachine::set_condition_type(::google::protobuf::int32 value) {
  set_has_condition_type();
  condition_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.condition_type)
}

// required int32 condition_param = 3;
inline bool ConfigFightMachine::has_condition_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigFightMachine::set_has_condition_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigFightMachine::clear_has_condition_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigFightMachine::clear_condition_param() {
  condition_param_ = 0;
  clear_has_condition_param();
}
inline ::google::protobuf::int32 ConfigFightMachine::condition_param() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.condition_param)
  return condition_param_;
}
inline void ConfigFightMachine::set_condition_param(::google::protobuf::int32 value) {
  set_has_condition_param();
  condition_param_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.condition_param)
}

// required int32 machine_type = 4;
inline bool ConfigFightMachine::has_machine_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigFightMachine::set_has_machine_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigFightMachine::clear_has_machine_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigFightMachine::clear_machine_type() {
  machine_type_ = 0;
  clear_has_machine_type();
}
inline ::google::protobuf::int32 ConfigFightMachine::machine_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.machine_type)
  return machine_type_;
}
inline void ConfigFightMachine::set_machine_type(::google::protobuf::int32 value) {
  set_has_machine_type();
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.machine_type)
}

// required bytes trigger_effect = 5;
inline bool ConfigFightMachine::has_trigger_effect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFightMachine::set_has_trigger_effect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFightMachine::clear_has_trigger_effect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFightMachine::clear_trigger_effect() {
  trigger_effect_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_trigger_effect();
}
inline const ::std::string& ConfigFightMachine::trigger_effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.trigger_effect)
  return trigger_effect_.Get();
}
inline void ConfigFightMachine::set_trigger_effect(const ::std::string& value) {
  set_has_trigger_effect();
  trigger_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.trigger_effect)
}
#if LANG_CXX11
inline void ConfigFightMachine::set_trigger_effect(::std::string&& value) {
  set_has_trigger_effect();
  trigger_effect_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFightMachine.trigger_effect)
}
#endif
inline void ConfigFightMachine::set_trigger_effect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trigger_effect();
  trigger_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFightMachine.trigger_effect)
}
inline void ConfigFightMachine::set_trigger_effect(const void* value,
    size_t size) {
  set_has_trigger_effect();
  trigger_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFightMachine.trigger_effect)
}
inline ::std::string* ConfigFightMachine::mutable_trigger_effect() {
  set_has_trigger_effect();
  // @@protoc_insertion_point(field_mutable:db.ConfigFightMachine.trigger_effect)
  return trigger_effect_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFightMachine::release_trigger_effect() {
  // @@protoc_insertion_point(field_release:db.ConfigFightMachine.trigger_effect)
  if (!has_trigger_effect()) {
    return NULL;
  }
  clear_has_trigger_effect();
  return trigger_effect_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFightMachine::set_allocated_trigger_effect(::std::string* trigger_effect) {
  if (trigger_effect != NULL) {
    set_has_trigger_effect();
  } else {
    clear_has_trigger_effect();
  }
  trigger_effect_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_effect,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFightMachine.trigger_effect)
}
inline ::std::string* ConfigFightMachine::unsafe_arena_release_trigger_effect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFightMachine.trigger_effect)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_trigger_effect();
  return trigger_effect_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFightMachine::unsafe_arena_set_allocated_trigger_effect(
    ::std::string* trigger_effect) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trigger_effect != NULL) {
    set_has_trigger_effect();
  } else {
    clear_has_trigger_effect();
  }
  trigger_effect_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trigger_effect, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFightMachine.trigger_effect)
}

// required int32 machine_time = 6;
inline bool ConfigFightMachine::has_machine_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigFightMachine::set_has_machine_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigFightMachine::clear_has_machine_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigFightMachine::clear_machine_time() {
  machine_time_ = 0;
  clear_has_machine_time();
}
inline ::google::protobuf::int32 ConfigFightMachine::machine_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.machine_time)
  return machine_time_;
}
inline void ConfigFightMachine::set_machine_time(::google::protobuf::int32 value) {
  set_has_machine_time();
  machine_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.machine_time)
}

// required bytes trigger_element = 7;
inline bool ConfigFightMachine::has_trigger_element() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFightMachine::set_has_trigger_element() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFightMachine::clear_has_trigger_element() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFightMachine::clear_trigger_element() {
  trigger_element_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_trigger_element();
}
inline const ::std::string& ConfigFightMachine::trigger_element() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.trigger_element)
  return trigger_element_.Get();
}
inline void ConfigFightMachine::set_trigger_element(const ::std::string& value) {
  set_has_trigger_element();
  trigger_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.trigger_element)
}
#if LANG_CXX11
inline void ConfigFightMachine::set_trigger_element(::std::string&& value) {
  set_has_trigger_element();
  trigger_element_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFightMachine.trigger_element)
}
#endif
inline void ConfigFightMachine::set_trigger_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trigger_element();
  trigger_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFightMachine.trigger_element)
}
inline void ConfigFightMachine::set_trigger_element(const void* value,
    size_t size) {
  set_has_trigger_element();
  trigger_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFightMachine.trigger_element)
}
inline ::std::string* ConfigFightMachine::mutable_trigger_element() {
  set_has_trigger_element();
  // @@protoc_insertion_point(field_mutable:db.ConfigFightMachine.trigger_element)
  return trigger_element_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFightMachine::release_trigger_element() {
  // @@protoc_insertion_point(field_release:db.ConfigFightMachine.trigger_element)
  if (!has_trigger_element()) {
    return NULL;
  }
  clear_has_trigger_element();
  return trigger_element_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFightMachine::set_allocated_trigger_element(::std::string* trigger_element) {
  if (trigger_element != NULL) {
    set_has_trigger_element();
  } else {
    clear_has_trigger_element();
  }
  trigger_element_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_element,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFightMachine.trigger_element)
}
inline ::std::string* ConfigFightMachine::unsafe_arena_release_trigger_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFightMachine.trigger_element)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_trigger_element();
  return trigger_element_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFightMachine::unsafe_arena_set_allocated_trigger_element(
    ::std::string* trigger_element) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trigger_element != NULL) {
    set_has_trigger_element();
  } else {
    clear_has_trigger_element();
  }
  trigger_element_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trigger_element, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFightMachine.trigger_element)
}

// required int32 special_type = 8;
inline bool ConfigFightMachine::has_special_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigFightMachine::set_has_special_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigFightMachine::clear_has_special_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigFightMachine::clear_special_type() {
  special_type_ = 0;
  clear_has_special_type();
}
inline ::google::protobuf::int32 ConfigFightMachine::special_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.special_type)
  return special_type_;
}
inline void ConfigFightMachine::set_special_type(::google::protobuf::int32 value) {
  set_has_special_type();
  special_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.special_type)
}

// required int32 exist_times = 9;
inline bool ConfigFightMachine::has_exist_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigFightMachine::set_has_exist_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigFightMachine::clear_has_exist_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigFightMachine::clear_exist_times() {
  exist_times_ = 0;
  clear_has_exist_times();
}
inline ::google::protobuf::int32 ConfigFightMachine::exist_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightMachine.exist_times)
  return exist_times_;
}
inline void ConfigFightMachine::set_exist_times(::google::protobuf::int32 value) {
  set_has_exist_times();
  exist_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightMachine.exist_times)
}

// -------------------------------------------------------------------

// ConfigDungeonTalent

// required int32 talent_group = 1;
inline bool ConfigDungeonTalent::has_talent_group() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigDungeonTalent::set_has_talent_group() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigDungeonTalent::clear_has_talent_group() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigDungeonTalent::clear_talent_group() {
  talent_group_ = 0;
  clear_has_talent_group();
}
inline ::google::protobuf::int32 ConfigDungeonTalent::talent_group() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.talent_group)
  return talent_group_;
}
inline void ConfigDungeonTalent::set_talent_group(::google::protobuf::int32 value) {
  set_has_talent_group();
  talent_group_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.talent_group)
}

// required int32 level = 2;
inline bool ConfigDungeonTalent::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigDungeonTalent::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigDungeonTalent::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigDungeonTalent::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigDungeonTalent::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.level)
  return level_;
}
inline void ConfigDungeonTalent::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.level)
}

// required int32 level_max = 3;
inline bool ConfigDungeonTalent::has_level_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigDungeonTalent::set_has_level_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigDungeonTalent::clear_has_level_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigDungeonTalent::clear_level_max() {
  level_max_ = 0;
  clear_has_level_max();
}
inline ::google::protobuf::int32 ConfigDungeonTalent::level_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.level_max)
  return level_max_;
}
inline void ConfigDungeonTalent::set_level_max(::google::protobuf::int32 value) {
  set_has_level_max();
  level_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.level_max)
}

// required bytes get_props = 4;
inline bool ConfigDungeonTalent::has_get_props() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDungeonTalent::set_has_get_props() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDungeonTalent::clear_has_get_props() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDungeonTalent::clear_get_props() {
  get_props_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_get_props();
}
inline const ::std::string& ConfigDungeonTalent::get_props() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.get_props)
  return get_props_.Get();
}
inline void ConfigDungeonTalent::set_get_props(const ::std::string& value) {
  set_has_get_props();
  get_props_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.get_props)
}
#if LANG_CXX11
inline void ConfigDungeonTalent::set_get_props(::std::string&& value) {
  set_has_get_props();
  get_props_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalent.get_props)
}
#endif
inline void ConfigDungeonTalent::set_get_props(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_get_props();
  get_props_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalent.get_props)
}
inline void ConfigDungeonTalent::set_get_props(const void* value,
    size_t size) {
  set_has_get_props();
  get_props_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalent.get_props)
}
inline ::std::string* ConfigDungeonTalent::mutable_get_props() {
  set_has_get_props();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalent.get_props)
  return get_props_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalent::release_get_props() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalent.get_props)
  if (!has_get_props()) {
    return NULL;
  }
  clear_has_get_props();
  return get_props_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::set_allocated_get_props(::std::string* get_props) {
  if (get_props != NULL) {
    set_has_get_props();
  } else {
    clear_has_get_props();
  }
  get_props_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), get_props,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalent.get_props)
}
inline ::std::string* ConfigDungeonTalent::unsafe_arena_release_get_props() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalent.get_props)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_get_props();
  return get_props_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::unsafe_arena_set_allocated_get_props(
    ::std::string* get_props) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (get_props != NULL) {
    set_has_get_props();
  } else {
    clear_has_get_props();
  }
  get_props_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      get_props, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalent.get_props)
}

// required bytes next_floor_item = 5;
inline bool ConfigDungeonTalent::has_next_floor_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDungeonTalent::set_has_next_floor_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDungeonTalent::clear_has_next_floor_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDungeonTalent::clear_next_floor_item() {
  next_floor_item_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_next_floor_item();
}
inline const ::std::string& ConfigDungeonTalent::next_floor_item() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.next_floor_item)
  return next_floor_item_.Get();
}
inline void ConfigDungeonTalent::set_next_floor_item(const ::std::string& value) {
  set_has_next_floor_item();
  next_floor_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.next_floor_item)
}
#if LANG_CXX11
inline void ConfigDungeonTalent::set_next_floor_item(::std::string&& value) {
  set_has_next_floor_item();
  next_floor_item_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalent.next_floor_item)
}
#endif
inline void ConfigDungeonTalent::set_next_floor_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next_floor_item();
  next_floor_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalent.next_floor_item)
}
inline void ConfigDungeonTalent::set_next_floor_item(const void* value,
    size_t size) {
  set_has_next_floor_item();
  next_floor_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalent.next_floor_item)
}
inline ::std::string* ConfigDungeonTalent::mutable_next_floor_item() {
  set_has_next_floor_item();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalent.next_floor_item)
  return next_floor_item_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalent::release_next_floor_item() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalent.next_floor_item)
  if (!has_next_floor_item()) {
    return NULL;
  }
  clear_has_next_floor_item();
  return next_floor_item_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::set_allocated_next_floor_item(::std::string* next_floor_item) {
  if (next_floor_item != NULL) {
    set_has_next_floor_item();
  } else {
    clear_has_next_floor_item();
  }
  next_floor_item_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_floor_item,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalent.next_floor_item)
}
inline ::std::string* ConfigDungeonTalent::unsafe_arena_release_next_floor_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalent.next_floor_item)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_next_floor_item();
  return next_floor_item_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::unsafe_arena_set_allocated_next_floor_item(
    ::std::string* next_floor_item) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_floor_item != NULL) {
    set_has_next_floor_item();
  } else {
    clear_has_next_floor_item();
  }
  next_floor_item_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_floor_item, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalent.next_floor_item)
}

// required bytes next_floor_machine = 6;
inline bool ConfigDungeonTalent::has_next_floor_machine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDungeonTalent::set_has_next_floor_machine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDungeonTalent::clear_has_next_floor_machine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDungeonTalent::clear_next_floor_machine() {
  next_floor_machine_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_next_floor_machine();
}
inline const ::std::string& ConfigDungeonTalent::next_floor_machine() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.next_floor_machine)
  return next_floor_machine_.Get();
}
inline void ConfigDungeonTalent::set_next_floor_machine(const ::std::string& value) {
  set_has_next_floor_machine();
  next_floor_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.next_floor_machine)
}
#if LANG_CXX11
inline void ConfigDungeonTalent::set_next_floor_machine(::std::string&& value) {
  set_has_next_floor_machine();
  next_floor_machine_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalent.next_floor_machine)
}
#endif
inline void ConfigDungeonTalent::set_next_floor_machine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next_floor_machine();
  next_floor_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalent.next_floor_machine)
}
inline void ConfigDungeonTalent::set_next_floor_machine(const void* value,
    size_t size) {
  set_has_next_floor_machine();
  next_floor_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalent.next_floor_machine)
}
inline ::std::string* ConfigDungeonTalent::mutable_next_floor_machine() {
  set_has_next_floor_machine();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalent.next_floor_machine)
  return next_floor_machine_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalent::release_next_floor_machine() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalent.next_floor_machine)
  if (!has_next_floor_machine()) {
    return NULL;
  }
  clear_has_next_floor_machine();
  return next_floor_machine_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::set_allocated_next_floor_machine(::std::string* next_floor_machine) {
  if (next_floor_machine != NULL) {
    set_has_next_floor_machine();
  } else {
    clear_has_next_floor_machine();
  }
  next_floor_machine_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_floor_machine,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalent.next_floor_machine)
}
inline ::std::string* ConfigDungeonTalent::unsafe_arena_release_next_floor_machine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalent.next_floor_machine)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_next_floor_machine();
  return next_floor_machine_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::unsafe_arena_set_allocated_next_floor_machine(
    ::std::string* next_floor_machine) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_floor_machine != NULL) {
    set_has_next_floor_machine();
  } else {
    clear_has_next_floor_machine();
  }
  next_floor_machine_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_floor_machine, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalent.next_floor_machine)
}

// required bytes incentives = 7;
inline bool ConfigDungeonTalent::has_incentives() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigDungeonTalent::set_has_incentives() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigDungeonTalent::clear_has_incentives() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigDungeonTalent::clear_incentives() {
  incentives_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_incentives();
}
inline const ::std::string& ConfigDungeonTalent::incentives() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.incentives)
  return incentives_.Get();
}
inline void ConfigDungeonTalent::set_incentives(const ::std::string& value) {
  set_has_incentives();
  incentives_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.incentives)
}
#if LANG_CXX11
inline void ConfigDungeonTalent::set_incentives(::std::string&& value) {
  set_has_incentives();
  incentives_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalent.incentives)
}
#endif
inline void ConfigDungeonTalent::set_incentives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_incentives();
  incentives_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalent.incentives)
}
inline void ConfigDungeonTalent::set_incentives(const void* value,
    size_t size) {
  set_has_incentives();
  incentives_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalent.incentives)
}
inline ::std::string* ConfigDungeonTalent::mutable_incentives() {
  set_has_incentives();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalent.incentives)
  return incentives_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalent::release_incentives() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalent.incentives)
  if (!has_incentives()) {
    return NULL;
  }
  clear_has_incentives();
  return incentives_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::set_allocated_incentives(::std::string* incentives) {
  if (incentives != NULL) {
    set_has_incentives();
  } else {
    clear_has_incentives();
  }
  incentives_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), incentives,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalent.incentives)
}
inline ::std::string* ConfigDungeonTalent::unsafe_arena_release_incentives() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalent.incentives)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_incentives();
  return incentives_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::unsafe_arena_set_allocated_incentives(
    ::std::string* incentives) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (incentives != NULL) {
    set_has_incentives();
  } else {
    clear_has_incentives();
  }
  incentives_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      incentives, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalent.incentives)
}

// required bytes machine_incentives = 8;
inline bool ConfigDungeonTalent::has_machine_incentives() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigDungeonTalent::set_has_machine_incentives() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigDungeonTalent::clear_has_machine_incentives() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigDungeonTalent::clear_machine_incentives() {
  machine_incentives_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_machine_incentives();
}
inline const ::std::string& ConfigDungeonTalent::machine_incentives() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.machine_incentives)
  return machine_incentives_.Get();
}
inline void ConfigDungeonTalent::set_machine_incentives(const ::std::string& value) {
  set_has_machine_incentives();
  machine_incentives_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.machine_incentives)
}
#if LANG_CXX11
inline void ConfigDungeonTalent::set_machine_incentives(::std::string&& value) {
  set_has_machine_incentives();
  machine_incentives_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalent.machine_incentives)
}
#endif
inline void ConfigDungeonTalent::set_machine_incentives(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_incentives();
  machine_incentives_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalent.machine_incentives)
}
inline void ConfigDungeonTalent::set_machine_incentives(const void* value,
    size_t size) {
  set_has_machine_incentives();
  machine_incentives_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalent.machine_incentives)
}
inline ::std::string* ConfigDungeonTalent::mutable_machine_incentives() {
  set_has_machine_incentives();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalent.machine_incentives)
  return machine_incentives_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalent::release_machine_incentives() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalent.machine_incentives)
  if (!has_machine_incentives()) {
    return NULL;
  }
  clear_has_machine_incentives();
  return machine_incentives_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::set_allocated_machine_incentives(::std::string* machine_incentives) {
  if (machine_incentives != NULL) {
    set_has_machine_incentives();
  } else {
    clear_has_machine_incentives();
  }
  machine_incentives_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_incentives,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalent.machine_incentives)
}
inline ::std::string* ConfigDungeonTalent::unsafe_arena_release_machine_incentives() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalent.machine_incentives)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_machine_incentives();
  return machine_incentives_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::unsafe_arena_set_allocated_machine_incentives(
    ::std::string* machine_incentives) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (machine_incentives != NULL) {
    set_has_machine_incentives();
  } else {
    clear_has_machine_incentives();
  }
  machine_incentives_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      machine_incentives, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalent.machine_incentives)
}

// required bytes reduce_cost = 9;
inline bool ConfigDungeonTalent::has_reduce_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigDungeonTalent::set_has_reduce_cost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigDungeonTalent::clear_has_reduce_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigDungeonTalent::clear_reduce_cost() {
  reduce_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reduce_cost();
}
inline const ::std::string& ConfigDungeonTalent::reduce_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.reduce_cost)
  return reduce_cost_.Get();
}
inline void ConfigDungeonTalent::set_reduce_cost(const ::std::string& value) {
  set_has_reduce_cost();
  reduce_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.reduce_cost)
}
#if LANG_CXX11
inline void ConfigDungeonTalent::set_reduce_cost(::std::string&& value) {
  set_has_reduce_cost();
  reduce_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalent.reduce_cost)
}
#endif
inline void ConfigDungeonTalent::set_reduce_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reduce_cost();
  reduce_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalent.reduce_cost)
}
inline void ConfigDungeonTalent::set_reduce_cost(const void* value,
    size_t size) {
  set_has_reduce_cost();
  reduce_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalent.reduce_cost)
}
inline ::std::string* ConfigDungeonTalent::mutable_reduce_cost() {
  set_has_reduce_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalent.reduce_cost)
  return reduce_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalent::release_reduce_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalent.reduce_cost)
  if (!has_reduce_cost()) {
    return NULL;
  }
  clear_has_reduce_cost();
  return reduce_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::set_allocated_reduce_cost(::std::string* reduce_cost) {
  if (reduce_cost != NULL) {
    set_has_reduce_cost();
  } else {
    clear_has_reduce_cost();
  }
  reduce_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reduce_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalent.reduce_cost)
}
inline ::std::string* ConfigDungeonTalent::unsafe_arena_release_reduce_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalent.reduce_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reduce_cost();
  return reduce_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::unsafe_arena_set_allocated_reduce_cost(
    ::std::string* reduce_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reduce_cost != NULL) {
    set_has_reduce_cost();
  } else {
    clear_has_reduce_cost();
  }
  reduce_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reduce_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalent.reduce_cost)
}

// required bytes cost = 10;
inline bool ConfigDungeonTalent::has_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigDungeonTalent::set_has_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigDungeonTalent::clear_has_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigDungeonTalent::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigDungeonTalent::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalent.cost)
  return cost_.Get();
}
inline void ConfigDungeonTalent::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalent.cost)
}
#if LANG_CXX11
inline void ConfigDungeonTalent::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalent.cost)
}
#endif
inline void ConfigDungeonTalent::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalent.cost)
}
inline void ConfigDungeonTalent::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalent.cost)
}
inline ::std::string* ConfigDungeonTalent::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalent.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalent::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalent.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalent.cost)
}
inline ::std::string* ConfigDungeonTalent::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalent.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalent::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalent.cost)
}

// -------------------------------------------------------------------

// ConfigDungeonTalentTree

// required int32 id = 1;
inline bool ConfigDungeonTalentTree::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDungeonTalentTree::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDungeonTalentTree::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDungeonTalentTree::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigDungeonTalentTree::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalentTree.id)
  return id_;
}
inline void ConfigDungeonTalentTree::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalentTree.id)
}

// required int32 type = 2;
inline bool ConfigDungeonTalentTree::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigDungeonTalentTree::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigDungeonTalentTree::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigDungeonTalentTree::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigDungeonTalentTree::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalentTree.type)
  return type_;
}
inline void ConfigDungeonTalentTree::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalentTree.type)
}

// required bytes cost = 3;
inline bool ConfigDungeonTalentTree::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDungeonTalentTree::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDungeonTalentTree::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDungeonTalentTree::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigDungeonTalentTree::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalentTree.cost)
  return cost_.Get();
}
inline void ConfigDungeonTalentTree::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalentTree.cost)
}
#if LANG_CXX11
inline void ConfigDungeonTalentTree::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalentTree.cost)
}
#endif
inline void ConfigDungeonTalentTree::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalentTree.cost)
}
inline void ConfigDungeonTalentTree::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalentTree.cost)
}
inline ::std::string* ConfigDungeonTalentTree::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalentTree.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalentTree::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalentTree.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalentTree::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalentTree.cost)
}
inline ::std::string* ConfigDungeonTalentTree::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalentTree.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalentTree::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalentTree.cost)
}

// required bytes unlock_require = 4;
inline bool ConfigDungeonTalentTree::has_unlock_require() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDungeonTalentTree::set_has_unlock_require() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDungeonTalentTree::clear_has_unlock_require() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDungeonTalentTree::clear_unlock_require() {
  unlock_require_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_require();
}
inline const ::std::string& ConfigDungeonTalentTree::unlock_require() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonTalentTree.unlock_require)
  return unlock_require_.Get();
}
inline void ConfigDungeonTalentTree::set_unlock_require(const ::std::string& value) {
  set_has_unlock_require();
  unlock_require_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonTalentTree.unlock_require)
}
#if LANG_CXX11
inline void ConfigDungeonTalentTree::set_unlock_require(::std::string&& value) {
  set_has_unlock_require();
  unlock_require_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonTalentTree.unlock_require)
}
#endif
inline void ConfigDungeonTalentTree::set_unlock_require(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_require();
  unlock_require_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonTalentTree.unlock_require)
}
inline void ConfigDungeonTalentTree::set_unlock_require(const void* value,
    size_t size) {
  set_has_unlock_require();
  unlock_require_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonTalentTree.unlock_require)
}
inline ::std::string* ConfigDungeonTalentTree::mutable_unlock_require() {
  set_has_unlock_require();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonTalentTree.unlock_require)
  return unlock_require_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonTalentTree::release_unlock_require() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonTalentTree.unlock_require)
  if (!has_unlock_require()) {
    return NULL;
  }
  clear_has_unlock_require();
  return unlock_require_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonTalentTree::set_allocated_unlock_require(::std::string* unlock_require) {
  if (unlock_require != NULL) {
    set_has_unlock_require();
  } else {
    clear_has_unlock_require();
  }
  unlock_require_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_require,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonTalentTree.unlock_require)
}
inline ::std::string* ConfigDungeonTalentTree::unsafe_arena_release_unlock_require() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonTalentTree.unlock_require)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_require();
  return unlock_require_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonTalentTree::unsafe_arena_set_allocated_unlock_require(
    ::std::string* unlock_require) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_require != NULL) {
    set_has_unlock_require();
  } else {
    clear_has_unlock_require();
  }
  unlock_require_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_require, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonTalentTree.unlock_require)
}

// -------------------------------------------------------------------

// ConfigDungeonStoreGroup

// required int32 id = 1;
inline bool ConfigDungeonStoreGroup::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDungeonStoreGroup::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDungeonStoreGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDungeonStoreGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigDungeonStoreGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonStoreGroup.id)
  return id_;
}
inline void ConfigDungeonStoreGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonStoreGroup.id)
}

// required bytes base_items = 2;
inline bool ConfigDungeonStoreGroup::has_base_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDungeonStoreGroup::set_has_base_items() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDungeonStoreGroup::clear_has_base_items() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDungeonStoreGroup::clear_base_items() {
  base_items_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_base_items();
}
inline const ::std::string& ConfigDungeonStoreGroup::base_items() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonStoreGroup.base_items)
  return base_items_.Get();
}
inline void ConfigDungeonStoreGroup::set_base_items(const ::std::string& value) {
  set_has_base_items();
  base_items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonStoreGroup.base_items)
}
#if LANG_CXX11
inline void ConfigDungeonStoreGroup::set_base_items(::std::string&& value) {
  set_has_base_items();
  base_items_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonStoreGroup.base_items)
}
#endif
inline void ConfigDungeonStoreGroup::set_base_items(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base_items();
  base_items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonStoreGroup.base_items)
}
inline void ConfigDungeonStoreGroup::set_base_items(const void* value,
    size_t size) {
  set_has_base_items();
  base_items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonStoreGroup.base_items)
}
inline ::std::string* ConfigDungeonStoreGroup::mutable_base_items() {
  set_has_base_items();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonStoreGroup.base_items)
  return base_items_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonStoreGroup::release_base_items() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonStoreGroup.base_items)
  if (!has_base_items()) {
    return NULL;
  }
  clear_has_base_items();
  return base_items_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonStoreGroup::set_allocated_base_items(::std::string* base_items) {
  if (base_items != NULL) {
    set_has_base_items();
  } else {
    clear_has_base_items();
  }
  base_items_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_items,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonStoreGroup.base_items)
}
inline ::std::string* ConfigDungeonStoreGroup::unsafe_arena_release_base_items() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonStoreGroup.base_items)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_base_items();
  return base_items_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonStoreGroup::unsafe_arena_set_allocated_base_items(
    ::std::string* base_items) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (base_items != NULL) {
    set_has_base_items();
  } else {
    clear_has_base_items();
  }
  base_items_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      base_items, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonStoreGroup.base_items)
}

// required bytes random_items = 3;
inline bool ConfigDungeonStoreGroup::has_random_items() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDungeonStoreGroup::set_has_random_items() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDungeonStoreGroup::clear_has_random_items() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDungeonStoreGroup::clear_random_items() {
  random_items_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_items();
}
inline const ::std::string& ConfigDungeonStoreGroup::random_items() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonStoreGroup.random_items)
  return random_items_.Get();
}
inline void ConfigDungeonStoreGroup::set_random_items(const ::std::string& value) {
  set_has_random_items();
  random_items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonStoreGroup.random_items)
}
#if LANG_CXX11
inline void ConfigDungeonStoreGroup::set_random_items(::std::string&& value) {
  set_has_random_items();
  random_items_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonStoreGroup.random_items)
}
#endif
inline void ConfigDungeonStoreGroup::set_random_items(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_items();
  random_items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonStoreGroup.random_items)
}
inline void ConfigDungeonStoreGroup::set_random_items(const void* value,
    size_t size) {
  set_has_random_items();
  random_items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonStoreGroup.random_items)
}
inline ::std::string* ConfigDungeonStoreGroup::mutable_random_items() {
  set_has_random_items();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonStoreGroup.random_items)
  return random_items_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonStoreGroup::release_random_items() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonStoreGroup.random_items)
  if (!has_random_items()) {
    return NULL;
  }
  clear_has_random_items();
  return random_items_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonStoreGroup::set_allocated_random_items(::std::string* random_items) {
  if (random_items != NULL) {
    set_has_random_items();
  } else {
    clear_has_random_items();
  }
  random_items_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_items,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonStoreGroup.random_items)
}
inline ::std::string* ConfigDungeonStoreGroup::unsafe_arena_release_random_items() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonStoreGroup.random_items)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_items();
  return random_items_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonStoreGroup::unsafe_arena_set_allocated_random_items(
    ::std::string* random_items) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_items != NULL) {
    set_has_random_items();
  } else {
    clear_has_random_items();
  }
  random_items_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_items, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonStoreGroup.random_items)
}

// -------------------------------------------------------------------

// ConfigMachineExchange

// required int32 id = 1;
inline bool ConfigMachineExchange::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigMachineExchange::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigMachineExchange::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigMachineExchange::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigMachineExchange::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigMachineExchange.id)
  return id_;
}
inline void ConfigMachineExchange::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMachineExchange.id)
}

// required bytes cost = 2;
inline bool ConfigMachineExchange::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigMachineExchange::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigMachineExchange::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigMachineExchange::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigMachineExchange::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigMachineExchange.cost)
  return cost_.Get();
}
inline void ConfigMachineExchange::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMachineExchange.cost)
}
#if LANG_CXX11
inline void ConfigMachineExchange::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMachineExchange.cost)
}
#endif
inline void ConfigMachineExchange::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMachineExchange.cost)
}
inline void ConfigMachineExchange::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMachineExchange.cost)
}
inline ::std::string* ConfigMachineExchange::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigMachineExchange.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMachineExchange::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigMachineExchange.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMachineExchange::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMachineExchange.cost)
}
inline ::std::string* ConfigMachineExchange::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMachineExchange.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMachineExchange::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMachineExchange.cost)
}

// required bytes get = 3;
inline bool ConfigMachineExchange::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigMachineExchange::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigMachineExchange::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigMachineExchange::clear_get() {
  get_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_get();
}
inline const ::std::string& ConfigMachineExchange::get() const {
  // @@protoc_insertion_point(field_get:db.ConfigMachineExchange.get)
  return get_.Get();
}
inline void ConfigMachineExchange::set_get(const ::std::string& value) {
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMachineExchange.get)
}
#if LANG_CXX11
inline void ConfigMachineExchange::set_get(::std::string&& value) {
  set_has_get();
  get_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMachineExchange.get)
}
#endif
inline void ConfigMachineExchange::set_get(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMachineExchange.get)
}
inline void ConfigMachineExchange::set_get(const void* value,
    size_t size) {
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMachineExchange.get)
}
inline ::std::string* ConfigMachineExchange::mutable_get() {
  set_has_get();
  // @@protoc_insertion_point(field_mutable:db.ConfigMachineExchange.get)
  return get_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMachineExchange::release_get() {
  // @@protoc_insertion_point(field_release:db.ConfigMachineExchange.get)
  if (!has_get()) {
    return NULL;
  }
  clear_has_get();
  return get_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMachineExchange::set_allocated_get(::std::string* get) {
  if (get != NULL) {
    set_has_get();
  } else {
    clear_has_get();
  }
  get_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), get,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMachineExchange.get)
}
inline ::std::string* ConfigMachineExchange::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMachineExchange.get)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_get();
  return get_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMachineExchange::unsafe_arena_set_allocated_get(
    ::std::string* get) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (get != NULL) {
    set_has_get();
  } else {
    clear_has_get();
  }
  get_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      get, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMachineExchange.get)
}

// -------------------------------------------------------------------

// ConfigMachineExchangeGroup

// required int32 id = 1;
inline bool ConfigMachineExchangeGroup::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigMachineExchangeGroup::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigMachineExchangeGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigMachineExchangeGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigMachineExchangeGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigMachineExchangeGroup.id)
  return id_;
}
inline void ConfigMachineExchangeGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMachineExchangeGroup.id)
}

// required bytes group_info = 2;
inline bool ConfigMachineExchangeGroup::has_group_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigMachineExchangeGroup::set_has_group_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigMachineExchangeGroup::clear_has_group_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigMachineExchangeGroup::clear_group_info() {
  group_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_group_info();
}
inline const ::std::string& ConfigMachineExchangeGroup::group_info() const {
  // @@protoc_insertion_point(field_get:db.ConfigMachineExchangeGroup.group_info)
  return group_info_.Get();
}
inline void ConfigMachineExchangeGroup::set_group_info(const ::std::string& value) {
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMachineExchangeGroup.group_info)
}
#if LANG_CXX11
inline void ConfigMachineExchangeGroup::set_group_info(::std::string&& value) {
  set_has_group_info();
  group_info_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMachineExchangeGroup.group_info)
}
#endif
inline void ConfigMachineExchangeGroup::set_group_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMachineExchangeGroup.group_info)
}
inline void ConfigMachineExchangeGroup::set_group_info(const void* value,
    size_t size) {
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMachineExchangeGroup.group_info)
}
inline ::std::string* ConfigMachineExchangeGroup::mutable_group_info() {
  set_has_group_info();
  // @@protoc_insertion_point(field_mutable:db.ConfigMachineExchangeGroup.group_info)
  return group_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMachineExchangeGroup::release_group_info() {
  // @@protoc_insertion_point(field_release:db.ConfigMachineExchangeGroup.group_info)
  if (!has_group_info()) {
    return NULL;
  }
  clear_has_group_info();
  return group_info_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMachineExchangeGroup::set_allocated_group_info(::std::string* group_info) {
  if (group_info != NULL) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  group_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMachineExchangeGroup.group_info)
}
inline ::std::string* ConfigMachineExchangeGroup::unsafe_arena_release_group_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMachineExchangeGroup.group_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_group_info();
  return group_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMachineExchangeGroup::unsafe_arena_set_allocated_group_info(
    ::std::string* group_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_info != NULL) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  group_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMachineExchangeGroup.group_info)
}

// -------------------------------------------------------------------

// ConfigPveMapModel

// required int32 id = 1;
inline bool ConfigPveMapModel::has_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigPveMapModel::set_has_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigPveMapModel::clear_has_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigPveMapModel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigPveMapModel::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.id)
  return id_;
}
inline void ConfigPveMapModel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.id)
}

// required bytes name = 2;
inline bool ConfigPveMapModel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigPveMapModel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigPveMapModel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigPveMapModel::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigPveMapModel::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.name)
  return name_.Get();
}
inline void ConfigPveMapModel::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.name)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.name)
}
#endif
inline void ConfigPveMapModel::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.name)
}
inline void ConfigPveMapModel::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.name)
}
inline ::std::string* ConfigPveMapModel::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.name)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.name)
}

// required int32 type = 3;
inline bool ConfigPveMapModel::has_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfigPveMapModel::set_has_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfigPveMapModel::clear_has_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfigPveMapModel::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigPveMapModel::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.type)
  return type_;
}
inline void ConfigPveMapModel::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.type)
}

// required int32 subtype = 4;
inline bool ConfigPveMapModel::has_subtype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConfigPveMapModel::set_has_subtype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConfigPveMapModel::clear_has_subtype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConfigPveMapModel::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 ConfigPveMapModel::subtype() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.subtype)
  return subtype_;
}
inline void ConfigPveMapModel::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.subtype)
}

// required bytes level = 5;
inline bool ConfigPveMapModel::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigPveMapModel::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigPveMapModel::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigPveMapModel::clear_level() {
  level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level();
}
inline const ::std::string& ConfigPveMapModel::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.level)
  return level_.Get();
}
inline void ConfigPveMapModel::set_level(const ::std::string& value) {
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.level)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_level(::std::string&& value) {
  set_has_level();
  level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.level)
}
#endif
inline void ConfigPveMapModel::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.level)
}
inline void ConfigPveMapModel::set_level(const void* value,
    size_t size) {
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.level)
}
inline ::std::string* ConfigPveMapModel::mutable_level() {
  set_has_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.level)
  return level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_level() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.level)
  if (!has_level()) {
    return NULL;
  }
  clear_has_level();
  return level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    set_has_level();
  } else {
    clear_has_level();
  }
  level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.level)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level();
  return level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_level(
    ::std::string* level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level != NULL) {
    set_has_level();
  } else {
    clear_has_level();
  }
  level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.level)
}

// required int32 map_type = 6;
inline bool ConfigPveMapModel::has_map_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ConfigPveMapModel::set_has_map_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ConfigPveMapModel::clear_has_map_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ConfigPveMapModel::clear_map_type() {
  map_type_ = 0;
  clear_has_map_type();
}
inline ::google::protobuf::int32 ConfigPveMapModel::map_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.map_type)
  return map_type_;
}
inline void ConfigPveMapModel::set_map_type(::google::protobuf::int32 value) {
  set_has_map_type();
  map_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.map_type)
}

// required bytes map_tiles = 7;
inline bool ConfigPveMapModel::has_map_tiles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigPveMapModel::set_has_map_tiles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigPveMapModel::clear_has_map_tiles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigPveMapModel::clear_map_tiles() {
  map_tiles_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_map_tiles();
}
inline const ::std::string& ConfigPveMapModel::map_tiles() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.map_tiles)
  return map_tiles_.Get();
}
inline void ConfigPveMapModel::set_map_tiles(const ::std::string& value) {
  set_has_map_tiles();
  map_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.map_tiles)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_map_tiles(::std::string&& value) {
  set_has_map_tiles();
  map_tiles_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.map_tiles)
}
#endif
inline void ConfigPveMapModel::set_map_tiles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_tiles();
  map_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.map_tiles)
}
inline void ConfigPveMapModel::set_map_tiles(const void* value,
    size_t size) {
  set_has_map_tiles();
  map_tiles_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.map_tiles)
}
inline ::std::string* ConfigPveMapModel::mutable_map_tiles() {
  set_has_map_tiles();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.map_tiles)
  return map_tiles_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_map_tiles() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.map_tiles)
  if (!has_map_tiles()) {
    return NULL;
  }
  clear_has_map_tiles();
  return map_tiles_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_map_tiles(::std::string* map_tiles) {
  if (map_tiles != NULL) {
    set_has_map_tiles();
  } else {
    clear_has_map_tiles();
  }
  map_tiles_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_tiles,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.map_tiles)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_map_tiles() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.map_tiles)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_map_tiles();
  return map_tiles_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_map_tiles(
    ::std::string* map_tiles) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (map_tiles != NULL) {
    set_has_map_tiles();
  } else {
    clear_has_map_tiles();
  }
  map_tiles_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      map_tiles, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.map_tiles)
}

// required bytes map_size = 8;
inline bool ConfigPveMapModel::has_map_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigPveMapModel::set_has_map_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigPveMapModel::clear_has_map_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigPveMapModel::clear_map_size() {
  map_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_map_size();
}
inline const ::std::string& ConfigPveMapModel::map_size() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.map_size)
  return map_size_.Get();
}
inline void ConfigPveMapModel::set_map_size(const ::std::string& value) {
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.map_size)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_map_size(::std::string&& value) {
  set_has_map_size();
  map_size_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.map_size)
}
#endif
inline void ConfigPveMapModel::set_map_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.map_size)
}
inline void ConfigPveMapModel::set_map_size(const void* value,
    size_t size) {
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.map_size)
}
inline ::std::string* ConfigPveMapModel::mutable_map_size() {
  set_has_map_size();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.map_size)
  return map_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_map_size() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.map_size)
  if (!has_map_size()) {
    return NULL;
  }
  clear_has_map_size();
  return map_size_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_map_size(::std::string* map_size) {
  if (map_size != NULL) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  map_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.map_size)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_map_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.map_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_map_size();
  return map_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_map_size(
    ::std::string* map_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (map_size != NULL) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  map_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      map_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.map_size)
}

// required bytes random_room_one = 11;
inline bool ConfigPveMapModel::has_random_room_one() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigPveMapModel::set_has_random_room_one() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigPveMapModel::clear_has_random_room_one() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigPveMapModel::clear_random_room_one() {
  random_room_one_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_room_one();
}
inline const ::std::string& ConfigPveMapModel::random_room_one() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_room_one)
  return random_room_one_.Get();
}
inline void ConfigPveMapModel::set_random_room_one(const ::std::string& value) {
  set_has_random_room_one();
  random_room_one_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_room_one)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_room_one(::std::string&& value) {
  set_has_random_room_one();
  random_room_one_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_room_one)
}
#endif
inline void ConfigPveMapModel::set_random_room_one(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_room_one();
  random_room_one_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_room_one)
}
inline void ConfigPveMapModel::set_random_room_one(const void* value,
    size_t size) {
  set_has_random_room_one();
  random_room_one_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_room_one)
}
inline ::std::string* ConfigPveMapModel::mutable_random_room_one() {
  set_has_random_room_one();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_room_one)
  return random_room_one_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_room_one() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_room_one)
  if (!has_random_room_one()) {
    return NULL;
  }
  clear_has_random_room_one();
  return random_room_one_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_room_one(::std::string* random_room_one) {
  if (random_room_one != NULL) {
    set_has_random_room_one();
  } else {
    clear_has_random_room_one();
  }
  random_room_one_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_room_one,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_room_one)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_room_one() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_room_one)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_room_one();
  return random_room_one_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_room_one(
    ::std::string* random_room_one) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_room_one != NULL) {
    set_has_random_room_one();
  } else {
    clear_has_random_room_one();
  }
  random_room_one_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_room_one, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_room_one)
}

// required bytes random_room_two = 12;
inline bool ConfigPveMapModel::has_random_room_two() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigPveMapModel::set_has_random_room_two() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigPveMapModel::clear_has_random_room_two() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigPveMapModel::clear_random_room_two() {
  random_room_two_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_room_two();
}
inline const ::std::string& ConfigPveMapModel::random_room_two() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_room_two)
  return random_room_two_.Get();
}
inline void ConfigPveMapModel::set_random_room_two(const ::std::string& value) {
  set_has_random_room_two();
  random_room_two_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_room_two)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_room_two(::std::string&& value) {
  set_has_random_room_two();
  random_room_two_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_room_two)
}
#endif
inline void ConfigPveMapModel::set_random_room_two(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_room_two();
  random_room_two_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_room_two)
}
inline void ConfigPveMapModel::set_random_room_two(const void* value,
    size_t size) {
  set_has_random_room_two();
  random_room_two_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_room_two)
}
inline ::std::string* ConfigPveMapModel::mutable_random_room_two() {
  set_has_random_room_two();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_room_two)
  return random_room_two_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_room_two() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_room_two)
  if (!has_random_room_two()) {
    return NULL;
  }
  clear_has_random_room_two();
  return random_room_two_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_room_two(::std::string* random_room_two) {
  if (random_room_two != NULL) {
    set_has_random_room_two();
  } else {
    clear_has_random_room_two();
  }
  random_room_two_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_room_two,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_room_two)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_room_two() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_room_two)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_room_two();
  return random_room_two_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_room_two(
    ::std::string* random_room_two) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_room_two != NULL) {
    set_has_random_room_two();
  } else {
    clear_has_random_room_two();
  }
  random_room_two_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_room_two, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_room_two)
}

// required bytes random_room_three = 13;
inline bool ConfigPveMapModel::has_random_room_three() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigPveMapModel::set_has_random_room_three() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigPveMapModel::clear_has_random_room_three() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigPveMapModel::clear_random_room_three() {
  random_room_three_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_room_three();
}
inline const ::std::string& ConfigPveMapModel::random_room_three() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_room_three)
  return random_room_three_.Get();
}
inline void ConfigPveMapModel::set_random_room_three(const ::std::string& value) {
  set_has_random_room_three();
  random_room_three_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_room_three)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_room_three(::std::string&& value) {
  set_has_random_room_three();
  random_room_three_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_room_three)
}
#endif
inline void ConfigPveMapModel::set_random_room_three(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_room_three();
  random_room_three_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_room_three)
}
inline void ConfigPveMapModel::set_random_room_three(const void* value,
    size_t size) {
  set_has_random_room_three();
  random_room_three_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_room_three)
}
inline ::std::string* ConfigPveMapModel::mutable_random_room_three() {
  set_has_random_room_three();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_room_three)
  return random_room_three_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_room_three() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_room_three)
  if (!has_random_room_three()) {
    return NULL;
  }
  clear_has_random_room_three();
  return random_room_three_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_room_three(::std::string* random_room_three) {
  if (random_room_three != NULL) {
    set_has_random_room_three();
  } else {
    clear_has_random_room_three();
  }
  random_room_three_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_room_three,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_room_three)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_room_three() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_room_three)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_room_three();
  return random_room_three_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_room_three(
    ::std::string* random_room_three) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_room_three != NULL) {
    set_has_random_room_three();
  } else {
    clear_has_random_room_three();
  }
  random_room_three_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_room_three, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_room_three)
}

// required bytes random_room_four = 14;
inline bool ConfigPveMapModel::has_random_room_four() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigPveMapModel::set_has_random_room_four() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigPveMapModel::clear_has_random_room_four() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigPveMapModel::clear_random_room_four() {
  random_room_four_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_room_four();
}
inline const ::std::string& ConfigPveMapModel::random_room_four() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_room_four)
  return random_room_four_.Get();
}
inline void ConfigPveMapModel::set_random_room_four(const ::std::string& value) {
  set_has_random_room_four();
  random_room_four_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_room_four)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_room_four(::std::string&& value) {
  set_has_random_room_four();
  random_room_four_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_room_four)
}
#endif
inline void ConfigPveMapModel::set_random_room_four(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_room_four();
  random_room_four_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_room_four)
}
inline void ConfigPveMapModel::set_random_room_four(const void* value,
    size_t size) {
  set_has_random_room_four();
  random_room_four_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_room_four)
}
inline ::std::string* ConfigPveMapModel::mutable_random_room_four() {
  set_has_random_room_four();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_room_four)
  return random_room_four_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_room_four() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_room_four)
  if (!has_random_room_four()) {
    return NULL;
  }
  clear_has_random_room_four();
  return random_room_four_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_room_four(::std::string* random_room_four) {
  if (random_room_four != NULL) {
    set_has_random_room_four();
  } else {
    clear_has_random_room_four();
  }
  random_room_four_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_room_four,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_room_four)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_room_four() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_room_four)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_room_four();
  return random_room_four_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_room_four(
    ::std::string* random_room_four) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_room_four != NULL) {
    set_has_random_room_four();
  } else {
    clear_has_random_room_four();
  }
  random_room_four_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_room_four, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_room_four)
}

// required bytes random_room_five = 15;
inline bool ConfigPveMapModel::has_random_room_five() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigPveMapModel::set_has_random_room_five() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigPveMapModel::clear_has_random_room_five() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigPveMapModel::clear_random_room_five() {
  random_room_five_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_room_five();
}
inline const ::std::string& ConfigPveMapModel::random_room_five() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_room_five)
  return random_room_five_.Get();
}
inline void ConfigPveMapModel::set_random_room_five(const ::std::string& value) {
  set_has_random_room_five();
  random_room_five_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_room_five)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_room_five(::std::string&& value) {
  set_has_random_room_five();
  random_room_five_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_room_five)
}
#endif
inline void ConfigPveMapModel::set_random_room_five(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_room_five();
  random_room_five_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_room_five)
}
inline void ConfigPveMapModel::set_random_room_five(const void* value,
    size_t size) {
  set_has_random_room_five();
  random_room_five_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_room_five)
}
inline ::std::string* ConfigPveMapModel::mutable_random_room_five() {
  set_has_random_room_five();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_room_five)
  return random_room_five_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_room_five() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_room_five)
  if (!has_random_room_five()) {
    return NULL;
  }
  clear_has_random_room_five();
  return random_room_five_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_room_five(::std::string* random_room_five) {
  if (random_room_five != NULL) {
    set_has_random_room_five();
  } else {
    clear_has_random_room_five();
  }
  random_room_five_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_room_five,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_room_five)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_room_five() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_room_five)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_room_five();
  return random_room_five_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_room_five(
    ::std::string* random_room_five) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_room_five != NULL) {
    set_has_random_room_five();
  } else {
    clear_has_random_room_five();
  }
  random_room_five_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_room_five, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_room_five)
}

// required bytes random_enemy_two = 16;
inline bool ConfigPveMapModel::has_random_enemy_two() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigPveMapModel::set_has_random_enemy_two() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigPveMapModel::clear_has_random_enemy_two() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigPveMapModel::clear_random_enemy_two() {
  random_enemy_two_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_enemy_two();
}
inline const ::std::string& ConfigPveMapModel::random_enemy_two() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_enemy_two)
  return random_enemy_two_.Get();
}
inline void ConfigPveMapModel::set_random_enemy_two(const ::std::string& value) {
  set_has_random_enemy_two();
  random_enemy_two_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_enemy_two)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_enemy_two(::std::string&& value) {
  set_has_random_enemy_two();
  random_enemy_two_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_enemy_two)
}
#endif
inline void ConfigPveMapModel::set_random_enemy_two(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_enemy_two();
  random_enemy_two_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_enemy_two)
}
inline void ConfigPveMapModel::set_random_enemy_two(const void* value,
    size_t size) {
  set_has_random_enemy_two();
  random_enemy_two_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_enemy_two)
}
inline ::std::string* ConfigPveMapModel::mutable_random_enemy_two() {
  set_has_random_enemy_two();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_enemy_two)
  return random_enemy_two_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_enemy_two() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_enemy_two)
  if (!has_random_enemy_two()) {
    return NULL;
  }
  clear_has_random_enemy_two();
  return random_enemy_two_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_enemy_two(::std::string* random_enemy_two) {
  if (random_enemy_two != NULL) {
    set_has_random_enemy_two();
  } else {
    clear_has_random_enemy_two();
  }
  random_enemy_two_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_enemy_two,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_enemy_two)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_enemy_two() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_enemy_two)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_enemy_two();
  return random_enemy_two_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_enemy_two(
    ::std::string* random_enemy_two) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_enemy_two != NULL) {
    set_has_random_enemy_two();
  } else {
    clear_has_random_enemy_two();
  }
  random_enemy_two_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_enemy_two, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_enemy_two)
}

// required bytes random_enemy_three = 17;
inline bool ConfigPveMapModel::has_random_enemy_three() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigPveMapModel::set_has_random_enemy_three() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigPveMapModel::clear_has_random_enemy_three() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigPveMapModel::clear_random_enemy_three() {
  random_enemy_three_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_enemy_three();
}
inline const ::std::string& ConfigPveMapModel::random_enemy_three() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_enemy_three)
  return random_enemy_three_.Get();
}
inline void ConfigPveMapModel::set_random_enemy_three(const ::std::string& value) {
  set_has_random_enemy_three();
  random_enemy_three_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_enemy_three)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_enemy_three(::std::string&& value) {
  set_has_random_enemy_three();
  random_enemy_three_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_enemy_three)
}
#endif
inline void ConfigPveMapModel::set_random_enemy_three(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_enemy_three();
  random_enemy_three_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_enemy_three)
}
inline void ConfigPveMapModel::set_random_enemy_three(const void* value,
    size_t size) {
  set_has_random_enemy_three();
  random_enemy_three_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_enemy_three)
}
inline ::std::string* ConfigPveMapModel::mutable_random_enemy_three() {
  set_has_random_enemy_three();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_enemy_three)
  return random_enemy_three_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_enemy_three() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_enemy_three)
  if (!has_random_enemy_three()) {
    return NULL;
  }
  clear_has_random_enemy_three();
  return random_enemy_three_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_enemy_three(::std::string* random_enemy_three) {
  if (random_enemy_three != NULL) {
    set_has_random_enemy_three();
  } else {
    clear_has_random_enemy_three();
  }
  random_enemy_three_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_enemy_three,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_enemy_three)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_enemy_three() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_enemy_three)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_enemy_three();
  return random_enemy_three_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_enemy_three(
    ::std::string* random_enemy_three) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_enemy_three != NULL) {
    set_has_random_enemy_three();
  } else {
    clear_has_random_enemy_three();
  }
  random_enemy_three_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_enemy_three, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_enemy_three)
}

// required bytes random_enemy_four = 18;
inline bool ConfigPveMapModel::has_random_enemy_four() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigPveMapModel::set_has_random_enemy_four() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigPveMapModel::clear_has_random_enemy_four() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigPveMapModel::clear_random_enemy_four() {
  random_enemy_four_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_enemy_four();
}
inline const ::std::string& ConfigPveMapModel::random_enemy_four() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_enemy_four)
  return random_enemy_four_.Get();
}
inline void ConfigPveMapModel::set_random_enemy_four(const ::std::string& value) {
  set_has_random_enemy_four();
  random_enemy_four_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_enemy_four)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_enemy_four(::std::string&& value) {
  set_has_random_enemy_four();
  random_enemy_four_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_enemy_four)
}
#endif
inline void ConfigPveMapModel::set_random_enemy_four(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_enemy_four();
  random_enemy_four_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_enemy_four)
}
inline void ConfigPveMapModel::set_random_enemy_four(const void* value,
    size_t size) {
  set_has_random_enemy_four();
  random_enemy_four_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_enemy_four)
}
inline ::std::string* ConfigPveMapModel::mutable_random_enemy_four() {
  set_has_random_enemy_four();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_enemy_four)
  return random_enemy_four_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_enemy_four() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_enemy_four)
  if (!has_random_enemy_four()) {
    return NULL;
  }
  clear_has_random_enemy_four();
  return random_enemy_four_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_enemy_four(::std::string* random_enemy_four) {
  if (random_enemy_four != NULL) {
    set_has_random_enemy_four();
  } else {
    clear_has_random_enemy_four();
  }
  random_enemy_four_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_enemy_four,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_enemy_four)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_enemy_four() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_enemy_four)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_enemy_four();
  return random_enemy_four_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_enemy_four(
    ::std::string* random_enemy_four) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_enemy_four != NULL) {
    set_has_random_enemy_four();
  } else {
    clear_has_random_enemy_four();
  }
  random_enemy_four_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_enemy_four, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_enemy_four)
}

// required bytes random_enemy_five = 19;
inline bool ConfigPveMapModel::has_random_enemy_five() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigPveMapModel::set_has_random_enemy_five() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigPveMapModel::clear_has_random_enemy_five() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigPveMapModel::clear_random_enemy_five() {
  random_enemy_five_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_enemy_five();
}
inline const ::std::string& ConfigPveMapModel::random_enemy_five() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.random_enemy_five)
  return random_enemy_five_.Get();
}
inline void ConfigPveMapModel::set_random_enemy_five(const ::std::string& value) {
  set_has_random_enemy_five();
  random_enemy_five_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.random_enemy_five)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_random_enemy_five(::std::string&& value) {
  set_has_random_enemy_five();
  random_enemy_five_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.random_enemy_five)
}
#endif
inline void ConfigPveMapModel::set_random_enemy_five(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_enemy_five();
  random_enemy_five_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.random_enemy_five)
}
inline void ConfigPveMapModel::set_random_enemy_five(const void* value,
    size_t size) {
  set_has_random_enemy_five();
  random_enemy_five_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.random_enemy_five)
}
inline ::std::string* ConfigPveMapModel::mutable_random_enemy_five() {
  set_has_random_enemy_five();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.random_enemy_five)
  return random_enemy_five_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_random_enemy_five() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.random_enemy_five)
  if (!has_random_enemy_five()) {
    return NULL;
  }
  clear_has_random_enemy_five();
  return random_enemy_five_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_random_enemy_five(::std::string* random_enemy_five) {
  if (random_enemy_five != NULL) {
    set_has_random_enemy_five();
  } else {
    clear_has_random_enemy_five();
  }
  random_enemy_five_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_enemy_five,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.random_enemy_five)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_random_enemy_five() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.random_enemy_five)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_enemy_five();
  return random_enemy_five_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_random_enemy_five(
    ::std::string* random_enemy_five) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_enemy_five != NULL) {
    set_has_random_enemy_five();
  } else {
    clear_has_random_enemy_five();
  }
  random_enemy_five_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_enemy_five, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.random_enemy_five)
}

// required bytes facilitys = 21;
inline bool ConfigPveMapModel::has_facilitys() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigPveMapModel::set_has_facilitys() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigPveMapModel::clear_has_facilitys() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigPveMapModel::clear_facilitys() {
  facilitys_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_facilitys();
}
inline const ::std::string& ConfigPveMapModel::facilitys() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.facilitys)
  return facilitys_.Get();
}
inline void ConfigPveMapModel::set_facilitys(const ::std::string& value) {
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.facilitys)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_facilitys(::std::string&& value) {
  set_has_facilitys();
  facilitys_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.facilitys)
}
#endif
inline void ConfigPveMapModel::set_facilitys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.facilitys)
}
inline void ConfigPveMapModel::set_facilitys(const void* value,
    size_t size) {
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.facilitys)
}
inline ::std::string* ConfigPveMapModel::mutable_facilitys() {
  set_has_facilitys();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.facilitys)
  return facilitys_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_facilitys() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.facilitys)
  if (!has_facilitys()) {
    return NULL;
  }
  clear_has_facilitys();
  return facilitys_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_facilitys(::std::string* facilitys) {
  if (facilitys != NULL) {
    set_has_facilitys();
  } else {
    clear_has_facilitys();
  }
  facilitys_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facilitys,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.facilitys)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_facilitys() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.facilitys)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_facilitys();
  return facilitys_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_facilitys(
    ::std::string* facilitys) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (facilitys != NULL) {
    set_has_facilitys();
  } else {
    clear_has_facilitys();
  }
  facilitys_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      facilitys, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.facilitys)
}

// required bytes confirm_room = 22;
inline bool ConfigPveMapModel::has_confirm_room() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigPveMapModel::set_has_confirm_room() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigPveMapModel::clear_has_confirm_room() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigPveMapModel::clear_confirm_room() {
  confirm_room_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_confirm_room();
}
inline const ::std::string& ConfigPveMapModel::confirm_room() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.confirm_room)
  return confirm_room_.Get();
}
inline void ConfigPveMapModel::set_confirm_room(const ::std::string& value) {
  set_has_confirm_room();
  confirm_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.confirm_room)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_confirm_room(::std::string&& value) {
  set_has_confirm_room();
  confirm_room_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.confirm_room)
}
#endif
inline void ConfigPveMapModel::set_confirm_room(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirm_room();
  confirm_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.confirm_room)
}
inline void ConfigPveMapModel::set_confirm_room(const void* value,
    size_t size) {
  set_has_confirm_room();
  confirm_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.confirm_room)
}
inline ::std::string* ConfigPveMapModel::mutable_confirm_room() {
  set_has_confirm_room();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.confirm_room)
  return confirm_room_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_confirm_room() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.confirm_room)
  if (!has_confirm_room()) {
    return NULL;
  }
  clear_has_confirm_room();
  return confirm_room_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_confirm_room(::std::string* confirm_room) {
  if (confirm_room != NULL) {
    set_has_confirm_room();
  } else {
    clear_has_confirm_room();
  }
  confirm_room_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_room,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.confirm_room)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_confirm_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.confirm_room)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_confirm_room();
  return confirm_room_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_confirm_room(
    ::std::string* confirm_room) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (confirm_room != NULL) {
    set_has_confirm_room();
  } else {
    clear_has_confirm_room();
  }
  confirm_room_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      confirm_room, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.confirm_room)
}

// required bytes confirm_element = 23;
inline bool ConfigPveMapModel::has_confirm_element() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigPveMapModel::set_has_confirm_element() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigPveMapModel::clear_has_confirm_element() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigPveMapModel::clear_confirm_element() {
  confirm_element_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_confirm_element();
}
inline const ::std::string& ConfigPveMapModel::confirm_element() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.confirm_element)
  return confirm_element_.Get();
}
inline void ConfigPveMapModel::set_confirm_element(const ::std::string& value) {
  set_has_confirm_element();
  confirm_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.confirm_element)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_confirm_element(::std::string&& value) {
  set_has_confirm_element();
  confirm_element_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.confirm_element)
}
#endif
inline void ConfigPveMapModel::set_confirm_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirm_element();
  confirm_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.confirm_element)
}
inline void ConfigPveMapModel::set_confirm_element(const void* value,
    size_t size) {
  set_has_confirm_element();
  confirm_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.confirm_element)
}
inline ::std::string* ConfigPveMapModel::mutable_confirm_element() {
  set_has_confirm_element();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.confirm_element)
  return confirm_element_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_confirm_element() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.confirm_element)
  if (!has_confirm_element()) {
    return NULL;
  }
  clear_has_confirm_element();
  return confirm_element_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_confirm_element(::std::string* confirm_element) {
  if (confirm_element != NULL) {
    set_has_confirm_element();
  } else {
    clear_has_confirm_element();
  }
  confirm_element_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_element,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.confirm_element)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_confirm_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.confirm_element)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_confirm_element();
  return confirm_element_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_confirm_element(
    ::std::string* confirm_element) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (confirm_element != NULL) {
    set_has_confirm_element();
  } else {
    clear_has_confirm_element();
  }
  confirm_element_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      confirm_element, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.confirm_element)
}

// required bytes locked_room = 24;
inline bool ConfigPveMapModel::has_locked_room() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigPveMapModel::set_has_locked_room() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigPveMapModel::clear_has_locked_room() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigPveMapModel::clear_locked_room() {
  locked_room_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_locked_room();
}
inline const ::std::string& ConfigPveMapModel::locked_room() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveMapModel.locked_room)
  return locked_room_.Get();
}
inline void ConfigPveMapModel::set_locked_room(const ::std::string& value) {
  set_has_locked_room();
  locked_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveMapModel.locked_room)
}
#if LANG_CXX11
inline void ConfigPveMapModel::set_locked_room(::std::string&& value) {
  set_has_locked_room();
  locked_room_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveMapModel.locked_room)
}
#endif
inline void ConfigPveMapModel::set_locked_room(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_locked_room();
  locked_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveMapModel.locked_room)
}
inline void ConfigPveMapModel::set_locked_room(const void* value,
    size_t size) {
  set_has_locked_room();
  locked_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveMapModel.locked_room)
}
inline ::std::string* ConfigPveMapModel::mutable_locked_room() {
  set_has_locked_room();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveMapModel.locked_room)
  return locked_room_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveMapModel::release_locked_room() {
  // @@protoc_insertion_point(field_release:db.ConfigPveMapModel.locked_room)
  if (!has_locked_room()) {
    return NULL;
  }
  clear_has_locked_room();
  return locked_room_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveMapModel::set_allocated_locked_room(::std::string* locked_room) {
  if (locked_room != NULL) {
    set_has_locked_room();
  } else {
    clear_has_locked_room();
  }
  locked_room_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locked_room,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveMapModel.locked_room)
}
inline ::std::string* ConfigPveMapModel::unsafe_arena_release_locked_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveMapModel.locked_room)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_locked_room();
  return locked_room_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveMapModel::unsafe_arena_set_allocated_locked_room(
    ::std::string* locked_room) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (locked_room != NULL) {
    set_has_locked_room();
  } else {
    clear_has_locked_room();
  }
  locked_room_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      locked_room, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveMapModel.locked_room)
}

// -------------------------------------------------------------------

// ConfigPveRoomModel

// required int32 id = 1;
inline bool ConfigPveRoomModel::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigPveRoomModel::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigPveRoomModel::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigPveRoomModel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigPveRoomModel::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.id)
  return id_;
}
inline void ConfigPveRoomModel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.id)
}

// required int32 groupid = 2;
inline bool ConfigPveRoomModel::has_groupid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigPveRoomModel::set_has_groupid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigPveRoomModel::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigPveRoomModel::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 ConfigPveRoomModel::groupid() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.groupid)
  return groupid_;
}
inline void ConfigPveRoomModel::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.groupid)
}

// required int32 type = 3;
inline bool ConfigPveRoomModel::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigPveRoomModel::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigPveRoomModel::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigPveRoomModel::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigPveRoomModel::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.type)
  return type_;
}
inline void ConfigPveRoomModel::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.type)
}

// required bytes facilitys = 4;
inline bool ConfigPveRoomModel::has_facilitys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigPveRoomModel::set_has_facilitys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigPveRoomModel::clear_has_facilitys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigPveRoomModel::clear_facilitys() {
  facilitys_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_facilitys();
}
inline const ::std::string& ConfigPveRoomModel::facilitys() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.facilitys)
  return facilitys_.Get();
}
inline void ConfigPveRoomModel::set_facilitys(const ::std::string& value) {
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.facilitys)
}
#if LANG_CXX11
inline void ConfigPveRoomModel::set_facilitys(::std::string&& value) {
  set_has_facilitys();
  facilitys_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveRoomModel.facilitys)
}
#endif
inline void ConfigPveRoomModel::set_facilitys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveRoomModel.facilitys)
}
inline void ConfigPveRoomModel::set_facilitys(const void* value,
    size_t size) {
  set_has_facilitys();
  facilitys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveRoomModel.facilitys)
}
inline ::std::string* ConfigPveRoomModel::mutable_facilitys() {
  set_has_facilitys();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveRoomModel.facilitys)
  return facilitys_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveRoomModel::release_facilitys() {
  // @@protoc_insertion_point(field_release:db.ConfigPveRoomModel.facilitys)
  if (!has_facilitys()) {
    return NULL;
  }
  clear_has_facilitys();
  return facilitys_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::set_allocated_facilitys(::std::string* facilitys) {
  if (facilitys != NULL) {
    set_has_facilitys();
  } else {
    clear_has_facilitys();
  }
  facilitys_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facilitys,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveRoomModel.facilitys)
}
inline ::std::string* ConfigPveRoomModel::unsafe_arena_release_facilitys() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveRoomModel.facilitys)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_facilitys();
  return facilitys_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::unsafe_arena_set_allocated_facilitys(
    ::std::string* facilitys) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (facilitys != NULL) {
    set_has_facilitys();
  } else {
    clear_has_facilitys();
  }
  facilitys_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      facilitys, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveRoomModel.facilitys)
}

// required bytes drops = 5;
inline bool ConfigPveRoomModel::has_drops() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigPveRoomModel::set_has_drops() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigPveRoomModel::clear_has_drops() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigPveRoomModel::clear_drops() {
  drops_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drops();
}
inline const ::std::string& ConfigPveRoomModel::drops() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.drops)
  return drops_.Get();
}
inline void ConfigPveRoomModel::set_drops(const ::std::string& value) {
  set_has_drops();
  drops_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.drops)
}
#if LANG_CXX11
inline void ConfigPveRoomModel::set_drops(::std::string&& value) {
  set_has_drops();
  drops_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveRoomModel.drops)
}
#endif
inline void ConfigPveRoomModel::set_drops(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drops();
  drops_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveRoomModel.drops)
}
inline void ConfigPveRoomModel::set_drops(const void* value,
    size_t size) {
  set_has_drops();
  drops_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveRoomModel.drops)
}
inline ::std::string* ConfigPveRoomModel::mutable_drops() {
  set_has_drops();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveRoomModel.drops)
  return drops_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveRoomModel::release_drops() {
  // @@protoc_insertion_point(field_release:db.ConfigPveRoomModel.drops)
  if (!has_drops()) {
    return NULL;
  }
  clear_has_drops();
  return drops_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::set_allocated_drops(::std::string* drops) {
  if (drops != NULL) {
    set_has_drops();
  } else {
    clear_has_drops();
  }
  drops_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drops,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveRoomModel.drops)
}
inline ::std::string* ConfigPveRoomModel::unsafe_arena_release_drops() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveRoomModel.drops)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drops();
  return drops_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::unsafe_arena_set_allocated_drops(
    ::std::string* drops) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drops != NULL) {
    set_has_drops();
  } else {
    clear_has_drops();
  }
  drops_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drops, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveRoomModel.drops)
}

// required bytes machine = 6;
inline bool ConfigPveRoomModel::has_machine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigPveRoomModel::set_has_machine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigPveRoomModel::clear_has_machine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigPveRoomModel::clear_machine() {
  machine_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_machine();
}
inline const ::std::string& ConfigPveRoomModel::machine() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.machine)
  return machine_.Get();
}
inline void ConfigPveRoomModel::set_machine(const ::std::string& value) {
  set_has_machine();
  machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.machine)
}
#if LANG_CXX11
inline void ConfigPveRoomModel::set_machine(::std::string&& value) {
  set_has_machine();
  machine_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveRoomModel.machine)
}
#endif
inline void ConfigPveRoomModel::set_machine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine();
  machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveRoomModel.machine)
}
inline void ConfigPveRoomModel::set_machine(const void* value,
    size_t size) {
  set_has_machine();
  machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveRoomModel.machine)
}
inline ::std::string* ConfigPveRoomModel::mutable_machine() {
  set_has_machine();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveRoomModel.machine)
  return machine_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveRoomModel::release_machine() {
  // @@protoc_insertion_point(field_release:db.ConfigPveRoomModel.machine)
  if (!has_machine()) {
    return NULL;
  }
  clear_has_machine();
  return machine_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::set_allocated_machine(::std::string* machine) {
  if (machine != NULL) {
    set_has_machine();
  } else {
    clear_has_machine();
  }
  machine_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveRoomModel.machine)
}
inline ::std::string* ConfigPveRoomModel::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveRoomModel.machine)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_machine();
  return machine_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::unsafe_arena_set_allocated_machine(
    ::std::string* machine) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (machine != NULL) {
    set_has_machine();
  } else {
    clear_has_machine();
  }
  machine_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      machine, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveRoomModel.machine)
}

// required bytes random_machine = 7;
inline bool ConfigPveRoomModel::has_random_machine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigPveRoomModel::set_has_random_machine() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigPveRoomModel::clear_has_random_machine() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigPveRoomModel::clear_random_machine() {
  random_machine_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_machine();
}
inline const ::std::string& ConfigPveRoomModel::random_machine() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.random_machine)
  return random_machine_.Get();
}
inline void ConfigPveRoomModel::set_random_machine(const ::std::string& value) {
  set_has_random_machine();
  random_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.random_machine)
}
#if LANG_CXX11
inline void ConfigPveRoomModel::set_random_machine(::std::string&& value) {
  set_has_random_machine();
  random_machine_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveRoomModel.random_machine)
}
#endif
inline void ConfigPveRoomModel::set_random_machine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_machine();
  random_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveRoomModel.random_machine)
}
inline void ConfigPveRoomModel::set_random_machine(const void* value,
    size_t size) {
  set_has_random_machine();
  random_machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveRoomModel.random_machine)
}
inline ::std::string* ConfigPveRoomModel::mutable_random_machine() {
  set_has_random_machine();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveRoomModel.random_machine)
  return random_machine_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveRoomModel::release_random_machine() {
  // @@protoc_insertion_point(field_release:db.ConfigPveRoomModel.random_machine)
  if (!has_random_machine()) {
    return NULL;
  }
  clear_has_random_machine();
  return random_machine_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::set_allocated_random_machine(::std::string* random_machine) {
  if (random_machine != NULL) {
    set_has_random_machine();
  } else {
    clear_has_random_machine();
  }
  random_machine_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_machine,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveRoomModel.random_machine)
}
inline ::std::string* ConfigPveRoomModel::unsafe_arena_release_random_machine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveRoomModel.random_machine)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_machine();
  return random_machine_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::unsafe_arena_set_allocated_random_machine(
    ::std::string* random_machine) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_machine != NULL) {
    set_has_random_machine();
  } else {
    clear_has_random_machine();
  }
  random_machine_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_machine, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveRoomModel.random_machine)
}

// required bytes altar = 8;
inline bool ConfigPveRoomModel::has_altar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigPveRoomModel::set_has_altar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigPveRoomModel::clear_has_altar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigPveRoomModel::clear_altar() {
  altar_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_altar();
}
inline const ::std::string& ConfigPveRoomModel::altar() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.altar)
  return altar_.Get();
}
inline void ConfigPveRoomModel::set_altar(const ::std::string& value) {
  set_has_altar();
  altar_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.altar)
}
#if LANG_CXX11
inline void ConfigPveRoomModel::set_altar(::std::string&& value) {
  set_has_altar();
  altar_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveRoomModel.altar)
}
#endif
inline void ConfigPveRoomModel::set_altar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_altar();
  altar_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveRoomModel.altar)
}
inline void ConfigPveRoomModel::set_altar(const void* value,
    size_t size) {
  set_has_altar();
  altar_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveRoomModel.altar)
}
inline ::std::string* ConfigPveRoomModel::mutable_altar() {
  set_has_altar();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveRoomModel.altar)
  return altar_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveRoomModel::release_altar() {
  // @@protoc_insertion_point(field_release:db.ConfigPveRoomModel.altar)
  if (!has_altar()) {
    return NULL;
  }
  clear_has_altar();
  return altar_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::set_allocated_altar(::std::string* altar) {
  if (altar != NULL) {
    set_has_altar();
  } else {
    clear_has_altar();
  }
  altar_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), altar,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveRoomModel.altar)
}
inline ::std::string* ConfigPveRoomModel::unsafe_arena_release_altar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveRoomModel.altar)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_altar();
  return altar_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::unsafe_arena_set_allocated_altar(
    ::std::string* altar) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (altar != NULL) {
    set_has_altar();
  } else {
    clear_has_altar();
  }
  altar_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      altar, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveRoomModel.altar)
}

// required bytes room_size = 9;
inline bool ConfigPveRoomModel::has_room_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigPveRoomModel::set_has_room_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigPveRoomModel::clear_has_room_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigPveRoomModel::clear_room_size() {
  room_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_room_size();
}
inline const ::std::string& ConfigPveRoomModel::room_size() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.room_size)
  return room_size_.Get();
}
inline void ConfigPveRoomModel::set_room_size(const ::std::string& value) {
  set_has_room_size();
  room_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.room_size)
}
#if LANG_CXX11
inline void ConfigPveRoomModel::set_room_size(::std::string&& value) {
  set_has_room_size();
  room_size_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveRoomModel.room_size)
}
#endif
inline void ConfigPveRoomModel::set_room_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_room_size();
  room_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveRoomModel.room_size)
}
inline void ConfigPveRoomModel::set_room_size(const void* value,
    size_t size) {
  set_has_room_size();
  room_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveRoomModel.room_size)
}
inline ::std::string* ConfigPveRoomModel::mutable_room_size() {
  set_has_room_size();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveRoomModel.room_size)
  return room_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveRoomModel::release_room_size() {
  // @@protoc_insertion_point(field_release:db.ConfigPveRoomModel.room_size)
  if (!has_room_size()) {
    return NULL;
  }
  clear_has_room_size();
  return room_size_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::set_allocated_room_size(::std::string* room_size) {
  if (room_size != NULL) {
    set_has_room_size();
  } else {
    clear_has_room_size();
  }
  room_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveRoomModel.room_size)
}
inline ::std::string* ConfigPveRoomModel::unsafe_arena_release_room_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveRoomModel.room_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_room_size();
  return room_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::unsafe_arena_set_allocated_room_size(
    ::std::string* room_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_size != NULL) {
    set_has_room_size();
  } else {
    clear_has_room_size();
  }
  room_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveRoomModel.room_size)
}

// required int32 exist_enemy = 10;
inline bool ConfigPveRoomModel::has_exist_enemy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigPveRoomModel::set_has_exist_enemy() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigPveRoomModel::clear_has_exist_enemy() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigPveRoomModel::clear_exist_enemy() {
  exist_enemy_ = 0;
  clear_has_exist_enemy();
}
inline ::google::protobuf::int32 ConfigPveRoomModel::exist_enemy() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.exist_enemy)
  return exist_enemy_;
}
inline void ConfigPveRoomModel::set_exist_enemy(::google::protobuf::int32 value) {
  set_has_exist_enemy();
  exist_enemy_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.exist_enemy)
}

// required bytes chest = 11;
inline bool ConfigPveRoomModel::has_chest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigPveRoomModel::set_has_chest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigPveRoomModel::clear_has_chest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigPveRoomModel::clear_chest() {
  chest_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_chest();
}
inline const ::std::string& ConfigPveRoomModel::chest() const {
  // @@protoc_insertion_point(field_get:db.ConfigPveRoomModel.chest)
  return chest_.Get();
}
inline void ConfigPveRoomModel::set_chest(const ::std::string& value) {
  set_has_chest();
  chest_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPveRoomModel.chest)
}
#if LANG_CXX11
inline void ConfigPveRoomModel::set_chest(::std::string&& value) {
  set_has_chest();
  chest_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPveRoomModel.chest)
}
#endif
inline void ConfigPveRoomModel::set_chest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chest();
  chest_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPveRoomModel.chest)
}
inline void ConfigPveRoomModel::set_chest(const void* value,
    size_t size) {
  set_has_chest();
  chest_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPveRoomModel.chest)
}
inline ::std::string* ConfigPveRoomModel::mutable_chest() {
  set_has_chest();
  // @@protoc_insertion_point(field_mutable:db.ConfigPveRoomModel.chest)
  return chest_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPveRoomModel::release_chest() {
  // @@protoc_insertion_point(field_release:db.ConfigPveRoomModel.chest)
  if (!has_chest()) {
    return NULL;
  }
  clear_has_chest();
  return chest_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::set_allocated_chest(::std::string* chest) {
  if (chest != NULL) {
    set_has_chest();
  } else {
    clear_has_chest();
  }
  chest_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chest,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPveRoomModel.chest)
}
inline ::std::string* ConfigPveRoomModel::unsafe_arena_release_chest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPveRoomModel.chest)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_chest();
  return chest_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPveRoomModel::unsafe_arena_set_allocated_chest(
    ::std::string* chest) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (chest != NULL) {
    set_has_chest();
  } else {
    clear_has_chest();
  }
  chest_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      chest, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPveRoomModel.chest)
}

// -------------------------------------------------------------------

// ConfigChest

// required int32 id = 1;
inline bool ConfigChest::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigChest::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigChest::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigChest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigChest::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigChest.id)
  return id_;
}
inline void ConfigChest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigChest.id)
}

// required int32 phase = 2;
inline bool ConfigChest::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigChest::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigChest::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigChest::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 ConfigChest::phase() const {
  // @@protoc_insertion_point(field_get:db.ConfigChest.phase)
  return phase_;
}
inline void ConfigChest::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigChest.phase)
}

// required bytes level = 3;
inline bool ConfigChest::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigChest::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigChest::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigChest::clear_level() {
  level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level();
}
inline const ::std::string& ConfigChest::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigChest.level)
  return level_.Get();
}
inline void ConfigChest::set_level(const ::std::string& value) {
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigChest.level)
}
#if LANG_CXX11
inline void ConfigChest::set_level(::std::string&& value) {
  set_has_level();
  level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigChest.level)
}
#endif
inline void ConfigChest::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigChest.level)
}
inline void ConfigChest::set_level(const void* value,
    size_t size) {
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigChest.level)
}
inline ::std::string* ConfigChest::mutable_level() {
  set_has_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigChest.level)
  return level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigChest::release_level() {
  // @@protoc_insertion_point(field_release:db.ConfigChest.level)
  if (!has_level()) {
    return NULL;
  }
  clear_has_level();
  return level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigChest::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    set_has_level();
  } else {
    clear_has_level();
  }
  level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigChest.level)
}
inline ::std::string* ConfigChest::unsafe_arena_release_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigChest.level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level();
  return level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigChest::unsafe_arena_set_allocated_level(
    ::std::string* level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level != NULL) {
    set_has_level();
  } else {
    clear_has_level();
  }
  level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigChest.level)
}

// required bytes drop_item = 4;
inline bool ConfigChest::has_drop_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigChest::set_has_drop_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigChest::clear_has_drop_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigChest::clear_drop_item() {
  drop_item_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop_item();
}
inline const ::std::string& ConfigChest::drop_item() const {
  // @@protoc_insertion_point(field_get:db.ConfigChest.drop_item)
  return drop_item_.Get();
}
inline void ConfigChest::set_drop_item(const ::std::string& value) {
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigChest.drop_item)
}
#if LANG_CXX11
inline void ConfigChest::set_drop_item(::std::string&& value) {
  set_has_drop_item();
  drop_item_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigChest.drop_item)
}
#endif
inline void ConfigChest::set_drop_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigChest.drop_item)
}
inline void ConfigChest::set_drop_item(const void* value,
    size_t size) {
  set_has_drop_item();
  drop_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigChest.drop_item)
}
inline ::std::string* ConfigChest::mutable_drop_item() {
  set_has_drop_item();
  // @@protoc_insertion_point(field_mutable:db.ConfigChest.drop_item)
  return drop_item_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigChest::release_drop_item() {
  // @@protoc_insertion_point(field_release:db.ConfigChest.drop_item)
  if (!has_drop_item()) {
    return NULL;
  }
  clear_has_drop_item();
  return drop_item_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigChest::set_allocated_drop_item(::std::string* drop_item) {
  if (drop_item != NULL) {
    set_has_drop_item();
  } else {
    clear_has_drop_item();
  }
  drop_item_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_item,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigChest.drop_item)
}
inline ::std::string* ConfigChest::unsafe_arena_release_drop_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigChest.drop_item)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop_item();
  return drop_item_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigChest::unsafe_arena_set_allocated_drop_item(
    ::std::string* drop_item) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop_item != NULL) {
    set_has_drop_item();
  } else {
    clear_has_drop_item();
  }
  drop_item_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop_item, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigChest.drop_item)
}

// required bytes drop_group = 5;
inline bool ConfigChest::has_drop_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigChest::set_has_drop_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigChest::clear_has_drop_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigChest::clear_drop_group() {
  drop_group_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop_group();
}
inline const ::std::string& ConfigChest::drop_group() const {
  // @@protoc_insertion_point(field_get:db.ConfigChest.drop_group)
  return drop_group_.Get();
}
inline void ConfigChest::set_drop_group(const ::std::string& value) {
  set_has_drop_group();
  drop_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigChest.drop_group)
}
#if LANG_CXX11
inline void ConfigChest::set_drop_group(::std::string&& value) {
  set_has_drop_group();
  drop_group_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigChest.drop_group)
}
#endif
inline void ConfigChest::set_drop_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop_group();
  drop_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigChest.drop_group)
}
inline void ConfigChest::set_drop_group(const void* value,
    size_t size) {
  set_has_drop_group();
  drop_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigChest.drop_group)
}
inline ::std::string* ConfigChest::mutable_drop_group() {
  set_has_drop_group();
  // @@protoc_insertion_point(field_mutable:db.ConfigChest.drop_group)
  return drop_group_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigChest::release_drop_group() {
  // @@protoc_insertion_point(field_release:db.ConfigChest.drop_group)
  if (!has_drop_group()) {
    return NULL;
  }
  clear_has_drop_group();
  return drop_group_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigChest::set_allocated_drop_group(::std::string* drop_group) {
  if (drop_group != NULL) {
    set_has_drop_group();
  } else {
    clear_has_drop_group();
  }
  drop_group_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_group,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigChest.drop_group)
}
inline ::std::string* ConfigChest::unsafe_arena_release_drop_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigChest.drop_group)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop_group();
  return drop_group_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigChest::unsafe_arena_set_allocated_drop_group(
    ::std::string* drop_group) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop_group != NULL) {
    set_has_drop_group();
  } else {
    clear_has_drop_group();
  }
  drop_group_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop_group, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigChest.drop_group)
}

// -------------------------------------------------------------------

// ConfigDropItemGroup

// required int32 id = 1;
inline bool ConfigDropItemGroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDropItemGroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDropItemGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDropItemGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigDropItemGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDropItemGroup.id)
  return id_;
}
inline void ConfigDropItemGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDropItemGroup.id)
}

// required int32 groupid = 2;
inline bool ConfigDropItemGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDropItemGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDropItemGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDropItemGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 ConfigDropItemGroup::groupid() const {
  // @@protoc_insertion_point(field_get:db.ConfigDropItemGroup.groupid)
  return groupid_;
}
inline void ConfigDropItemGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDropItemGroup.groupid)
}

// required int32 type = 3;
inline bool ConfigDropItemGroup::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDropItemGroup::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDropItemGroup::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDropItemGroup::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigDropItemGroup::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigDropItemGroup.type)
  return type_;
}
inline void ConfigDropItemGroup::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDropItemGroup.type)
}

// required int32 index = 4;
inline bool ConfigDropItemGroup::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigDropItemGroup::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigDropItemGroup::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigDropItemGroup::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ConfigDropItemGroup::index() const {
  // @@protoc_insertion_point(field_get:db.ConfigDropItemGroup.index)
  return index_;
}
inline void ConfigDropItemGroup::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDropItemGroup.index)
}

// required int32 typeid = 5;
inline bool ConfigDropItemGroup::has_typeid_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigDropItemGroup::set_has_typeid_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigDropItemGroup::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigDropItemGroup::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 ConfigDropItemGroup::typeid_() const {
  // @@protoc_insertion_point(field_get:db.ConfigDropItemGroup.typeid)
  return typeid__;
}
inline void ConfigDropItemGroup::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDropItemGroup.typeid)
}

// required int32 num_min = 6;
inline bool ConfigDropItemGroup::has_num_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigDropItemGroup::set_has_num_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigDropItemGroup::clear_has_num_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigDropItemGroup::clear_num_min() {
  num_min_ = 0;
  clear_has_num_min();
}
inline ::google::protobuf::int32 ConfigDropItemGroup::num_min() const {
  // @@protoc_insertion_point(field_get:db.ConfigDropItemGroup.num_min)
  return num_min_;
}
inline void ConfigDropItemGroup::set_num_min(::google::protobuf::int32 value) {
  set_has_num_min();
  num_min_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDropItemGroup.num_min)
}

// required int32 num_max = 7;
inline bool ConfigDropItemGroup::has_num_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigDropItemGroup::set_has_num_max() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigDropItemGroup::clear_has_num_max() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigDropItemGroup::clear_num_max() {
  num_max_ = 0;
  clear_has_num_max();
}
inline ::google::protobuf::int32 ConfigDropItemGroup::num_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigDropItemGroup.num_max)
  return num_max_;
}
inline void ConfigDropItemGroup::set_num_max(::google::protobuf::int32 value) {
  set_has_num_max();
  num_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDropItemGroup.num_max)
}

// required float probability = 8;
inline bool ConfigDropItemGroup::has_probability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigDropItemGroup::set_has_probability() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigDropItemGroup::clear_has_probability() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigDropItemGroup::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline float ConfigDropItemGroup::probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigDropItemGroup.probability)
  return probability_;
}
inline void ConfigDropItemGroup::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDropItemGroup.probability)
}

// -------------------------------------------------------------------

// ConfigLottery

// required int32 id = 1;
inline bool ConfigLottery::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigLottery::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigLottery::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigLottery::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigLottery::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigLottery.id)
  return id_;
}
inline void ConfigLottery::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLottery.id)
}

// required int32 type = 2;
inline bool ConfigLottery::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigLottery::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigLottery::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigLottery::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigLottery::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigLottery.type)
  return type_;
}
inline void ConfigLottery::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLottery.type)
}

// required bytes cost = 3;
inline bool ConfigLottery::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigLottery::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigLottery::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigLottery::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigLottery::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigLottery.cost)
  return cost_.Get();
}
inline void ConfigLottery::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigLottery.cost)
}
#if LANG_CXX11
inline void ConfigLottery::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigLottery.cost)
}
#endif
inline void ConfigLottery::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigLottery.cost)
}
inline void ConfigLottery::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigLottery.cost)
}
inline ::std::string* ConfigLottery::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigLottery.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigLottery::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigLottery.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigLottery::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigLottery.cost)
}
inline ::std::string* ConfigLottery::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigLottery.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigLottery::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigLottery.cost)
}

// required int32 limit_num = 4;
inline bool ConfigLottery::has_limit_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigLottery::set_has_limit_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigLottery::clear_has_limit_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigLottery::clear_limit_num() {
  limit_num_ = 0;
  clear_has_limit_num();
}
inline ::google::protobuf::int32 ConfigLottery::limit_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigLottery.limit_num)
  return limit_num_;
}
inline void ConfigLottery::set_limit_num(::google::protobuf::int32 value) {
  set_has_limit_num();
  limit_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLottery.limit_num)
}

// required bytes random_groups = 5;
inline bool ConfigLottery::has_random_groups() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigLottery::set_has_random_groups() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigLottery::clear_has_random_groups() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigLottery::clear_random_groups() {
  random_groups_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_random_groups();
}
inline const ::std::string& ConfigLottery::random_groups() const {
  // @@protoc_insertion_point(field_get:db.ConfigLottery.random_groups)
  return random_groups_.Get();
}
inline void ConfigLottery::set_random_groups(const ::std::string& value) {
  set_has_random_groups();
  random_groups_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigLottery.random_groups)
}
#if LANG_CXX11
inline void ConfigLottery::set_random_groups(::std::string&& value) {
  set_has_random_groups();
  random_groups_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigLottery.random_groups)
}
#endif
inline void ConfigLottery::set_random_groups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_random_groups();
  random_groups_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigLottery.random_groups)
}
inline void ConfigLottery::set_random_groups(const void* value,
    size_t size) {
  set_has_random_groups();
  random_groups_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigLottery.random_groups)
}
inline ::std::string* ConfigLottery::mutable_random_groups() {
  set_has_random_groups();
  // @@protoc_insertion_point(field_mutable:db.ConfigLottery.random_groups)
  return random_groups_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigLottery::release_random_groups() {
  // @@protoc_insertion_point(field_release:db.ConfigLottery.random_groups)
  if (!has_random_groups()) {
    return NULL;
  }
  clear_has_random_groups();
  return random_groups_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigLottery::set_allocated_random_groups(::std::string* random_groups) {
  if (random_groups != NULL) {
    set_has_random_groups();
  } else {
    clear_has_random_groups();
  }
  random_groups_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_groups,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigLottery.random_groups)
}
inline ::std::string* ConfigLottery::unsafe_arena_release_random_groups() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigLottery.random_groups)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_random_groups();
  return random_groups_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigLottery::unsafe_arena_set_allocated_random_groups(
    ::std::string* random_groups) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (random_groups != NULL) {
    set_has_random_groups();
  } else {
    clear_has_random_groups();
  }
  random_groups_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      random_groups, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigLottery.random_groups)
}

// required bytes lowest_groups = 6;
inline bool ConfigLottery::has_lowest_groups() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigLottery::set_has_lowest_groups() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigLottery::clear_has_lowest_groups() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigLottery::clear_lowest_groups() {
  lowest_groups_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_lowest_groups();
}
inline const ::std::string& ConfigLottery::lowest_groups() const {
  // @@protoc_insertion_point(field_get:db.ConfigLottery.lowest_groups)
  return lowest_groups_.Get();
}
inline void ConfigLottery::set_lowest_groups(const ::std::string& value) {
  set_has_lowest_groups();
  lowest_groups_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigLottery.lowest_groups)
}
#if LANG_CXX11
inline void ConfigLottery::set_lowest_groups(::std::string&& value) {
  set_has_lowest_groups();
  lowest_groups_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigLottery.lowest_groups)
}
#endif
inline void ConfigLottery::set_lowest_groups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lowest_groups();
  lowest_groups_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigLottery.lowest_groups)
}
inline void ConfigLottery::set_lowest_groups(const void* value,
    size_t size) {
  set_has_lowest_groups();
  lowest_groups_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigLottery.lowest_groups)
}
inline ::std::string* ConfigLottery::mutable_lowest_groups() {
  set_has_lowest_groups();
  // @@protoc_insertion_point(field_mutable:db.ConfigLottery.lowest_groups)
  return lowest_groups_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigLottery::release_lowest_groups() {
  // @@protoc_insertion_point(field_release:db.ConfigLottery.lowest_groups)
  if (!has_lowest_groups()) {
    return NULL;
  }
  clear_has_lowest_groups();
  return lowest_groups_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigLottery::set_allocated_lowest_groups(::std::string* lowest_groups) {
  if (lowest_groups != NULL) {
    set_has_lowest_groups();
  } else {
    clear_has_lowest_groups();
  }
  lowest_groups_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lowest_groups,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigLottery.lowest_groups)
}
inline ::std::string* ConfigLottery::unsafe_arena_release_lowest_groups() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigLottery.lowest_groups)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_lowest_groups();
  return lowest_groups_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigLottery::unsafe_arena_set_allocated_lowest_groups(
    ::std::string* lowest_groups) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (lowest_groups != NULL) {
    set_has_lowest_groups();
  } else {
    clear_has_lowest_groups();
  }
  lowest_groups_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      lowest_groups, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigLottery.lowest_groups)
}

// required int32 activity_id = 7;
inline bool ConfigLottery::has_activity_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigLottery::set_has_activity_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigLottery::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigLottery::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 ConfigLottery::activity_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigLottery.activity_id)
  return activity_id_;
}
inline void ConfigLottery::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLottery.activity_id)
}

// required bytes activity_reward = 8;
inline bool ConfigLottery::has_activity_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigLottery::set_has_activity_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigLottery::clear_has_activity_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigLottery::clear_activity_reward() {
  activity_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_activity_reward();
}
inline const ::std::string& ConfigLottery::activity_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigLottery.activity_reward)
  return activity_reward_.Get();
}
inline void ConfigLottery::set_activity_reward(const ::std::string& value) {
  set_has_activity_reward();
  activity_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigLottery.activity_reward)
}
#if LANG_CXX11
inline void ConfigLottery::set_activity_reward(::std::string&& value) {
  set_has_activity_reward();
  activity_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigLottery.activity_reward)
}
#endif
inline void ConfigLottery::set_activity_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_activity_reward();
  activity_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigLottery.activity_reward)
}
inline void ConfigLottery::set_activity_reward(const void* value,
    size_t size) {
  set_has_activity_reward();
  activity_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigLottery.activity_reward)
}
inline ::std::string* ConfigLottery::mutable_activity_reward() {
  set_has_activity_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigLottery.activity_reward)
  return activity_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigLottery::release_activity_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigLottery.activity_reward)
  if (!has_activity_reward()) {
    return NULL;
  }
  clear_has_activity_reward();
  return activity_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigLottery::set_allocated_activity_reward(::std::string* activity_reward) {
  if (activity_reward != NULL) {
    set_has_activity_reward();
  } else {
    clear_has_activity_reward();
  }
  activity_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activity_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigLottery.activity_reward)
}
inline ::std::string* ConfigLottery::unsafe_arena_release_activity_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigLottery.activity_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_activity_reward();
  return activity_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigLottery::unsafe_arena_set_allocated_activity_reward(
    ::std::string* activity_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (activity_reward != NULL) {
    set_has_activity_reward();
  } else {
    clear_has_activity_reward();
  }
  activity_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      activity_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigLottery.activity_reward)
}

// -------------------------------------------------------------------

// ConfigSecretRoom

// required int32 id = 1;
inline bool ConfigSecretRoom::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigSecretRoom::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigSecretRoom::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigSecretRoom::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigSecretRoom::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigSecretRoom.id)
  return id_;
}
inline void ConfigSecretRoom::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSecretRoom.id)
}

// required int32 model_id = 2;
inline bool ConfigSecretRoom::has_model_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigSecretRoom::set_has_model_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigSecretRoom::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigSecretRoom::clear_model_id() {
  model_id_ = 0;
  clear_has_model_id();
}
inline ::google::protobuf::int32 ConfigSecretRoom::model_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigSecretRoom.model_id)
  return model_id_;
}
inline void ConfigSecretRoom::set_model_id(::google::protobuf::int32 value) {
  set_has_model_id();
  model_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSecretRoom.model_id)
}

// required bytes lock_info = 3;
inline bool ConfigSecretRoom::has_lock_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigSecretRoom::set_has_lock_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigSecretRoom::clear_has_lock_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigSecretRoom::clear_lock_info() {
  lock_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_lock_info();
}
inline const ::std::string& ConfigSecretRoom::lock_info() const {
  // @@protoc_insertion_point(field_get:db.ConfigSecretRoom.lock_info)
  return lock_info_.Get();
}
inline void ConfigSecretRoom::set_lock_info(const ::std::string& value) {
  set_has_lock_info();
  lock_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSecretRoom.lock_info)
}
#if LANG_CXX11
inline void ConfigSecretRoom::set_lock_info(::std::string&& value) {
  set_has_lock_info();
  lock_info_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSecretRoom.lock_info)
}
#endif
inline void ConfigSecretRoom::set_lock_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lock_info();
  lock_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSecretRoom.lock_info)
}
inline void ConfigSecretRoom::set_lock_info(const void* value,
    size_t size) {
  set_has_lock_info();
  lock_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSecretRoom.lock_info)
}
inline ::std::string* ConfigSecretRoom::mutable_lock_info() {
  set_has_lock_info();
  // @@protoc_insertion_point(field_mutable:db.ConfigSecretRoom.lock_info)
  return lock_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSecretRoom::release_lock_info() {
  // @@protoc_insertion_point(field_release:db.ConfigSecretRoom.lock_info)
  if (!has_lock_info()) {
    return NULL;
  }
  clear_has_lock_info();
  return lock_info_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSecretRoom::set_allocated_lock_info(::std::string* lock_info) {
  if (lock_info != NULL) {
    set_has_lock_info();
  } else {
    clear_has_lock_info();
  }
  lock_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSecretRoom.lock_info)
}
inline ::std::string* ConfigSecretRoom::unsafe_arena_release_lock_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSecretRoom.lock_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_lock_info();
  return lock_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSecretRoom::unsafe_arena_set_allocated_lock_info(
    ::std::string* lock_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (lock_info != NULL) {
    set_has_lock_info();
  } else {
    clear_has_lock_info();
  }
  lock_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      lock_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSecretRoom.lock_info)
}

// required bytes trigger_element = 4;
inline bool ConfigSecretRoom::has_trigger_element() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigSecretRoom::set_has_trigger_element() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigSecretRoom::clear_has_trigger_element() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigSecretRoom::clear_trigger_element() {
  trigger_element_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_trigger_element();
}
inline const ::std::string& ConfigSecretRoom::trigger_element() const {
  // @@protoc_insertion_point(field_get:db.ConfigSecretRoom.trigger_element)
  return trigger_element_.Get();
}
inline void ConfigSecretRoom::set_trigger_element(const ::std::string& value) {
  set_has_trigger_element();
  trigger_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSecretRoom.trigger_element)
}
#if LANG_CXX11
inline void ConfigSecretRoom::set_trigger_element(::std::string&& value) {
  set_has_trigger_element();
  trigger_element_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSecretRoom.trigger_element)
}
#endif
inline void ConfigSecretRoom::set_trigger_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trigger_element();
  trigger_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSecretRoom.trigger_element)
}
inline void ConfigSecretRoom::set_trigger_element(const void* value,
    size_t size) {
  set_has_trigger_element();
  trigger_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSecretRoom.trigger_element)
}
inline ::std::string* ConfigSecretRoom::mutable_trigger_element() {
  set_has_trigger_element();
  // @@protoc_insertion_point(field_mutable:db.ConfigSecretRoom.trigger_element)
  return trigger_element_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSecretRoom::release_trigger_element() {
  // @@protoc_insertion_point(field_release:db.ConfigSecretRoom.trigger_element)
  if (!has_trigger_element()) {
    return NULL;
  }
  clear_has_trigger_element();
  return trigger_element_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSecretRoom::set_allocated_trigger_element(::std::string* trigger_element) {
  if (trigger_element != NULL) {
    set_has_trigger_element();
  } else {
    clear_has_trigger_element();
  }
  trigger_element_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_element,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSecretRoom.trigger_element)
}
inline ::std::string* ConfigSecretRoom::unsafe_arena_release_trigger_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSecretRoom.trigger_element)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_trigger_element();
  return trigger_element_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSecretRoom::unsafe_arena_set_allocated_trigger_element(
    ::std::string* trigger_element) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trigger_element != NULL) {
    set_has_trigger_element();
  } else {
    clear_has_trigger_element();
  }
  trigger_element_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trigger_element, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSecretRoom.trigger_element)
}

// -------------------------------------------------------------------

// ConfigSecretRoomGroup

// required int32 id = 1;
inline bool ConfigSecretRoomGroup::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigSecretRoomGroup::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigSecretRoomGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigSecretRoomGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigSecretRoomGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigSecretRoomGroup.id)
  return id_;
}
inline void ConfigSecretRoomGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSecretRoomGroup.id)
}

// required bytes group_info = 2;
inline bool ConfigSecretRoomGroup::has_group_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigSecretRoomGroup::set_has_group_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigSecretRoomGroup::clear_has_group_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigSecretRoomGroup::clear_group_info() {
  group_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_group_info();
}
inline const ::std::string& ConfigSecretRoomGroup::group_info() const {
  // @@protoc_insertion_point(field_get:db.ConfigSecretRoomGroup.group_info)
  return group_info_.Get();
}
inline void ConfigSecretRoomGroup::set_group_info(const ::std::string& value) {
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSecretRoomGroup.group_info)
}
#if LANG_CXX11
inline void ConfigSecretRoomGroup::set_group_info(::std::string&& value) {
  set_has_group_info();
  group_info_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSecretRoomGroup.group_info)
}
#endif
inline void ConfigSecretRoomGroup::set_group_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSecretRoomGroup.group_info)
}
inline void ConfigSecretRoomGroup::set_group_info(const void* value,
    size_t size) {
  set_has_group_info();
  group_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSecretRoomGroup.group_info)
}
inline ::std::string* ConfigSecretRoomGroup::mutable_group_info() {
  set_has_group_info();
  // @@protoc_insertion_point(field_mutable:db.ConfigSecretRoomGroup.group_info)
  return group_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSecretRoomGroup::release_group_info() {
  // @@protoc_insertion_point(field_release:db.ConfigSecretRoomGroup.group_info)
  if (!has_group_info()) {
    return NULL;
  }
  clear_has_group_info();
  return group_info_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSecretRoomGroup::set_allocated_group_info(::std::string* group_info) {
  if (group_info != NULL) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  group_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSecretRoomGroup.group_info)
}
inline ::std::string* ConfigSecretRoomGroup::unsafe_arena_release_group_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSecretRoomGroup.group_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_group_info();
  return group_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSecretRoomGroup::unsafe_arena_set_allocated_group_info(
    ::std::string* group_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_info != NULL) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  group_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSecretRoomGroup.group_info)
}

// -------------------------------------------------------------------

// ConfigFarmSkillLevel

// required uint64 id = 1;
inline bool ConfigFarmSkillLevel::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFarmSkillLevel::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFarmSkillLevel::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFarmSkillLevel::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ConfigFarmSkillLevel::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFarmSkillLevel.id)
  return id_;
}
inline void ConfigFarmSkillLevel::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFarmSkillLevel.id)
}

// required int32 level = 2;
inline bool ConfigFarmSkillLevel::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFarmSkillLevel::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigFarmSkillLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigFarmSkillLevel::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigFarmSkillLevel::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigFarmSkillLevel.level)
  return level_;
}
inline void ConfigFarmSkillLevel::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFarmSkillLevel.level)
}

// required int32 exp_max = 3;
inline bool ConfigFarmSkillLevel::has_exp_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigFarmSkillLevel::set_has_exp_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigFarmSkillLevel::clear_has_exp_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigFarmSkillLevel::clear_exp_max() {
  exp_max_ = 0;
  clear_has_exp_max();
}
inline ::google::protobuf::int32 ConfigFarmSkillLevel::exp_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigFarmSkillLevel.exp_max)
  return exp_max_;
}
inline void ConfigFarmSkillLevel::set_exp_max(::google::protobuf::int32 value) {
  set_has_exp_max();
  exp_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFarmSkillLevel.exp_max)
}

// required bytes level_up_cost = 4;
inline bool ConfigFarmSkillLevel::has_level_up_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFarmSkillLevel::set_has_level_up_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFarmSkillLevel::clear_has_level_up_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFarmSkillLevel::clear_level_up_cost() {
  level_up_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level_up_cost();
}
inline const ::std::string& ConfigFarmSkillLevel::level_up_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigFarmSkillLevel.level_up_cost)
  return level_up_cost_.Get();
}
inline void ConfigFarmSkillLevel::set_level_up_cost(const ::std::string& value) {
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFarmSkillLevel.level_up_cost)
}
#if LANG_CXX11
inline void ConfigFarmSkillLevel::set_level_up_cost(::std::string&& value) {
  set_has_level_up_cost();
  level_up_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFarmSkillLevel.level_up_cost)
}
#endif
inline void ConfigFarmSkillLevel::set_level_up_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFarmSkillLevel.level_up_cost)
}
inline void ConfigFarmSkillLevel::set_level_up_cost(const void* value,
    size_t size) {
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFarmSkillLevel.level_up_cost)
}
inline ::std::string* ConfigFarmSkillLevel::mutable_level_up_cost() {
  set_has_level_up_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigFarmSkillLevel.level_up_cost)
  return level_up_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFarmSkillLevel::release_level_up_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigFarmSkillLevel.level_up_cost)
  if (!has_level_up_cost()) {
    return NULL;
  }
  clear_has_level_up_cost();
  return level_up_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFarmSkillLevel::set_allocated_level_up_cost(::std::string* level_up_cost) {
  if (level_up_cost != NULL) {
    set_has_level_up_cost();
  } else {
    clear_has_level_up_cost();
  }
  level_up_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_up_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFarmSkillLevel.level_up_cost)
}
inline ::std::string* ConfigFarmSkillLevel::unsafe_arena_release_level_up_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFarmSkillLevel.level_up_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level_up_cost();
  return level_up_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFarmSkillLevel::unsafe_arena_set_allocated_level_up_cost(
    ::std::string* level_up_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level_up_cost != NULL) {
    set_has_level_up_cost();
  } else {
    clear_has_level_up_cost();
  }
  level_up_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level_up_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFarmSkillLevel.level_up_cost)
}

// required bytes attribute = 5;
inline bool ConfigFarmSkillLevel::has_attribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFarmSkillLevel::set_has_attribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFarmSkillLevel::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFarmSkillLevel::clear_attribute() {
  attribute_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attribute();
}
inline const ::std::string& ConfigFarmSkillLevel::attribute() const {
  // @@protoc_insertion_point(field_get:db.ConfigFarmSkillLevel.attribute)
  return attribute_.Get();
}
inline void ConfigFarmSkillLevel::set_attribute(const ::std::string& value) {
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFarmSkillLevel.attribute)
}
#if LANG_CXX11
inline void ConfigFarmSkillLevel::set_attribute(::std::string&& value) {
  set_has_attribute();
  attribute_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFarmSkillLevel.attribute)
}
#endif
inline void ConfigFarmSkillLevel::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFarmSkillLevel.attribute)
}
inline void ConfigFarmSkillLevel::set_attribute(const void* value,
    size_t size) {
  set_has_attribute();
  attribute_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFarmSkillLevel.attribute)
}
inline ::std::string* ConfigFarmSkillLevel::mutable_attribute() {
  set_has_attribute();
  // @@protoc_insertion_point(field_mutable:db.ConfigFarmSkillLevel.attribute)
  return attribute_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFarmSkillLevel::release_attribute() {
  // @@protoc_insertion_point(field_release:db.ConfigFarmSkillLevel.attribute)
  if (!has_attribute()) {
    return NULL;
  }
  clear_has_attribute();
  return attribute_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFarmSkillLevel::set_allocated_attribute(::std::string* attribute) {
  if (attribute != NULL) {
    set_has_attribute();
  } else {
    clear_has_attribute();
  }
  attribute_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFarmSkillLevel.attribute)
}
inline ::std::string* ConfigFarmSkillLevel::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFarmSkillLevel.attribute)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attribute();
  return attribute_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFarmSkillLevel::unsafe_arena_set_allocated_attribute(
    ::std::string* attribute) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attribute != NULL) {
    set_has_attribute();
  } else {
    clear_has_attribute();
  }
  attribute_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attribute, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFarmSkillLevel.attribute)
}

// -------------------------------------------------------------------

// ConfigSkill

// required uint64 id = 1;
inline bool ConfigSkill::has_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigSkill::set_has_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigSkill::clear_has_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigSkill::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ConfigSkill::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.id)
  return id_;
}
inline void ConfigSkill::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.id)
}

// required int32 skill_level = 2;
inline bool ConfigSkill::has_skill_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigSkill::set_has_skill_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigSkill::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigSkill::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 ConfigSkill::skill_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.skill_level)
  return skill_level_;
}
inline void ConfigSkill::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.skill_level)
}

// required uint64 groupid = 3;
inline bool ConfigSkill::has_groupid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigSkill::set_has_groupid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigSkill::clear_has_groupid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigSkill::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 ConfigSkill::groupid() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.groupid)
  return groupid_;
}
inline void ConfigSkill::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.groupid)
}

// required bytes skill_name = 4;
inline bool ConfigSkill::has_skill_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigSkill::set_has_skill_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigSkill::clear_has_skill_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigSkill::clear_skill_name() {
  skill_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_skill_name();
}
inline const ::std::string& ConfigSkill::skill_name() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.skill_name)
  return skill_name_.Get();
}
inline void ConfigSkill::set_skill_name(const ::std::string& value) {
  set_has_skill_name();
  skill_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.skill_name)
}
#if LANG_CXX11
inline void ConfigSkill::set_skill_name(::std::string&& value) {
  set_has_skill_name();
  skill_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.skill_name)
}
#endif
inline void ConfigSkill::set_skill_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_skill_name();
  skill_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.skill_name)
}
inline void ConfigSkill::set_skill_name(const void* value,
    size_t size) {
  set_has_skill_name();
  skill_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.skill_name)
}
inline ::std::string* ConfigSkill::mutable_skill_name() {
  set_has_skill_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.skill_name)
  return skill_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_skill_name() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.skill_name)
  if (!has_skill_name()) {
    return NULL;
  }
  clear_has_skill_name();
  return skill_name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_skill_name(::std::string* skill_name) {
  if (skill_name != NULL) {
    set_has_skill_name();
  } else {
    clear_has_skill_name();
  }
  skill_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.skill_name)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_skill_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.skill_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_skill_name();
  return skill_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_skill_name(
    ::std::string* skill_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (skill_name != NULL) {
    set_has_skill_name();
  } else {
    clear_has_skill_name();
  }
  skill_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      skill_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.skill_name)
}

// required bytes description = 5;
inline bool ConfigSkill::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigSkill::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigSkill::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigSkill::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_description();
}
inline const ::std::string& ConfigSkill::description() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.description)
  return description_.Get();
}
inline void ConfigSkill::set_description(const ::std::string& value) {
  set_has_description();
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.description)
}
#if LANG_CXX11
inline void ConfigSkill::set_description(::std::string&& value) {
  set_has_description();
  description_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.description)
}
#endif
inline void ConfigSkill::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.description)
}
inline void ConfigSkill::set_description(const void* value,
    size_t size) {
  set_has_description();
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.description)
}
inline ::std::string* ConfigSkill::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_description() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.description)
  if (!has_description()) {
    return NULL;
  }
  clear_has_description();
  return description_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.description)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_description();
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.description)
}

// required int32 need_star = 6;
inline bool ConfigSkill::has_need_star() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigSkill::set_has_need_star() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigSkill::clear_has_need_star() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigSkill::clear_need_star() {
  need_star_ = 0;
  clear_has_need_star();
}
inline ::google::protobuf::int32 ConfigSkill::need_star() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.need_star)
  return need_star_;
}
inline void ConfigSkill::set_need_star(::google::protobuf::int32 value) {
  set_has_need_star();
  need_star_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.need_star)
}

// required int32 need_level = 7;
inline bool ConfigSkill::has_need_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigSkill::set_has_need_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigSkill::clear_has_need_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigSkill::clear_need_level() {
  need_level_ = 0;
  clear_has_need_level();
}
inline ::google::protobuf::int32 ConfigSkill::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.need_level)
  return need_level_;
}
inline void ConfigSkill::set_need_level(::google::protobuf::int32 value) {
  set_has_need_level();
  need_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.need_level)
}

// required bytes level_up_base_cost = 8;
inline bool ConfigSkill::has_level_up_base_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigSkill::set_has_level_up_base_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigSkill::clear_has_level_up_base_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigSkill::clear_level_up_base_cost() {
  level_up_base_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level_up_base_cost();
}
inline const ::std::string& ConfigSkill::level_up_base_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.level_up_base_cost)
  return level_up_base_cost_.Get();
}
inline void ConfigSkill::set_level_up_base_cost(const ::std::string& value) {
  set_has_level_up_base_cost();
  level_up_base_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.level_up_base_cost)
}
#if LANG_CXX11
inline void ConfigSkill::set_level_up_base_cost(::std::string&& value) {
  set_has_level_up_base_cost();
  level_up_base_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.level_up_base_cost)
}
#endif
inline void ConfigSkill::set_level_up_base_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level_up_base_cost();
  level_up_base_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.level_up_base_cost)
}
inline void ConfigSkill::set_level_up_base_cost(const void* value,
    size_t size) {
  set_has_level_up_base_cost();
  level_up_base_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.level_up_base_cost)
}
inline ::std::string* ConfigSkill::mutable_level_up_base_cost() {
  set_has_level_up_base_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.level_up_base_cost)
  return level_up_base_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_level_up_base_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.level_up_base_cost)
  if (!has_level_up_base_cost()) {
    return NULL;
  }
  clear_has_level_up_base_cost();
  return level_up_base_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_level_up_base_cost(::std::string* level_up_base_cost) {
  if (level_up_base_cost != NULL) {
    set_has_level_up_base_cost();
  } else {
    clear_has_level_up_base_cost();
  }
  level_up_base_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_up_base_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.level_up_base_cost)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_level_up_base_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.level_up_base_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level_up_base_cost();
  return level_up_base_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_level_up_base_cost(
    ::std::string* level_up_base_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level_up_base_cost != NULL) {
    set_has_level_up_base_cost();
  } else {
    clear_has_level_up_base_cost();
  }
  level_up_base_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level_up_base_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.level_up_base_cost)
}

// required bytes level_up_cost = 9;
inline bool ConfigSkill::has_level_up_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigSkill::set_has_level_up_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigSkill::clear_has_level_up_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigSkill::clear_level_up_cost() {
  level_up_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level_up_cost();
}
inline const ::std::string& ConfigSkill::level_up_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.level_up_cost)
  return level_up_cost_.Get();
}
inline void ConfigSkill::set_level_up_cost(const ::std::string& value) {
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.level_up_cost)
}
#if LANG_CXX11
inline void ConfigSkill::set_level_up_cost(::std::string&& value) {
  set_has_level_up_cost();
  level_up_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.level_up_cost)
}
#endif
inline void ConfigSkill::set_level_up_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.level_up_cost)
}
inline void ConfigSkill::set_level_up_cost(const void* value,
    size_t size) {
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.level_up_cost)
}
inline ::std::string* ConfigSkill::mutable_level_up_cost() {
  set_has_level_up_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.level_up_cost)
  return level_up_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_level_up_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.level_up_cost)
  if (!has_level_up_cost()) {
    return NULL;
  }
  clear_has_level_up_cost();
  return level_up_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_level_up_cost(::std::string* level_up_cost) {
  if (level_up_cost != NULL) {
    set_has_level_up_cost();
  } else {
    clear_has_level_up_cost();
  }
  level_up_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_up_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.level_up_cost)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_level_up_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.level_up_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level_up_cost();
  return level_up_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_level_up_cost(
    ::std::string* level_up_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level_up_cost != NULL) {
    set_has_level_up_cost();
  } else {
    clear_has_level_up_cost();
  }
  level_up_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level_up_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.level_up_cost)
}

// required int32 chip_cost = 10;
inline bool ConfigSkill::has_chip_cost() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigSkill::set_has_chip_cost() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigSkill::clear_has_chip_cost() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigSkill::clear_chip_cost() {
  chip_cost_ = 0;
  clear_has_chip_cost();
}
inline ::google::protobuf::int32 ConfigSkill::chip_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.chip_cost)
  return chip_cost_;
}
inline void ConfigSkill::set_chip_cost(::google::protobuf::int32 value) {
  set_has_chip_cost();
  chip_cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.chip_cost)
}

// required bytes target = 11;
inline bool ConfigSkill::has_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigSkill::set_has_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigSkill::clear_has_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigSkill::clear_target() {
  target_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_target();
}
inline const ::std::string& ConfigSkill::target() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.target)
  return target_.Get();
}
inline void ConfigSkill::set_target(const ::std::string& value) {
  set_has_target();
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.target)
}
#if LANG_CXX11
inline void ConfigSkill::set_target(::std::string&& value) {
  set_has_target();
  target_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.target)
}
#endif
inline void ConfigSkill::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target();
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.target)
}
inline void ConfigSkill::set_target(const void* value,
    size_t size) {
  set_has_target();
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.target)
}
inline ::std::string* ConfigSkill::mutable_target() {
  set_has_target();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.target)
  return target_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_target() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.target)
  if (!has_target()) {
    return NULL;
  }
  clear_has_target();
  return target_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    set_has_target();
  } else {
    clear_has_target();
  }
  target_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.target)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.target)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_target();
  return target_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_target(
    ::std::string* target) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (target != NULL) {
    set_has_target();
  } else {
    clear_has_target();
  }
  target_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      target, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.target)
}

// required int32 type = 12;
inline bool ConfigSkill::has_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConfigSkill::set_has_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConfigSkill::clear_has_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConfigSkill::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigSkill::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.type)
  return type_;
}
inline void ConfigSkill::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.type)
}

// required int32 priority = 13;
inline bool ConfigSkill::has_priority() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConfigSkill::set_has_priority() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConfigSkill::clear_has_priority() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConfigSkill::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 ConfigSkill::priority() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.priority)
  return priority_;
}
inline void ConfigSkill::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.priority)
}

// required int32 attack_attr = 14;
inline bool ConfigSkill::has_attack_attr() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ConfigSkill::set_has_attack_attr() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ConfigSkill::clear_has_attack_attr() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ConfigSkill::clear_attack_attr() {
  attack_attr_ = 0;
  clear_has_attack_attr();
}
inline ::google::protobuf::int32 ConfigSkill::attack_attr() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.attack_attr)
  return attack_attr_;
}
inline void ConfigSkill::set_attack_attr(::google::protobuf::int32 value) {
  set_has_attack_attr();
  attack_attr_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.attack_attr)
}

// required bytes attack = 15;
inline bool ConfigSkill::has_attack() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigSkill::set_has_attack() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigSkill::clear_has_attack() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigSkill::clear_attack() {
  attack_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attack();
}
inline const ::std::string& ConfigSkill::attack() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.attack)
  return attack_.Get();
}
inline void ConfigSkill::set_attack(const ::std::string& value) {
  set_has_attack();
  attack_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.attack)
}
#if LANG_CXX11
inline void ConfigSkill::set_attack(::std::string&& value) {
  set_has_attack();
  attack_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.attack)
}
#endif
inline void ConfigSkill::set_attack(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attack();
  attack_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.attack)
}
inline void ConfigSkill::set_attack(const void* value,
    size_t size) {
  set_has_attack();
  attack_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.attack)
}
inline ::std::string* ConfigSkill::mutable_attack() {
  set_has_attack();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.attack)
  return attack_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_attack() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.attack)
  if (!has_attack()) {
    return NULL;
  }
  clear_has_attack();
  return attack_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_attack(::std::string* attack) {
  if (attack != NULL) {
    set_has_attack();
  } else {
    clear_has_attack();
  }
  attack_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attack,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.attack)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_attack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.attack)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attack();
  return attack_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_attack(
    ::std::string* attack) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attack != NULL) {
    set_has_attack();
  } else {
    clear_has_attack();
  }
  attack_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attack, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.attack)
}

// required bytes attack_mode = 16;
inline bool ConfigSkill::has_attack_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigSkill::set_has_attack_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigSkill::clear_has_attack_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigSkill::clear_attack_mode() {
  attack_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attack_mode();
}
inline const ::std::string& ConfigSkill::attack_mode() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.attack_mode)
  return attack_mode_.Get();
}
inline void ConfigSkill::set_attack_mode(const ::std::string& value) {
  set_has_attack_mode();
  attack_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.attack_mode)
}
#if LANG_CXX11
inline void ConfigSkill::set_attack_mode(::std::string&& value) {
  set_has_attack_mode();
  attack_mode_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.attack_mode)
}
#endif
inline void ConfigSkill::set_attack_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attack_mode();
  attack_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.attack_mode)
}
inline void ConfigSkill::set_attack_mode(const void* value,
    size_t size) {
  set_has_attack_mode();
  attack_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.attack_mode)
}
inline ::std::string* ConfigSkill::mutable_attack_mode() {
  set_has_attack_mode();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.attack_mode)
  return attack_mode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_attack_mode() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.attack_mode)
  if (!has_attack_mode()) {
    return NULL;
  }
  clear_has_attack_mode();
  return attack_mode_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_attack_mode(::std::string* attack_mode) {
  if (attack_mode != NULL) {
    set_has_attack_mode();
  } else {
    clear_has_attack_mode();
  }
  attack_mode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attack_mode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.attack_mode)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_attack_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.attack_mode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attack_mode();
  return attack_mode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_attack_mode(
    ::std::string* attack_mode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attack_mode != NULL) {
    set_has_attack_mode();
  } else {
    clear_has_attack_mode();
  }
  attack_mode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attack_mode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.attack_mode)
}

// required bytes trigger_self_buff = 17;
inline bool ConfigSkill::has_trigger_self_buff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigSkill::set_has_trigger_self_buff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigSkill::clear_has_trigger_self_buff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigSkill::clear_trigger_self_buff() {
  trigger_self_buff_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_trigger_self_buff();
}
inline const ::std::string& ConfigSkill::trigger_self_buff() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.trigger_self_buff)
  return trigger_self_buff_.Get();
}
inline void ConfigSkill::set_trigger_self_buff(const ::std::string& value) {
  set_has_trigger_self_buff();
  trigger_self_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.trigger_self_buff)
}
#if LANG_CXX11
inline void ConfigSkill::set_trigger_self_buff(::std::string&& value) {
  set_has_trigger_self_buff();
  trigger_self_buff_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.trigger_self_buff)
}
#endif
inline void ConfigSkill::set_trigger_self_buff(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trigger_self_buff();
  trigger_self_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.trigger_self_buff)
}
inline void ConfigSkill::set_trigger_self_buff(const void* value,
    size_t size) {
  set_has_trigger_self_buff();
  trigger_self_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.trigger_self_buff)
}
inline ::std::string* ConfigSkill::mutable_trigger_self_buff() {
  set_has_trigger_self_buff();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.trigger_self_buff)
  return trigger_self_buff_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_trigger_self_buff() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.trigger_self_buff)
  if (!has_trigger_self_buff()) {
    return NULL;
  }
  clear_has_trigger_self_buff();
  return trigger_self_buff_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_trigger_self_buff(::std::string* trigger_self_buff) {
  if (trigger_self_buff != NULL) {
    set_has_trigger_self_buff();
  } else {
    clear_has_trigger_self_buff();
  }
  trigger_self_buff_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_self_buff,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.trigger_self_buff)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_trigger_self_buff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.trigger_self_buff)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_trigger_self_buff();
  return trigger_self_buff_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_trigger_self_buff(
    ::std::string* trigger_self_buff) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trigger_self_buff != NULL) {
    set_has_trigger_self_buff();
  } else {
    clear_has_trigger_self_buff();
  }
  trigger_self_buff_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trigger_self_buff, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.trigger_self_buff)
}

// required bytes trigger_enemy_buff = 18;
inline bool ConfigSkill::has_trigger_enemy_buff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigSkill::set_has_trigger_enemy_buff() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigSkill::clear_has_trigger_enemy_buff() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigSkill::clear_trigger_enemy_buff() {
  trigger_enemy_buff_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_trigger_enemy_buff();
}
inline const ::std::string& ConfigSkill::trigger_enemy_buff() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.trigger_enemy_buff)
  return trigger_enemy_buff_.Get();
}
inline void ConfigSkill::set_trigger_enemy_buff(const ::std::string& value) {
  set_has_trigger_enemy_buff();
  trigger_enemy_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.trigger_enemy_buff)
}
#if LANG_CXX11
inline void ConfigSkill::set_trigger_enemy_buff(::std::string&& value) {
  set_has_trigger_enemy_buff();
  trigger_enemy_buff_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.trigger_enemy_buff)
}
#endif
inline void ConfigSkill::set_trigger_enemy_buff(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trigger_enemy_buff();
  trigger_enemy_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.trigger_enemy_buff)
}
inline void ConfigSkill::set_trigger_enemy_buff(const void* value,
    size_t size) {
  set_has_trigger_enemy_buff();
  trigger_enemy_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.trigger_enemy_buff)
}
inline ::std::string* ConfigSkill::mutable_trigger_enemy_buff() {
  set_has_trigger_enemy_buff();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.trigger_enemy_buff)
  return trigger_enemy_buff_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_trigger_enemy_buff() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.trigger_enemy_buff)
  if (!has_trigger_enemy_buff()) {
    return NULL;
  }
  clear_has_trigger_enemy_buff();
  return trigger_enemy_buff_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_trigger_enemy_buff(::std::string* trigger_enemy_buff) {
  if (trigger_enemy_buff != NULL) {
    set_has_trigger_enemy_buff();
  } else {
    clear_has_trigger_enemy_buff();
  }
  trigger_enemy_buff_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_enemy_buff,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.trigger_enemy_buff)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_trigger_enemy_buff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.trigger_enemy_buff)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_trigger_enemy_buff();
  return trigger_enemy_buff_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_trigger_enemy_buff(
    ::std::string* trigger_enemy_buff) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trigger_enemy_buff != NULL) {
    set_has_trigger_enemy_buff();
  } else {
    clear_has_trigger_enemy_buff();
  }
  trigger_enemy_buff_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trigger_enemy_buff, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.trigger_enemy_buff)
}

// required bytes buff_mode = 19;
inline bool ConfigSkill::has_buff_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigSkill::set_has_buff_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigSkill::clear_has_buff_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigSkill::clear_buff_mode() {
  buff_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_buff_mode();
}
inline const ::std::string& ConfigSkill::buff_mode() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.buff_mode)
  return buff_mode_.Get();
}
inline void ConfigSkill::set_buff_mode(const ::std::string& value) {
  set_has_buff_mode();
  buff_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.buff_mode)
}
#if LANG_CXX11
inline void ConfigSkill::set_buff_mode(::std::string&& value) {
  set_has_buff_mode();
  buff_mode_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.buff_mode)
}
#endif
inline void ConfigSkill::set_buff_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buff_mode();
  buff_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.buff_mode)
}
inline void ConfigSkill::set_buff_mode(const void* value,
    size_t size) {
  set_has_buff_mode();
  buff_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.buff_mode)
}
inline ::std::string* ConfigSkill::mutable_buff_mode() {
  set_has_buff_mode();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.buff_mode)
  return buff_mode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_buff_mode() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.buff_mode)
  if (!has_buff_mode()) {
    return NULL;
  }
  clear_has_buff_mode();
  return buff_mode_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_buff_mode(::std::string* buff_mode) {
  if (buff_mode != NULL) {
    set_has_buff_mode();
  } else {
    clear_has_buff_mode();
  }
  buff_mode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buff_mode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.buff_mode)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_buff_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.buff_mode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_buff_mode();
  return buff_mode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_buff_mode(
    ::std::string* buff_mode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (buff_mode != NULL) {
    set_has_buff_mode();
  } else {
    clear_has_buff_mode();
  }
  buff_mode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      buff_mode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.buff_mode)
}

// required int32 cd = 20;
inline bool ConfigSkill::has_cd() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ConfigSkill::set_has_cd() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ConfigSkill::clear_has_cd() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ConfigSkill::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 ConfigSkill::cd() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.cd)
  return cd_;
}
inline void ConfigSkill::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.cd)
}

// required int32 product = 21;
inline bool ConfigSkill::has_product() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ConfigSkill::set_has_product() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ConfigSkill::clear_has_product() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ConfigSkill::clear_product() {
  product_ = 0;
  clear_has_product();
}
inline ::google::protobuf::int32 ConfigSkill::product() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.product)
  return product_;
}
inline void ConfigSkill::set_product(::google::protobuf::int32 value) {
  set_has_product();
  product_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.product)
}

// required int32 attack_range = 22;
inline bool ConfigSkill::has_attack_range() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ConfigSkill::set_has_attack_range() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ConfigSkill::clear_has_attack_range() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ConfigSkill::clear_attack_range() {
  attack_range_ = 0;
  clear_has_attack_range();
}
inline ::google::protobuf::int32 ConfigSkill::attack_range() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.attack_range)
  return attack_range_;
}
inline void ConfigSkill::set_attack_range(::google::protobuf::int32 value) {
  set_has_attack_range();
  attack_range_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.attack_range)
}

// required int32 special_effect = 23;
inline bool ConfigSkill::has_special_effect() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ConfigSkill::set_has_special_effect() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ConfigSkill::clear_has_special_effect() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ConfigSkill::clear_special_effect() {
  special_effect_ = 0;
  clear_has_special_effect();
}
inline ::google::protobuf::int32 ConfigSkill::special_effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.special_effect)
  return special_effect_;
}
inline void ConfigSkill::set_special_effect(::google::protobuf::int32 value) {
  set_has_special_effect();
  special_effect_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkill.special_effect)
}

// required bytes item_add = 24;
inline bool ConfigSkill::has_item_add() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigSkill::set_has_item_add() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigSkill::clear_has_item_add() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigSkill::clear_item_add() {
  item_add_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_item_add();
}
inline const ::std::string& ConfigSkill::item_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.item_add)
  return item_add_.Get();
}
inline void ConfigSkill::set_item_add(const ::std::string& value) {
  set_has_item_add();
  item_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.item_add)
}
#if LANG_CXX11
inline void ConfigSkill::set_item_add(::std::string&& value) {
  set_has_item_add();
  item_add_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.item_add)
}
#endif
inline void ConfigSkill::set_item_add(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_add();
  item_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.item_add)
}
inline void ConfigSkill::set_item_add(const void* value,
    size_t size) {
  set_has_item_add();
  item_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.item_add)
}
inline ::std::string* ConfigSkill::mutable_item_add() {
  set_has_item_add();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.item_add)
  return item_add_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_item_add() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.item_add)
  if (!has_item_add()) {
    return NULL;
  }
  clear_has_item_add();
  return item_add_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_item_add(::std::string* item_add) {
  if (item_add != NULL) {
    set_has_item_add();
  } else {
    clear_has_item_add();
  }
  item_add_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_add,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.item_add)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_item_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.item_add)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_item_add();
  return item_add_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_item_add(
    ::std::string* item_add) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (item_add != NULL) {
    set_has_item_add();
  } else {
    clear_has_item_add();
  }
  item_add_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      item_add, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.item_add)
}

// required bytes attribute_add = 25;
inline bool ConfigSkill::has_attribute_add() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigSkill::set_has_attribute_add() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigSkill::clear_has_attribute_add() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigSkill::clear_attribute_add() {
  attribute_add_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attribute_add();
}
inline const ::std::string& ConfigSkill::attribute_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkill.attribute_add)
  return attribute_add_.Get();
}
inline void ConfigSkill::set_attribute_add(const ::std::string& value) {
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkill.attribute_add)
}
#if LANG_CXX11
inline void ConfigSkill::set_attribute_add(::std::string&& value) {
  set_has_attribute_add();
  attribute_add_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkill.attribute_add)
}
#endif
inline void ConfigSkill::set_attribute_add(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkill.attribute_add)
}
inline void ConfigSkill::set_attribute_add(const void* value,
    size_t size) {
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkill.attribute_add)
}
inline ::std::string* ConfigSkill::mutable_attribute_add() {
  set_has_attribute_add();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkill.attribute_add)
  return attribute_add_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkill::release_attribute_add() {
  // @@protoc_insertion_point(field_release:db.ConfigSkill.attribute_add)
  if (!has_attribute_add()) {
    return NULL;
  }
  clear_has_attribute_add();
  return attribute_add_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkill::set_allocated_attribute_add(::std::string* attribute_add) {
  if (attribute_add != NULL) {
    set_has_attribute_add();
  } else {
    clear_has_attribute_add();
  }
  attribute_add_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute_add,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkill.attribute_add)
}
inline ::std::string* ConfigSkill::unsafe_arena_release_attribute_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkill.attribute_add)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attribute_add();
  return attribute_add_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkill::unsafe_arena_set_allocated_attribute_add(
    ::std::string* attribute_add) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attribute_add != NULL) {
    set_has_attribute_add();
  } else {
    clear_has_attribute_add();
  }
  attribute_add_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attribute_add, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkill.attribute_add)
}

// -------------------------------------------------------------------

// ConfigFightRandomGroup

// required int32 id = 1;
inline bool ConfigFightRandomGroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFightRandomGroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFightRandomGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFightRandomGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigFightRandomGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightRandomGroup.id)
  return id_;
}
inline void ConfigFightRandomGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightRandomGroup.id)
}

// required int32 groupid = 2;
inline bool ConfigFightRandomGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFightRandomGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFightRandomGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFightRandomGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 ConfigFightRandomGroup::groupid() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightRandomGroup.groupid)
  return groupid_;
}
inline void ConfigFightRandomGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightRandomGroup.groupid)
}

// required int32 type = 3;
inline bool ConfigFightRandomGroup::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFightRandomGroup::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFightRandomGroup::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFightRandomGroup::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigFightRandomGroup::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightRandomGroup.type)
  return type_;
}
inline void ConfigFightRandomGroup::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightRandomGroup.type)
}

// required int32 index = 4;
inline bool ConfigFightRandomGroup::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFightRandomGroup::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigFightRandomGroup::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigFightRandomGroup::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ConfigFightRandomGroup::index() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightRandomGroup.index)
  return index_;
}
inline void ConfigFightRandomGroup::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightRandomGroup.index)
}

// required int32 typeid = 5;
inline bool ConfigFightRandomGroup::has_typeid_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigFightRandomGroup::set_has_typeid_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigFightRandomGroup::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigFightRandomGroup::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 ConfigFightRandomGroup::typeid_() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightRandomGroup.typeid)
  return typeid__;
}
inline void ConfigFightRandomGroup::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightRandomGroup.typeid)
}

// required float probability = 6;
inline bool ConfigFightRandomGroup::has_probability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigFightRandomGroup::set_has_probability() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigFightRandomGroup::clear_has_probability() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigFightRandomGroup::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline float ConfigFightRandomGroup::probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightRandomGroup.probability)
  return probability_;
}
inline void ConfigFightRandomGroup::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightRandomGroup.probability)
}

// -------------------------------------------------------------------

// ConfigNpcFight

// required uint64 id = 1;
inline bool ConfigNpcFight::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigNpcFight::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigNpcFight::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigNpcFight::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ConfigNpcFight::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpcFight.id)
  return id_;
}
inline void ConfigNpcFight::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNpcFight.id)
}

// required uint64 model_id = 2;
inline bool ConfigNpcFight::has_model_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigNpcFight::set_has_model_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigNpcFight::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigNpcFight::clear_model_id() {
  model_id_ = GOOGLE_ULONGLONG(0);
  clear_has_model_id();
}
inline ::google::protobuf::uint64 ConfigNpcFight::model_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpcFight.model_id)
  return model_id_;
}
inline void ConfigNpcFight::set_model_id(::google::protobuf::uint64 value) {
  set_has_model_id();
  model_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNpcFight.model_id)
}

// required int32 move_speed = 3;
inline bool ConfigNpcFight::has_move_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigNpcFight::set_has_move_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigNpcFight::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigNpcFight::clear_move_speed() {
  move_speed_ = 0;
  clear_has_move_speed();
}
inline ::google::protobuf::int32 ConfigNpcFight::move_speed() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpcFight.move_speed)
  return move_speed_;
}
inline void ConfigNpcFight::set_move_speed(::google::protobuf::int32 value) {
  set_has_move_speed();
  move_speed_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNpcFight.move_speed)
}

// required bytes effect = 4;
inline bool ConfigNpcFight::has_effect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigNpcFight::set_has_effect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigNpcFight::clear_has_effect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigNpcFight::clear_effect() {
  effect_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_effect();
}
inline const ::std::string& ConfigNpcFight::effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigNpcFight.effect)
  return effect_.Get();
}
inline void ConfigNpcFight::set_effect(const ::std::string& value) {
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigNpcFight.effect)
}
#if LANG_CXX11
inline void ConfigNpcFight::set_effect(::std::string&& value) {
  set_has_effect();
  effect_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigNpcFight.effect)
}
#endif
inline void ConfigNpcFight::set_effect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigNpcFight.effect)
}
inline void ConfigNpcFight::set_effect(const void* value,
    size_t size) {
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigNpcFight.effect)
}
inline ::std::string* ConfigNpcFight::mutable_effect() {
  set_has_effect();
  // @@protoc_insertion_point(field_mutable:db.ConfigNpcFight.effect)
  return effect_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigNpcFight::release_effect() {
  // @@protoc_insertion_point(field_release:db.ConfigNpcFight.effect)
  if (!has_effect()) {
    return NULL;
  }
  clear_has_effect();
  return effect_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigNpcFight::set_allocated_effect(::std::string* effect) {
  if (effect != NULL) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  effect_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), effect,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigNpcFight.effect)
}
inline ::std::string* ConfigNpcFight::unsafe_arena_release_effect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigNpcFight.effect)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_effect();
  return effect_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigNpcFight::unsafe_arena_set_allocated_effect(
    ::std::string* effect) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (effect != NULL) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  effect_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      effect, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigNpcFight.effect)
}

// -------------------------------------------------------------------

// ConfigPvePlayerDrop

// required uint64 id = 1;
inline bool ConfigPvePlayerDrop::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigPvePlayerDrop::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigPvePlayerDrop::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigPvePlayerDrop::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ConfigPvePlayerDrop::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigPvePlayerDrop.id)
  return id_;
}
inline void ConfigPvePlayerDrop::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPvePlayerDrop.id)
}

// required uint64 facility = 2;
inline bool ConfigPvePlayerDrop::has_facility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigPvePlayerDrop::set_has_facility() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigPvePlayerDrop::clear_has_facility() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigPvePlayerDrop::clear_facility() {
  facility_ = GOOGLE_ULONGLONG(0);
  clear_has_facility();
}
inline ::google::protobuf::uint64 ConfigPvePlayerDrop::facility() const {
  // @@protoc_insertion_point(field_get:db.ConfigPvePlayerDrop.facility)
  return facility_;
}
inline void ConfigPvePlayerDrop::set_facility(::google::protobuf::uint64 value) {
  set_has_facility();
  facility_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPvePlayerDrop.facility)
}

// required bytes drop = 3;
inline bool ConfigPvePlayerDrop::has_drop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigPvePlayerDrop::set_has_drop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigPvePlayerDrop::clear_has_drop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigPvePlayerDrop::clear_drop() {
  drop_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop();
}
inline const ::std::string& ConfigPvePlayerDrop::drop() const {
  // @@protoc_insertion_point(field_get:db.ConfigPvePlayerDrop.drop)
  return drop_.Get();
}
inline void ConfigPvePlayerDrop::set_drop(const ::std::string& value) {
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPvePlayerDrop.drop)
}
#if LANG_CXX11
inline void ConfigPvePlayerDrop::set_drop(::std::string&& value) {
  set_has_drop();
  drop_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPvePlayerDrop.drop)
}
#endif
inline void ConfigPvePlayerDrop::set_drop(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPvePlayerDrop.drop)
}
inline void ConfigPvePlayerDrop::set_drop(const void* value,
    size_t size) {
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPvePlayerDrop.drop)
}
inline ::std::string* ConfigPvePlayerDrop::mutable_drop() {
  set_has_drop();
  // @@protoc_insertion_point(field_mutable:db.ConfigPvePlayerDrop.drop)
  return drop_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPvePlayerDrop::release_drop() {
  // @@protoc_insertion_point(field_release:db.ConfigPvePlayerDrop.drop)
  if (!has_drop()) {
    return NULL;
  }
  clear_has_drop();
  return drop_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPvePlayerDrop::set_allocated_drop(::std::string* drop) {
  if (drop != NULL) {
    set_has_drop();
  } else {
    clear_has_drop();
  }
  drop_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPvePlayerDrop.drop)
}
inline ::std::string* ConfigPvePlayerDrop::unsafe_arena_release_drop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPvePlayerDrop.drop)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop();
  return drop_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPvePlayerDrop::unsafe_arena_set_allocated_drop(
    ::std::string* drop) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop != NULL) {
    set_has_drop();
  } else {
    clear_has_drop();
  }
  drop_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPvePlayerDrop.drop)
}

// -------------------------------------------------------------------

// ConfigCardTalent

// required uint64 id = 1;
inline bool ConfigCardTalent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigCardTalent::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigCardTalent::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigCardTalent::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ConfigCardTalent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardTalent.id)
  return id_;
}
inline void ConfigCardTalent::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardTalent.id)
}

// required int32 level = 2;
inline bool ConfigCardTalent::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigCardTalent::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigCardTalent::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigCardTalent::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigCardTalent::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardTalent.level)
  return level_;
}
inline void ConfigCardTalent::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardTalent.level)
}

// required bytes name = 3;
inline bool ConfigCardTalent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigCardTalent::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigCardTalent::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigCardTalent::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigCardTalent::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardTalent.name)
  return name_.Get();
}
inline void ConfigCardTalent::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardTalent.name)
}
#if LANG_CXX11
inline void ConfigCardTalent::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardTalent.name)
}
#endif
inline void ConfigCardTalent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardTalent.name)
}
inline void ConfigCardTalent::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardTalent.name)
}
inline ::std::string* ConfigCardTalent::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardTalent.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardTalent::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigCardTalent.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardTalent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardTalent.name)
}
inline ::std::string* ConfigCardTalent::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardTalent.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardTalent::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardTalent.name)
}

// required uint64 skill_id = 4;
inline bool ConfigCardTalent::has_skill_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigCardTalent::set_has_skill_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigCardTalent::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigCardTalent::clear_skill_id() {
  skill_id_ = GOOGLE_ULONGLONG(0);
  clear_has_skill_id();
}
inline ::google::protobuf::uint64 ConfigCardTalent::skill_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardTalent.skill_id)
  return skill_id_;
}
inline void ConfigCardTalent::set_skill_id(::google::protobuf::uint64 value) {
  set_has_skill_id();
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardTalent.skill_id)
}

// required uint64 farm_skill_id = 5;
inline bool ConfigCardTalent::has_farm_skill_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigCardTalent::set_has_farm_skill_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigCardTalent::clear_has_farm_skill_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigCardTalent::clear_farm_skill_id() {
  farm_skill_id_ = GOOGLE_ULONGLONG(0);
  clear_has_farm_skill_id();
}
inline ::google::protobuf::uint64 ConfigCardTalent::farm_skill_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardTalent.farm_skill_id)
  return farm_skill_id_;
}
inline void ConfigCardTalent::set_farm_skill_id(::google::protobuf::uint64 value) {
  set_has_farm_skill_id();
  farm_skill_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardTalent.farm_skill_id)
}

// required bytes effect = 6;
inline bool ConfigCardTalent::has_effect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigCardTalent::set_has_effect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigCardTalent::clear_has_effect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigCardTalent::clear_effect() {
  effect_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_effect();
}
inline const ::std::string& ConfigCardTalent::effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardTalent.effect)
  return effect_.Get();
}
inline void ConfigCardTalent::set_effect(const ::std::string& value) {
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardTalent.effect)
}
#if LANG_CXX11
inline void ConfigCardTalent::set_effect(::std::string&& value) {
  set_has_effect();
  effect_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardTalent.effect)
}
#endif
inline void ConfigCardTalent::set_effect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardTalent.effect)
}
inline void ConfigCardTalent::set_effect(const void* value,
    size_t size) {
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardTalent.effect)
}
inline ::std::string* ConfigCardTalent::mutable_effect() {
  set_has_effect();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardTalent.effect)
  return effect_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardTalent::release_effect() {
  // @@protoc_insertion_point(field_release:db.ConfigCardTalent.effect)
  if (!has_effect()) {
    return NULL;
  }
  clear_has_effect();
  return effect_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardTalent::set_allocated_effect(::std::string* effect) {
  if (effect != NULL) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  effect_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), effect,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardTalent.effect)
}
inline ::std::string* ConfigCardTalent::unsafe_arena_release_effect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardTalent.effect)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_effect();
  return effect_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardTalent::unsafe_arena_set_allocated_effect(
    ::std::string* effect) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (effect != NULL) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  effect_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      effect, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardTalent.effect)
}

// -------------------------------------------------------------------

// ConfigShoppingVitality

// required int32 id = 1;
inline bool ConfigShoppingVitality::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigShoppingVitality::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigShoppingVitality::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigShoppingVitality::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigShoppingVitality::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigShoppingVitality.id)
  return id_;
}
inline void ConfigShoppingVitality::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShoppingVitality.id)
}

// required int32 price = 2;
inline bool ConfigShoppingVitality::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigShoppingVitality::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigShoppingVitality::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigShoppingVitality::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ConfigShoppingVitality::price() const {
  // @@protoc_insertion_point(field_get:db.ConfigShoppingVitality.price)
  return price_;
}
inline void ConfigShoppingVitality::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShoppingVitality.price)
}

// required int32 get_vitality = 3;
inline bool ConfigShoppingVitality::has_get_vitality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigShoppingVitality::set_has_get_vitality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigShoppingVitality::clear_has_get_vitality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigShoppingVitality::clear_get_vitality() {
  get_vitality_ = 0;
  clear_has_get_vitality();
}
inline ::google::protobuf::int32 ConfigShoppingVitality::get_vitality() const {
  // @@protoc_insertion_point(field_get:db.ConfigShoppingVitality.get_vitality)
  return get_vitality_;
}
inline void ConfigShoppingVitality::set_get_vitality(::google::protobuf::int32 value) {
  set_has_get_vitality();
  get_vitality_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShoppingVitality.get_vitality)
}

// -------------------------------------------------------------------

// ConfigRankingReward

// required int32 id = 1;
inline bool ConfigRankingReward::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigRankingReward::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigRankingReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigRankingReward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigRankingReward::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingReward.id)
  return id_;
}
inline void ConfigRankingReward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRankingReward.id)
}

// required bytes ranking = 2;
inline bool ConfigRankingReward::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRankingReward::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRankingReward::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRankingReward::clear_ranking() {
  ranking_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ranking();
}
inline const ::std::string& ConfigRankingReward::ranking() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingReward.ranking)
  return ranking_.Get();
}
inline void ConfigRankingReward::set_ranking(const ::std::string& value) {
  set_has_ranking();
  ranking_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRankingReward.ranking)
}
#if LANG_CXX11
inline void ConfigRankingReward::set_ranking(::std::string&& value) {
  set_has_ranking();
  ranking_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRankingReward.ranking)
}
#endif
inline void ConfigRankingReward::set_ranking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ranking();
  ranking_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRankingReward.ranking)
}
inline void ConfigRankingReward::set_ranking(const void* value,
    size_t size) {
  set_has_ranking();
  ranking_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRankingReward.ranking)
}
inline ::std::string* ConfigRankingReward::mutable_ranking() {
  set_has_ranking();
  // @@protoc_insertion_point(field_mutable:db.ConfigRankingReward.ranking)
  return ranking_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRankingReward::release_ranking() {
  // @@protoc_insertion_point(field_release:db.ConfigRankingReward.ranking)
  if (!has_ranking()) {
    return NULL;
  }
  clear_has_ranking();
  return ranking_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRankingReward::set_allocated_ranking(::std::string* ranking) {
  if (ranking != NULL) {
    set_has_ranking();
  } else {
    clear_has_ranking();
  }
  ranking_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ranking,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRankingReward.ranking)
}
inline ::std::string* ConfigRankingReward::unsafe_arena_release_ranking() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRankingReward.ranking)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ranking();
  return ranking_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRankingReward::unsafe_arena_set_allocated_ranking(
    ::std::string* ranking) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ranking != NULL) {
    set_has_ranking();
  } else {
    clear_has_ranking();
  }
  ranking_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ranking, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRankingReward.ranking)
}

// required int32 division = 3;
inline bool ConfigRankingReward::has_division() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigRankingReward::set_has_division() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigRankingReward::clear_has_division() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigRankingReward::clear_division() {
  division_ = 0;
  clear_has_division();
}
inline ::google::protobuf::int32 ConfigRankingReward::division() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingReward.division)
  return division_;
}
inline void ConfigRankingReward::set_division(::google::protobuf::int32 value) {
  set_has_division();
  division_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRankingReward.division)
}

// required bytes daily_reward = 4;
inline bool ConfigRankingReward::has_daily_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRankingReward::set_has_daily_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRankingReward::clear_has_daily_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRankingReward::clear_daily_reward() {
  daily_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_daily_reward();
}
inline const ::std::string& ConfigRankingReward::daily_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingReward.daily_reward)
  return daily_reward_.Get();
}
inline void ConfigRankingReward::set_daily_reward(const ::std::string& value) {
  set_has_daily_reward();
  daily_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRankingReward.daily_reward)
}
#if LANG_CXX11
inline void ConfigRankingReward::set_daily_reward(::std::string&& value) {
  set_has_daily_reward();
  daily_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRankingReward.daily_reward)
}
#endif
inline void ConfigRankingReward::set_daily_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_daily_reward();
  daily_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRankingReward.daily_reward)
}
inline void ConfigRankingReward::set_daily_reward(const void* value,
    size_t size) {
  set_has_daily_reward();
  daily_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRankingReward.daily_reward)
}
inline ::std::string* ConfigRankingReward::mutable_daily_reward() {
  set_has_daily_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigRankingReward.daily_reward)
  return daily_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRankingReward::release_daily_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigRankingReward.daily_reward)
  if (!has_daily_reward()) {
    return NULL;
  }
  clear_has_daily_reward();
  return daily_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRankingReward::set_allocated_daily_reward(::std::string* daily_reward) {
  if (daily_reward != NULL) {
    set_has_daily_reward();
  } else {
    clear_has_daily_reward();
  }
  daily_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), daily_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRankingReward.daily_reward)
}
inline ::std::string* ConfigRankingReward::unsafe_arena_release_daily_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRankingReward.daily_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_daily_reward();
  return daily_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRankingReward::unsafe_arena_set_allocated_daily_reward(
    ::std::string* daily_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (daily_reward != NULL) {
    set_has_daily_reward();
  } else {
    clear_has_daily_reward();
  }
  daily_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      daily_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRankingReward.daily_reward)
}

// required bytes weekly_reward = 5;
inline bool ConfigRankingReward::has_weekly_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigRankingReward::set_has_weekly_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigRankingReward::clear_has_weekly_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigRankingReward::clear_weekly_reward() {
  weekly_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_weekly_reward();
}
inline const ::std::string& ConfigRankingReward::weekly_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingReward.weekly_reward)
  return weekly_reward_.Get();
}
inline void ConfigRankingReward::set_weekly_reward(const ::std::string& value) {
  set_has_weekly_reward();
  weekly_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRankingReward.weekly_reward)
}
#if LANG_CXX11
inline void ConfigRankingReward::set_weekly_reward(::std::string&& value) {
  set_has_weekly_reward();
  weekly_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRankingReward.weekly_reward)
}
#endif
inline void ConfigRankingReward::set_weekly_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weekly_reward();
  weekly_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRankingReward.weekly_reward)
}
inline void ConfigRankingReward::set_weekly_reward(const void* value,
    size_t size) {
  set_has_weekly_reward();
  weekly_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRankingReward.weekly_reward)
}
inline ::std::string* ConfigRankingReward::mutable_weekly_reward() {
  set_has_weekly_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigRankingReward.weekly_reward)
  return weekly_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRankingReward::release_weekly_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigRankingReward.weekly_reward)
  if (!has_weekly_reward()) {
    return NULL;
  }
  clear_has_weekly_reward();
  return weekly_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRankingReward::set_allocated_weekly_reward(::std::string* weekly_reward) {
  if (weekly_reward != NULL) {
    set_has_weekly_reward();
  } else {
    clear_has_weekly_reward();
  }
  weekly_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weekly_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRankingReward.weekly_reward)
}
inline ::std::string* ConfigRankingReward::unsafe_arena_release_weekly_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRankingReward.weekly_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_weekly_reward();
  return weekly_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRankingReward::unsafe_arena_set_allocated_weekly_reward(
    ::std::string* weekly_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (weekly_reward != NULL) {
    set_has_weekly_reward();
  } else {
    clear_has_weekly_reward();
  }
  weekly_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      weekly_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRankingReward.weekly_reward)
}

// required bytes monthly_reward = 6;
inline bool ConfigRankingReward::has_monthly_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigRankingReward::set_has_monthly_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigRankingReward::clear_has_monthly_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigRankingReward::clear_monthly_reward() {
  monthly_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_monthly_reward();
}
inline const ::std::string& ConfigRankingReward::monthly_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingReward.monthly_reward)
  return monthly_reward_.Get();
}
inline void ConfigRankingReward::set_monthly_reward(const ::std::string& value) {
  set_has_monthly_reward();
  monthly_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRankingReward.monthly_reward)
}
#if LANG_CXX11
inline void ConfigRankingReward::set_monthly_reward(::std::string&& value) {
  set_has_monthly_reward();
  monthly_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRankingReward.monthly_reward)
}
#endif
inline void ConfigRankingReward::set_monthly_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_monthly_reward();
  monthly_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRankingReward.monthly_reward)
}
inline void ConfigRankingReward::set_monthly_reward(const void* value,
    size_t size) {
  set_has_monthly_reward();
  monthly_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRankingReward.monthly_reward)
}
inline ::std::string* ConfigRankingReward::mutable_monthly_reward() {
  set_has_monthly_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigRankingReward.monthly_reward)
  return monthly_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRankingReward::release_monthly_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigRankingReward.monthly_reward)
  if (!has_monthly_reward()) {
    return NULL;
  }
  clear_has_monthly_reward();
  return monthly_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRankingReward::set_allocated_monthly_reward(::std::string* monthly_reward) {
  if (monthly_reward != NULL) {
    set_has_monthly_reward();
  } else {
    clear_has_monthly_reward();
  }
  monthly_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monthly_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRankingReward.monthly_reward)
}
inline ::std::string* ConfigRankingReward::unsafe_arena_release_monthly_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRankingReward.monthly_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_monthly_reward();
  return monthly_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRankingReward::unsafe_arena_set_allocated_monthly_reward(
    ::std::string* monthly_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (monthly_reward != NULL) {
    set_has_monthly_reward();
  } else {
    clear_has_monthly_reward();
  }
  monthly_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      monthly_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRankingReward.monthly_reward)
}

// -------------------------------------------------------------------

// ConfigFightElementConnect

// required int32 id = 1;
inline bool ConfigFightElementConnect::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFightElementConnect::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFightElementConnect::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFightElementConnect::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigFightElementConnect::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightElementConnect.id)
  return id_;
}
inline void ConfigFightElementConnect::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightElementConnect.id)
}

// required int32 type = 2;
inline bool ConfigFightElementConnect::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFightElementConnect::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFightElementConnect::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFightElementConnect::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigFightElementConnect::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightElementConnect.type)
  return type_;
}
inline void ConfigFightElementConnect::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFightElementConnect.type)
}

// required bytes connect_element = 3;
inline bool ConfigFightElementConnect::has_connect_element() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFightElementConnect::set_has_connect_element() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFightElementConnect::clear_has_connect_element() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFightElementConnect::clear_connect_element() {
  connect_element_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_connect_element();
}
inline const ::std::string& ConfigFightElementConnect::connect_element() const {
  // @@protoc_insertion_point(field_get:db.ConfigFightElementConnect.connect_element)
  return connect_element_.Get();
}
inline void ConfigFightElementConnect::set_connect_element(const ::std::string& value) {
  set_has_connect_element();
  connect_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFightElementConnect.connect_element)
}
#if LANG_CXX11
inline void ConfigFightElementConnect::set_connect_element(::std::string&& value) {
  set_has_connect_element();
  connect_element_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFightElementConnect.connect_element)
}
#endif
inline void ConfigFightElementConnect::set_connect_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connect_element();
  connect_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFightElementConnect.connect_element)
}
inline void ConfigFightElementConnect::set_connect_element(const void* value,
    size_t size) {
  set_has_connect_element();
  connect_element_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFightElementConnect.connect_element)
}
inline ::std::string* ConfigFightElementConnect::mutable_connect_element() {
  set_has_connect_element();
  // @@protoc_insertion_point(field_mutable:db.ConfigFightElementConnect.connect_element)
  return connect_element_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFightElementConnect::release_connect_element() {
  // @@protoc_insertion_point(field_release:db.ConfigFightElementConnect.connect_element)
  if (!has_connect_element()) {
    return NULL;
  }
  clear_has_connect_element();
  return connect_element_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFightElementConnect::set_allocated_connect_element(::std::string* connect_element) {
  if (connect_element != NULL) {
    set_has_connect_element();
  } else {
    clear_has_connect_element();
  }
  connect_element_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect_element,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFightElementConnect.connect_element)
}
inline ::std::string* ConfigFightElementConnect::unsafe_arena_release_connect_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFightElementConnect.connect_element)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_connect_element();
  return connect_element_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFightElementConnect::unsafe_arena_set_allocated_connect_element(
    ::std::string* connect_element) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (connect_element != NULL) {
    set_has_connect_element();
  } else {
    clear_has_connect_element();
  }
  connect_element_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      connect_element, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFightElementConnect.connect_element)
}

// -------------------------------------------------------------------

// ConfigWildIslandLevel

// required int64 id = 1;
inline bool ConfigWildIslandLevel::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigWildIslandLevel::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigWildIslandLevel::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigWildIslandLevel::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ConfigWildIslandLevel::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.id)
  return id_;
}
inline void ConfigWildIslandLevel::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.id)
}

// required int64 islandid = 2;
inline bool ConfigWildIslandLevel::has_islandid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigWildIslandLevel::set_has_islandid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigWildIslandLevel::clear_has_islandid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigWildIslandLevel::clear_islandid() {
  islandid_ = GOOGLE_LONGLONG(0);
  clear_has_islandid();
}
inline ::google::protobuf::int64 ConfigWildIslandLevel::islandid() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.islandid)
  return islandid_;
}
inline void ConfigWildIslandLevel::set_islandid(::google::protobuf::int64 value) {
  set_has_islandid();
  islandid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.islandid)
}

// required bytes name = 3;
inline bool ConfigWildIslandLevel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigWildIslandLevel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigWildIslandLevel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigWildIslandLevel::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigWildIslandLevel::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.name)
  return name_.Get();
}
inline void ConfigWildIslandLevel::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.name)
}
#if LANG_CXX11
inline void ConfigWildIslandLevel::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWildIslandLevel.name)
}
#endif
inline void ConfigWildIslandLevel::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWildIslandLevel.name)
}
inline void ConfigWildIslandLevel::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWildIslandLevel.name)
}
inline ::std::string* ConfigWildIslandLevel::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIslandLevel.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWildIslandLevel::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigWildIslandLevel.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWildIslandLevel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWildIslandLevel.name)
}
inline ::std::string* ConfigWildIslandLevel::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWildIslandLevel.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWildIslandLevel::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWildIslandLevel.name)
}

// required int32 rank = 4;
inline bool ConfigWildIslandLevel::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigWildIslandLevel::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigWildIslandLevel::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigWildIslandLevel::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ConfigWildIslandLevel::rank() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.rank)
  return rank_;
}
inline void ConfigWildIslandLevel::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.rank)
}

// required int32 level = 5;
inline bool ConfigWildIslandLevel::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigWildIslandLevel::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigWildIslandLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigWildIslandLevel::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigWildIslandLevel::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.level)
  return level_;
}
inline void ConfigWildIslandLevel::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.level)
}

// required int32 condition = 6;
inline bool ConfigWildIslandLevel::has_condition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigWildIslandLevel::set_has_condition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigWildIslandLevel::clear_has_condition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigWildIslandLevel::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::google::protobuf::int32 ConfigWildIslandLevel::condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.condition)
  return condition_;
}
inline void ConfigWildIslandLevel::set_condition(::google::protobuf::int32 value) {
  set_has_condition();
  condition_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.condition)
}

// required int32 vitality_cost = 7;
inline bool ConfigWildIslandLevel::has_vitality_cost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigWildIslandLevel::set_has_vitality_cost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigWildIslandLevel::clear_has_vitality_cost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigWildIslandLevel::clear_vitality_cost() {
  vitality_cost_ = 0;
  clear_has_vitality_cost();
}
inline ::google::protobuf::int32 ConfigWildIslandLevel::vitality_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.vitality_cost)
  return vitality_cost_;
}
inline void ConfigWildIslandLevel::set_vitality_cost(::google::protobuf::int32 value) {
  set_has_vitality_cost();
  vitality_cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.vitality_cost)
}

// required int32 worker_max = 8;
inline bool ConfigWildIslandLevel::has_worker_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigWildIslandLevel::set_has_worker_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigWildIslandLevel::clear_has_worker_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigWildIslandLevel::clear_worker_max() {
  worker_max_ = 0;
  clear_has_worker_max();
}
inline ::google::protobuf::int32 ConfigWildIslandLevel::worker_max() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.worker_max)
  return worker_max_;
}
inline void ConfigWildIslandLevel::set_worker_max(::google::protobuf::int32 value) {
  set_has_worker_max();
  worker_max_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.worker_max)
}

// required int32 produce_add = 9;
inline bool ConfigWildIslandLevel::has_produce_add() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigWildIslandLevel::set_has_produce_add() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigWildIslandLevel::clear_has_produce_add() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigWildIslandLevel::clear_produce_add() {
  produce_add_ = 0;
  clear_has_produce_add();
}
inline ::google::protobuf::int32 ConfigWildIslandLevel::produce_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.produce_add)
  return produce_add_;
}
inline void ConfigWildIslandLevel::set_produce_add(::google::protobuf::int32 value) {
  set_has_produce_add();
  produce_add_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.produce_add)
}

// required bytes repair_cost = 10;
inline bool ConfigWildIslandLevel::has_repair_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigWildIslandLevel::set_has_repair_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigWildIslandLevel::clear_has_repair_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigWildIslandLevel::clear_repair_cost() {
  repair_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_repair_cost();
}
inline const ::std::string& ConfigWildIslandLevel::repair_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.repair_cost)
  return repair_cost_.Get();
}
inline void ConfigWildIslandLevel::set_repair_cost(const ::std::string& value) {
  set_has_repair_cost();
  repair_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.repair_cost)
}
#if LANG_CXX11
inline void ConfigWildIslandLevel::set_repair_cost(::std::string&& value) {
  set_has_repair_cost();
  repair_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWildIslandLevel.repair_cost)
}
#endif
inline void ConfigWildIslandLevel::set_repair_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_repair_cost();
  repair_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWildIslandLevel.repair_cost)
}
inline void ConfigWildIslandLevel::set_repair_cost(const void* value,
    size_t size) {
  set_has_repair_cost();
  repair_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWildIslandLevel.repair_cost)
}
inline ::std::string* ConfigWildIslandLevel::mutable_repair_cost() {
  set_has_repair_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIslandLevel.repair_cost)
  return repair_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWildIslandLevel::release_repair_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigWildIslandLevel.repair_cost)
  if (!has_repair_cost()) {
    return NULL;
  }
  clear_has_repair_cost();
  return repair_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWildIslandLevel::set_allocated_repair_cost(::std::string* repair_cost) {
  if (repair_cost != NULL) {
    set_has_repair_cost();
  } else {
    clear_has_repair_cost();
  }
  repair_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repair_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWildIslandLevel.repair_cost)
}
inline ::std::string* ConfigWildIslandLevel::unsafe_arena_release_repair_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWildIslandLevel.repair_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_repair_cost();
  return repair_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWildIslandLevel::unsafe_arena_set_allocated_repair_cost(
    ::std::string* repair_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (repair_cost != NULL) {
    set_has_repair_cost();
  } else {
    clear_has_repair_cost();
  }
  repair_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      repair_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWildIslandLevel.repair_cost)
}

// required int32 model_id = 11;
inline bool ConfigWildIslandLevel::has_model_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigWildIslandLevel::set_has_model_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigWildIslandLevel::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigWildIslandLevel::clear_model_id() {
  model_id_ = 0;
  clear_has_model_id();
}
inline ::google::protobuf::int32 ConfigWildIslandLevel::model_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.model_id)
  return model_id_;
}
inline void ConfigWildIslandLevel::set_model_id(::google::protobuf::int32 value) {
  set_has_model_id();
  model_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.model_id)
}

// required int32 map_model = 12;
inline bool ConfigWildIslandLevel::has_map_model() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigWildIslandLevel::set_has_map_model() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigWildIslandLevel::clear_has_map_model() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigWildIslandLevel::clear_map_model() {
  map_model_ = 0;
  clear_has_map_model();
}
inline ::google::protobuf::int32 ConfigWildIslandLevel::map_model() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.map_model)
  return map_model_;
}
inline void ConfigWildIslandLevel::set_map_model(::google::protobuf::int32 value) {
  set_has_map_model();
  map_model_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.map_model)
}

// required bytes reward = 13;
inline bool ConfigWildIslandLevel::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigWildIslandLevel::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigWildIslandLevel::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigWildIslandLevel::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigWildIslandLevel::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigWildIslandLevel.reward)
  return reward_.Get();
}
inline void ConfigWildIslandLevel::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigWildIslandLevel.reward)
}
#if LANG_CXX11
inline void ConfigWildIslandLevel::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigWildIslandLevel.reward)
}
#endif
inline void ConfigWildIslandLevel::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigWildIslandLevel.reward)
}
inline void ConfigWildIslandLevel::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigWildIslandLevel.reward)
}
inline ::std::string* ConfigWildIslandLevel::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigWildIslandLevel.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigWildIslandLevel::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigWildIslandLevel.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigWildIslandLevel::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigWildIslandLevel.reward)
}
inline ::std::string* ConfigWildIslandLevel::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigWildIslandLevel.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigWildIslandLevel::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigWildIslandLevel.reward)
}

// -------------------------------------------------------------------

// ConfigBusinessman

// required int64 id = 1;
inline bool ConfigBusinessman::has_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigBusinessman::set_has_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigBusinessman::clear_has_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigBusinessman::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ConfigBusinessman::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.id)
  return id_;
}
inline void ConfigBusinessman::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.id)
}

// required bytes name = 2;
inline bool ConfigBusinessman::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigBusinessman::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigBusinessman::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigBusinessman::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigBusinessman::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.name)
  return name_.Get();
}
inline void ConfigBusinessman::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.name)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.name)
}
#endif
inline void ConfigBusinessman::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.name)
}
inline void ConfigBusinessman::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.name)
}
inline ::std::string* ConfigBusinessman::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.name)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.name)
}

// required int32 type = 3;
inline bool ConfigBusinessman::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigBusinessman::set_has_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigBusinessman::clear_has_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigBusinessman::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigBusinessman::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.type)
  return type_;
}
inline void ConfigBusinessman::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.type)
}

// required bytes exchange_need1 = 11;
inline bool ConfigBusinessman::has_exchange_need1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigBusinessman::set_has_exchange_need1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigBusinessman::clear_has_exchange_need1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigBusinessman::clear_exchange_need1() {
  exchange_need1_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_exchange_need1();
}
inline const ::std::string& ConfigBusinessman::exchange_need1() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.exchange_need1)
  return exchange_need1_.Get();
}
inline void ConfigBusinessman::set_exchange_need1(const ::std::string& value) {
  set_has_exchange_need1();
  exchange_need1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.exchange_need1)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_exchange_need1(::std::string&& value) {
  set_has_exchange_need1();
  exchange_need1_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.exchange_need1)
}
#endif
inline void ConfigBusinessman::set_exchange_need1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_need1();
  exchange_need1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.exchange_need1)
}
inline void ConfigBusinessman::set_exchange_need1(const void* value,
    size_t size) {
  set_has_exchange_need1();
  exchange_need1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.exchange_need1)
}
inline ::std::string* ConfigBusinessman::mutable_exchange_need1() {
  set_has_exchange_need1();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.exchange_need1)
  return exchange_need1_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_exchange_need1() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.exchange_need1)
  if (!has_exchange_need1()) {
    return NULL;
  }
  clear_has_exchange_need1();
  return exchange_need1_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_exchange_need1(::std::string* exchange_need1) {
  if (exchange_need1 != NULL) {
    set_has_exchange_need1();
  } else {
    clear_has_exchange_need1();
  }
  exchange_need1_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_need1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.exchange_need1)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_exchange_need1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.exchange_need1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_exchange_need1();
  return exchange_need1_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_exchange_need1(
    ::std::string* exchange_need1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange_need1 != NULL) {
    set_has_exchange_need1();
  } else {
    clear_has_exchange_need1();
  }
  exchange_need1_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange_need1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.exchange_need1)
}

// required bytes exchange_reward1 = 12;
inline bool ConfigBusinessman::has_exchange_reward1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigBusinessman::set_has_exchange_reward1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigBusinessman::clear_has_exchange_reward1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigBusinessman::clear_exchange_reward1() {
  exchange_reward1_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_exchange_reward1();
}
inline const ::std::string& ConfigBusinessman::exchange_reward1() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.exchange_reward1)
  return exchange_reward1_.Get();
}
inline void ConfigBusinessman::set_exchange_reward1(const ::std::string& value) {
  set_has_exchange_reward1();
  exchange_reward1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.exchange_reward1)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_exchange_reward1(::std::string&& value) {
  set_has_exchange_reward1();
  exchange_reward1_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.exchange_reward1)
}
#endif
inline void ConfigBusinessman::set_exchange_reward1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_reward1();
  exchange_reward1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.exchange_reward1)
}
inline void ConfigBusinessman::set_exchange_reward1(const void* value,
    size_t size) {
  set_has_exchange_reward1();
  exchange_reward1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.exchange_reward1)
}
inline ::std::string* ConfigBusinessman::mutable_exchange_reward1() {
  set_has_exchange_reward1();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.exchange_reward1)
  return exchange_reward1_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_exchange_reward1() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.exchange_reward1)
  if (!has_exchange_reward1()) {
    return NULL;
  }
  clear_has_exchange_reward1();
  return exchange_reward1_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_exchange_reward1(::std::string* exchange_reward1) {
  if (exchange_reward1 != NULL) {
    set_has_exchange_reward1();
  } else {
    clear_has_exchange_reward1();
  }
  exchange_reward1_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_reward1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.exchange_reward1)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_exchange_reward1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.exchange_reward1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_exchange_reward1();
  return exchange_reward1_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_exchange_reward1(
    ::std::string* exchange_reward1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange_reward1 != NULL) {
    set_has_exchange_reward1();
  } else {
    clear_has_exchange_reward1();
  }
  exchange_reward1_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange_reward1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.exchange_reward1)
}

// required bytes exchange_need2 = 13;
inline bool ConfigBusinessman::has_exchange_need2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigBusinessman::set_has_exchange_need2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigBusinessman::clear_has_exchange_need2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigBusinessman::clear_exchange_need2() {
  exchange_need2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_exchange_need2();
}
inline const ::std::string& ConfigBusinessman::exchange_need2() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.exchange_need2)
  return exchange_need2_.Get();
}
inline void ConfigBusinessman::set_exchange_need2(const ::std::string& value) {
  set_has_exchange_need2();
  exchange_need2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.exchange_need2)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_exchange_need2(::std::string&& value) {
  set_has_exchange_need2();
  exchange_need2_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.exchange_need2)
}
#endif
inline void ConfigBusinessman::set_exchange_need2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_need2();
  exchange_need2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.exchange_need2)
}
inline void ConfigBusinessman::set_exchange_need2(const void* value,
    size_t size) {
  set_has_exchange_need2();
  exchange_need2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.exchange_need2)
}
inline ::std::string* ConfigBusinessman::mutable_exchange_need2() {
  set_has_exchange_need2();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.exchange_need2)
  return exchange_need2_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_exchange_need2() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.exchange_need2)
  if (!has_exchange_need2()) {
    return NULL;
  }
  clear_has_exchange_need2();
  return exchange_need2_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_exchange_need2(::std::string* exchange_need2) {
  if (exchange_need2 != NULL) {
    set_has_exchange_need2();
  } else {
    clear_has_exchange_need2();
  }
  exchange_need2_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_need2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.exchange_need2)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_exchange_need2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.exchange_need2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_exchange_need2();
  return exchange_need2_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_exchange_need2(
    ::std::string* exchange_need2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange_need2 != NULL) {
    set_has_exchange_need2();
  } else {
    clear_has_exchange_need2();
  }
  exchange_need2_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange_need2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.exchange_need2)
}

// required bytes exchange_reward2 = 14;
inline bool ConfigBusinessman::has_exchange_reward2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigBusinessman::set_has_exchange_reward2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigBusinessman::clear_has_exchange_reward2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigBusinessman::clear_exchange_reward2() {
  exchange_reward2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_exchange_reward2();
}
inline const ::std::string& ConfigBusinessman::exchange_reward2() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.exchange_reward2)
  return exchange_reward2_.Get();
}
inline void ConfigBusinessman::set_exchange_reward2(const ::std::string& value) {
  set_has_exchange_reward2();
  exchange_reward2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.exchange_reward2)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_exchange_reward2(::std::string&& value) {
  set_has_exchange_reward2();
  exchange_reward2_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.exchange_reward2)
}
#endif
inline void ConfigBusinessman::set_exchange_reward2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_reward2();
  exchange_reward2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.exchange_reward2)
}
inline void ConfigBusinessman::set_exchange_reward2(const void* value,
    size_t size) {
  set_has_exchange_reward2();
  exchange_reward2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.exchange_reward2)
}
inline ::std::string* ConfigBusinessman::mutable_exchange_reward2() {
  set_has_exchange_reward2();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.exchange_reward2)
  return exchange_reward2_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_exchange_reward2() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.exchange_reward2)
  if (!has_exchange_reward2()) {
    return NULL;
  }
  clear_has_exchange_reward2();
  return exchange_reward2_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_exchange_reward2(::std::string* exchange_reward2) {
  if (exchange_reward2 != NULL) {
    set_has_exchange_reward2();
  } else {
    clear_has_exchange_reward2();
  }
  exchange_reward2_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_reward2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.exchange_reward2)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_exchange_reward2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.exchange_reward2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_exchange_reward2();
  return exchange_reward2_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_exchange_reward2(
    ::std::string* exchange_reward2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange_reward2 != NULL) {
    set_has_exchange_reward2();
  } else {
    clear_has_exchange_reward2();
  }
  exchange_reward2_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange_reward2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.exchange_reward2)
}

// required bytes exchange_need3 = 15;
inline bool ConfigBusinessman::has_exchange_need3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigBusinessman::set_has_exchange_need3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigBusinessman::clear_has_exchange_need3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigBusinessman::clear_exchange_need3() {
  exchange_need3_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_exchange_need3();
}
inline const ::std::string& ConfigBusinessman::exchange_need3() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.exchange_need3)
  return exchange_need3_.Get();
}
inline void ConfigBusinessman::set_exchange_need3(const ::std::string& value) {
  set_has_exchange_need3();
  exchange_need3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.exchange_need3)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_exchange_need3(::std::string&& value) {
  set_has_exchange_need3();
  exchange_need3_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.exchange_need3)
}
#endif
inline void ConfigBusinessman::set_exchange_need3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_need3();
  exchange_need3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.exchange_need3)
}
inline void ConfigBusinessman::set_exchange_need3(const void* value,
    size_t size) {
  set_has_exchange_need3();
  exchange_need3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.exchange_need3)
}
inline ::std::string* ConfigBusinessman::mutable_exchange_need3() {
  set_has_exchange_need3();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.exchange_need3)
  return exchange_need3_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_exchange_need3() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.exchange_need3)
  if (!has_exchange_need3()) {
    return NULL;
  }
  clear_has_exchange_need3();
  return exchange_need3_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_exchange_need3(::std::string* exchange_need3) {
  if (exchange_need3 != NULL) {
    set_has_exchange_need3();
  } else {
    clear_has_exchange_need3();
  }
  exchange_need3_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_need3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.exchange_need3)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_exchange_need3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.exchange_need3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_exchange_need3();
  return exchange_need3_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_exchange_need3(
    ::std::string* exchange_need3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange_need3 != NULL) {
    set_has_exchange_need3();
  } else {
    clear_has_exchange_need3();
  }
  exchange_need3_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange_need3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.exchange_need3)
}

// required bytes exchange_reward3 = 16;
inline bool ConfigBusinessman::has_exchange_reward3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigBusinessman::set_has_exchange_reward3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigBusinessman::clear_has_exchange_reward3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigBusinessman::clear_exchange_reward3() {
  exchange_reward3_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_exchange_reward3();
}
inline const ::std::string& ConfigBusinessman::exchange_reward3() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.exchange_reward3)
  return exchange_reward3_.Get();
}
inline void ConfigBusinessman::set_exchange_reward3(const ::std::string& value) {
  set_has_exchange_reward3();
  exchange_reward3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.exchange_reward3)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_exchange_reward3(::std::string&& value) {
  set_has_exchange_reward3();
  exchange_reward3_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.exchange_reward3)
}
#endif
inline void ConfigBusinessman::set_exchange_reward3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_reward3();
  exchange_reward3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.exchange_reward3)
}
inline void ConfigBusinessman::set_exchange_reward3(const void* value,
    size_t size) {
  set_has_exchange_reward3();
  exchange_reward3_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.exchange_reward3)
}
inline ::std::string* ConfigBusinessman::mutable_exchange_reward3() {
  set_has_exchange_reward3();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.exchange_reward3)
  return exchange_reward3_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_exchange_reward3() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.exchange_reward3)
  if (!has_exchange_reward3()) {
    return NULL;
  }
  clear_has_exchange_reward3();
  return exchange_reward3_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_exchange_reward3(::std::string* exchange_reward3) {
  if (exchange_reward3 != NULL) {
    set_has_exchange_reward3();
  } else {
    clear_has_exchange_reward3();
  }
  exchange_reward3_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_reward3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.exchange_reward3)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_exchange_reward3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.exchange_reward3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_exchange_reward3();
  return exchange_reward3_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_exchange_reward3(
    ::std::string* exchange_reward3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange_reward3 != NULL) {
    set_has_exchange_reward3();
  } else {
    clear_has_exchange_reward3();
  }
  exchange_reward3_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange_reward3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.exchange_reward3)
}

// required bytes goods_num = 21;
inline bool ConfigBusinessman::has_goods_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigBusinessman::set_has_goods_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigBusinessman::clear_has_goods_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigBusinessman::clear_goods_num() {
  goods_num_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_goods_num();
}
inline const ::std::string& ConfigBusinessman::goods_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.goods_num)
  return goods_num_.Get();
}
inline void ConfigBusinessman::set_goods_num(const ::std::string& value) {
  set_has_goods_num();
  goods_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.goods_num)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_goods_num(::std::string&& value) {
  set_has_goods_num();
  goods_num_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.goods_num)
}
#endif
inline void ConfigBusinessman::set_goods_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_goods_num();
  goods_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.goods_num)
}
inline void ConfigBusinessman::set_goods_num(const void* value,
    size_t size) {
  set_has_goods_num();
  goods_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.goods_num)
}
inline ::std::string* ConfigBusinessman::mutable_goods_num() {
  set_has_goods_num();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.goods_num)
  return goods_num_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_goods_num() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.goods_num)
  if (!has_goods_num()) {
    return NULL;
  }
  clear_has_goods_num();
  return goods_num_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_goods_num(::std::string* goods_num) {
  if (goods_num != NULL) {
    set_has_goods_num();
  } else {
    clear_has_goods_num();
  }
  goods_num_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goods_num,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.goods_num)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_goods_num() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.goods_num)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_goods_num();
  return goods_num_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_goods_num(
    ::std::string* goods_num) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (goods_num != NULL) {
    set_has_goods_num();
  } else {
    clear_has_goods_num();
  }
  goods_num_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      goods_num, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.goods_num)
}

// required bytes goods = 22;
inline bool ConfigBusinessman::has_goods() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigBusinessman::set_has_goods() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigBusinessman::clear_has_goods() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigBusinessman::clear_goods() {
  goods_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_goods();
}
inline const ::std::string& ConfigBusinessman::goods() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.goods)
  return goods_.Get();
}
inline void ConfigBusinessman::set_goods(const ::std::string& value) {
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.goods)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_goods(::std::string&& value) {
  set_has_goods();
  goods_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.goods)
}
#endif
inline void ConfigBusinessman::set_goods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.goods)
}
inline void ConfigBusinessman::set_goods(const void* value,
    size_t size) {
  set_has_goods();
  goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.goods)
}
inline ::std::string* ConfigBusinessman::mutable_goods() {
  set_has_goods();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.goods)
  return goods_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_goods() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.goods)
  if (!has_goods()) {
    return NULL;
  }
  clear_has_goods();
  return goods_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_goods(::std::string* goods) {
  if (goods != NULL) {
    set_has_goods();
  } else {
    clear_has_goods();
  }
  goods_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goods,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.goods)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_goods() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.goods)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_goods();
  return goods_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_goods(
    ::std::string* goods) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (goods != NULL) {
    set_has_goods();
  } else {
    clear_has_goods();
  }
  goods_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      goods, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.goods)
}

// required float discount_probability = 23;
inline bool ConfigBusinessman::has_discount_probability() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigBusinessman::set_has_discount_probability() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigBusinessman::clear_has_discount_probability() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigBusinessman::clear_discount_probability() {
  discount_probability_ = 0;
  clear_has_discount_probability();
}
inline float ConfigBusinessman::discount_probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.discount_probability)
  return discount_probability_;
}
inline void ConfigBusinessman::set_discount_probability(float value) {
  set_has_discount_probability();
  discount_probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.discount_probability)
}

// required bytes discount_num = 24;
inline bool ConfigBusinessman::has_discount_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigBusinessman::set_has_discount_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigBusinessman::clear_has_discount_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigBusinessman::clear_discount_num() {
  discount_num_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_discount_num();
}
inline const ::std::string& ConfigBusinessman::discount_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.discount_num)
  return discount_num_.Get();
}
inline void ConfigBusinessman::set_discount_num(const ::std::string& value) {
  set_has_discount_num();
  discount_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.discount_num)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_discount_num(::std::string&& value) {
  set_has_discount_num();
  discount_num_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.discount_num)
}
#endif
inline void ConfigBusinessman::set_discount_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_discount_num();
  discount_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.discount_num)
}
inline void ConfigBusinessman::set_discount_num(const void* value,
    size_t size) {
  set_has_discount_num();
  discount_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.discount_num)
}
inline ::std::string* ConfigBusinessman::mutable_discount_num() {
  set_has_discount_num();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.discount_num)
  return discount_num_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_discount_num() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.discount_num)
  if (!has_discount_num()) {
    return NULL;
  }
  clear_has_discount_num();
  return discount_num_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_discount_num(::std::string* discount_num) {
  if (discount_num != NULL) {
    set_has_discount_num();
  } else {
    clear_has_discount_num();
  }
  discount_num_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discount_num,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.discount_num)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_discount_num() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.discount_num)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_discount_num();
  return discount_num_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_discount_num(
    ::std::string* discount_num) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (discount_num != NULL) {
    set_has_discount_num();
  } else {
    clear_has_discount_num();
  }
  discount_num_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      discount_num, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.discount_num)
}

// required bytes price_fluctuation = 25;
inline bool ConfigBusinessman::has_price_fluctuation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigBusinessman::set_has_price_fluctuation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigBusinessman::clear_has_price_fluctuation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigBusinessman::clear_price_fluctuation() {
  price_fluctuation_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_price_fluctuation();
}
inline const ::std::string& ConfigBusinessman::price_fluctuation() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.price_fluctuation)
  return price_fluctuation_.Get();
}
inline void ConfigBusinessman::set_price_fluctuation(const ::std::string& value) {
  set_has_price_fluctuation();
  price_fluctuation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.price_fluctuation)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_price_fluctuation(::std::string&& value) {
  set_has_price_fluctuation();
  price_fluctuation_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.price_fluctuation)
}
#endif
inline void ConfigBusinessman::set_price_fluctuation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price_fluctuation();
  price_fluctuation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.price_fluctuation)
}
inline void ConfigBusinessman::set_price_fluctuation(const void* value,
    size_t size) {
  set_has_price_fluctuation();
  price_fluctuation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.price_fluctuation)
}
inline ::std::string* ConfigBusinessman::mutable_price_fluctuation() {
  set_has_price_fluctuation();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.price_fluctuation)
  return price_fluctuation_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_price_fluctuation() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.price_fluctuation)
  if (!has_price_fluctuation()) {
    return NULL;
  }
  clear_has_price_fluctuation();
  return price_fluctuation_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_price_fluctuation(::std::string* price_fluctuation) {
  if (price_fluctuation != NULL) {
    set_has_price_fluctuation();
  } else {
    clear_has_price_fluctuation();
  }
  price_fluctuation_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_fluctuation,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.price_fluctuation)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_price_fluctuation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.price_fluctuation)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_price_fluctuation();
  return price_fluctuation_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_price_fluctuation(
    ::std::string* price_fluctuation) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (price_fluctuation != NULL) {
    set_has_price_fluctuation();
  } else {
    clear_has_price_fluctuation();
  }
  price_fluctuation_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      price_fluctuation, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.price_fluctuation)
}

// required bytes bargain = 26;
inline bool ConfigBusinessman::has_bargain() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigBusinessman::set_has_bargain() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigBusinessman::clear_has_bargain() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigBusinessman::clear_bargain() {
  bargain_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_bargain();
}
inline const ::std::string& ConfigBusinessman::bargain() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.bargain)
  return bargain_.Get();
}
inline void ConfigBusinessman::set_bargain(const ::std::string& value) {
  set_has_bargain();
  bargain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.bargain)
}
#if LANG_CXX11
inline void ConfigBusinessman::set_bargain(::std::string&& value) {
  set_has_bargain();
  bargain_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBusinessman.bargain)
}
#endif
inline void ConfigBusinessman::set_bargain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bargain();
  bargain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBusinessman.bargain)
}
inline void ConfigBusinessman::set_bargain(const void* value,
    size_t size) {
  set_has_bargain();
  bargain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBusinessman.bargain)
}
inline ::std::string* ConfigBusinessman::mutable_bargain() {
  set_has_bargain();
  // @@protoc_insertion_point(field_mutable:db.ConfigBusinessman.bargain)
  return bargain_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBusinessman::release_bargain() {
  // @@protoc_insertion_point(field_release:db.ConfigBusinessman.bargain)
  if (!has_bargain()) {
    return NULL;
  }
  clear_has_bargain();
  return bargain_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBusinessman::set_allocated_bargain(::std::string* bargain) {
  if (bargain != NULL) {
    set_has_bargain();
  } else {
    clear_has_bargain();
  }
  bargain_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bargain,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBusinessman.bargain)
}
inline ::std::string* ConfigBusinessman::unsafe_arena_release_bargain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBusinessman.bargain)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_bargain();
  return bargain_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBusinessman::unsafe_arena_set_allocated_bargain(
    ::std::string* bargain) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bargain != NULL) {
    set_has_bargain();
  } else {
    clear_has_bargain();
  }
  bargain_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bargain, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBusinessman.bargain)
}

// required int32 duration = 27;
inline bool ConfigBusinessman::has_duration() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigBusinessman::set_has_duration() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigBusinessman::clear_has_duration() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigBusinessman::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 ConfigBusinessman::duration() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.duration)
  return duration_;
}
inline void ConfigBusinessman::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.duration)
}

// required int64 groupid = 28;
inline bool ConfigBusinessman::has_groupid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigBusinessman::set_has_groupid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigBusinessman::clear_has_groupid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigBusinessman::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 ConfigBusinessman::groupid() const {
  // @@protoc_insertion_point(field_get:db.ConfigBusinessman.groupid)
  return groupid_;
}
inline void ConfigBusinessman::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBusinessman.groupid)
}

// -------------------------------------------------------------------

// ConfigSkillRandom

// required int64 id = 1;
inline bool ConfigSkillRandom::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigSkillRandom::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigSkillRandom::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigSkillRandom::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ConfigSkillRandom::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkillRandom.id)
  return id_;
}
inline void ConfigSkillRandom::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkillRandom.id)
}

// required int32 type = 2;
inline bool ConfigSkillRandom::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigSkillRandom::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigSkillRandom::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigSkillRandom::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigSkillRandom::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkillRandom.type)
  return type_;
}
inline void ConfigSkillRandom::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkillRandom.type)
}

// required bytes profession = 3;
inline bool ConfigSkillRandom::has_profession() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigSkillRandom::set_has_profession() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigSkillRandom::clear_has_profession() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigSkillRandom::clear_profession() {
  profession_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_profession();
}
inline const ::std::string& ConfigSkillRandom::profession() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkillRandom.profession)
  return profession_.Get();
}
inline void ConfigSkillRandom::set_profession(const ::std::string& value) {
  set_has_profession();
  profession_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSkillRandom.profession)
}
#if LANG_CXX11
inline void ConfigSkillRandom::set_profession(::std::string&& value) {
  set_has_profession();
  profession_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSkillRandom.profession)
}
#endif
inline void ConfigSkillRandom::set_profession(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_profession();
  profession_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSkillRandom.profession)
}
inline void ConfigSkillRandom::set_profession(const void* value,
    size_t size) {
  set_has_profession();
  profession_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSkillRandom.profession)
}
inline ::std::string* ConfigSkillRandom::mutable_profession() {
  set_has_profession();
  // @@protoc_insertion_point(field_mutable:db.ConfigSkillRandom.profession)
  return profession_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSkillRandom::release_profession() {
  // @@protoc_insertion_point(field_release:db.ConfigSkillRandom.profession)
  if (!has_profession()) {
    return NULL;
  }
  clear_has_profession();
  return profession_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSkillRandom::set_allocated_profession(::std::string* profession) {
  if (profession != NULL) {
    set_has_profession();
  } else {
    clear_has_profession();
  }
  profession_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profession,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSkillRandom.profession)
}
inline ::std::string* ConfigSkillRandom::unsafe_arena_release_profession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSkillRandom.profession)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_profession();
  return profession_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSkillRandom::unsafe_arena_set_allocated_profession(
    ::std::string* profession) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (profession != NULL) {
    set_has_profession();
  } else {
    clear_has_profession();
  }
  profession_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      profession, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSkillRandom.profession)
}

// required float probability = 4;
inline bool ConfigSkillRandom::has_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigSkillRandom::set_has_probability() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigSkillRandom::clear_has_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigSkillRandom::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline float ConfigSkillRandom::probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigSkillRandom.probability)
  return probability_;
}
inline void ConfigSkillRandom::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSkillRandom.probability)
}

// -------------------------------------------------------------------

// ConfigEquipAttributeWord

// required int32 id = 1;
inline bool ConfigEquipAttributeWord::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigEquipAttributeWord::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigEquipAttributeWord::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigEquipAttributeWord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigEquipAttributeWord::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipAttributeWord.id)
  return id_;
}
inline void ConfigEquipAttributeWord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipAttributeWord.id)
}

// required int32 type = 2;
inline bool ConfigEquipAttributeWord::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigEquipAttributeWord::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigEquipAttributeWord::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigEquipAttributeWord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigEquipAttributeWord::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipAttributeWord.type)
  return type_;
}
inline void ConfigEquipAttributeWord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipAttributeWord.type)
}

// required int32 attr_id = 3;
inline bool ConfigEquipAttributeWord::has_attr_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigEquipAttributeWord::set_has_attr_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigEquipAttributeWord::clear_has_attr_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigEquipAttributeWord::clear_attr_id() {
  attr_id_ = 0;
  clear_has_attr_id();
}
inline ::google::protobuf::int32 ConfigEquipAttributeWord::attr_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipAttributeWord.attr_id)
  return attr_id_;
}
inline void ConfigEquipAttributeWord::set_attr_id(::google::protobuf::int32 value) {
  set_has_attr_id();
  attr_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipAttributeWord.attr_id)
}

// required bytes interval = 4;
inline bool ConfigEquipAttributeWord::has_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigEquipAttributeWord::set_has_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigEquipAttributeWord::clear_has_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigEquipAttributeWord::clear_interval() {
  interval_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_interval();
}
inline const ::std::string& ConfigEquipAttributeWord::interval() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipAttributeWord.interval)
  return interval_.Get();
}
inline void ConfigEquipAttributeWord::set_interval(const ::std::string& value) {
  set_has_interval();
  interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEquipAttributeWord.interval)
}
#if LANG_CXX11
inline void ConfigEquipAttributeWord::set_interval(::std::string&& value) {
  set_has_interval();
  interval_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEquipAttributeWord.interval)
}
#endif
inline void ConfigEquipAttributeWord::set_interval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_interval();
  interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEquipAttributeWord.interval)
}
inline void ConfigEquipAttributeWord::set_interval(const void* value,
    size_t size) {
  set_has_interval();
  interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEquipAttributeWord.interval)
}
inline ::std::string* ConfigEquipAttributeWord::mutable_interval() {
  set_has_interval();
  // @@protoc_insertion_point(field_mutable:db.ConfigEquipAttributeWord.interval)
  return interval_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEquipAttributeWord::release_interval() {
  // @@protoc_insertion_point(field_release:db.ConfigEquipAttributeWord.interval)
  if (!has_interval()) {
    return NULL;
  }
  clear_has_interval();
  return interval_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEquipAttributeWord::set_allocated_interval(::std::string* interval) {
  if (interval != NULL) {
    set_has_interval();
  } else {
    clear_has_interval();
  }
  interval_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interval,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEquipAttributeWord.interval)
}
inline ::std::string* ConfigEquipAttributeWord::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEquipAttributeWord.interval)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_interval();
  return interval_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEquipAttributeWord::unsafe_arena_set_allocated_interval(
    ::std::string* interval) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (interval != NULL) {
    set_has_interval();
  } else {
    clear_has_interval();
  }
  interval_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      interval, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEquipAttributeWord.interval)
}

// required bytes float = 5;
inline bool ConfigEquipAttributeWord::has_float_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigEquipAttributeWord::set_has_float_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigEquipAttributeWord::clear_has_float_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigEquipAttributeWord::clear_float_() {
  float__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_float_();
}
inline const ::std::string& ConfigEquipAttributeWord::float_() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipAttributeWord.float)
  return float__.Get();
}
inline void ConfigEquipAttributeWord::set_float_(const ::std::string& value) {
  set_has_float_();
  float__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEquipAttributeWord.float)
}
#if LANG_CXX11
inline void ConfigEquipAttributeWord::set_float_(::std::string&& value) {
  set_has_float_();
  float__.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEquipAttributeWord.float)
}
#endif
inline void ConfigEquipAttributeWord::set_float_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_float_();
  float__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEquipAttributeWord.float)
}
inline void ConfigEquipAttributeWord::set_float_(const void* value,
    size_t size) {
  set_has_float_();
  float__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEquipAttributeWord.float)
}
inline ::std::string* ConfigEquipAttributeWord::mutable_float_() {
  set_has_float_();
  // @@protoc_insertion_point(field_mutable:db.ConfigEquipAttributeWord.float)
  return float__.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEquipAttributeWord::release_float_() {
  // @@protoc_insertion_point(field_release:db.ConfigEquipAttributeWord.float)
  if (!has_float_()) {
    return NULL;
  }
  clear_has_float_();
  return float__.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEquipAttributeWord::set_allocated_float_(::std::string* float_) {
  if (float_ != NULL) {
    set_has_float_();
  } else {
    clear_has_float_();
  }
  float__.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), float_,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEquipAttributeWord.float)
}
inline ::std::string* ConfigEquipAttributeWord::unsafe_arena_release_float_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEquipAttributeWord.float)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_float_();
  return float__.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEquipAttributeWord::unsafe_arena_set_allocated_float_(
    ::std::string* float_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (float_ != NULL) {
    set_has_float_();
  } else {
    clear_has_float_();
  }
  float__.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      float_, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEquipAttributeWord.float)
}

// required float perfect_value = 6;
inline bool ConfigEquipAttributeWord::has_perfect_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigEquipAttributeWord::set_has_perfect_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigEquipAttributeWord::clear_has_perfect_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigEquipAttributeWord::clear_perfect_value() {
  perfect_value_ = 0;
  clear_has_perfect_value();
}
inline float ConfigEquipAttributeWord::perfect_value() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipAttributeWord.perfect_value)
  return perfect_value_;
}
inline void ConfigEquipAttributeWord::set_perfect_value(float value) {
  set_has_perfect_value();
  perfect_value_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipAttributeWord.perfect_value)
}

// required int32 unlock_level = 7;
inline bool ConfigEquipAttributeWord::has_unlock_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigEquipAttributeWord::set_has_unlock_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigEquipAttributeWord::clear_has_unlock_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigEquipAttributeWord::clear_unlock_level() {
  unlock_level_ = 0;
  clear_has_unlock_level();
}
inline ::google::protobuf::int32 ConfigEquipAttributeWord::unlock_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipAttributeWord.unlock_level)
  return unlock_level_;
}
inline void ConfigEquipAttributeWord::set_unlock_level(::google::protobuf::int32 value) {
  set_has_unlock_level();
  unlock_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipAttributeWord.unlock_level)
}

// -------------------------------------------------------------------

// ConfigEquipRefineCost

// required int32 star = 1;
inline bool ConfigEquipRefineCost::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigEquipRefineCost::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigEquipRefineCost::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigEquipRefineCost::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 ConfigEquipRefineCost::star() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipRefineCost.star)
  return star_;
}
inline void ConfigEquipRefineCost::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipRefineCost.star)
}

// required bytes cost = 2;
inline bool ConfigEquipRefineCost::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigEquipRefineCost::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigEquipRefineCost::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigEquipRefineCost::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigEquipRefineCost::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipRefineCost.cost)
  return cost_.Get();
}
inline void ConfigEquipRefineCost::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEquipRefineCost.cost)
}
#if LANG_CXX11
inline void ConfigEquipRefineCost::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEquipRefineCost.cost)
}
#endif
inline void ConfigEquipRefineCost::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEquipRefineCost.cost)
}
inline void ConfigEquipRefineCost::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEquipRefineCost.cost)
}
inline ::std::string* ConfigEquipRefineCost::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigEquipRefineCost.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEquipRefineCost::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigEquipRefineCost.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEquipRefineCost::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEquipRefineCost.cost)
}
inline ::std::string* ConfigEquipRefineCost::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEquipRefineCost.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEquipRefineCost::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEquipRefineCost.cost)
}

// required float success_probability = 3;
inline bool ConfigEquipRefineCost::has_success_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigEquipRefineCost::set_has_success_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigEquipRefineCost::clear_has_success_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigEquipRefineCost::clear_success_probability() {
  success_probability_ = 0;
  clear_has_success_probability();
}
inline float ConfigEquipRefineCost::success_probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipRefineCost.success_probability)
  return success_probability_;
}
inline void ConfigEquipRefineCost::set_success_probability(float value) {
  set_has_success_probability();
  success_probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipRefineCost.success_probability)
}

// required int32 diamond_cost = 4;
inline bool ConfigEquipRefineCost::has_diamond_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigEquipRefineCost::set_has_diamond_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigEquipRefineCost::clear_has_diamond_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigEquipRefineCost::clear_diamond_cost() {
  diamond_cost_ = 0;
  clear_has_diamond_cost();
}
inline ::google::protobuf::int32 ConfigEquipRefineCost::diamond_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipRefineCost.diamond_cost)
  return diamond_cost_;
}
inline void ConfigEquipRefineCost::set_diamond_cost(::google::protobuf::int32 value) {
  set_has_diamond_cost();
  diamond_cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipRefineCost.diamond_cost)
}

// required float diamond_success_probability = 5;
inline bool ConfigEquipRefineCost::has_diamond_success_probability() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigEquipRefineCost::set_has_diamond_success_probability() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigEquipRefineCost::clear_has_diamond_success_probability() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigEquipRefineCost::clear_diamond_success_probability() {
  diamond_success_probability_ = 0;
  clear_has_diamond_success_probability();
}
inline float ConfigEquipRefineCost::diamond_success_probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipRefineCost.diamond_success_probability)
  return diamond_success_probability_;
}
inline void ConfigEquipRefineCost::set_diamond_success_probability(float value) {
  set_has_diamond_success_probability();
  diamond_success_probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipRefineCost.diamond_success_probability)
}

// required int32 limit = 6;
inline bool ConfigEquipRefineCost::has_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigEquipRefineCost::set_has_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigEquipRefineCost::clear_has_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigEquipRefineCost::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 ConfigEquipRefineCost::limit() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipRefineCost.limit)
  return limit_;
}
inline void ConfigEquipRefineCost::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipRefineCost.limit)
}

// -------------------------------------------------------------------

// ConfigEquipDecompose

// required int32 star = 1;
inline bool ConfigEquipDecompose::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigEquipDecompose::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigEquipDecompose::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigEquipDecompose::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 ConfigEquipDecompose::star() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipDecompose.star)
  return star_;
}
inline void ConfigEquipDecompose::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipDecompose.star)
}

// required int32 quality = 2;
inline bool ConfigEquipDecompose::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigEquipDecompose::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigEquipDecompose::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigEquipDecompose::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 ConfigEquipDecompose::quality() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipDecompose.quality)
  return quality_;
}
inline void ConfigEquipDecompose::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipDecompose.quality)
}

// required bytes decompose_get = 3;
inline bool ConfigEquipDecompose::has_decompose_get() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigEquipDecompose::set_has_decompose_get() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigEquipDecompose::clear_has_decompose_get() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigEquipDecompose::clear_decompose_get() {
  decompose_get_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_decompose_get();
}
inline const ::std::string& ConfigEquipDecompose::decompose_get() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipDecompose.decompose_get)
  return decompose_get_.Get();
}
inline void ConfigEquipDecompose::set_decompose_get(const ::std::string& value) {
  set_has_decompose_get();
  decompose_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEquipDecompose.decompose_get)
}
#if LANG_CXX11
inline void ConfigEquipDecompose::set_decompose_get(::std::string&& value) {
  set_has_decompose_get();
  decompose_get_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEquipDecompose.decompose_get)
}
#endif
inline void ConfigEquipDecompose::set_decompose_get(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_decompose_get();
  decompose_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEquipDecompose.decompose_get)
}
inline void ConfigEquipDecompose::set_decompose_get(const void* value,
    size_t size) {
  set_has_decompose_get();
  decompose_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEquipDecompose.decompose_get)
}
inline ::std::string* ConfigEquipDecompose::mutable_decompose_get() {
  set_has_decompose_get();
  // @@protoc_insertion_point(field_mutable:db.ConfigEquipDecompose.decompose_get)
  return decompose_get_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEquipDecompose::release_decompose_get() {
  // @@protoc_insertion_point(field_release:db.ConfigEquipDecompose.decompose_get)
  if (!has_decompose_get()) {
    return NULL;
  }
  clear_has_decompose_get();
  return decompose_get_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEquipDecompose::set_allocated_decompose_get(::std::string* decompose_get) {
  if (decompose_get != NULL) {
    set_has_decompose_get();
  } else {
    clear_has_decompose_get();
  }
  decompose_get_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decompose_get,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEquipDecompose.decompose_get)
}
inline ::std::string* ConfigEquipDecompose::unsafe_arena_release_decompose_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEquipDecompose.decompose_get)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_decompose_get();
  return decompose_get_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEquipDecompose::unsafe_arena_set_allocated_decompose_get(
    ::std::string* decompose_get) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (decompose_get != NULL) {
    set_has_decompose_get();
  } else {
    clear_has_decompose_get();
  }
  decompose_get_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      decompose_get, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEquipDecompose.decompose_get)
}

// required bytes skill_influence = 4;
inline bool ConfigEquipDecompose::has_skill_influence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigEquipDecompose::set_has_skill_influence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigEquipDecompose::clear_has_skill_influence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigEquipDecompose::clear_skill_influence() {
  skill_influence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_skill_influence();
}
inline const ::std::string& ConfigEquipDecompose::skill_influence() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipDecompose.skill_influence)
  return skill_influence_.Get();
}
inline void ConfigEquipDecompose::set_skill_influence(const ::std::string& value) {
  set_has_skill_influence();
  skill_influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEquipDecompose.skill_influence)
}
#if LANG_CXX11
inline void ConfigEquipDecompose::set_skill_influence(::std::string&& value) {
  set_has_skill_influence();
  skill_influence_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEquipDecompose.skill_influence)
}
#endif
inline void ConfigEquipDecompose::set_skill_influence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_skill_influence();
  skill_influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEquipDecompose.skill_influence)
}
inline void ConfigEquipDecompose::set_skill_influence(const void* value,
    size_t size) {
  set_has_skill_influence();
  skill_influence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEquipDecompose.skill_influence)
}
inline ::std::string* ConfigEquipDecompose::mutable_skill_influence() {
  set_has_skill_influence();
  // @@protoc_insertion_point(field_mutable:db.ConfigEquipDecompose.skill_influence)
  return skill_influence_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEquipDecompose::release_skill_influence() {
  // @@protoc_insertion_point(field_release:db.ConfigEquipDecompose.skill_influence)
  if (!has_skill_influence()) {
    return NULL;
  }
  clear_has_skill_influence();
  return skill_influence_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEquipDecompose::set_allocated_skill_influence(::std::string* skill_influence) {
  if (skill_influence != NULL) {
    set_has_skill_influence();
  } else {
    clear_has_skill_influence();
  }
  skill_influence_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill_influence,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEquipDecompose.skill_influence)
}
inline ::std::string* ConfigEquipDecompose::unsafe_arena_release_skill_influence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEquipDecompose.skill_influence)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_skill_influence();
  return skill_influence_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEquipDecompose::unsafe_arena_set_allocated_skill_influence(
    ::std::string* skill_influence) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (skill_influence != NULL) {
    set_has_skill_influence();
  } else {
    clear_has_skill_influence();
  }
  skill_influence_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      skill_influence, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEquipDecompose.skill_influence)
}

// -------------------------------------------------------------------

// ConfigEquipDecomposeCost

// required int32 id = 1;
inline bool ConfigEquipDecomposeCost::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigEquipDecomposeCost::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigEquipDecomposeCost::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigEquipDecomposeCost::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigEquipDecomposeCost::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipDecomposeCost.id)
  return id_;
}
inline void ConfigEquipDecomposeCost::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipDecomposeCost.id)
}

// required bytes cost = 2;
inline bool ConfigEquipDecomposeCost::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigEquipDecomposeCost::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigEquipDecomposeCost::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigEquipDecomposeCost::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigEquipDecomposeCost::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipDecomposeCost.cost)
  return cost_.Get();
}
inline void ConfigEquipDecomposeCost::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEquipDecomposeCost.cost)
}
#if LANG_CXX11
inline void ConfigEquipDecomposeCost::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEquipDecomposeCost.cost)
}
#endif
inline void ConfigEquipDecomposeCost::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEquipDecomposeCost.cost)
}
inline void ConfigEquipDecomposeCost::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEquipDecomposeCost.cost)
}
inline ::std::string* ConfigEquipDecomposeCost::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigEquipDecomposeCost.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEquipDecomposeCost::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigEquipDecomposeCost.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEquipDecomposeCost::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEquipDecomposeCost.cost)
}
inline ::std::string* ConfigEquipDecomposeCost::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEquipDecomposeCost.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEquipDecomposeCost::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEquipDecomposeCost.cost)
}

// required float success_probability = 3;
inline bool ConfigEquipDecomposeCost::has_success_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigEquipDecomposeCost::set_has_success_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigEquipDecomposeCost::clear_has_success_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigEquipDecomposeCost::clear_success_probability() {
  success_probability_ = 0;
  clear_has_success_probability();
}
inline float ConfigEquipDecomposeCost::success_probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipDecomposeCost.success_probability)
  return success_probability_;
}
inline void ConfigEquipDecomposeCost::set_success_probability(float value) {
  set_has_success_probability();
  success_probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipDecomposeCost.success_probability)
}

// required float add_ratio = 4;
inline bool ConfigEquipDecomposeCost::has_add_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigEquipDecomposeCost::set_has_add_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigEquipDecomposeCost::clear_has_add_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigEquipDecomposeCost::clear_add_ratio() {
  add_ratio_ = 0;
  clear_has_add_ratio();
}
inline float ConfigEquipDecomposeCost::add_ratio() const {
  // @@protoc_insertion_point(field_get:db.ConfigEquipDecomposeCost.add_ratio)
  return add_ratio_;
}
inline void ConfigEquipDecomposeCost::set_add_ratio(float value) {
  set_has_add_ratio();
  add_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEquipDecomposeCost.add_ratio)
}

// -------------------------------------------------------------------

// ConfigSpecialEvent

// required int64 id = 1;
inline bool ConfigSpecialEvent::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigSpecialEvent::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigSpecialEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigSpecialEvent::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ConfigSpecialEvent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigSpecialEvent.id)
  return id_;
}
inline void ConfigSpecialEvent::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSpecialEvent.id)
}

// required int32 trigger = 2;
inline bool ConfigSpecialEvent::has_trigger() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigSpecialEvent::set_has_trigger() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigSpecialEvent::clear_has_trigger() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigSpecialEvent::clear_trigger() {
  trigger_ = 0;
  clear_has_trigger();
}
inline ::google::protobuf::int32 ConfigSpecialEvent::trigger() const {
  // @@protoc_insertion_point(field_get:db.ConfigSpecialEvent.trigger)
  return trigger_;
}
inline void ConfigSpecialEvent::set_trigger(::google::protobuf::int32 value) {
  set_has_trigger();
  trigger_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSpecialEvent.trigger)
}

// required bytes trigger_param = 3;
inline bool ConfigSpecialEvent::has_trigger_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigSpecialEvent::set_has_trigger_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigSpecialEvent::clear_has_trigger_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigSpecialEvent::clear_trigger_param() {
  trigger_param_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_trigger_param();
}
inline const ::std::string& ConfigSpecialEvent::trigger_param() const {
  // @@protoc_insertion_point(field_get:db.ConfigSpecialEvent.trigger_param)
  return trigger_param_.Get();
}
inline void ConfigSpecialEvent::set_trigger_param(const ::std::string& value) {
  set_has_trigger_param();
  trigger_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSpecialEvent.trigger_param)
}
#if LANG_CXX11
inline void ConfigSpecialEvent::set_trigger_param(::std::string&& value) {
  set_has_trigger_param();
  trigger_param_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSpecialEvent.trigger_param)
}
#endif
inline void ConfigSpecialEvent::set_trigger_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trigger_param();
  trigger_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSpecialEvent.trigger_param)
}
inline void ConfigSpecialEvent::set_trigger_param(const void* value,
    size_t size) {
  set_has_trigger_param();
  trigger_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSpecialEvent.trigger_param)
}
inline ::std::string* ConfigSpecialEvent::mutable_trigger_param() {
  set_has_trigger_param();
  // @@protoc_insertion_point(field_mutable:db.ConfigSpecialEvent.trigger_param)
  return trigger_param_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSpecialEvent::release_trigger_param() {
  // @@protoc_insertion_point(field_release:db.ConfigSpecialEvent.trigger_param)
  if (!has_trigger_param()) {
    return NULL;
  }
  clear_has_trigger_param();
  return trigger_param_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSpecialEvent::set_allocated_trigger_param(::std::string* trigger_param) {
  if (trigger_param != NULL) {
    set_has_trigger_param();
  } else {
    clear_has_trigger_param();
  }
  trigger_param_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_param,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSpecialEvent.trigger_param)
}
inline ::std::string* ConfigSpecialEvent::unsafe_arena_release_trigger_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSpecialEvent.trigger_param)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_trigger_param();
  return trigger_param_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSpecialEvent::unsafe_arena_set_allocated_trigger_param(
    ::std::string* trigger_param) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trigger_param != NULL) {
    set_has_trigger_param();
  } else {
    clear_has_trigger_param();
  }
  trigger_param_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trigger_param, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSpecialEvent.trigger_param)
}

// required int32 condition = 4;
inline bool ConfigSpecialEvent::has_condition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigSpecialEvent::set_has_condition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigSpecialEvent::clear_has_condition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigSpecialEvent::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::google::protobuf::int32 ConfigSpecialEvent::condition() const {
  // @@protoc_insertion_point(field_get:db.ConfigSpecialEvent.condition)
  return condition_;
}
inline void ConfigSpecialEvent::set_condition(::google::protobuf::int32 value) {
  set_has_condition();
  condition_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSpecialEvent.condition)
}

// required int32 condition_param = 5;
inline bool ConfigSpecialEvent::has_condition_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigSpecialEvent::set_has_condition_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigSpecialEvent::clear_has_condition_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigSpecialEvent::clear_condition_param() {
  condition_param_ = 0;
  clear_has_condition_param();
}
inline ::google::protobuf::int32 ConfigSpecialEvent::condition_param() const {
  // @@protoc_insertion_point(field_get:db.ConfigSpecialEvent.condition_param)
  return condition_param_;
}
inline void ConfigSpecialEvent::set_condition_param(::google::protobuf::int32 value) {
  set_has_condition_param();
  condition_param_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSpecialEvent.condition_param)
}

// required int32 trigger_times = 6;
inline bool ConfigSpecialEvent::has_trigger_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigSpecialEvent::set_has_trigger_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigSpecialEvent::clear_has_trigger_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigSpecialEvent::clear_trigger_times() {
  trigger_times_ = 0;
  clear_has_trigger_times();
}
inline ::google::protobuf::int32 ConfigSpecialEvent::trigger_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigSpecialEvent.trigger_times)
  return trigger_times_;
}
inline void ConfigSpecialEvent::set_trigger_times(::google::protobuf::int32 value) {
  set_has_trigger_times();
  trigger_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigSpecialEvent.trigger_times)
}

// required bytes reward = 7;
inline bool ConfigSpecialEvent::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigSpecialEvent::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigSpecialEvent::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigSpecialEvent::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigSpecialEvent::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigSpecialEvent.reward)
  return reward_.Get();
}
inline void ConfigSpecialEvent::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSpecialEvent.reward)
}
#if LANG_CXX11
inline void ConfigSpecialEvent::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSpecialEvent.reward)
}
#endif
inline void ConfigSpecialEvent::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSpecialEvent.reward)
}
inline void ConfigSpecialEvent::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSpecialEvent.reward)
}
inline ::std::string* ConfigSpecialEvent::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigSpecialEvent.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSpecialEvent::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigSpecialEvent.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSpecialEvent::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSpecialEvent.reward)
}
inline ::std::string* ConfigSpecialEvent::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSpecialEvent.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSpecialEvent::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSpecialEvent.reward)
}

// required bytes first_reward = 8;
inline bool ConfigSpecialEvent::has_first_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigSpecialEvent::set_has_first_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigSpecialEvent::clear_has_first_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigSpecialEvent::clear_first_reward() {
  first_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_first_reward();
}
inline const ::std::string& ConfigSpecialEvent::first_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigSpecialEvent.first_reward)
  return first_reward_.Get();
}
inline void ConfigSpecialEvent::set_first_reward(const ::std::string& value) {
  set_has_first_reward();
  first_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigSpecialEvent.first_reward)
}
#if LANG_CXX11
inline void ConfigSpecialEvent::set_first_reward(::std::string&& value) {
  set_has_first_reward();
  first_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigSpecialEvent.first_reward)
}
#endif
inline void ConfigSpecialEvent::set_first_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first_reward();
  first_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigSpecialEvent.first_reward)
}
inline void ConfigSpecialEvent::set_first_reward(const void* value,
    size_t size) {
  set_has_first_reward();
  first_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigSpecialEvent.first_reward)
}
inline ::std::string* ConfigSpecialEvent::mutable_first_reward() {
  set_has_first_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigSpecialEvent.first_reward)
  return first_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigSpecialEvent::release_first_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigSpecialEvent.first_reward)
  if (!has_first_reward()) {
    return NULL;
  }
  clear_has_first_reward();
  return first_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigSpecialEvent::set_allocated_first_reward(::std::string* first_reward) {
  if (first_reward != NULL) {
    set_has_first_reward();
  } else {
    clear_has_first_reward();
  }
  first_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigSpecialEvent.first_reward)
}
inline ::std::string* ConfigSpecialEvent::unsafe_arena_release_first_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigSpecialEvent.first_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_first_reward();
  return first_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigSpecialEvent::unsafe_arena_set_allocated_first_reward(
    ::std::string* first_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (first_reward != NULL) {
    set_has_first_reward();
  } else {
    clear_has_first_reward();
  }
  first_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      first_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigSpecialEvent.first_reward)
}

// -------------------------------------------------------------------

// ConfigCardPractice

// required int32 id = 1;
inline bool ConfigCardPractice::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigCardPractice::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigCardPractice::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigCardPractice::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigCardPractice::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardPractice.id)
  return id_;
}
inline void ConfigCardPractice::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardPractice.id)
}

// required int32 level = 2;
inline bool ConfigCardPractice::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigCardPractice::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigCardPractice::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigCardPractice::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigCardPractice::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardPractice.level)
  return level_;
}
inline void ConfigCardPractice::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardPractice.level)
}

// required bytes cost = 3;
inline bool ConfigCardPractice::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigCardPractice::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigCardPractice::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigCardPractice::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigCardPractice::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardPractice.cost)
  return cost_.Get();
}
inline void ConfigCardPractice::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardPractice.cost)
}
#if LANG_CXX11
inline void ConfigCardPractice::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardPractice.cost)
}
#endif
inline void ConfigCardPractice::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardPractice.cost)
}
inline void ConfigCardPractice::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardPractice.cost)
}
inline ::std::string* ConfigCardPractice::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardPractice.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardPractice::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigCardPractice.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardPractice::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardPractice.cost)
}
inline ::std::string* ConfigCardPractice::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardPractice.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardPractice::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardPractice.cost)
}

// required int32 need_star = 4;
inline bool ConfigCardPractice::has_need_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigCardPractice::set_has_need_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigCardPractice::clear_has_need_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigCardPractice::clear_need_star() {
  need_star_ = 0;
  clear_has_need_star();
}
inline ::google::protobuf::int32 ConfigCardPractice::need_star() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardPractice.need_star)
  return need_star_;
}
inline void ConfigCardPractice::set_need_star(::google::protobuf::int32 value) {
  set_has_need_star();
  need_star_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardPractice.need_star)
}

// required int32 need_level = 5;
inline bool ConfigCardPractice::has_need_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigCardPractice::set_has_need_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigCardPractice::clear_has_need_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigCardPractice::clear_need_level() {
  need_level_ = 0;
  clear_has_need_level();
}
inline ::google::protobuf::int32 ConfigCardPractice::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardPractice.need_level)
  return need_level_;
}
inline void ConfigCardPractice::set_need_level(::google::protobuf::int32 value) {
  set_has_need_level();
  need_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardPractice.need_level)
}

// required bytes attribute_add = 6;
inline bool ConfigCardPractice::has_attribute_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigCardPractice::set_has_attribute_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigCardPractice::clear_has_attribute_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigCardPractice::clear_attribute_add() {
  attribute_add_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attribute_add();
}
inline const ::std::string& ConfigCardPractice::attribute_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardPractice.attribute_add)
  return attribute_add_.Get();
}
inline void ConfigCardPractice::set_attribute_add(const ::std::string& value) {
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigCardPractice.attribute_add)
}
#if LANG_CXX11
inline void ConfigCardPractice::set_attribute_add(::std::string&& value) {
  set_has_attribute_add();
  attribute_add_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigCardPractice.attribute_add)
}
#endif
inline void ConfigCardPractice::set_attribute_add(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigCardPractice.attribute_add)
}
inline void ConfigCardPractice::set_attribute_add(const void* value,
    size_t size) {
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigCardPractice.attribute_add)
}
inline ::std::string* ConfigCardPractice::mutable_attribute_add() {
  set_has_attribute_add();
  // @@protoc_insertion_point(field_mutable:db.ConfigCardPractice.attribute_add)
  return attribute_add_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigCardPractice::release_attribute_add() {
  // @@protoc_insertion_point(field_release:db.ConfigCardPractice.attribute_add)
  if (!has_attribute_add()) {
    return NULL;
  }
  clear_has_attribute_add();
  return attribute_add_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigCardPractice::set_allocated_attribute_add(::std::string* attribute_add) {
  if (attribute_add != NULL) {
    set_has_attribute_add();
  } else {
    clear_has_attribute_add();
  }
  attribute_add_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute_add,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigCardPractice.attribute_add)
}
inline ::std::string* ConfigCardPractice::unsafe_arena_release_attribute_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigCardPractice.attribute_add)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attribute_add();
  return attribute_add_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigCardPractice::unsafe_arena_set_allocated_attribute_add(
    ::std::string* attribute_add) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attribute_add != NULL) {
    set_has_attribute_add();
  } else {
    clear_has_attribute_add();
  }
  attribute_add_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attribute_add, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigCardPractice.attribute_add)
}

// required int32 talent_level = 7;
inline bool ConfigCardPractice::has_talent_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigCardPractice::set_has_talent_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigCardPractice::clear_has_talent_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigCardPractice::clear_talent_level() {
  talent_level_ = 0;
  clear_has_talent_level();
}
inline ::google::protobuf::int32 ConfigCardPractice::talent_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigCardPractice.talent_level)
  return talent_level_;
}
inline void ConfigCardPractice::set_talent_level(::google::protobuf::int32 value) {
  set_has_talent_level();
  talent_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigCardPractice.talent_level)
}

// -------------------------------------------------------------------

// ConfigGhostShip

// required int32 id = 1;
inline bool ConfigGhostShip::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigGhostShip::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigGhostShip::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigGhostShip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigGhostShip::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.id)
  return id_;
}
inline void ConfigGhostShip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.id)
}

// required int32 type = 2;
inline bool ConfigGhostShip::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigGhostShip::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigGhostShip::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigGhostShip::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigGhostShip::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.type)
  return type_;
}
inline void ConfigGhostShip::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.type)
}

// required int32 initial_state = 3;
inline bool ConfigGhostShip::has_initial_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigGhostShip::set_has_initial_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigGhostShip::clear_has_initial_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigGhostShip::clear_initial_state() {
  initial_state_ = 0;
  clear_has_initial_state();
}
inline ::google::protobuf::int32 ConfigGhostShip::initial_state() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.initial_state)
  return initial_state_;
}
inline void ConfigGhostShip::set_initial_state(::google::protobuf::int32 value) {
  set_has_initial_state();
  initial_state_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.initial_state)
}

// required bytes unlock_stage = 4;
inline bool ConfigGhostShip::has_unlock_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigGhostShip::set_has_unlock_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigGhostShip::clear_has_unlock_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigGhostShip::clear_unlock_stage() {
  unlock_stage_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_stage();
}
inline const ::std::string& ConfigGhostShip::unlock_stage() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.unlock_stage)
  return unlock_stage_.Get();
}
inline void ConfigGhostShip::set_unlock_stage(const ::std::string& value) {
  set_has_unlock_stage();
  unlock_stage_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.unlock_stage)
}
#if LANG_CXX11
inline void ConfigGhostShip::set_unlock_stage(::std::string&& value) {
  set_has_unlock_stage();
  unlock_stage_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGhostShip.unlock_stage)
}
#endif
inline void ConfigGhostShip::set_unlock_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_stage();
  unlock_stage_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGhostShip.unlock_stage)
}
inline void ConfigGhostShip::set_unlock_stage(const void* value,
    size_t size) {
  set_has_unlock_stage();
  unlock_stage_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGhostShip.unlock_stage)
}
inline ::std::string* ConfigGhostShip::mutable_unlock_stage() {
  set_has_unlock_stage();
  // @@protoc_insertion_point(field_mutable:db.ConfigGhostShip.unlock_stage)
  return unlock_stage_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGhostShip::release_unlock_stage() {
  // @@protoc_insertion_point(field_release:db.ConfigGhostShip.unlock_stage)
  if (!has_unlock_stage()) {
    return NULL;
  }
  clear_has_unlock_stage();
  return unlock_stage_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGhostShip::set_allocated_unlock_stage(::std::string* unlock_stage) {
  if (unlock_stage != NULL) {
    set_has_unlock_stage();
  } else {
    clear_has_unlock_stage();
  }
  unlock_stage_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_stage,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGhostShip.unlock_stage)
}
inline ::std::string* ConfigGhostShip::unsafe_arena_release_unlock_stage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGhostShip.unlock_stage)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_stage();
  return unlock_stage_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGhostShip::unsafe_arena_set_allocated_unlock_stage(
    ::std::string* unlock_stage) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_stage != NULL) {
    set_has_unlock_stage();
  } else {
    clear_has_unlock_stage();
  }
  unlock_stage_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_stage, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGhostShip.unlock_stage)
}

// required bytes match = 5;
inline bool ConfigGhostShip::has_match() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigGhostShip::set_has_match() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigGhostShip::clear_has_match() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigGhostShip::clear_match() {
  match_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_match();
}
inline const ::std::string& ConfigGhostShip::match() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.match)
  return match_.Get();
}
inline void ConfigGhostShip::set_match(const ::std::string& value) {
  set_has_match();
  match_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.match)
}
#if LANG_CXX11
inline void ConfigGhostShip::set_match(::std::string&& value) {
  set_has_match();
  match_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGhostShip.match)
}
#endif
inline void ConfigGhostShip::set_match(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match();
  match_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGhostShip.match)
}
inline void ConfigGhostShip::set_match(const void* value,
    size_t size) {
  set_has_match();
  match_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGhostShip.match)
}
inline ::std::string* ConfigGhostShip::mutable_match() {
  set_has_match();
  // @@protoc_insertion_point(field_mutable:db.ConfigGhostShip.match)
  return match_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGhostShip::release_match() {
  // @@protoc_insertion_point(field_release:db.ConfigGhostShip.match)
  if (!has_match()) {
    return NULL;
  }
  clear_has_match();
  return match_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGhostShip::set_allocated_match(::std::string* match) {
  if (match != NULL) {
    set_has_match();
  } else {
    clear_has_match();
  }
  match_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGhostShip.match)
}
inline ::std::string* ConfigGhostShip::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGhostShip.match)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_match();
  return match_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGhostShip::unsafe_arena_set_allocated_match(
    ::std::string* match) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (match != NULL) {
    set_has_match();
  } else {
    clear_has_match();
  }
  match_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      match, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGhostShip.match)
}

// required bytes boss_group = 6;
inline bool ConfigGhostShip::has_boss_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigGhostShip::set_has_boss_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigGhostShip::clear_has_boss_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigGhostShip::clear_boss_group() {
  boss_group_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_boss_group();
}
inline const ::std::string& ConfigGhostShip::boss_group() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.boss_group)
  return boss_group_.Get();
}
inline void ConfigGhostShip::set_boss_group(const ::std::string& value) {
  set_has_boss_group();
  boss_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.boss_group)
}
#if LANG_CXX11
inline void ConfigGhostShip::set_boss_group(::std::string&& value) {
  set_has_boss_group();
  boss_group_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGhostShip.boss_group)
}
#endif
inline void ConfigGhostShip::set_boss_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_boss_group();
  boss_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGhostShip.boss_group)
}
inline void ConfigGhostShip::set_boss_group(const void* value,
    size_t size) {
  set_has_boss_group();
  boss_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGhostShip.boss_group)
}
inline ::std::string* ConfigGhostShip::mutable_boss_group() {
  set_has_boss_group();
  // @@protoc_insertion_point(field_mutable:db.ConfigGhostShip.boss_group)
  return boss_group_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGhostShip::release_boss_group() {
  // @@protoc_insertion_point(field_release:db.ConfigGhostShip.boss_group)
  if (!has_boss_group()) {
    return NULL;
  }
  clear_has_boss_group();
  return boss_group_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGhostShip::set_allocated_boss_group(::std::string* boss_group) {
  if (boss_group != NULL) {
    set_has_boss_group();
  } else {
    clear_has_boss_group();
  }
  boss_group_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boss_group,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGhostShip.boss_group)
}
inline ::std::string* ConfigGhostShip::unsafe_arena_release_boss_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGhostShip.boss_group)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_boss_group();
  return boss_group_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGhostShip::unsafe_arena_set_allocated_boss_group(
    ::std::string* boss_group) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (boss_group != NULL) {
    set_has_boss_group();
  } else {
    clear_has_boss_group();
  }
  boss_group_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      boss_group, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGhostShip.boss_group)
}

// required bytes reward = 7;
inline bool ConfigGhostShip::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigGhostShip::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigGhostShip::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigGhostShip::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigGhostShip::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.reward)
  return reward_.Get();
}
inline void ConfigGhostShip::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.reward)
}
#if LANG_CXX11
inline void ConfigGhostShip::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGhostShip.reward)
}
#endif
inline void ConfigGhostShip::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGhostShip.reward)
}
inline void ConfigGhostShip::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGhostShip.reward)
}
inline ::std::string* ConfigGhostShip::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigGhostShip.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGhostShip::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigGhostShip.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGhostShip::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGhostShip.reward)
}
inline ::std::string* ConfigGhostShip::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGhostShip.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGhostShip::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGhostShip.reward)
}

// required bytes buff_get = 8;
inline bool ConfigGhostShip::has_buff_get() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigGhostShip::set_has_buff_get() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigGhostShip::clear_has_buff_get() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigGhostShip::clear_buff_get() {
  buff_get_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_buff_get();
}
inline const ::std::string& ConfigGhostShip::buff_get() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.buff_get)
  return buff_get_.Get();
}
inline void ConfigGhostShip::set_buff_get(const ::std::string& value) {
  set_has_buff_get();
  buff_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.buff_get)
}
#if LANG_CXX11
inline void ConfigGhostShip::set_buff_get(::std::string&& value) {
  set_has_buff_get();
  buff_get_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGhostShip.buff_get)
}
#endif
inline void ConfigGhostShip::set_buff_get(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buff_get();
  buff_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGhostShip.buff_get)
}
inline void ConfigGhostShip::set_buff_get(const void* value,
    size_t size) {
  set_has_buff_get();
  buff_get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGhostShip.buff_get)
}
inline ::std::string* ConfigGhostShip::mutable_buff_get() {
  set_has_buff_get();
  // @@protoc_insertion_point(field_mutable:db.ConfigGhostShip.buff_get)
  return buff_get_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGhostShip::release_buff_get() {
  // @@protoc_insertion_point(field_release:db.ConfigGhostShip.buff_get)
  if (!has_buff_get()) {
    return NULL;
  }
  clear_has_buff_get();
  return buff_get_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGhostShip::set_allocated_buff_get(::std::string* buff_get) {
  if (buff_get != NULL) {
    set_has_buff_get();
  } else {
    clear_has_buff_get();
  }
  buff_get_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buff_get,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGhostShip.buff_get)
}
inline ::std::string* ConfigGhostShip::unsafe_arena_release_buff_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGhostShip.buff_get)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_buff_get();
  return buff_get_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGhostShip::unsafe_arena_set_allocated_buff_get(
    ::std::string* buff_get) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (buff_get != NULL) {
    set_has_buff_get();
  } else {
    clear_has_buff_get();
  }
  buff_get_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      buff_get, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGhostShip.buff_get)
}

// required bytes monster_buff = 9;
inline bool ConfigGhostShip::has_monster_buff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigGhostShip::set_has_monster_buff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigGhostShip::clear_has_monster_buff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigGhostShip::clear_monster_buff() {
  monster_buff_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_monster_buff();
}
inline const ::std::string& ConfigGhostShip::monster_buff() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.monster_buff)
  return monster_buff_.Get();
}
inline void ConfigGhostShip::set_monster_buff(const ::std::string& value) {
  set_has_monster_buff();
  monster_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.monster_buff)
}
#if LANG_CXX11
inline void ConfigGhostShip::set_monster_buff(::std::string&& value) {
  set_has_monster_buff();
  monster_buff_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGhostShip.monster_buff)
}
#endif
inline void ConfigGhostShip::set_monster_buff(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_monster_buff();
  monster_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGhostShip.monster_buff)
}
inline void ConfigGhostShip::set_monster_buff(const void* value,
    size_t size) {
  set_has_monster_buff();
  monster_buff_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGhostShip.monster_buff)
}
inline ::std::string* ConfigGhostShip::mutable_monster_buff() {
  set_has_monster_buff();
  // @@protoc_insertion_point(field_mutable:db.ConfigGhostShip.monster_buff)
  return monster_buff_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGhostShip::release_monster_buff() {
  // @@protoc_insertion_point(field_release:db.ConfigGhostShip.monster_buff)
  if (!has_monster_buff()) {
    return NULL;
  }
  clear_has_monster_buff();
  return monster_buff_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGhostShip::set_allocated_monster_buff(::std::string* monster_buff) {
  if (monster_buff != NULL) {
    set_has_monster_buff();
  } else {
    clear_has_monster_buff();
  }
  monster_buff_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monster_buff,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGhostShip.monster_buff)
}
inline ::std::string* ConfigGhostShip::unsafe_arena_release_monster_buff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGhostShip.monster_buff)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_monster_buff();
  return monster_buff_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGhostShip::unsafe_arena_set_allocated_monster_buff(
    ::std::string* monster_buff) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (monster_buff != NULL) {
    set_has_monster_buff();
  } else {
    clear_has_monster_buff();
  }
  monster_buff_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      monster_buff, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGhostShip.monster_buff)
}

// required int32 map_model = 10;
inline bool ConfigGhostShip::has_map_model() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigGhostShip::set_has_map_model() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigGhostShip::clear_has_map_model() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigGhostShip::clear_map_model() {
  map_model_ = 0;
  clear_has_map_model();
}
inline ::google::protobuf::int32 ConfigGhostShip::map_model() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.map_model)
  return map_model_;
}
inline void ConfigGhostShip::set_map_model(::google::protobuf::int32 value) {
  set_has_map_model();
  map_model_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.map_model)
}

// required bytes special_reward = 11;
inline bool ConfigGhostShip::has_special_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigGhostShip::set_has_special_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigGhostShip::clear_has_special_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigGhostShip::clear_special_reward() {
  special_reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_special_reward();
}
inline const ::std::string& ConfigGhostShip::special_reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.special_reward)
  return special_reward_.Get();
}
inline void ConfigGhostShip::set_special_reward(const ::std::string& value) {
  set_has_special_reward();
  special_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.special_reward)
}
#if LANG_CXX11
inline void ConfigGhostShip::set_special_reward(::std::string&& value) {
  set_has_special_reward();
  special_reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGhostShip.special_reward)
}
#endif
inline void ConfigGhostShip::set_special_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_special_reward();
  special_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGhostShip.special_reward)
}
inline void ConfigGhostShip::set_special_reward(const void* value,
    size_t size) {
  set_has_special_reward();
  special_reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGhostShip.special_reward)
}
inline ::std::string* ConfigGhostShip::mutable_special_reward() {
  set_has_special_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigGhostShip.special_reward)
  return special_reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGhostShip::release_special_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigGhostShip.special_reward)
  if (!has_special_reward()) {
    return NULL;
  }
  clear_has_special_reward();
  return special_reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGhostShip::set_allocated_special_reward(::std::string* special_reward) {
  if (special_reward != NULL) {
    set_has_special_reward();
  } else {
    clear_has_special_reward();
  }
  special_reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), special_reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGhostShip.special_reward)
}
inline ::std::string* ConfigGhostShip::unsafe_arena_release_special_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGhostShip.special_reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_special_reward();
  return special_reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGhostShip::unsafe_arena_set_allocated_special_reward(
    ::std::string* special_reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (special_reward != NULL) {
    set_has_special_reward();
  } else {
    clear_has_special_reward();
  }
  special_reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      special_reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGhostShip.special_reward)
}

// required int32 rank = 12;
inline bool ConfigGhostShip::has_rank() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigGhostShip::set_has_rank() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigGhostShip::clear_has_rank() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigGhostShip::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ConfigGhostShip::rank() const {
  // @@protoc_insertion_point(field_get:db.ConfigGhostShip.rank)
  return rank_;
}
inline void ConfigGhostShip::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGhostShip.rank)
}

// -------------------------------------------------------------------

// ConfigFacilityGroup

// required int32 id = 1;
inline bool ConfigFacilityGroup::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFacilityGroup::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFacilityGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFacilityGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigFacilityGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacilityGroup.id)
  return id_;
}
inline void ConfigFacilityGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacilityGroup.id)
}

// required bytes contain = 2;
inline bool ConfigFacilityGroup::has_contain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFacilityGroup::set_has_contain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFacilityGroup::clear_has_contain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFacilityGroup::clear_contain() {
  contain_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_contain();
}
inline const ::std::string& ConfigFacilityGroup::contain() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacilityGroup.contain)
  return contain_.Get();
}
inline void ConfigFacilityGroup::set_contain(const ::std::string& value) {
  set_has_contain();
  contain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacilityGroup.contain)
}
#if LANG_CXX11
inline void ConfigFacilityGroup::set_contain(::std::string&& value) {
  set_has_contain();
  contain_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacilityGroup.contain)
}
#endif
inline void ConfigFacilityGroup::set_contain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contain();
  contain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacilityGroup.contain)
}
inline void ConfigFacilityGroup::set_contain(const void* value,
    size_t size) {
  set_has_contain();
  contain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacilityGroup.contain)
}
inline ::std::string* ConfigFacilityGroup::mutable_contain() {
  set_has_contain();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacilityGroup.contain)
  return contain_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacilityGroup::release_contain() {
  // @@protoc_insertion_point(field_release:db.ConfigFacilityGroup.contain)
  if (!has_contain()) {
    return NULL;
  }
  clear_has_contain();
  return contain_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacilityGroup::set_allocated_contain(::std::string* contain) {
  if (contain != NULL) {
    set_has_contain();
  } else {
    clear_has_contain();
  }
  contain_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contain,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacilityGroup.contain)
}
inline ::std::string* ConfigFacilityGroup::unsafe_arena_release_contain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacilityGroup.contain)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_contain();
  return contain_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacilityGroup::unsafe_arena_set_allocated_contain(
    ::std::string* contain) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (contain != NULL) {
    set_has_contain();
  } else {
    clear_has_contain();
  }
  contain_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      contain, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacilityGroup.contain)
}

// required int32 effect = 3;
inline bool ConfigFacilityGroup::has_effect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFacilityGroup::set_has_effect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigFacilityGroup::clear_has_effect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigFacilityGroup::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
inline ::google::protobuf::int32 ConfigFacilityGroup::effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacilityGroup.effect)
  return effect_;
}
inline void ConfigFacilityGroup::set_effect(::google::protobuf::int32 value) {
  set_has_effect();
  effect_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFacilityGroup.effect)
}

// required bytes param = 4;
inline bool ConfigFacilityGroup::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFacilityGroup::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFacilityGroup::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFacilityGroup::clear_param() {
  param_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_param();
}
inline const ::std::string& ConfigFacilityGroup::param() const {
  // @@protoc_insertion_point(field_get:db.ConfigFacilityGroup.param)
  return param_.Get();
}
inline void ConfigFacilityGroup::set_param(const ::std::string& value) {
  set_has_param();
  param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFacilityGroup.param)
}
#if LANG_CXX11
inline void ConfigFacilityGroup::set_param(::std::string&& value) {
  set_has_param();
  param_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFacilityGroup.param)
}
#endif
inline void ConfigFacilityGroup::set_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param();
  param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFacilityGroup.param)
}
inline void ConfigFacilityGroup::set_param(const void* value,
    size_t size) {
  set_has_param();
  param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFacilityGroup.param)
}
inline ::std::string* ConfigFacilityGroup::mutable_param() {
  set_has_param();
  // @@protoc_insertion_point(field_mutable:db.ConfigFacilityGroup.param)
  return param_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFacilityGroup::release_param() {
  // @@protoc_insertion_point(field_release:db.ConfigFacilityGroup.param)
  if (!has_param()) {
    return NULL;
  }
  clear_has_param();
  return param_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFacilityGroup::set_allocated_param(::std::string* param) {
  if (param != NULL) {
    set_has_param();
  } else {
    clear_has_param();
  }
  param_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFacilityGroup.param)
}
inline ::std::string* ConfigFacilityGroup::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFacilityGroup.param)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_param();
  return param_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFacilityGroup::unsafe_arena_set_allocated_param(
    ::std::string* param) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (param != NULL) {
    set_has_param();
  } else {
    clear_has_param();
  }
  param_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      param, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFacilityGroup.param)
}

// -------------------------------------------------------------------

// ConfigRankingScore

// required int32 id = 1;
inline bool ConfigRankingScore::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRankingScore::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRankingScore::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRankingScore::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigRankingScore::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingScore.id)
  return id_;
}
inline void ConfigRankingScore::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRankingScore.id)
}

// required bytes score = 2;
inline bool ConfigRankingScore::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRankingScore::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRankingScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRankingScore::clear_score() {
  score_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_score();
}
inline const ::std::string& ConfigRankingScore::score() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingScore.score)
  return score_.Get();
}
inline void ConfigRankingScore::set_score(const ::std::string& value) {
  set_has_score();
  score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRankingScore.score)
}
#if LANG_CXX11
inline void ConfigRankingScore::set_score(::std::string&& value) {
  set_has_score();
  score_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRankingScore.score)
}
#endif
inline void ConfigRankingScore::set_score(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_score();
  score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRankingScore.score)
}
inline void ConfigRankingScore::set_score(const void* value,
    size_t size) {
  set_has_score();
  score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRankingScore.score)
}
inline ::std::string* ConfigRankingScore::mutable_score() {
  set_has_score();
  // @@protoc_insertion_point(field_mutable:db.ConfigRankingScore.score)
  return score_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRankingScore::release_score() {
  // @@protoc_insertion_point(field_release:db.ConfigRankingScore.score)
  if (!has_score()) {
    return NULL;
  }
  clear_has_score();
  return score_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRankingScore::set_allocated_score(::std::string* score) {
  if (score != NULL) {
    set_has_score();
  } else {
    clear_has_score();
  }
  score_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRankingScore.score)
}
inline ::std::string* ConfigRankingScore::unsafe_arena_release_score() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRankingScore.score)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_score();
  return score_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRankingScore::unsafe_arena_set_allocated_score(
    ::std::string* score) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (score != NULL) {
    set_has_score();
  } else {
    clear_has_score();
  }
  score_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      score, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRankingScore.score)
}

// -------------------------------------------------------------------

// ConfigRankingBattleReward

// required int32 id = 1;
inline bool ConfigRankingBattleReward::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRankingBattleReward::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRankingBattleReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRankingBattleReward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigRankingBattleReward::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingBattleReward.id)
  return id_;
}
inline void ConfigRankingBattleReward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRankingBattleReward.id)
}

// required int32 combo = 2;
inline bool ConfigRankingBattleReward::has_combo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigRankingBattleReward::set_has_combo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigRankingBattleReward::clear_has_combo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigRankingBattleReward::clear_combo() {
  combo_ = 0;
  clear_has_combo();
}
inline ::google::protobuf::int32 ConfigRankingBattleReward::combo() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingBattleReward.combo)
  return combo_;
}
inline void ConfigRankingBattleReward::set_combo(::google::protobuf::int32 value) {
  set_has_combo();
  combo_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRankingBattleReward.combo)
}

// required int32 score_up = 3;
inline bool ConfigRankingBattleReward::has_score_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigRankingBattleReward::set_has_score_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigRankingBattleReward::clear_has_score_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigRankingBattleReward::clear_score_up() {
  score_up_ = 0;
  clear_has_score_up();
}
inline ::google::protobuf::int32 ConfigRankingBattleReward::score_up() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingBattleReward.score_up)
  return score_up_;
}
inline void ConfigRankingBattleReward::set_score_up(::google::protobuf::int32 value) {
  set_has_score_up();
  score_up_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRankingBattleReward.score_up)
}

// required int32 score_down = 4;
inline bool ConfigRankingBattleReward::has_score_down() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigRankingBattleReward::set_has_score_down() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigRankingBattleReward::clear_has_score_down() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigRankingBattleReward::clear_score_down() {
  score_down_ = 0;
  clear_has_score_down();
}
inline ::google::protobuf::int32 ConfigRankingBattleReward::score_down() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingBattleReward.score_down)
  return score_down_;
}
inline void ConfigRankingBattleReward::set_score_down(::google::protobuf::int32 value) {
  set_has_score_down();
  score_down_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRankingBattleReward.score_down)
}

// required bytes reward = 5;
inline bool ConfigRankingBattleReward::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRankingBattleReward::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRankingBattleReward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRankingBattleReward::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigRankingBattleReward::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigRankingBattleReward.reward)
  return reward_.Get();
}
inline void ConfigRankingBattleReward::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRankingBattleReward.reward)
}
#if LANG_CXX11
inline void ConfigRankingBattleReward::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRankingBattleReward.reward)
}
#endif
inline void ConfigRankingBattleReward::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRankingBattleReward.reward)
}
inline void ConfigRankingBattleReward::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRankingBattleReward.reward)
}
inline ::std::string* ConfigRankingBattleReward::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigRankingBattleReward.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRankingBattleReward::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigRankingBattleReward.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRankingBattleReward::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRankingBattleReward.reward)
}
inline ::std::string* ConfigRankingBattleReward::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRankingBattleReward.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRankingBattleReward::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRankingBattleReward.reward)
}

// -------------------------------------------------------------------

// ConfigEasterEgg

// required int32 id = 1;
inline bool ConfigEasterEgg::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigEasterEgg::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigEasterEgg::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigEasterEgg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigEasterEgg::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigEasterEgg.id)
  return id_;
}
inline void ConfigEasterEgg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEasterEgg.id)
}

// required int32 type = 2;
inline bool ConfigEasterEgg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigEasterEgg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigEasterEgg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigEasterEgg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigEasterEgg::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigEasterEgg.type)
  return type_;
}
inline void ConfigEasterEgg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigEasterEgg.type)
}

// required bytes name = 3;
inline bool ConfigEasterEgg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigEasterEgg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigEasterEgg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigEasterEgg::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigEasterEgg::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigEasterEgg.name)
  return name_.Get();
}
inline void ConfigEasterEgg::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEasterEgg.name)
}
#if LANG_CXX11
inline void ConfigEasterEgg::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEasterEgg.name)
}
#endif
inline void ConfigEasterEgg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEasterEgg.name)
}
inline void ConfigEasterEgg::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEasterEgg.name)
}
inline ::std::string* ConfigEasterEgg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigEasterEgg.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEasterEgg::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigEasterEgg.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEasterEgg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEasterEgg.name)
}
inline ::std::string* ConfigEasterEgg::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEasterEgg.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEasterEgg::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEasterEgg.name)
}

// required bytes choice = 4;
inline bool ConfigEasterEgg::has_choice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigEasterEgg::set_has_choice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigEasterEgg::clear_has_choice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigEasterEgg::clear_choice() {
  choice_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_choice();
}
inline const ::std::string& ConfigEasterEgg::choice() const {
  // @@protoc_insertion_point(field_get:db.ConfigEasterEgg.choice)
  return choice_.Get();
}
inline void ConfigEasterEgg::set_choice(const ::std::string& value) {
  set_has_choice();
  choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigEasterEgg.choice)
}
#if LANG_CXX11
inline void ConfigEasterEgg::set_choice(::std::string&& value) {
  set_has_choice();
  choice_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigEasterEgg.choice)
}
#endif
inline void ConfigEasterEgg::set_choice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_choice();
  choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigEasterEgg.choice)
}
inline void ConfigEasterEgg::set_choice(const void* value,
    size_t size) {
  set_has_choice();
  choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigEasterEgg.choice)
}
inline ::std::string* ConfigEasterEgg::mutable_choice() {
  set_has_choice();
  // @@protoc_insertion_point(field_mutable:db.ConfigEasterEgg.choice)
  return choice_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigEasterEgg::release_choice() {
  // @@protoc_insertion_point(field_release:db.ConfigEasterEgg.choice)
  if (!has_choice()) {
    return NULL;
  }
  clear_has_choice();
  return choice_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigEasterEgg::set_allocated_choice(::std::string* choice) {
  if (choice != NULL) {
    set_has_choice();
  } else {
    clear_has_choice();
  }
  choice_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), choice,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigEasterEgg.choice)
}
inline ::std::string* ConfigEasterEgg::unsafe_arena_release_choice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigEasterEgg.choice)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_choice();
  return choice_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigEasterEgg::unsafe_arena_set_allocated_choice(
    ::std::string* choice) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (choice != NULL) {
    set_has_choice();
  } else {
    clear_has_choice();
  }
  choice_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      choice, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigEasterEgg.choice)
}

// -------------------------------------------------------------------

// ConfigShipEvent

// required int32 id = 1;
inline bool ConfigShipEvent::has_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigShipEvent::set_has_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigShipEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigShipEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigShipEvent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.id)
  return id_;
}
inline void ConfigShipEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.id)
}

// required int32 type = 2;
inline bool ConfigShipEvent::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigShipEvent::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigShipEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigShipEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigShipEvent::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.type)
  return type_;
}
inline void ConfigShipEvent::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.type)
}

// required bytes need_seconds = 3;
inline bool ConfigShipEvent::has_need_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigShipEvent::set_has_need_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigShipEvent::clear_has_need_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigShipEvent::clear_need_seconds() {
  need_seconds_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_need_seconds();
}
inline const ::std::string& ConfigShipEvent::need_seconds() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.need_seconds)
  return need_seconds_.Get();
}
inline void ConfigShipEvent::set_need_seconds(const ::std::string& value) {
  set_has_need_seconds();
  need_seconds_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.need_seconds)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_need_seconds(::std::string&& value) {
  set_has_need_seconds();
  need_seconds_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.need_seconds)
}
#endif
inline void ConfigShipEvent::set_need_seconds(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_need_seconds();
  need_seconds_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.need_seconds)
}
inline void ConfigShipEvent::set_need_seconds(const void* value,
    size_t size) {
  set_has_need_seconds();
  need_seconds_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.need_seconds)
}
inline ::std::string* ConfigShipEvent::mutable_need_seconds() {
  set_has_need_seconds();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.need_seconds)
  return need_seconds_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_need_seconds() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.need_seconds)
  if (!has_need_seconds()) {
    return NULL;
  }
  clear_has_need_seconds();
  return need_seconds_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_need_seconds(::std::string* need_seconds) {
  if (need_seconds != NULL) {
    set_has_need_seconds();
  } else {
    clear_has_need_seconds();
  }
  need_seconds_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), need_seconds,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.need_seconds)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_need_seconds() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.need_seconds)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_need_seconds();
  return need_seconds_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_need_seconds(
    ::std::string* need_seconds) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (need_seconds != NULL) {
    set_has_need_seconds();
  } else {
    clear_has_need_seconds();
  }
  need_seconds_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      need_seconds, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.need_seconds)
}

// required bytes need_level = 4;
inline bool ConfigShipEvent::has_need_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigShipEvent::set_has_need_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigShipEvent::clear_has_need_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigShipEvent::clear_need_level() {
  need_level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_need_level();
}
inline const ::std::string& ConfigShipEvent::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.need_level)
  return need_level_.Get();
}
inline void ConfigShipEvent::set_need_level(const ::std::string& value) {
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.need_level)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_need_level(::std::string&& value) {
  set_has_need_level();
  need_level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.need_level)
}
#endif
inline void ConfigShipEvent::set_need_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.need_level)
}
inline void ConfigShipEvent::set_need_level(const void* value,
    size_t size) {
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.need_level)
}
inline ::std::string* ConfigShipEvent::mutable_need_level() {
  set_has_need_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.need_level)
  return need_level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_need_level() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.need_level)
  if (!has_need_level()) {
    return NULL;
  }
  clear_has_need_level();
  return need_level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_need_level(::std::string* need_level) {
  if (need_level != NULL) {
    set_has_need_level();
  } else {
    clear_has_need_level();
  }
  need_level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), need_level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.need_level)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_need_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.need_level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_need_level();
  return need_level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_need_level(
    ::std::string* need_level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (need_level != NULL) {
    set_has_need_level();
  } else {
    clear_has_need_level();
  }
  need_level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      need_level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.need_level)
}

// required int32 need_model = 5;
inline bool ConfigShipEvent::has_need_model() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigShipEvent::set_has_need_model() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigShipEvent::clear_has_need_model() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigShipEvent::clear_need_model() {
  need_model_ = 0;
  clear_has_need_model();
}
inline ::google::protobuf::int32 ConfigShipEvent::need_model() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.need_model)
  return need_model_;
}
inline void ConfigShipEvent::set_need_model(::google::protobuf::int32 value) {
  set_has_need_model();
  need_model_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.need_model)
}

// required bytes need_room = 6;
inline bool ConfigShipEvent::has_need_room() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigShipEvent::set_has_need_room() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigShipEvent::clear_has_need_room() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigShipEvent::clear_need_room() {
  need_room_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_need_room();
}
inline const ::std::string& ConfigShipEvent::need_room() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.need_room)
  return need_room_.Get();
}
inline void ConfigShipEvent::set_need_room(const ::std::string& value) {
  set_has_need_room();
  need_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.need_room)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_need_room(::std::string&& value) {
  set_has_need_room();
  need_room_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.need_room)
}
#endif
inline void ConfigShipEvent::set_need_room(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_need_room();
  need_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.need_room)
}
inline void ConfigShipEvent::set_need_room(const void* value,
    size_t size) {
  set_has_need_room();
  need_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.need_room)
}
inline ::std::string* ConfigShipEvent::mutable_need_room() {
  set_has_need_room();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.need_room)
  return need_room_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_need_room() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.need_room)
  if (!has_need_room()) {
    return NULL;
  }
  clear_has_need_room();
  return need_room_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_need_room(::std::string* need_room) {
  if (need_room != NULL) {
    set_has_need_room();
  } else {
    clear_has_need_room();
  }
  need_room_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), need_room,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.need_room)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_need_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.need_room)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_need_room();
  return need_room_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_need_room(
    ::std::string* need_room) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (need_room != NULL) {
    set_has_need_room();
  } else {
    clear_has_need_room();
  }
  need_room_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      need_room, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.need_room)
}

// required bytes need_facility = 7;
inline bool ConfigShipEvent::has_need_facility() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigShipEvent::set_has_need_facility() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigShipEvent::clear_has_need_facility() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigShipEvent::clear_need_facility() {
  need_facility_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_need_facility();
}
inline const ::std::string& ConfigShipEvent::need_facility() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.need_facility)
  return need_facility_.Get();
}
inline void ConfigShipEvent::set_need_facility(const ::std::string& value) {
  set_has_need_facility();
  need_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.need_facility)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_need_facility(::std::string&& value) {
  set_has_need_facility();
  need_facility_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.need_facility)
}
#endif
inline void ConfigShipEvent::set_need_facility(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_need_facility();
  need_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.need_facility)
}
inline void ConfigShipEvent::set_need_facility(const void* value,
    size_t size) {
  set_has_need_facility();
  need_facility_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.need_facility)
}
inline ::std::string* ConfigShipEvent::mutable_need_facility() {
  set_has_need_facility();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.need_facility)
  return need_facility_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_need_facility() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.need_facility)
  if (!has_need_facility()) {
    return NULL;
  }
  clear_has_need_facility();
  return need_facility_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_need_facility(::std::string* need_facility) {
  if (need_facility != NULL) {
    set_has_need_facility();
  } else {
    clear_has_need_facility();
  }
  need_facility_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), need_facility,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.need_facility)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_need_facility() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.need_facility)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_need_facility();
  return need_facility_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_need_facility(
    ::std::string* need_facility) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (need_facility != NULL) {
    set_has_need_facility();
  } else {
    clear_has_need_facility();
  }
  need_facility_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      need_facility, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.need_facility)
}

// required bytes pre_task = 8;
inline bool ConfigShipEvent::has_pre_task() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigShipEvent::set_has_pre_task() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigShipEvent::clear_has_pre_task() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigShipEvent::clear_pre_task() {
  pre_task_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pre_task();
}
inline const ::std::string& ConfigShipEvent::pre_task() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.pre_task)
  return pre_task_.Get();
}
inline void ConfigShipEvent::set_pre_task(const ::std::string& value) {
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.pre_task)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_pre_task(::std::string&& value) {
  set_has_pre_task();
  pre_task_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.pre_task)
}
#endif
inline void ConfigShipEvent::set_pre_task(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.pre_task)
}
inline void ConfigShipEvent::set_pre_task(const void* value,
    size_t size) {
  set_has_pre_task();
  pre_task_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.pre_task)
}
inline ::std::string* ConfigShipEvent::mutable_pre_task() {
  set_has_pre_task();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.pre_task)
  return pre_task_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_pre_task() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.pre_task)
  if (!has_pre_task()) {
    return NULL;
  }
  clear_has_pre_task();
  return pre_task_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_pre_task(::std::string* pre_task) {
  if (pre_task != NULL) {
    set_has_pre_task();
  } else {
    clear_has_pre_task();
  }
  pre_task_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pre_task,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.pre_task)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_pre_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.pre_task)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pre_task();
  return pre_task_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_pre_task(
    ::std::string* pre_task) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pre_task != NULL) {
    set_has_pre_task();
  } else {
    clear_has_pre_task();
  }
  pre_task_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pre_task, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.pre_task)
}

// required int32 region = 9;
inline bool ConfigShipEvent::has_region() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigShipEvent::set_has_region() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigShipEvent::clear_has_region() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigShipEvent::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 ConfigShipEvent::region() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.region)
  return region_;
}
inline void ConfigShipEvent::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.region)
}

// required float probability = 10;
inline bool ConfigShipEvent::has_probability() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigShipEvent::set_has_probability() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigShipEvent::clear_has_probability() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigShipEvent::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline float ConfigShipEvent::probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.probability)
  return probability_;
}
inline void ConfigShipEvent::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.probability)
}

// required int32 limit_num = 11;
inline bool ConfigShipEvent::has_limit_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigShipEvent::set_has_limit_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigShipEvent::clear_has_limit_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigShipEvent::clear_limit_num() {
  limit_num_ = 0;
  clear_has_limit_num();
}
inline ::google::protobuf::int32 ConfigShipEvent::limit_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.limit_num)
  return limit_num_;
}
inline void ConfigShipEvent::set_limit_num(::google::protobuf::int32 value) {
  set_has_limit_num();
  limit_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.limit_num)
}

// required bytes enemy = 12;
inline bool ConfigShipEvent::has_enemy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigShipEvent::set_has_enemy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigShipEvent::clear_has_enemy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigShipEvent::clear_enemy() {
  enemy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_enemy();
}
inline const ::std::string& ConfigShipEvent::enemy() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.enemy)
  return enemy_.Get();
}
inline void ConfigShipEvent::set_enemy(const ::std::string& value) {
  set_has_enemy();
  enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.enemy)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_enemy(::std::string&& value) {
  set_has_enemy();
  enemy_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.enemy)
}
#endif
inline void ConfigShipEvent::set_enemy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enemy();
  enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.enemy)
}
inline void ConfigShipEvent::set_enemy(const void* value,
    size_t size) {
  set_has_enemy();
  enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.enemy)
}
inline ::std::string* ConfigShipEvent::mutable_enemy() {
  set_has_enemy();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.enemy)
  return enemy_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_enemy() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.enemy)
  if (!has_enemy()) {
    return NULL;
  }
  clear_has_enemy();
  return enemy_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_enemy(::std::string* enemy) {
  if (enemy != NULL) {
    set_has_enemy();
  } else {
    clear_has_enemy();
  }
  enemy_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enemy,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.enemy)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_enemy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.enemy)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_enemy();
  return enemy_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_enemy(
    ::std::string* enemy) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (enemy != NULL) {
    set_has_enemy();
  } else {
    clear_has_enemy();
  }
  enemy_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      enemy, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.enemy)
}

// required int32 exculde = 13;
inline bool ConfigShipEvent::has_exculde() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigShipEvent::set_has_exculde() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigShipEvent::clear_has_exculde() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigShipEvent::clear_exculde() {
  exculde_ = 0;
  clear_has_exculde();
}
inline ::google::protobuf::int32 ConfigShipEvent::exculde() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.exculde)
  return exculde_;
}
inline void ConfigShipEvent::set_exculde(::google::protobuf::int32 value) {
  set_has_exculde();
  exculde_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.exculde)
}

// required bytes choice = 14;
inline bool ConfigShipEvent::has_choice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigShipEvent::set_has_choice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigShipEvent::clear_has_choice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigShipEvent::clear_choice() {
  choice_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_choice();
}
inline const ::std::string& ConfigShipEvent::choice() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.choice)
  return choice_.Get();
}
inline void ConfigShipEvent::set_choice(const ::std::string& value) {
  set_has_choice();
  choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.choice)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_choice(::std::string&& value) {
  set_has_choice();
  choice_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.choice)
}
#endif
inline void ConfigShipEvent::set_choice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_choice();
  choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.choice)
}
inline void ConfigShipEvent::set_choice(const void* value,
    size_t size) {
  set_has_choice();
  choice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.choice)
}
inline ::std::string* ConfigShipEvent::mutable_choice() {
  set_has_choice();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.choice)
  return choice_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_choice() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.choice)
  if (!has_choice()) {
    return NULL;
  }
  clear_has_choice();
  return choice_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_choice(::std::string* choice) {
  if (choice != NULL) {
    set_has_choice();
  } else {
    clear_has_choice();
  }
  choice_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), choice,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.choice)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_choice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.choice)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_choice();
  return choice_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_choice(
    ::std::string* choice) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (choice != NULL) {
    set_has_choice();
  } else {
    clear_has_choice();
  }
  choice_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      choice, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.choice)
}

// required bytes untreated_cost = 15;
inline bool ConfigShipEvent::has_untreated_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigShipEvent::set_has_untreated_cost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigShipEvent::clear_has_untreated_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigShipEvent::clear_untreated_cost() {
  untreated_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_untreated_cost();
}
inline const ::std::string& ConfigShipEvent::untreated_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.untreated_cost)
  return untreated_cost_.Get();
}
inline void ConfigShipEvent::set_untreated_cost(const ::std::string& value) {
  set_has_untreated_cost();
  untreated_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.untreated_cost)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_untreated_cost(::std::string&& value) {
  set_has_untreated_cost();
  untreated_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.untreated_cost)
}
#endif
inline void ConfigShipEvent::set_untreated_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_untreated_cost();
  untreated_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.untreated_cost)
}
inline void ConfigShipEvent::set_untreated_cost(const void* value,
    size_t size) {
  set_has_untreated_cost();
  untreated_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.untreated_cost)
}
inline ::std::string* ConfigShipEvent::mutable_untreated_cost() {
  set_has_untreated_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.untreated_cost)
  return untreated_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_untreated_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.untreated_cost)
  if (!has_untreated_cost()) {
    return NULL;
  }
  clear_has_untreated_cost();
  return untreated_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_untreated_cost(::std::string* untreated_cost) {
  if (untreated_cost != NULL) {
    set_has_untreated_cost();
  } else {
    clear_has_untreated_cost();
  }
  untreated_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), untreated_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.untreated_cost)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_untreated_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.untreated_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_untreated_cost();
  return untreated_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_untreated_cost(
    ::std::string* untreated_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (untreated_cost != NULL) {
    set_has_untreated_cost();
  } else {
    clear_has_untreated_cost();
  }
  untreated_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      untreated_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.untreated_cost)
}

// required bytes effect = 16;
inline bool ConfigShipEvent::has_effect() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigShipEvent::set_has_effect() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigShipEvent::clear_has_effect() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigShipEvent::clear_effect() {
  effect_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_effect();
}
inline const ::std::string& ConfigShipEvent::effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.effect)
  return effect_.Get();
}
inline void ConfigShipEvent::set_effect(const ::std::string& value) {
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.effect)
}
#if LANG_CXX11
inline void ConfigShipEvent::set_effect(::std::string&& value) {
  set_has_effect();
  effect_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigShipEvent.effect)
}
#endif
inline void ConfigShipEvent::set_effect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigShipEvent.effect)
}
inline void ConfigShipEvent::set_effect(const void* value,
    size_t size) {
  set_has_effect();
  effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigShipEvent.effect)
}
inline ::std::string* ConfigShipEvent::mutable_effect() {
  set_has_effect();
  // @@protoc_insertion_point(field_mutable:db.ConfigShipEvent.effect)
  return effect_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigShipEvent::release_effect() {
  // @@protoc_insertion_point(field_release:db.ConfigShipEvent.effect)
  if (!has_effect()) {
    return NULL;
  }
  clear_has_effect();
  return effect_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigShipEvent::set_allocated_effect(::std::string* effect) {
  if (effect != NULL) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  effect_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), effect,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigShipEvent.effect)
}
inline ::std::string* ConfigShipEvent::unsafe_arena_release_effect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigShipEvent.effect)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_effect();
  return effect_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigShipEvent::unsafe_arena_set_allocated_effect(
    ::std::string* effect) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (effect != NULL) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  effect_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      effect, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigShipEvent.effect)
}

// required int32 duration = 17;
inline bool ConfigShipEvent::has_duration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigShipEvent::set_has_duration() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigShipEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigShipEvent::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 ConfigShipEvent::duration() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.duration)
  return duration_;
}
inline void ConfigShipEvent::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.duration)
}

// required int32 happen_limit = 18;
inline bool ConfigShipEvent::has_happen_limit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigShipEvent::set_has_happen_limit() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigShipEvent::clear_has_happen_limit() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigShipEvent::clear_happen_limit() {
  happen_limit_ = 0;
  clear_has_happen_limit();
}
inline ::google::protobuf::int32 ConfigShipEvent::happen_limit() const {
  // @@protoc_insertion_point(field_get:db.ConfigShipEvent.happen_limit)
  return happen_limit_;
}
inline void ConfigShipEvent::set_happen_limit(::google::protobuf::int32 value) {
  set_has_happen_limit();
  happen_limit_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigShipEvent.happen_limit)
}

// -------------------------------------------------------------------

// ConfigDailyGift

// required int32 id = 1;
inline bool ConfigDailyGift::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDailyGift::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDailyGift::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDailyGift::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigDailyGift::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDailyGift.id)
  return id_;
}
inline void ConfigDailyGift::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDailyGift.id)
}

// required bytes reward = 2;
inline bool ConfigDailyGift::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDailyGift::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDailyGift::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDailyGift::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigDailyGift::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigDailyGift.reward)
  return reward_.Get();
}
inline void ConfigDailyGift::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDailyGift.reward)
}
#if LANG_CXX11
inline void ConfigDailyGift::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDailyGift.reward)
}
#endif
inline void ConfigDailyGift::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDailyGift.reward)
}
inline void ConfigDailyGift::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDailyGift.reward)
}
inline ::std::string* ConfigDailyGift::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigDailyGift.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDailyGift::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigDailyGift.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDailyGift::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDailyGift.reward)
}
inline ::std::string* ConfigDailyGift::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDailyGift.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDailyGift::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDailyGift.reward)
}

// required bytes time_interval = 3;
inline bool ConfigDailyGift::has_time_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDailyGift::set_has_time_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDailyGift::clear_has_time_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDailyGift::clear_time_interval() {
  time_interval_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_time_interval();
}
inline const ::std::string& ConfigDailyGift::time_interval() const {
  // @@protoc_insertion_point(field_get:db.ConfigDailyGift.time_interval)
  return time_interval_.Get();
}
inline void ConfigDailyGift::set_time_interval(const ::std::string& value) {
  set_has_time_interval();
  time_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDailyGift.time_interval)
}
#if LANG_CXX11
inline void ConfigDailyGift::set_time_interval(::std::string&& value) {
  set_has_time_interval();
  time_interval_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDailyGift.time_interval)
}
#endif
inline void ConfigDailyGift::set_time_interval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time_interval();
  time_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDailyGift.time_interval)
}
inline void ConfigDailyGift::set_time_interval(const void* value,
    size_t size) {
  set_has_time_interval();
  time_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDailyGift.time_interval)
}
inline ::std::string* ConfigDailyGift::mutable_time_interval() {
  set_has_time_interval();
  // @@protoc_insertion_point(field_mutable:db.ConfigDailyGift.time_interval)
  return time_interval_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDailyGift::release_time_interval() {
  // @@protoc_insertion_point(field_release:db.ConfigDailyGift.time_interval)
  if (!has_time_interval()) {
    return NULL;
  }
  clear_has_time_interval();
  return time_interval_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDailyGift::set_allocated_time_interval(::std::string* time_interval) {
  if (time_interval != NULL) {
    set_has_time_interval();
  } else {
    clear_has_time_interval();
  }
  time_interval_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_interval,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDailyGift.time_interval)
}
inline ::std::string* ConfigDailyGift::unsafe_arena_release_time_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDailyGift.time_interval)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_time_interval();
  return time_interval_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDailyGift::unsafe_arena_set_allocated_time_interval(
    ::std::string* time_interval) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (time_interval != NULL) {
    set_has_time_interval();
  } else {
    clear_has_time_interval();
  }
  time_interval_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      time_interval, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDailyGift.time_interval)
}

// -------------------------------------------------------------------

// ConfigNavigationEvent

// required int32 id = 1;
inline bool ConfigNavigationEvent::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigNavigationEvent::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigNavigationEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigNavigationEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigNavigationEvent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.id)
  return id_;
}
inline void ConfigNavigationEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.id)
}

// required int32 type = 2;
inline bool ConfigNavigationEvent::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigNavigationEvent::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigNavigationEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigNavigationEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigNavigationEvent::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.type)
  return type_;
}
inline void ConfigNavigationEvent::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.type)
}

// required bytes level = 3;
inline bool ConfigNavigationEvent::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigNavigationEvent::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigNavigationEvent::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigNavigationEvent::clear_level() {
  level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level();
}
inline const ::std::string& ConfigNavigationEvent::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.level)
  return level_.Get();
}
inline void ConfigNavigationEvent::set_level(const ::std::string& value) {
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.level)
}
#if LANG_CXX11
inline void ConfigNavigationEvent::set_level(::std::string&& value) {
  set_has_level();
  level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigNavigationEvent.level)
}
#endif
inline void ConfigNavigationEvent::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigNavigationEvent.level)
}
inline void ConfigNavigationEvent::set_level(const void* value,
    size_t size) {
  set_has_level();
  level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigNavigationEvent.level)
}
inline ::std::string* ConfigNavigationEvent::mutable_level() {
  set_has_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigNavigationEvent.level)
  return level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigNavigationEvent::release_level() {
  // @@protoc_insertion_point(field_release:db.ConfigNavigationEvent.level)
  if (!has_level()) {
    return NULL;
  }
  clear_has_level();
  return level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    set_has_level();
  } else {
    clear_has_level();
  }
  level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigNavigationEvent.level)
}
inline ::std::string* ConfigNavigationEvent::unsafe_arena_release_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigNavigationEvent.level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level();
  return level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::unsafe_arena_set_allocated_level(
    ::std::string* level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level != NULL) {
    set_has_level();
  } else {
    clear_has_level();
  }
  level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigNavigationEvent.level)
}

// required bytes deal_cost = 4;
inline bool ConfigNavigationEvent::has_deal_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigNavigationEvent::set_has_deal_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigNavigationEvent::clear_has_deal_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigNavigationEvent::clear_deal_cost() {
  deal_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_deal_cost();
}
inline const ::std::string& ConfigNavigationEvent::deal_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.deal_cost)
  return deal_cost_.Get();
}
inline void ConfigNavigationEvent::set_deal_cost(const ::std::string& value) {
  set_has_deal_cost();
  deal_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.deal_cost)
}
#if LANG_CXX11
inline void ConfigNavigationEvent::set_deal_cost(::std::string&& value) {
  set_has_deal_cost();
  deal_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigNavigationEvent.deal_cost)
}
#endif
inline void ConfigNavigationEvent::set_deal_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deal_cost();
  deal_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigNavigationEvent.deal_cost)
}
inline void ConfigNavigationEvent::set_deal_cost(const void* value,
    size_t size) {
  set_has_deal_cost();
  deal_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigNavigationEvent.deal_cost)
}
inline ::std::string* ConfigNavigationEvent::mutable_deal_cost() {
  set_has_deal_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigNavigationEvent.deal_cost)
  return deal_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigNavigationEvent::release_deal_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigNavigationEvent.deal_cost)
  if (!has_deal_cost()) {
    return NULL;
  }
  clear_has_deal_cost();
  return deal_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::set_allocated_deal_cost(::std::string* deal_cost) {
  if (deal_cost != NULL) {
    set_has_deal_cost();
  } else {
    clear_has_deal_cost();
  }
  deal_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deal_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigNavigationEvent.deal_cost)
}
inline ::std::string* ConfigNavigationEvent::unsafe_arena_release_deal_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigNavigationEvent.deal_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_deal_cost();
  return deal_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::unsafe_arena_set_allocated_deal_cost(
    ::std::string* deal_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (deal_cost != NULL) {
    set_has_deal_cost();
  } else {
    clear_has_deal_cost();
  }
  deal_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      deal_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigNavigationEvent.deal_cost)
}

// required bytes ignore_cost = 5;
inline bool ConfigNavigationEvent::has_ignore_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigNavigationEvent::set_has_ignore_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigNavigationEvent::clear_has_ignore_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigNavigationEvent::clear_ignore_cost() {
  ignore_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ignore_cost();
}
inline const ::std::string& ConfigNavigationEvent::ignore_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.ignore_cost)
  return ignore_cost_.Get();
}
inline void ConfigNavigationEvent::set_ignore_cost(const ::std::string& value) {
  set_has_ignore_cost();
  ignore_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.ignore_cost)
}
#if LANG_CXX11
inline void ConfigNavigationEvent::set_ignore_cost(::std::string&& value) {
  set_has_ignore_cost();
  ignore_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigNavigationEvent.ignore_cost)
}
#endif
inline void ConfigNavigationEvent::set_ignore_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ignore_cost();
  ignore_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigNavigationEvent.ignore_cost)
}
inline void ConfigNavigationEvent::set_ignore_cost(const void* value,
    size_t size) {
  set_has_ignore_cost();
  ignore_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigNavigationEvent.ignore_cost)
}
inline ::std::string* ConfigNavigationEvent::mutable_ignore_cost() {
  set_has_ignore_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigNavigationEvent.ignore_cost)
  return ignore_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigNavigationEvent::release_ignore_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigNavigationEvent.ignore_cost)
  if (!has_ignore_cost()) {
    return NULL;
  }
  clear_has_ignore_cost();
  return ignore_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::set_allocated_ignore_cost(::std::string* ignore_cost) {
  if (ignore_cost != NULL) {
    set_has_ignore_cost();
  } else {
    clear_has_ignore_cost();
  }
  ignore_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ignore_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigNavigationEvent.ignore_cost)
}
inline ::std::string* ConfigNavigationEvent::unsafe_arena_release_ignore_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigNavigationEvent.ignore_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ignore_cost();
  return ignore_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::unsafe_arena_set_allocated_ignore_cost(
    ::std::string* ignore_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ignore_cost != NULL) {
    set_has_ignore_cost();
  } else {
    clear_has_ignore_cost();
  }
  ignore_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ignore_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigNavigationEvent.ignore_cost)
}

// required bytes enemy = 6;
inline bool ConfigNavigationEvent::has_enemy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigNavigationEvent::set_has_enemy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigNavigationEvent::clear_has_enemy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigNavigationEvent::clear_enemy() {
  enemy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_enemy();
}
inline const ::std::string& ConfigNavigationEvent::enemy() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.enemy)
  return enemy_.Get();
}
inline void ConfigNavigationEvent::set_enemy(const ::std::string& value) {
  set_has_enemy();
  enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.enemy)
}
#if LANG_CXX11
inline void ConfigNavigationEvent::set_enemy(::std::string&& value) {
  set_has_enemy();
  enemy_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigNavigationEvent.enemy)
}
#endif
inline void ConfigNavigationEvent::set_enemy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enemy();
  enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigNavigationEvent.enemy)
}
inline void ConfigNavigationEvent::set_enemy(const void* value,
    size_t size) {
  set_has_enemy();
  enemy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigNavigationEvent.enemy)
}
inline ::std::string* ConfigNavigationEvent::mutable_enemy() {
  set_has_enemy();
  // @@protoc_insertion_point(field_mutable:db.ConfigNavigationEvent.enemy)
  return enemy_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigNavigationEvent::release_enemy() {
  // @@protoc_insertion_point(field_release:db.ConfigNavigationEvent.enemy)
  if (!has_enemy()) {
    return NULL;
  }
  clear_has_enemy();
  return enemy_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::set_allocated_enemy(::std::string* enemy) {
  if (enemy != NULL) {
    set_has_enemy();
  } else {
    clear_has_enemy();
  }
  enemy_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enemy,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigNavigationEvent.enemy)
}
inline ::std::string* ConfigNavigationEvent::unsafe_arena_release_enemy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigNavigationEvent.enemy)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_enemy();
  return enemy_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::unsafe_arena_set_allocated_enemy(
    ::std::string* enemy) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (enemy != NULL) {
    set_has_enemy();
  } else {
    clear_has_enemy();
  }
  enemy_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      enemy, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigNavigationEvent.enemy)
}

// required int32 model_id = 7;
inline bool ConfigNavigationEvent::has_model_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigNavigationEvent::set_has_model_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigNavigationEvent::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigNavigationEvent::clear_model_id() {
  model_id_ = 0;
  clear_has_model_id();
}
inline ::google::protobuf::int32 ConfigNavigationEvent::model_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.model_id)
  return model_id_;
}
inline void ConfigNavigationEvent::set_model_id(::google::protobuf::int32 value) {
  set_has_model_id();
  model_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.model_id)
}

// required bytes drop = 8;
inline bool ConfigNavigationEvent::has_drop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigNavigationEvent::set_has_drop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigNavigationEvent::clear_has_drop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigNavigationEvent::clear_drop() {
  drop_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop();
}
inline const ::std::string& ConfigNavigationEvent::drop() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.drop)
  return drop_.Get();
}
inline void ConfigNavigationEvent::set_drop(const ::std::string& value) {
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.drop)
}
#if LANG_CXX11
inline void ConfigNavigationEvent::set_drop(::std::string&& value) {
  set_has_drop();
  drop_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigNavigationEvent.drop)
}
#endif
inline void ConfigNavigationEvent::set_drop(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigNavigationEvent.drop)
}
inline void ConfigNavigationEvent::set_drop(const void* value,
    size_t size) {
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigNavigationEvent.drop)
}
inline ::std::string* ConfigNavigationEvent::mutable_drop() {
  set_has_drop();
  // @@protoc_insertion_point(field_mutable:db.ConfigNavigationEvent.drop)
  return drop_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigNavigationEvent::release_drop() {
  // @@protoc_insertion_point(field_release:db.ConfigNavigationEvent.drop)
  if (!has_drop()) {
    return NULL;
  }
  clear_has_drop();
  return drop_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::set_allocated_drop(::std::string* drop) {
  if (drop != NULL) {
    set_has_drop();
  } else {
    clear_has_drop();
  }
  drop_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigNavigationEvent.drop)
}
inline ::std::string* ConfigNavigationEvent::unsafe_arena_release_drop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigNavigationEvent.drop)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop();
  return drop_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::unsafe_arena_set_allocated_drop(
    ::std::string* drop) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop != NULL) {
    set_has_drop();
  } else {
    clear_has_drop();
  }
  drop_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigNavigationEvent.drop)
}

// required bytes room_effect = 9;
inline bool ConfigNavigationEvent::has_room_effect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigNavigationEvent::set_has_room_effect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigNavigationEvent::clear_has_room_effect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigNavigationEvent::clear_room_effect() {
  room_effect_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_room_effect();
}
inline const ::std::string& ConfigNavigationEvent::room_effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.room_effect)
  return room_effect_.Get();
}
inline void ConfigNavigationEvent::set_room_effect(const ::std::string& value) {
  set_has_room_effect();
  room_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.room_effect)
}
#if LANG_CXX11
inline void ConfigNavigationEvent::set_room_effect(::std::string&& value) {
  set_has_room_effect();
  room_effect_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigNavigationEvent.room_effect)
}
#endif
inline void ConfigNavigationEvent::set_room_effect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_room_effect();
  room_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigNavigationEvent.room_effect)
}
inline void ConfigNavigationEvent::set_room_effect(const void* value,
    size_t size) {
  set_has_room_effect();
  room_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigNavigationEvent.room_effect)
}
inline ::std::string* ConfigNavigationEvent::mutable_room_effect() {
  set_has_room_effect();
  // @@protoc_insertion_point(field_mutable:db.ConfigNavigationEvent.room_effect)
  return room_effect_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigNavigationEvent::release_room_effect() {
  // @@protoc_insertion_point(field_release:db.ConfigNavigationEvent.room_effect)
  if (!has_room_effect()) {
    return NULL;
  }
  clear_has_room_effect();
  return room_effect_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::set_allocated_room_effect(::std::string* room_effect) {
  if (room_effect != NULL) {
    set_has_room_effect();
  } else {
    clear_has_room_effect();
  }
  room_effect_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_effect,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigNavigationEvent.room_effect)
}
inline ::std::string* ConfigNavigationEvent::unsafe_arena_release_room_effect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigNavigationEvent.room_effect)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_room_effect();
  return room_effect_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigNavigationEvent::unsafe_arena_set_allocated_room_effect(
    ::std::string* room_effect) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_effect != NULL) {
    set_has_room_effect();
  } else {
    clear_has_room_effect();
  }
  room_effect_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_effect, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigNavigationEvent.room_effect)
}

// required float probability = 10;
inline bool ConfigNavigationEvent::has_probability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigNavigationEvent::set_has_probability() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigNavigationEvent::clear_has_probability() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigNavigationEvent::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline float ConfigNavigationEvent::probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.probability)
  return probability_;
}
inline void ConfigNavigationEvent::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.probability)
}

// required int32 duration = 11;
inline bool ConfigNavigationEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigNavigationEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigNavigationEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigNavigationEvent::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 ConfigNavigationEvent::duration() const {
  // @@protoc_insertion_point(field_get:db.ConfigNavigationEvent.duration)
  return duration_;
}
inline void ConfigNavigationEvent::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigNavigationEvent.duration)
}

// -------------------------------------------------------------------

// ConfigDungeonAltar

// required int32 id = 1;
inline bool ConfigDungeonAltar::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigDungeonAltar::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigDungeonAltar::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigDungeonAltar::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigDungeonAltar::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.id)
  return id_;
}
inline void ConfigDungeonAltar::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.id)
}

// required bytes name = 2;
inline bool ConfigDungeonAltar::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDungeonAltar::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDungeonAltar::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDungeonAltar::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigDungeonAltar::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.name)
  return name_.Get();
}
inline void ConfigDungeonAltar::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.name)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.name)
}
#endif
inline void ConfigDungeonAltar::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.name)
}
inline void ConfigDungeonAltar::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.name)
}
inline ::std::string* ConfigDungeonAltar::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.name)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.name)
}

// required bytes repair_cost = 3;
inline bool ConfigDungeonAltar::has_repair_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDungeonAltar::set_has_repair_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDungeonAltar::clear_has_repair_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDungeonAltar::clear_repair_cost() {
  repair_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_repair_cost();
}
inline const ::std::string& ConfigDungeonAltar::repair_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.repair_cost)
  return repair_cost_.Get();
}
inline void ConfigDungeonAltar::set_repair_cost(const ::std::string& value) {
  set_has_repair_cost();
  repair_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.repair_cost)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_repair_cost(::std::string&& value) {
  set_has_repair_cost();
  repair_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.repair_cost)
}
#endif
inline void ConfigDungeonAltar::set_repair_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_repair_cost();
  repair_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.repair_cost)
}
inline void ConfigDungeonAltar::set_repair_cost(const void* value,
    size_t size) {
  set_has_repair_cost();
  repair_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.repair_cost)
}
inline ::std::string* ConfigDungeonAltar::mutable_repair_cost() {
  set_has_repair_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.repair_cost)
  return repair_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_repair_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.repair_cost)
  if (!has_repair_cost()) {
    return NULL;
  }
  clear_has_repair_cost();
  return repair_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_repair_cost(::std::string* repair_cost) {
  if (repair_cost != NULL) {
    set_has_repair_cost();
  } else {
    clear_has_repair_cost();
  }
  repair_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repair_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.repair_cost)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_repair_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.repair_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_repair_cost();
  return repair_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_repair_cost(
    ::std::string* repair_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (repair_cost != NULL) {
    set_has_repair_cost();
  } else {
    clear_has_repair_cost();
  }
  repair_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      repair_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.repair_cost)
}

// required bytes destory_cost = 4;
inline bool ConfigDungeonAltar::has_destory_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDungeonAltar::set_has_destory_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDungeonAltar::clear_has_destory_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDungeonAltar::clear_destory_cost() {
  destory_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_destory_cost();
}
inline const ::std::string& ConfigDungeonAltar::destory_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.destory_cost)
  return destory_cost_.Get();
}
inline void ConfigDungeonAltar::set_destory_cost(const ::std::string& value) {
  set_has_destory_cost();
  destory_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.destory_cost)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_destory_cost(::std::string&& value) {
  set_has_destory_cost();
  destory_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.destory_cost)
}
#endif
inline void ConfigDungeonAltar::set_destory_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_destory_cost();
  destory_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.destory_cost)
}
inline void ConfigDungeonAltar::set_destory_cost(const void* value,
    size_t size) {
  set_has_destory_cost();
  destory_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.destory_cost)
}
inline ::std::string* ConfigDungeonAltar::mutable_destory_cost() {
  set_has_destory_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.destory_cost)
  return destory_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_destory_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.destory_cost)
  if (!has_destory_cost()) {
    return NULL;
  }
  clear_has_destory_cost();
  return destory_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_destory_cost(::std::string* destory_cost) {
  if (destory_cost != NULL) {
    set_has_destory_cost();
  } else {
    clear_has_destory_cost();
  }
  destory_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destory_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.destory_cost)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_destory_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.destory_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_destory_cost();
  return destory_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_destory_cost(
    ::std::string* destory_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (destory_cost != NULL) {
    set_has_destory_cost();
  } else {
    clear_has_destory_cost();
  }
  destory_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      destory_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.destory_cost)
}

// required bytes drop = 5;
inline bool ConfigDungeonAltar::has_drop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigDungeonAltar::set_has_drop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigDungeonAltar::clear_has_drop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigDungeonAltar::clear_drop() {
  drop_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop();
}
inline const ::std::string& ConfigDungeonAltar::drop() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.drop)
  return drop_.Get();
}
inline void ConfigDungeonAltar::set_drop(const ::std::string& value) {
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.drop)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_drop(::std::string&& value) {
  set_has_drop();
  drop_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.drop)
}
#endif
inline void ConfigDungeonAltar::set_drop(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.drop)
}
inline void ConfigDungeonAltar::set_drop(const void* value,
    size_t size) {
  set_has_drop();
  drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.drop)
}
inline ::std::string* ConfigDungeonAltar::mutable_drop() {
  set_has_drop();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.drop)
  return drop_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_drop() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.drop)
  if (!has_drop()) {
    return NULL;
  }
  clear_has_drop();
  return drop_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_drop(::std::string* drop) {
  if (drop != NULL) {
    set_has_drop();
  } else {
    clear_has_drop();
  }
  drop_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.drop)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_drop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.drop)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop();
  return drop_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_drop(
    ::std::string* drop) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop != NULL) {
    set_has_drop();
  } else {
    clear_has_drop();
  }
  drop_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.drop)
}

// required int32 adjunct = 6;
inline bool ConfigDungeonAltar::has_adjunct() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigDungeonAltar::set_has_adjunct() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigDungeonAltar::clear_has_adjunct() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigDungeonAltar::clear_adjunct() {
  adjunct_ = 0;
  clear_has_adjunct();
}
inline ::google::protobuf::int32 ConfigDungeonAltar::adjunct() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.adjunct)
  return adjunct_;
}
inline void ConfigDungeonAltar::set_adjunct(::google::protobuf::int32 value) {
  set_has_adjunct();
  adjunct_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.adjunct)
}

// required int32 adjunct_type = 7;
inline bool ConfigDungeonAltar::has_adjunct_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigDungeonAltar::set_has_adjunct_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigDungeonAltar::clear_has_adjunct_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigDungeonAltar::clear_adjunct_type() {
  adjunct_type_ = 0;
  clear_has_adjunct_type();
}
inline ::google::protobuf::int32 ConfigDungeonAltar::adjunct_type() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.adjunct_type)
  return adjunct_type_;
}
inline void ConfigDungeonAltar::set_adjunct_type(::google::protobuf::int32 value) {
  set_has_adjunct_type();
  adjunct_type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.adjunct_type)
}

// required bytes adjunct_skill = 8;
inline bool ConfigDungeonAltar::has_adjunct_skill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigDungeonAltar::set_has_adjunct_skill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigDungeonAltar::clear_has_adjunct_skill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigDungeonAltar::clear_adjunct_skill() {
  adjunct_skill_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_adjunct_skill();
}
inline const ::std::string& ConfigDungeonAltar::adjunct_skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.adjunct_skill)
  return adjunct_skill_.Get();
}
inline void ConfigDungeonAltar::set_adjunct_skill(const ::std::string& value) {
  set_has_adjunct_skill();
  adjunct_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.adjunct_skill)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_adjunct_skill(::std::string&& value) {
  set_has_adjunct_skill();
  adjunct_skill_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.adjunct_skill)
}
#endif
inline void ConfigDungeonAltar::set_adjunct_skill(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adjunct_skill();
  adjunct_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.adjunct_skill)
}
inline void ConfigDungeonAltar::set_adjunct_skill(const void* value,
    size_t size) {
  set_has_adjunct_skill();
  adjunct_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.adjunct_skill)
}
inline ::std::string* ConfigDungeonAltar::mutable_adjunct_skill() {
  set_has_adjunct_skill();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.adjunct_skill)
  return adjunct_skill_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_adjunct_skill() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.adjunct_skill)
  if (!has_adjunct_skill()) {
    return NULL;
  }
  clear_has_adjunct_skill();
  return adjunct_skill_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_adjunct_skill(::std::string* adjunct_skill) {
  if (adjunct_skill != NULL) {
    set_has_adjunct_skill();
  } else {
    clear_has_adjunct_skill();
  }
  adjunct_skill_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adjunct_skill,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.adjunct_skill)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_adjunct_skill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.adjunct_skill)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_adjunct_skill();
  return adjunct_skill_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_adjunct_skill(
    ::std::string* adjunct_skill) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (adjunct_skill != NULL) {
    set_has_adjunct_skill();
  } else {
    clear_has_adjunct_skill();
  }
  adjunct_skill_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      adjunct_skill, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.adjunct_skill)
}

// required bytes adjunct_level_up_cost = 9;
inline bool ConfigDungeonAltar::has_adjunct_level_up_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigDungeonAltar::set_has_adjunct_level_up_cost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigDungeonAltar::clear_has_adjunct_level_up_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigDungeonAltar::clear_adjunct_level_up_cost() {
  adjunct_level_up_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_adjunct_level_up_cost();
}
inline const ::std::string& ConfigDungeonAltar::adjunct_level_up_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.adjunct_level_up_cost)
  return adjunct_level_up_cost_.Get();
}
inline void ConfigDungeonAltar::set_adjunct_level_up_cost(const ::std::string& value) {
  set_has_adjunct_level_up_cost();
  adjunct_level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.adjunct_level_up_cost)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_adjunct_level_up_cost(::std::string&& value) {
  set_has_adjunct_level_up_cost();
  adjunct_level_up_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.adjunct_level_up_cost)
}
#endif
inline void ConfigDungeonAltar::set_adjunct_level_up_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adjunct_level_up_cost();
  adjunct_level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.adjunct_level_up_cost)
}
inline void ConfigDungeonAltar::set_adjunct_level_up_cost(const void* value,
    size_t size) {
  set_has_adjunct_level_up_cost();
  adjunct_level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.adjunct_level_up_cost)
}
inline ::std::string* ConfigDungeonAltar::mutable_adjunct_level_up_cost() {
  set_has_adjunct_level_up_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.adjunct_level_up_cost)
  return adjunct_level_up_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_adjunct_level_up_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.adjunct_level_up_cost)
  if (!has_adjunct_level_up_cost()) {
    return NULL;
  }
  clear_has_adjunct_level_up_cost();
  return adjunct_level_up_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_adjunct_level_up_cost(::std::string* adjunct_level_up_cost) {
  if (adjunct_level_up_cost != NULL) {
    set_has_adjunct_level_up_cost();
  } else {
    clear_has_adjunct_level_up_cost();
  }
  adjunct_level_up_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adjunct_level_up_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.adjunct_level_up_cost)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_adjunct_level_up_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.adjunct_level_up_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_adjunct_level_up_cost();
  return adjunct_level_up_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_adjunct_level_up_cost(
    ::std::string* adjunct_level_up_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (adjunct_level_up_cost != NULL) {
    set_has_adjunct_level_up_cost();
  } else {
    clear_has_adjunct_level_up_cost();
  }
  adjunct_level_up_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      adjunct_level_up_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.adjunct_level_up_cost)
}

// required bytes adjunct_skill_up_cost = 10;
inline bool ConfigDungeonAltar::has_adjunct_skill_up_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigDungeonAltar::set_has_adjunct_skill_up_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigDungeonAltar::clear_has_adjunct_skill_up_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigDungeonAltar::clear_adjunct_skill_up_cost() {
  adjunct_skill_up_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_adjunct_skill_up_cost();
}
inline const ::std::string& ConfigDungeonAltar::adjunct_skill_up_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.adjunct_skill_up_cost)
  return adjunct_skill_up_cost_.Get();
}
inline void ConfigDungeonAltar::set_adjunct_skill_up_cost(const ::std::string& value) {
  set_has_adjunct_skill_up_cost();
  adjunct_skill_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.adjunct_skill_up_cost)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_adjunct_skill_up_cost(::std::string&& value) {
  set_has_adjunct_skill_up_cost();
  adjunct_skill_up_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.adjunct_skill_up_cost)
}
#endif
inline void ConfigDungeonAltar::set_adjunct_skill_up_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adjunct_skill_up_cost();
  adjunct_skill_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.adjunct_skill_up_cost)
}
inline void ConfigDungeonAltar::set_adjunct_skill_up_cost(const void* value,
    size_t size) {
  set_has_adjunct_skill_up_cost();
  adjunct_skill_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.adjunct_skill_up_cost)
}
inline ::std::string* ConfigDungeonAltar::mutable_adjunct_skill_up_cost() {
  set_has_adjunct_skill_up_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.adjunct_skill_up_cost)
  return adjunct_skill_up_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_adjunct_skill_up_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.adjunct_skill_up_cost)
  if (!has_adjunct_skill_up_cost()) {
    return NULL;
  }
  clear_has_adjunct_skill_up_cost();
  return adjunct_skill_up_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_adjunct_skill_up_cost(::std::string* adjunct_skill_up_cost) {
  if (adjunct_skill_up_cost != NULL) {
    set_has_adjunct_skill_up_cost();
  } else {
    clear_has_adjunct_skill_up_cost();
  }
  adjunct_skill_up_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adjunct_skill_up_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.adjunct_skill_up_cost)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_adjunct_skill_up_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.adjunct_skill_up_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_adjunct_skill_up_cost();
  return adjunct_skill_up_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_adjunct_skill_up_cost(
    ::std::string* adjunct_skill_up_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (adjunct_skill_up_cost != NULL) {
    set_has_adjunct_skill_up_cost();
  } else {
    clear_has_adjunct_skill_up_cost();
  }
  adjunct_skill_up_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      adjunct_skill_up_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.adjunct_skill_up_cost)
}

// required bytes adjunct_revive_cost = 11;
inline bool ConfigDungeonAltar::has_adjunct_revive_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigDungeonAltar::set_has_adjunct_revive_cost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigDungeonAltar::clear_has_adjunct_revive_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigDungeonAltar::clear_adjunct_revive_cost() {
  adjunct_revive_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_adjunct_revive_cost();
}
inline const ::std::string& ConfigDungeonAltar::adjunct_revive_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.adjunct_revive_cost)
  return adjunct_revive_cost_.Get();
}
inline void ConfigDungeonAltar::set_adjunct_revive_cost(const ::std::string& value) {
  set_has_adjunct_revive_cost();
  adjunct_revive_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.adjunct_revive_cost)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_adjunct_revive_cost(::std::string&& value) {
  set_has_adjunct_revive_cost();
  adjunct_revive_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.adjunct_revive_cost)
}
#endif
inline void ConfigDungeonAltar::set_adjunct_revive_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adjunct_revive_cost();
  adjunct_revive_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.adjunct_revive_cost)
}
inline void ConfigDungeonAltar::set_adjunct_revive_cost(const void* value,
    size_t size) {
  set_has_adjunct_revive_cost();
  adjunct_revive_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.adjunct_revive_cost)
}
inline ::std::string* ConfigDungeonAltar::mutable_adjunct_revive_cost() {
  set_has_adjunct_revive_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.adjunct_revive_cost)
  return adjunct_revive_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_adjunct_revive_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.adjunct_revive_cost)
  if (!has_adjunct_revive_cost()) {
    return NULL;
  }
  clear_has_adjunct_revive_cost();
  return adjunct_revive_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_adjunct_revive_cost(::std::string* adjunct_revive_cost) {
  if (adjunct_revive_cost != NULL) {
    set_has_adjunct_revive_cost();
  } else {
    clear_has_adjunct_revive_cost();
  }
  adjunct_revive_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adjunct_revive_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.adjunct_revive_cost)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_adjunct_revive_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.adjunct_revive_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_adjunct_revive_cost();
  return adjunct_revive_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_adjunct_revive_cost(
    ::std::string* adjunct_revive_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (adjunct_revive_cost != NULL) {
    set_has_adjunct_revive_cost();
  } else {
    clear_has_adjunct_revive_cost();
  }
  adjunct_revive_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      adjunct_revive_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.adjunct_revive_cost)
}

// required bytes adjunct_cure_cost = 12;
inline bool ConfigDungeonAltar::has_adjunct_cure_cost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigDungeonAltar::set_has_adjunct_cure_cost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigDungeonAltar::clear_has_adjunct_cure_cost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigDungeonAltar::clear_adjunct_cure_cost() {
  adjunct_cure_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_adjunct_cure_cost();
}
inline const ::std::string& ConfigDungeonAltar::adjunct_cure_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.adjunct_cure_cost)
  return adjunct_cure_cost_.Get();
}
inline void ConfigDungeonAltar::set_adjunct_cure_cost(const ::std::string& value) {
  set_has_adjunct_cure_cost();
  adjunct_cure_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.adjunct_cure_cost)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_adjunct_cure_cost(::std::string&& value) {
  set_has_adjunct_cure_cost();
  adjunct_cure_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.adjunct_cure_cost)
}
#endif
inline void ConfigDungeonAltar::set_adjunct_cure_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adjunct_cure_cost();
  adjunct_cure_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.adjunct_cure_cost)
}
inline void ConfigDungeonAltar::set_adjunct_cure_cost(const void* value,
    size_t size) {
  set_has_adjunct_cure_cost();
  adjunct_cure_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.adjunct_cure_cost)
}
inline ::std::string* ConfigDungeonAltar::mutable_adjunct_cure_cost() {
  set_has_adjunct_cure_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.adjunct_cure_cost)
  return adjunct_cure_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_adjunct_cure_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.adjunct_cure_cost)
  if (!has_adjunct_cure_cost()) {
    return NULL;
  }
  clear_has_adjunct_cure_cost();
  return adjunct_cure_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_adjunct_cure_cost(::std::string* adjunct_cure_cost) {
  if (adjunct_cure_cost != NULL) {
    set_has_adjunct_cure_cost();
  } else {
    clear_has_adjunct_cure_cost();
  }
  adjunct_cure_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adjunct_cure_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.adjunct_cure_cost)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_adjunct_cure_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.adjunct_cure_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_adjunct_cure_cost();
  return adjunct_cure_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_adjunct_cure_cost(
    ::std::string* adjunct_cure_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (adjunct_cure_cost != NULL) {
    set_has_adjunct_cure_cost();
  } else {
    clear_has_adjunct_cure_cost();
  }
  adjunct_cure_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      adjunct_cure_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.adjunct_cure_cost)
}

// required bytes special_skill = 13;
inline bool ConfigDungeonAltar::has_special_skill() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigDungeonAltar::set_has_special_skill() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigDungeonAltar::clear_has_special_skill() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigDungeonAltar::clear_special_skill() {
  special_skill_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_special_skill();
}
inline const ::std::string& ConfigDungeonAltar::special_skill() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonAltar.special_skill)
  return special_skill_.Get();
}
inline void ConfigDungeonAltar::set_special_skill(const ::std::string& value) {
  set_has_special_skill();
  special_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonAltar.special_skill)
}
#if LANG_CXX11
inline void ConfigDungeonAltar::set_special_skill(::std::string&& value) {
  set_has_special_skill();
  special_skill_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonAltar.special_skill)
}
#endif
inline void ConfigDungeonAltar::set_special_skill(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_special_skill();
  special_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonAltar.special_skill)
}
inline void ConfigDungeonAltar::set_special_skill(const void* value,
    size_t size) {
  set_has_special_skill();
  special_skill_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonAltar.special_skill)
}
inline ::std::string* ConfigDungeonAltar::mutable_special_skill() {
  set_has_special_skill();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonAltar.special_skill)
  return special_skill_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonAltar::release_special_skill() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonAltar.special_skill)
  if (!has_special_skill()) {
    return NULL;
  }
  clear_has_special_skill();
  return special_skill_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::set_allocated_special_skill(::std::string* special_skill) {
  if (special_skill != NULL) {
    set_has_special_skill();
  } else {
    clear_has_special_skill();
  }
  special_skill_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), special_skill,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonAltar.special_skill)
}
inline ::std::string* ConfigDungeonAltar::unsafe_arena_release_special_skill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonAltar.special_skill)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_special_skill();
  return special_skill_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonAltar::unsafe_arena_set_allocated_special_skill(
    ::std::string* special_skill) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (special_skill != NULL) {
    set_has_special_skill();
  } else {
    clear_has_special_skill();
  }
  special_skill_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      special_skill, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonAltar.special_skill)
}

// -------------------------------------------------------------------

// ConfigRobot

// required int32 level = 1;
inline bool ConfigRobot::has_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigRobot::set_has_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigRobot::clear_has_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigRobot::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigRobot::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.level)
  return level_;
}
inline void ConfigRobot::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRobot.level)
}

// required int32 num = 2;
inline bool ConfigRobot::has_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigRobot::set_has_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigRobot::clear_has_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigRobot::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ConfigRobot::num() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.num)
  return num_;
}
inline void ConfigRobot::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRobot.num)
}

// required bytes score = 3;
inline bool ConfigRobot::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRobot::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRobot::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRobot::clear_score() {
  score_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_score();
}
inline const ::std::string& ConfigRobot::score() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.score)
  return score_.Get();
}
inline void ConfigRobot::set_score(const ::std::string& value) {
  set_has_score();
  score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.score)
}
#if LANG_CXX11
inline void ConfigRobot::set_score(::std::string&& value) {
  set_has_score();
  score_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.score)
}
#endif
inline void ConfigRobot::set_score(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_score();
  score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.score)
}
inline void ConfigRobot::set_score(const void* value,
    size_t size) {
  set_has_score();
  score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.score)
}
inline ::std::string* ConfigRobot::mutable_score() {
  set_has_score();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.score)
  return score_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_score() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.score)
  if (!has_score()) {
    return NULL;
  }
  clear_has_score();
  return score_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_score(::std::string* score) {
  if (score != NULL) {
    set_has_score();
  } else {
    clear_has_score();
  }
  score_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.score)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_score() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.score)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_score();
  return score_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_score(
    ::std::string* score) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (score != NULL) {
    set_has_score();
  } else {
    clear_has_score();
  }
  score_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      score, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.score)
}

// required bytes captain_level = 4;
inline bool ConfigRobot::has_captain_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRobot::set_has_captain_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRobot::clear_has_captain_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRobot::clear_captain_level() {
  captain_level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_captain_level();
}
inline const ::std::string& ConfigRobot::captain_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.captain_level)
  return captain_level_.Get();
}
inline void ConfigRobot::set_captain_level(const ::std::string& value) {
  set_has_captain_level();
  captain_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.captain_level)
}
#if LANG_CXX11
inline void ConfigRobot::set_captain_level(::std::string&& value) {
  set_has_captain_level();
  captain_level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.captain_level)
}
#endif
inline void ConfigRobot::set_captain_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captain_level();
  captain_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.captain_level)
}
inline void ConfigRobot::set_captain_level(const void* value,
    size_t size) {
  set_has_captain_level();
  captain_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.captain_level)
}
inline ::std::string* ConfigRobot::mutable_captain_level() {
  set_has_captain_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.captain_level)
  return captain_level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_captain_level() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.captain_level)
  if (!has_captain_level()) {
    return NULL;
  }
  clear_has_captain_level();
  return captain_level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_captain_level(::std::string* captain_level) {
  if (captain_level != NULL) {
    set_has_captain_level();
  } else {
    clear_has_captain_level();
  }
  captain_level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captain_level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.captain_level)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_captain_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.captain_level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_captain_level();
  return captain_level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_captain_level(
    ::std::string* captain_level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (captain_level != NULL) {
    set_has_captain_level();
  } else {
    clear_has_captain_level();
  }
  captain_level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      captain_level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.captain_level)
}

// required bytes sailor_num_in_jjc = 5;
inline bool ConfigRobot::has_sailor_num_in_jjc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigRobot::set_has_sailor_num_in_jjc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigRobot::clear_has_sailor_num_in_jjc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigRobot::clear_sailor_num_in_jjc() {
  sailor_num_in_jjc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_sailor_num_in_jjc();
}
inline const ::std::string& ConfigRobot::sailor_num_in_jjc() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.sailor_num_in_jjc)
  return sailor_num_in_jjc_.Get();
}
inline void ConfigRobot::set_sailor_num_in_jjc(const ::std::string& value) {
  set_has_sailor_num_in_jjc();
  sailor_num_in_jjc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.sailor_num_in_jjc)
}
#if LANG_CXX11
inline void ConfigRobot::set_sailor_num_in_jjc(::std::string&& value) {
  set_has_sailor_num_in_jjc();
  sailor_num_in_jjc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.sailor_num_in_jjc)
}
#endif
inline void ConfigRobot::set_sailor_num_in_jjc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sailor_num_in_jjc();
  sailor_num_in_jjc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.sailor_num_in_jjc)
}
inline void ConfigRobot::set_sailor_num_in_jjc(const void* value,
    size_t size) {
  set_has_sailor_num_in_jjc();
  sailor_num_in_jjc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.sailor_num_in_jjc)
}
inline ::std::string* ConfigRobot::mutable_sailor_num_in_jjc() {
  set_has_sailor_num_in_jjc();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.sailor_num_in_jjc)
  return sailor_num_in_jjc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_sailor_num_in_jjc() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.sailor_num_in_jjc)
  if (!has_sailor_num_in_jjc()) {
    return NULL;
  }
  clear_has_sailor_num_in_jjc();
  return sailor_num_in_jjc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_sailor_num_in_jjc(::std::string* sailor_num_in_jjc) {
  if (sailor_num_in_jjc != NULL) {
    set_has_sailor_num_in_jjc();
  } else {
    clear_has_sailor_num_in_jjc();
  }
  sailor_num_in_jjc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sailor_num_in_jjc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.sailor_num_in_jjc)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_sailor_num_in_jjc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.sailor_num_in_jjc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_sailor_num_in_jjc();
  return sailor_num_in_jjc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_sailor_num_in_jjc(
    ::std::string* sailor_num_in_jjc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sailor_num_in_jjc != NULL) {
    set_has_sailor_num_in_jjc();
  } else {
    clear_has_sailor_num_in_jjc();
  }
  sailor_num_in_jjc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sailor_num_in_jjc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.sailor_num_in_jjc)
}

// required bytes sailor_in_jjc = 6;
inline bool ConfigRobot::has_sailor_in_jjc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigRobot::set_has_sailor_in_jjc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigRobot::clear_has_sailor_in_jjc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigRobot::clear_sailor_in_jjc() {
  sailor_in_jjc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_sailor_in_jjc();
}
inline const ::std::string& ConfigRobot::sailor_in_jjc() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.sailor_in_jjc)
  return sailor_in_jjc_.Get();
}
inline void ConfigRobot::set_sailor_in_jjc(const ::std::string& value) {
  set_has_sailor_in_jjc();
  sailor_in_jjc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.sailor_in_jjc)
}
#if LANG_CXX11
inline void ConfigRobot::set_sailor_in_jjc(::std::string&& value) {
  set_has_sailor_in_jjc();
  sailor_in_jjc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.sailor_in_jjc)
}
#endif
inline void ConfigRobot::set_sailor_in_jjc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sailor_in_jjc();
  sailor_in_jjc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.sailor_in_jjc)
}
inline void ConfigRobot::set_sailor_in_jjc(const void* value,
    size_t size) {
  set_has_sailor_in_jjc();
  sailor_in_jjc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.sailor_in_jjc)
}
inline ::std::string* ConfigRobot::mutable_sailor_in_jjc() {
  set_has_sailor_in_jjc();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.sailor_in_jjc)
  return sailor_in_jjc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_sailor_in_jjc() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.sailor_in_jjc)
  if (!has_sailor_in_jjc()) {
    return NULL;
  }
  clear_has_sailor_in_jjc();
  return sailor_in_jjc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_sailor_in_jjc(::std::string* sailor_in_jjc) {
  if (sailor_in_jjc != NULL) {
    set_has_sailor_in_jjc();
  } else {
    clear_has_sailor_in_jjc();
  }
  sailor_in_jjc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sailor_in_jjc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.sailor_in_jjc)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_sailor_in_jjc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.sailor_in_jjc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_sailor_in_jjc();
  return sailor_in_jjc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_sailor_in_jjc(
    ::std::string* sailor_in_jjc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sailor_in_jjc != NULL) {
    set_has_sailor_in_jjc();
  } else {
    clear_has_sailor_in_jjc();
  }
  sailor_in_jjc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sailor_in_jjc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.sailor_in_jjc)
}

// required bytes sailor_level = 7;
inline bool ConfigRobot::has_sailor_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigRobot::set_has_sailor_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigRobot::clear_has_sailor_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigRobot::clear_sailor_level() {
  sailor_level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_sailor_level();
}
inline const ::std::string& ConfigRobot::sailor_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.sailor_level)
  return sailor_level_.Get();
}
inline void ConfigRobot::set_sailor_level(const ::std::string& value) {
  set_has_sailor_level();
  sailor_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.sailor_level)
}
#if LANG_CXX11
inline void ConfigRobot::set_sailor_level(::std::string&& value) {
  set_has_sailor_level();
  sailor_level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.sailor_level)
}
#endif
inline void ConfigRobot::set_sailor_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sailor_level();
  sailor_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.sailor_level)
}
inline void ConfigRobot::set_sailor_level(const void* value,
    size_t size) {
  set_has_sailor_level();
  sailor_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.sailor_level)
}
inline ::std::string* ConfigRobot::mutable_sailor_level() {
  set_has_sailor_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.sailor_level)
  return sailor_level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_sailor_level() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.sailor_level)
  if (!has_sailor_level()) {
    return NULL;
  }
  clear_has_sailor_level();
  return sailor_level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_sailor_level(::std::string* sailor_level) {
  if (sailor_level != NULL) {
    set_has_sailor_level();
  } else {
    clear_has_sailor_level();
  }
  sailor_level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sailor_level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.sailor_level)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_sailor_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.sailor_level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_sailor_level();
  return sailor_level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_sailor_level(
    ::std::string* sailor_level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sailor_level != NULL) {
    set_has_sailor_level();
  } else {
    clear_has_sailor_level();
  }
  sailor_level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sailor_level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.sailor_level)
}

// required bytes sailor_star = 8;
inline bool ConfigRobot::has_sailor_star() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigRobot::set_has_sailor_star() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigRobot::clear_has_sailor_star() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigRobot::clear_sailor_star() {
  sailor_star_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_sailor_star();
}
inline const ::std::string& ConfigRobot::sailor_star() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.sailor_star)
  return sailor_star_.Get();
}
inline void ConfigRobot::set_sailor_star(const ::std::string& value) {
  set_has_sailor_star();
  sailor_star_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.sailor_star)
}
#if LANG_CXX11
inline void ConfigRobot::set_sailor_star(::std::string&& value) {
  set_has_sailor_star();
  sailor_star_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.sailor_star)
}
#endif
inline void ConfigRobot::set_sailor_star(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sailor_star();
  sailor_star_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.sailor_star)
}
inline void ConfigRobot::set_sailor_star(const void* value,
    size_t size) {
  set_has_sailor_star();
  sailor_star_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.sailor_star)
}
inline ::std::string* ConfigRobot::mutable_sailor_star() {
  set_has_sailor_star();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.sailor_star)
  return sailor_star_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_sailor_star() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.sailor_star)
  if (!has_sailor_star()) {
    return NULL;
  }
  clear_has_sailor_star();
  return sailor_star_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_sailor_star(::std::string* sailor_star) {
  if (sailor_star != NULL) {
    set_has_sailor_star();
  } else {
    clear_has_sailor_star();
  }
  sailor_star_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sailor_star,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.sailor_star)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_sailor_star() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.sailor_star)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_sailor_star();
  return sailor_star_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_sailor_star(
    ::std::string* sailor_star) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sailor_star != NULL) {
    set_has_sailor_star();
  } else {
    clear_has_sailor_star();
  }
  sailor_star_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sailor_star, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.sailor_star)
}

// required bytes ship_model = 9;
inline bool ConfigRobot::has_ship_model() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigRobot::set_has_ship_model() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigRobot::clear_has_ship_model() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigRobot::clear_ship_model() {
  ship_model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ship_model();
}
inline const ::std::string& ConfigRobot::ship_model() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.ship_model)
  return ship_model_.Get();
}
inline void ConfigRobot::set_ship_model(const ::std::string& value) {
  set_has_ship_model();
  ship_model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.ship_model)
}
#if LANG_CXX11
inline void ConfigRobot::set_ship_model(::std::string&& value) {
  set_has_ship_model();
  ship_model_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.ship_model)
}
#endif
inline void ConfigRobot::set_ship_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ship_model();
  ship_model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.ship_model)
}
inline void ConfigRobot::set_ship_model(const void* value,
    size_t size) {
  set_has_ship_model();
  ship_model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.ship_model)
}
inline ::std::string* ConfigRobot::mutable_ship_model() {
  set_has_ship_model();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.ship_model)
  return ship_model_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_ship_model() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.ship_model)
  if (!has_ship_model()) {
    return NULL;
  }
  clear_has_ship_model();
  return ship_model_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_ship_model(::std::string* ship_model) {
  if (ship_model != NULL) {
    set_has_ship_model();
  } else {
    clear_has_ship_model();
  }
  ship_model_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ship_model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.ship_model)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_ship_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.ship_model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ship_model();
  return ship_model_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_ship_model(
    ::std::string* ship_model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ship_model != NULL) {
    set_has_ship_model();
  } else {
    clear_has_ship_model();
  }
  ship_model_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ship_model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.ship_model)
}

// required bytes sailor_practice = 10;
inline bool ConfigRobot::has_sailor_practice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigRobot::set_has_sailor_practice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigRobot::clear_has_sailor_practice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigRobot::clear_sailor_practice() {
  sailor_practice_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_sailor_practice();
}
inline const ::std::string& ConfigRobot::sailor_practice() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.sailor_practice)
  return sailor_practice_.Get();
}
inline void ConfigRobot::set_sailor_practice(const ::std::string& value) {
  set_has_sailor_practice();
  sailor_practice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.sailor_practice)
}
#if LANG_CXX11
inline void ConfigRobot::set_sailor_practice(::std::string&& value) {
  set_has_sailor_practice();
  sailor_practice_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.sailor_practice)
}
#endif
inline void ConfigRobot::set_sailor_practice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sailor_practice();
  sailor_practice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.sailor_practice)
}
inline void ConfigRobot::set_sailor_practice(const void* value,
    size_t size) {
  set_has_sailor_practice();
  sailor_practice_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.sailor_practice)
}
inline ::std::string* ConfigRobot::mutable_sailor_practice() {
  set_has_sailor_practice();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.sailor_practice)
  return sailor_practice_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_sailor_practice() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.sailor_practice)
  if (!has_sailor_practice()) {
    return NULL;
  }
  clear_has_sailor_practice();
  return sailor_practice_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_sailor_practice(::std::string* sailor_practice) {
  if (sailor_practice != NULL) {
    set_has_sailor_practice();
  } else {
    clear_has_sailor_practice();
  }
  sailor_practice_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sailor_practice,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.sailor_practice)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_sailor_practice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.sailor_practice)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_sailor_practice();
  return sailor_practice_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_sailor_practice(
    ::std::string* sailor_practice) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sailor_practice != NULL) {
    set_has_sailor_practice();
  } else {
    clear_has_sailor_practice();
  }
  sailor_practice_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sailor_practice, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.sailor_practice)
}

// required bytes sailor_num_in_ship = 11;
inline bool ConfigRobot::has_sailor_num_in_ship() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigRobot::set_has_sailor_num_in_ship() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigRobot::clear_has_sailor_num_in_ship() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigRobot::clear_sailor_num_in_ship() {
  sailor_num_in_ship_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_sailor_num_in_ship();
}
inline const ::std::string& ConfigRobot::sailor_num_in_ship() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.sailor_num_in_ship)
  return sailor_num_in_ship_.Get();
}
inline void ConfigRobot::set_sailor_num_in_ship(const ::std::string& value) {
  set_has_sailor_num_in_ship();
  sailor_num_in_ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.sailor_num_in_ship)
}
#if LANG_CXX11
inline void ConfigRobot::set_sailor_num_in_ship(::std::string&& value) {
  set_has_sailor_num_in_ship();
  sailor_num_in_ship_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.sailor_num_in_ship)
}
#endif
inline void ConfigRobot::set_sailor_num_in_ship(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sailor_num_in_ship();
  sailor_num_in_ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.sailor_num_in_ship)
}
inline void ConfigRobot::set_sailor_num_in_ship(const void* value,
    size_t size) {
  set_has_sailor_num_in_ship();
  sailor_num_in_ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.sailor_num_in_ship)
}
inline ::std::string* ConfigRobot::mutable_sailor_num_in_ship() {
  set_has_sailor_num_in_ship();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.sailor_num_in_ship)
  return sailor_num_in_ship_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_sailor_num_in_ship() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.sailor_num_in_ship)
  if (!has_sailor_num_in_ship()) {
    return NULL;
  }
  clear_has_sailor_num_in_ship();
  return sailor_num_in_ship_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_sailor_num_in_ship(::std::string* sailor_num_in_ship) {
  if (sailor_num_in_ship != NULL) {
    set_has_sailor_num_in_ship();
  } else {
    clear_has_sailor_num_in_ship();
  }
  sailor_num_in_ship_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sailor_num_in_ship,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.sailor_num_in_ship)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_sailor_num_in_ship() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.sailor_num_in_ship)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_sailor_num_in_ship();
  return sailor_num_in_ship_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_sailor_num_in_ship(
    ::std::string* sailor_num_in_ship) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sailor_num_in_ship != NULL) {
    set_has_sailor_num_in_ship();
  } else {
    clear_has_sailor_num_in_ship();
  }
  sailor_num_in_ship_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sailor_num_in_ship, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.sailor_num_in_ship)
}

// required bytes sailor_in_ship = 12;
inline bool ConfigRobot::has_sailor_in_ship() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigRobot::set_has_sailor_in_ship() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigRobot::clear_has_sailor_in_ship() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigRobot::clear_sailor_in_ship() {
  sailor_in_ship_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_sailor_in_ship();
}
inline const ::std::string& ConfigRobot::sailor_in_ship() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.sailor_in_ship)
  return sailor_in_ship_.Get();
}
inline void ConfigRobot::set_sailor_in_ship(const ::std::string& value) {
  set_has_sailor_in_ship();
  sailor_in_ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.sailor_in_ship)
}
#if LANG_CXX11
inline void ConfigRobot::set_sailor_in_ship(::std::string&& value) {
  set_has_sailor_in_ship();
  sailor_in_ship_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.sailor_in_ship)
}
#endif
inline void ConfigRobot::set_sailor_in_ship(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sailor_in_ship();
  sailor_in_ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.sailor_in_ship)
}
inline void ConfigRobot::set_sailor_in_ship(const void* value,
    size_t size) {
  set_has_sailor_in_ship();
  sailor_in_ship_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.sailor_in_ship)
}
inline ::std::string* ConfigRobot::mutable_sailor_in_ship() {
  set_has_sailor_in_ship();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.sailor_in_ship)
  return sailor_in_ship_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_sailor_in_ship() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.sailor_in_ship)
  if (!has_sailor_in_ship()) {
    return NULL;
  }
  clear_has_sailor_in_ship();
  return sailor_in_ship_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_sailor_in_ship(::std::string* sailor_in_ship) {
  if (sailor_in_ship != NULL) {
    set_has_sailor_in_ship();
  } else {
    clear_has_sailor_in_ship();
  }
  sailor_in_ship_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sailor_in_ship,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.sailor_in_ship)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_sailor_in_ship() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.sailor_in_ship)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_sailor_in_ship();
  return sailor_in_ship_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_sailor_in_ship(
    ::std::string* sailor_in_ship) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sailor_in_ship != NULL) {
    set_has_sailor_in_ship();
  } else {
    clear_has_sailor_in_ship();
  }
  sailor_in_ship_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sailor_in_ship, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.sailor_in_ship)
}

// required bytes equip_quality = 13;
inline bool ConfigRobot::has_equip_quality() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigRobot::set_has_equip_quality() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigRobot::clear_has_equip_quality() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigRobot::clear_equip_quality() {
  equip_quality_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_equip_quality();
}
inline const ::std::string& ConfigRobot::equip_quality() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.equip_quality)
  return equip_quality_.Get();
}
inline void ConfigRobot::set_equip_quality(const ::std::string& value) {
  set_has_equip_quality();
  equip_quality_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.equip_quality)
}
#if LANG_CXX11
inline void ConfigRobot::set_equip_quality(::std::string&& value) {
  set_has_equip_quality();
  equip_quality_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.equip_quality)
}
#endif
inline void ConfigRobot::set_equip_quality(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_equip_quality();
  equip_quality_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.equip_quality)
}
inline void ConfigRobot::set_equip_quality(const void* value,
    size_t size) {
  set_has_equip_quality();
  equip_quality_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.equip_quality)
}
inline ::std::string* ConfigRobot::mutable_equip_quality() {
  set_has_equip_quality();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.equip_quality)
  return equip_quality_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_equip_quality() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.equip_quality)
  if (!has_equip_quality()) {
    return NULL;
  }
  clear_has_equip_quality();
  return equip_quality_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_equip_quality(::std::string* equip_quality) {
  if (equip_quality != NULL) {
    set_has_equip_quality();
  } else {
    clear_has_equip_quality();
  }
  equip_quality_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), equip_quality,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.equip_quality)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_equip_quality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.equip_quality)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_equip_quality();
  return equip_quality_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_equip_quality(
    ::std::string* equip_quality) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (equip_quality != NULL) {
    set_has_equip_quality();
  } else {
    clear_has_equip_quality();
  }
  equip_quality_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      equip_quality, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.equip_quality)
}

// required bytes items = 14;
inline bool ConfigRobot::has_items() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigRobot::set_has_items() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigRobot::clear_has_items() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigRobot::clear_items() {
  items_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_items();
}
inline const ::std::string& ConfigRobot::items() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.items)
  return items_.Get();
}
inline void ConfigRobot::set_items(const ::std::string& value) {
  set_has_items();
  items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.items)
}
#if LANG_CXX11
inline void ConfigRobot::set_items(::std::string&& value) {
  set_has_items();
  items_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.items)
}
#endif
inline void ConfigRobot::set_items(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_items();
  items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.items)
}
inline void ConfigRobot::set_items(const void* value,
    size_t size) {
  set_has_items();
  items_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.items)
}
inline ::std::string* ConfigRobot::mutable_items() {
  set_has_items();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.items)
  return items_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_items() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.items)
  if (!has_items()) {
    return NULL;
  }
  clear_has_items();
  return items_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_items(::std::string* items) {
  if (items != NULL) {
    set_has_items();
  } else {
    clear_has_items();
  }
  items_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), items,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.items)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_items() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.items)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_items();
  return items_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_items(
    ::std::string* items) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (items != NULL) {
    set_has_items();
  } else {
    clear_has_items();
  }
  items_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      items, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.items)
}

// required bytes invade_score = 15;
inline bool ConfigRobot::has_invade_score() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigRobot::set_has_invade_score() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigRobot::clear_has_invade_score() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigRobot::clear_invade_score() {
  invade_score_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_invade_score();
}
inline const ::std::string& ConfigRobot::invade_score() const {
  // @@protoc_insertion_point(field_get:db.ConfigRobot.invade_score)
  return invade_score_.Get();
}
inline void ConfigRobot::set_invade_score(const ::std::string& value) {
  set_has_invade_score();
  invade_score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRobot.invade_score)
}
#if LANG_CXX11
inline void ConfigRobot::set_invade_score(::std::string&& value) {
  set_has_invade_score();
  invade_score_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRobot.invade_score)
}
#endif
inline void ConfigRobot::set_invade_score(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invade_score();
  invade_score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRobot.invade_score)
}
inline void ConfigRobot::set_invade_score(const void* value,
    size_t size) {
  set_has_invade_score();
  invade_score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRobot.invade_score)
}
inline ::std::string* ConfigRobot::mutable_invade_score() {
  set_has_invade_score();
  // @@protoc_insertion_point(field_mutable:db.ConfigRobot.invade_score)
  return invade_score_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRobot::release_invade_score() {
  // @@protoc_insertion_point(field_release:db.ConfigRobot.invade_score)
  if (!has_invade_score()) {
    return NULL;
  }
  clear_has_invade_score();
  return invade_score_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRobot::set_allocated_invade_score(::std::string* invade_score) {
  if (invade_score != NULL) {
    set_has_invade_score();
  } else {
    clear_has_invade_score();
  }
  invade_score_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invade_score,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRobot.invade_score)
}
inline ::std::string* ConfigRobot::unsafe_arena_release_invade_score() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRobot.invade_score)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_invade_score();
  return invade_score_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRobot::unsafe_arena_set_allocated_invade_score(
    ::std::string* invade_score) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (invade_score != NULL) {
    set_has_invade_score();
  } else {
    clear_has_invade_score();
  }
  invade_score_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      invade_score, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRobot.invade_score)
}

// -------------------------------------------------------------------

// ConfigBeacon

// required int32 level = 1;
inline bool ConfigBeacon::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigBeacon::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigBeacon::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigBeacon::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigBeacon::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeacon.level)
  return level_;
}
inline void ConfigBeacon::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBeacon.level)
}

// required bytes level_up_cost = 2;
inline bool ConfigBeacon::has_level_up_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigBeacon::set_has_level_up_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigBeacon::clear_has_level_up_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigBeacon::clear_level_up_cost() {
  level_up_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_level_up_cost();
}
inline const ::std::string& ConfigBeacon::level_up_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeacon.level_up_cost)
  return level_up_cost_.Get();
}
inline void ConfigBeacon::set_level_up_cost(const ::std::string& value) {
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeacon.level_up_cost)
}
#if LANG_CXX11
inline void ConfigBeacon::set_level_up_cost(::std::string&& value) {
  set_has_level_up_cost();
  level_up_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeacon.level_up_cost)
}
#endif
inline void ConfigBeacon::set_level_up_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeacon.level_up_cost)
}
inline void ConfigBeacon::set_level_up_cost(const void* value,
    size_t size) {
  set_has_level_up_cost();
  level_up_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeacon.level_up_cost)
}
inline ::std::string* ConfigBeacon::mutable_level_up_cost() {
  set_has_level_up_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeacon.level_up_cost)
  return level_up_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeacon::release_level_up_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigBeacon.level_up_cost)
  if (!has_level_up_cost()) {
    return NULL;
  }
  clear_has_level_up_cost();
  return level_up_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeacon::set_allocated_level_up_cost(::std::string* level_up_cost) {
  if (level_up_cost != NULL) {
    set_has_level_up_cost();
  } else {
    clear_has_level_up_cost();
  }
  level_up_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level_up_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeacon.level_up_cost)
}
inline ::std::string* ConfigBeacon::unsafe_arena_release_level_up_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeacon.level_up_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_level_up_cost();
  return level_up_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeacon::unsafe_arena_set_allocated_level_up_cost(
    ::std::string* level_up_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (level_up_cost != NULL) {
    set_has_level_up_cost();
  } else {
    clear_has_level_up_cost();
  }
  level_up_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      level_up_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeacon.level_up_cost)
}

// required int32 level_up_time = 3;
inline bool ConfigBeacon::has_level_up_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigBeacon::set_has_level_up_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigBeacon::clear_has_level_up_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigBeacon::clear_level_up_time() {
  level_up_time_ = 0;
  clear_has_level_up_time();
}
inline ::google::protobuf::int32 ConfigBeacon::level_up_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeacon.level_up_time)
  return level_up_time_;
}
inline void ConfigBeacon::set_level_up_time(::google::protobuf::int32 value) {
  set_has_level_up_time();
  level_up_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBeacon.level_up_time)
}

// required bytes explore_scope = 4;
inline bool ConfigBeacon::has_explore_scope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigBeacon::set_has_explore_scope() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigBeacon::clear_has_explore_scope() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigBeacon::clear_explore_scope() {
  explore_scope_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_explore_scope();
}
inline const ::std::string& ConfigBeacon::explore_scope() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeacon.explore_scope)
  return explore_scope_.Get();
}
inline void ConfigBeacon::set_explore_scope(const ::std::string& value) {
  set_has_explore_scope();
  explore_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeacon.explore_scope)
}
#if LANG_CXX11
inline void ConfigBeacon::set_explore_scope(::std::string&& value) {
  set_has_explore_scope();
  explore_scope_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeacon.explore_scope)
}
#endif
inline void ConfigBeacon::set_explore_scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_explore_scope();
  explore_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeacon.explore_scope)
}
inline void ConfigBeacon::set_explore_scope(const void* value,
    size_t size) {
  set_has_explore_scope();
  explore_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeacon.explore_scope)
}
inline ::std::string* ConfigBeacon::mutable_explore_scope() {
  set_has_explore_scope();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeacon.explore_scope)
  return explore_scope_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeacon::release_explore_scope() {
  // @@protoc_insertion_point(field_release:db.ConfigBeacon.explore_scope)
  if (!has_explore_scope()) {
    return NULL;
  }
  clear_has_explore_scope();
  return explore_scope_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeacon::set_allocated_explore_scope(::std::string* explore_scope) {
  if (explore_scope != NULL) {
    set_has_explore_scope();
  } else {
    clear_has_explore_scope();
  }
  explore_scope_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), explore_scope,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeacon.explore_scope)
}
inline ::std::string* ConfigBeacon::unsafe_arena_release_explore_scope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeacon.explore_scope)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_explore_scope();
  return explore_scope_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeacon::unsafe_arena_set_allocated_explore_scope(
    ::std::string* explore_scope) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (explore_scope != NULL) {
    set_has_explore_scope();
  } else {
    clear_has_explore_scope();
  }
  explore_scope_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      explore_scope, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeacon.explore_scope)
}

// -------------------------------------------------------------------

// ConfigMaelstromTile

// required int32 id = 1;
inline bool ConfigMaelstromTile::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigMaelstromTile::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigMaelstromTile::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigMaelstromTile::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigMaelstromTile::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromTile.id)
  return id_;
}
inline void ConfigMaelstromTile::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromTile.id)
}

// required bytes event = 2;
inline bool ConfigMaelstromTile::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigMaelstromTile::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigMaelstromTile::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigMaelstromTile::clear_event() {
  event_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_event();
}
inline const ::std::string& ConfigMaelstromTile::event() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromTile.event)
  return event_.Get();
}
inline void ConfigMaelstromTile::set_event(const ::std::string& value) {
  set_has_event();
  event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromTile.event)
}
#if LANG_CXX11
inline void ConfigMaelstromTile::set_event(::std::string&& value) {
  set_has_event();
  event_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstromTile.event)
}
#endif
inline void ConfigMaelstromTile::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event();
  event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstromTile.event)
}
inline void ConfigMaelstromTile::set_event(const void* value,
    size_t size) {
  set_has_event();
  event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstromTile.event)
}
inline ::std::string* ConfigMaelstromTile::mutable_event() {
  set_has_event();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstromTile.event)
  return event_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstromTile::release_event() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstromTile.event)
  if (!has_event()) {
    return NULL;
  }
  clear_has_event();
  return event_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstromTile::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    set_has_event();
  } else {
    clear_has_event();
  }
  event_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstromTile.event)
}
inline ::std::string* ConfigMaelstromTile::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstromTile.event)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_event();
  return event_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstromTile::unsafe_arena_set_allocated_event(
    ::std::string* event) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (event != NULL) {
    set_has_event();
  } else {
    clear_has_event();
  }
  event_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      event, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstromTile.event)
}

// required int32 oil_cost = 3;
inline bool ConfigMaelstromTile::has_oil_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigMaelstromTile::set_has_oil_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigMaelstromTile::clear_has_oil_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigMaelstromTile::clear_oil_cost() {
  oil_cost_ = 0;
  clear_has_oil_cost();
}
inline ::google::protobuf::int32 ConfigMaelstromTile::oil_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromTile.oil_cost)
  return oil_cost_;
}
inline void ConfigMaelstromTile::set_oil_cost(::google::protobuf::int32 value) {
  set_has_oil_cost();
  oil_cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromTile.oil_cost)
}

// required int32 event_num = 4;
inline bool ConfigMaelstromTile::has_event_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigMaelstromTile::set_has_event_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigMaelstromTile::clear_has_event_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigMaelstromTile::clear_event_num() {
  event_num_ = 0;
  clear_has_event_num();
}
inline ::google::protobuf::int32 ConfigMaelstromTile::event_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromTile.event_num)
  return event_num_;
}
inline void ConfigMaelstromTile::set_event_num(::google::protobuf::int32 value) {
  set_has_event_num();
  event_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromTile.event_num)
}

// -------------------------------------------------------------------

// ConfigMaelstrom

// required int32 id = 1;
inline bool ConfigMaelstrom::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigMaelstrom::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigMaelstrom::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigMaelstrom::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigMaelstrom::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.id)
  return id_;
}
inline void ConfigMaelstrom::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.id)
}

// required bytes map_size = 2;
inline bool ConfigMaelstrom::has_map_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigMaelstrom::set_has_map_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigMaelstrom::clear_has_map_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigMaelstrom::clear_map_size() {
  map_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_map_size();
}
inline const ::std::string& ConfigMaelstrom::map_size() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.map_size)
  return map_size_.Get();
}
inline void ConfigMaelstrom::set_map_size(const ::std::string& value) {
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.map_size)
}
#if LANG_CXX11
inline void ConfigMaelstrom::set_map_size(::std::string&& value) {
  set_has_map_size();
  map_size_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstrom.map_size)
}
#endif
inline void ConfigMaelstrom::set_map_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstrom.map_size)
}
inline void ConfigMaelstrom::set_map_size(const void* value,
    size_t size) {
  set_has_map_size();
  map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstrom.map_size)
}
inline ::std::string* ConfigMaelstrom::mutable_map_size() {
  set_has_map_size();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstrom.map_size)
  return map_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstrom::release_map_size() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstrom.map_size)
  if (!has_map_size()) {
    return NULL;
  }
  clear_has_map_size();
  return map_size_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstrom::set_allocated_map_size(::std::string* map_size) {
  if (map_size != NULL) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  map_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstrom.map_size)
}
inline ::std::string* ConfigMaelstrom::unsafe_arena_release_map_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstrom.map_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_map_size();
  return map_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstrom::unsafe_arena_set_allocated_map_size(
    ::std::string* map_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (map_size != NULL) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  map_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      map_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstrom.map_size)
}

// required bytes map = 3;
inline bool ConfigMaelstrom::has_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigMaelstrom::set_has_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigMaelstrom::clear_has_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigMaelstrom::clear_map() {
  map_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_map();
}
inline const ::std::string& ConfigMaelstrom::map() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.map)
  return map_.Get();
}
inline void ConfigMaelstrom::set_map(const ::std::string& value) {
  set_has_map();
  map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.map)
}
#if LANG_CXX11
inline void ConfigMaelstrom::set_map(::std::string&& value) {
  set_has_map();
  map_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstrom.map)
}
#endif
inline void ConfigMaelstrom::set_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map();
  map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstrom.map)
}
inline void ConfigMaelstrom::set_map(const void* value,
    size_t size) {
  set_has_map();
  map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstrom.map)
}
inline ::std::string* ConfigMaelstrom::mutable_map() {
  set_has_map();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstrom.map)
  return map_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstrom::release_map() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstrom.map)
  if (!has_map()) {
    return NULL;
  }
  clear_has_map();
  return map_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstrom::set_allocated_map(::std::string* map) {
  if (map != NULL) {
    set_has_map();
  } else {
    clear_has_map();
  }
  map_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstrom.map)
}
inline ::std::string* ConfigMaelstrom::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstrom.map)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_map();
  return map_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstrom::unsafe_arena_set_allocated_map(
    ::std::string* map) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (map != NULL) {
    set_has_map();
  } else {
    clear_has_map();
  }
  map_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      map, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstrom.map)
}

// required bytes guild_island_pos = 4;
inline bool ConfigMaelstrom::has_guild_island_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigMaelstrom::set_has_guild_island_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigMaelstrom::clear_has_guild_island_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigMaelstrom::clear_guild_island_pos() {
  guild_island_pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_guild_island_pos();
}
inline const ::std::string& ConfigMaelstrom::guild_island_pos() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.guild_island_pos)
  return guild_island_pos_.Get();
}
inline void ConfigMaelstrom::set_guild_island_pos(const ::std::string& value) {
  set_has_guild_island_pos();
  guild_island_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.guild_island_pos)
}
#if LANG_CXX11
inline void ConfigMaelstrom::set_guild_island_pos(::std::string&& value) {
  set_has_guild_island_pos();
  guild_island_pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstrom.guild_island_pos)
}
#endif
inline void ConfigMaelstrom::set_guild_island_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_island_pos();
  guild_island_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstrom.guild_island_pos)
}
inline void ConfigMaelstrom::set_guild_island_pos(const void* value,
    size_t size) {
  set_has_guild_island_pos();
  guild_island_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstrom.guild_island_pos)
}
inline ::std::string* ConfigMaelstrom::mutable_guild_island_pos() {
  set_has_guild_island_pos();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstrom.guild_island_pos)
  return guild_island_pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstrom::release_guild_island_pos() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstrom.guild_island_pos)
  if (!has_guild_island_pos()) {
    return NULL;
  }
  clear_has_guild_island_pos();
  return guild_island_pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstrom::set_allocated_guild_island_pos(::std::string* guild_island_pos) {
  if (guild_island_pos != NULL) {
    set_has_guild_island_pos();
  } else {
    clear_has_guild_island_pos();
  }
  guild_island_pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_island_pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstrom.guild_island_pos)
}
inline ::std::string* ConfigMaelstrom::unsafe_arena_release_guild_island_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstrom.guild_island_pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_guild_island_pos();
  return guild_island_pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstrom::unsafe_arena_set_allocated_guild_island_pos(
    ::std::string* guild_island_pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (guild_island_pos != NULL) {
    set_has_guild_island_pos();
  } else {
    clear_has_guild_island_pos();
  }
  guild_island_pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      guild_island_pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstrom.guild_island_pos)
}

// required bytes guild_island_size = 5;
inline bool ConfigMaelstrom::has_guild_island_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigMaelstrom::set_has_guild_island_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigMaelstrom::clear_has_guild_island_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigMaelstrom::clear_guild_island_size() {
  guild_island_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_guild_island_size();
}
inline const ::std::string& ConfigMaelstrom::guild_island_size() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.guild_island_size)
  return guild_island_size_.Get();
}
inline void ConfigMaelstrom::set_guild_island_size(const ::std::string& value) {
  set_has_guild_island_size();
  guild_island_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.guild_island_size)
}
#if LANG_CXX11
inline void ConfigMaelstrom::set_guild_island_size(::std::string&& value) {
  set_has_guild_island_size();
  guild_island_size_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstrom.guild_island_size)
}
#endif
inline void ConfigMaelstrom::set_guild_island_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_island_size();
  guild_island_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstrom.guild_island_size)
}
inline void ConfigMaelstrom::set_guild_island_size(const void* value,
    size_t size) {
  set_has_guild_island_size();
  guild_island_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstrom.guild_island_size)
}
inline ::std::string* ConfigMaelstrom::mutable_guild_island_size() {
  set_has_guild_island_size();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstrom.guild_island_size)
  return guild_island_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstrom::release_guild_island_size() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstrom.guild_island_size)
  if (!has_guild_island_size()) {
    return NULL;
  }
  clear_has_guild_island_size();
  return guild_island_size_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstrom::set_allocated_guild_island_size(::std::string* guild_island_size) {
  if (guild_island_size != NULL) {
    set_has_guild_island_size();
  } else {
    clear_has_guild_island_size();
  }
  guild_island_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_island_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstrom.guild_island_size)
}
inline ::std::string* ConfigMaelstrom::unsafe_arena_release_guild_island_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstrom.guild_island_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_guild_island_size();
  return guild_island_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstrom::unsafe_arena_set_allocated_guild_island_size(
    ::std::string* guild_island_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (guild_island_size != NULL) {
    set_has_guild_island_size();
  } else {
    clear_has_guild_island_size();
  }
  guild_island_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      guild_island_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstrom.guild_island_size)
}

// required bytes oil_well_pos = 6;
inline bool ConfigMaelstrom::has_oil_well_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigMaelstrom::set_has_oil_well_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigMaelstrom::clear_has_oil_well_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigMaelstrom::clear_oil_well_pos() {
  oil_well_pos_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_oil_well_pos();
}
inline const ::std::string& ConfigMaelstrom::oil_well_pos() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.oil_well_pos)
  return oil_well_pos_.Get();
}
inline void ConfigMaelstrom::set_oil_well_pos(const ::std::string& value) {
  set_has_oil_well_pos();
  oil_well_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.oil_well_pos)
}
#if LANG_CXX11
inline void ConfigMaelstrom::set_oil_well_pos(::std::string&& value) {
  set_has_oil_well_pos();
  oil_well_pos_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstrom.oil_well_pos)
}
#endif
inline void ConfigMaelstrom::set_oil_well_pos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oil_well_pos();
  oil_well_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstrom.oil_well_pos)
}
inline void ConfigMaelstrom::set_oil_well_pos(const void* value,
    size_t size) {
  set_has_oil_well_pos();
  oil_well_pos_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstrom.oil_well_pos)
}
inline ::std::string* ConfigMaelstrom::mutable_oil_well_pos() {
  set_has_oil_well_pos();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstrom.oil_well_pos)
  return oil_well_pos_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstrom::release_oil_well_pos() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstrom.oil_well_pos)
  if (!has_oil_well_pos()) {
    return NULL;
  }
  clear_has_oil_well_pos();
  return oil_well_pos_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstrom::set_allocated_oil_well_pos(::std::string* oil_well_pos) {
  if (oil_well_pos != NULL) {
    set_has_oil_well_pos();
  } else {
    clear_has_oil_well_pos();
  }
  oil_well_pos_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oil_well_pos,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstrom.oil_well_pos)
}
inline ::std::string* ConfigMaelstrom::unsafe_arena_release_oil_well_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstrom.oil_well_pos)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_oil_well_pos();
  return oil_well_pos_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstrom::unsafe_arena_set_allocated_oil_well_pos(
    ::std::string* oil_well_pos) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (oil_well_pos != NULL) {
    set_has_oil_well_pos();
  } else {
    clear_has_oil_well_pos();
  }
  oil_well_pos_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      oil_well_pos, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstrom.oil_well_pos)
}

// required bytes oil_well_size = 7;
inline bool ConfigMaelstrom::has_oil_well_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigMaelstrom::set_has_oil_well_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigMaelstrom::clear_has_oil_well_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigMaelstrom::clear_oil_well_size() {
  oil_well_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_oil_well_size();
}
inline const ::std::string& ConfigMaelstrom::oil_well_size() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.oil_well_size)
  return oil_well_size_.Get();
}
inline void ConfigMaelstrom::set_oil_well_size(const ::std::string& value) {
  set_has_oil_well_size();
  oil_well_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.oil_well_size)
}
#if LANG_CXX11
inline void ConfigMaelstrom::set_oil_well_size(::std::string&& value) {
  set_has_oil_well_size();
  oil_well_size_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstrom.oil_well_size)
}
#endif
inline void ConfigMaelstrom::set_oil_well_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oil_well_size();
  oil_well_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstrom.oil_well_size)
}
inline void ConfigMaelstrom::set_oil_well_size(const void* value,
    size_t size) {
  set_has_oil_well_size();
  oil_well_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstrom.oil_well_size)
}
inline ::std::string* ConfigMaelstrom::mutable_oil_well_size() {
  set_has_oil_well_size();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstrom.oil_well_size)
  return oil_well_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstrom::release_oil_well_size() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstrom.oil_well_size)
  if (!has_oil_well_size()) {
    return NULL;
  }
  clear_has_oil_well_size();
  return oil_well_size_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstrom::set_allocated_oil_well_size(::std::string* oil_well_size) {
  if (oil_well_size != NULL) {
    set_has_oil_well_size();
  } else {
    clear_has_oil_well_size();
  }
  oil_well_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oil_well_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstrom.oil_well_size)
}
inline ::std::string* ConfigMaelstrom::unsafe_arena_release_oil_well_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstrom.oil_well_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_oil_well_size();
  return oil_well_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstrom::unsafe_arena_set_allocated_oil_well_size(
    ::std::string* oil_well_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (oil_well_size != NULL) {
    set_has_oil_well_size();
  } else {
    clear_has_oil_well_size();
  }
  oil_well_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      oil_well_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstrom.oil_well_size)
}

// required int32 oil_id = 8;
inline bool ConfigMaelstrom::has_oil_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigMaelstrom::set_has_oil_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigMaelstrom::clear_has_oil_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigMaelstrom::clear_oil_id() {
  oil_id_ = 0;
  clear_has_oil_id();
}
inline ::google::protobuf::int32 ConfigMaelstrom::oil_id() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.oil_id)
  return oil_id_;
}
inline void ConfigMaelstrom::set_oil_id(::google::protobuf::int32 value) {
  set_has_oil_id();
  oil_id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.oil_id)
}

// required int32 oil_output = 9;
inline bool ConfigMaelstrom::has_oil_output() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigMaelstrom::set_has_oil_output() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigMaelstrom::clear_has_oil_output() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigMaelstrom::clear_oil_output() {
  oil_output_ = 0;
  clear_has_oil_output();
}
inline ::google::protobuf::int32 ConfigMaelstrom::oil_output() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.oil_output)
  return oil_output_;
}
inline void ConfigMaelstrom::set_oil_output(::google::protobuf::int32 value) {
  set_has_oil_output();
  oil_output_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.oil_output)
}

// required int32 oil_reserves = 10;
inline bool ConfigMaelstrom::has_oil_reserves() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigMaelstrom::set_has_oil_reserves() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigMaelstrom::clear_has_oil_reserves() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigMaelstrom::clear_oil_reserves() {
  oil_reserves_ = 0;
  clear_has_oil_reserves();
}
inline ::google::protobuf::int32 ConfigMaelstrom::oil_reserves() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.oil_reserves)
  return oil_reserves_;
}
inline void ConfigMaelstrom::set_oil_reserves(::google::protobuf::int32 value) {
  set_has_oil_reserves();
  oil_reserves_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.oil_reserves)
}

// required int32 ship_oil_reserves = 11;
inline bool ConfigMaelstrom::has_ship_oil_reserves() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigMaelstrom::set_has_ship_oil_reserves() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigMaelstrom::clear_has_ship_oil_reserves() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigMaelstrom::clear_ship_oil_reserves() {
  ship_oil_reserves_ = 0;
  clear_has_ship_oil_reserves();
}
inline ::google::protobuf::int32 ConfigMaelstrom::ship_oil_reserves() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.ship_oil_reserves)
  return ship_oil_reserves_;
}
inline void ConfigMaelstrom::set_ship_oil_reserves(::google::protobuf::int32 value) {
  set_has_ship_oil_reserves();
  ship_oil_reserves_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.ship_oil_reserves)
}

// required int32 repair_seconds = 12;
inline bool ConfigMaelstrom::has_repair_seconds() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigMaelstrom::set_has_repair_seconds() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigMaelstrom::clear_has_repair_seconds() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigMaelstrom::clear_repair_seconds() {
  repair_seconds_ = 0;
  clear_has_repair_seconds();
}
inline ::google::protobuf::int32 ConfigMaelstrom::repair_seconds() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.repair_seconds)
  return repair_seconds_;
}
inline void ConfigMaelstrom::set_repair_seconds(::google::protobuf::int32 value) {
  set_has_repair_seconds();
  repair_seconds_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.repair_seconds)
}

// required bytes event_refresh_time = 13;
inline bool ConfigMaelstrom::has_event_refresh_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigMaelstrom::set_has_event_refresh_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigMaelstrom::clear_has_event_refresh_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigMaelstrom::clear_event_refresh_time() {
  event_refresh_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_event_refresh_time();
}
inline const ::std::string& ConfigMaelstrom::event_refresh_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstrom.event_refresh_time)
  return event_refresh_time_.Get();
}
inline void ConfigMaelstrom::set_event_refresh_time(const ::std::string& value) {
  set_has_event_refresh_time();
  event_refresh_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstrom.event_refresh_time)
}
#if LANG_CXX11
inline void ConfigMaelstrom::set_event_refresh_time(::std::string&& value) {
  set_has_event_refresh_time();
  event_refresh_time_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstrom.event_refresh_time)
}
#endif
inline void ConfigMaelstrom::set_event_refresh_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_refresh_time();
  event_refresh_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstrom.event_refresh_time)
}
inline void ConfigMaelstrom::set_event_refresh_time(const void* value,
    size_t size) {
  set_has_event_refresh_time();
  event_refresh_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstrom.event_refresh_time)
}
inline ::std::string* ConfigMaelstrom::mutable_event_refresh_time() {
  set_has_event_refresh_time();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstrom.event_refresh_time)
  return event_refresh_time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstrom::release_event_refresh_time() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstrom.event_refresh_time)
  if (!has_event_refresh_time()) {
    return NULL;
  }
  clear_has_event_refresh_time();
  return event_refresh_time_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstrom::set_allocated_event_refresh_time(::std::string* event_refresh_time) {
  if (event_refresh_time != NULL) {
    set_has_event_refresh_time();
  } else {
    clear_has_event_refresh_time();
  }
  event_refresh_time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_refresh_time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstrom.event_refresh_time)
}
inline ::std::string* ConfigMaelstrom::unsafe_arena_release_event_refresh_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstrom.event_refresh_time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_event_refresh_time();
  return event_refresh_time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstrom::unsafe_arena_set_allocated_event_refresh_time(
    ::std::string* event_refresh_time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (event_refresh_time != NULL) {
    set_has_event_refresh_time();
  } else {
    clear_has_event_refresh_time();
  }
  event_refresh_time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      event_refresh_time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstrom.event_refresh_time)
}

// -------------------------------------------------------------------

// ConfigMaelstromEvent

// required int32 id = 1;
inline bool ConfigMaelstromEvent::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigMaelstromEvent::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigMaelstromEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigMaelstromEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigMaelstromEvent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.id)
  return id_;
}
inline void ConfigMaelstromEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.id)
}

// required int32 type = 2;
inline bool ConfigMaelstromEvent::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigMaelstromEvent::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigMaelstromEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigMaelstromEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigMaelstromEvent::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.type)
  return type_;
}
inline void ConfigMaelstromEvent::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.type)
}

// required bytes need_level = 3;
inline bool ConfigMaelstromEvent::has_need_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigMaelstromEvent::set_has_need_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigMaelstromEvent::clear_has_need_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigMaelstromEvent::clear_need_level() {
  need_level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_need_level();
}
inline const ::std::string& ConfigMaelstromEvent::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.need_level)
  return need_level_.Get();
}
inline void ConfigMaelstromEvent::set_need_level(const ::std::string& value) {
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.need_level)
}
#if LANG_CXX11
inline void ConfigMaelstromEvent::set_need_level(::std::string&& value) {
  set_has_need_level();
  need_level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstromEvent.need_level)
}
#endif
inline void ConfigMaelstromEvent::set_need_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstromEvent.need_level)
}
inline void ConfigMaelstromEvent::set_need_level(const void* value,
    size_t size) {
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstromEvent.need_level)
}
inline ::std::string* ConfigMaelstromEvent::mutable_need_level() {
  set_has_need_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstromEvent.need_level)
  return need_level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstromEvent::release_need_level() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstromEvent.need_level)
  if (!has_need_level()) {
    return NULL;
  }
  clear_has_need_level();
  return need_level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::set_allocated_need_level(::std::string* need_level) {
  if (need_level != NULL) {
    set_has_need_level();
  } else {
    clear_has_need_level();
  }
  need_level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), need_level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstromEvent.need_level)
}
inline ::std::string* ConfigMaelstromEvent::unsafe_arena_release_need_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstromEvent.need_level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_need_level();
  return need_level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::unsafe_arena_set_allocated_need_level(
    ::std::string* need_level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (need_level != NULL) {
    set_has_need_level();
  } else {
    clear_has_need_level();
  }
  need_level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      need_level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstromEvent.need_level)
}

// required bytes contant = 4;
inline bool ConfigMaelstromEvent::has_contant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigMaelstromEvent::set_has_contant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigMaelstromEvent::clear_has_contant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigMaelstromEvent::clear_contant() {
  contant_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_contant();
}
inline const ::std::string& ConfigMaelstromEvent::contant() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.contant)
  return contant_.Get();
}
inline void ConfigMaelstromEvent::set_contant(const ::std::string& value) {
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.contant)
}
#if LANG_CXX11
inline void ConfigMaelstromEvent::set_contant(::std::string&& value) {
  set_has_contant();
  contant_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstromEvent.contant)
}
#endif
inline void ConfigMaelstromEvent::set_contant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstromEvent.contant)
}
inline void ConfigMaelstromEvent::set_contant(const void* value,
    size_t size) {
  set_has_contant();
  contant_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstromEvent.contant)
}
inline ::std::string* ConfigMaelstromEvent::mutable_contant() {
  set_has_contant();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstromEvent.contant)
  return contant_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstromEvent::release_contant() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstromEvent.contant)
  if (!has_contant()) {
    return NULL;
  }
  clear_has_contant();
  return contant_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::set_allocated_contant(::std::string* contant) {
  if (contant != NULL) {
    set_has_contant();
  } else {
    clear_has_contant();
  }
  contant_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contant,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstromEvent.contant)
}
inline ::std::string* ConfigMaelstromEvent::unsafe_arena_release_contant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstromEvent.contant)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_contant();
  return contant_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::unsafe_arena_set_allocated_contant(
    ::std::string* contant) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (contant != NULL) {
    set_has_contant();
  } else {
    clear_has_contant();
  }
  contant_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      contant, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstromEvent.contant)
}

// required bytes reward = 5;
inline bool ConfigMaelstromEvent::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigMaelstromEvent::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigMaelstromEvent::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigMaelstromEvent::clear_reward() {
  reward_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward();
}
inline const ::std::string& ConfigMaelstromEvent::reward() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.reward)
  return reward_.Get();
}
inline void ConfigMaelstromEvent::set_reward(const ::std::string& value) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.reward)
}
#if LANG_CXX11
inline void ConfigMaelstromEvent::set_reward(::std::string&& value) {
  set_has_reward();
  reward_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstromEvent.reward)
}
#endif
inline void ConfigMaelstromEvent::set_reward(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstromEvent.reward)
}
inline void ConfigMaelstromEvent::set_reward(const void* value,
    size_t size) {
  set_has_reward();
  reward_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstromEvent.reward)
}
inline ::std::string* ConfigMaelstromEvent::mutable_reward() {
  set_has_reward();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstromEvent.reward)
  return reward_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstromEvent::release_reward() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstromEvent.reward)
  if (!has_reward()) {
    return NULL;
  }
  clear_has_reward();
  return reward_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::set_allocated_reward(::std::string* reward) {
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstromEvent.reward)
}
inline ::std::string* ConfigMaelstromEvent::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstromEvent.reward)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward();
  return reward_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::unsafe_arena_set_allocated_reward(
    ::std::string* reward) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward != NULL) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  reward_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstromEvent.reward)
}

// required int32 trigger_times = 6;
inline bool ConfigMaelstromEvent::has_trigger_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigMaelstromEvent::set_has_trigger_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigMaelstromEvent::clear_has_trigger_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigMaelstromEvent::clear_trigger_times() {
  trigger_times_ = 0;
  clear_has_trigger_times();
}
inline ::google::protobuf::int32 ConfigMaelstromEvent::trigger_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.trigger_times)
  return trigger_times_;
}
inline void ConfigMaelstromEvent::set_trigger_times(::google::protobuf::int32 value) {
  set_has_trigger_times();
  trigger_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.trigger_times)
}

// required bytes trigger_event = 7;
inline bool ConfigMaelstromEvent::has_trigger_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigMaelstromEvent::set_has_trigger_event() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigMaelstromEvent::clear_has_trigger_event() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigMaelstromEvent::clear_trigger_event() {
  trigger_event_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_trigger_event();
}
inline const ::std::string& ConfigMaelstromEvent::trigger_event() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.trigger_event)
  return trigger_event_.Get();
}
inline void ConfigMaelstromEvent::set_trigger_event(const ::std::string& value) {
  set_has_trigger_event();
  trigger_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.trigger_event)
}
#if LANG_CXX11
inline void ConfigMaelstromEvent::set_trigger_event(::std::string&& value) {
  set_has_trigger_event();
  trigger_event_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstromEvent.trigger_event)
}
#endif
inline void ConfigMaelstromEvent::set_trigger_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trigger_event();
  trigger_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstromEvent.trigger_event)
}
inline void ConfigMaelstromEvent::set_trigger_event(const void* value,
    size_t size) {
  set_has_trigger_event();
  trigger_event_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstromEvent.trigger_event)
}
inline ::std::string* ConfigMaelstromEvent::mutable_trigger_event() {
  set_has_trigger_event();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstromEvent.trigger_event)
  return trigger_event_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstromEvent::release_trigger_event() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstromEvent.trigger_event)
  if (!has_trigger_event()) {
    return NULL;
  }
  clear_has_trigger_event();
  return trigger_event_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::set_allocated_trigger_event(::std::string* trigger_event) {
  if (trigger_event != NULL) {
    set_has_trigger_event();
  } else {
    clear_has_trigger_event();
  }
  trigger_event_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_event,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstromEvent.trigger_event)
}
inline ::std::string* ConfigMaelstromEvent::unsafe_arena_release_trigger_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstromEvent.trigger_event)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_trigger_event();
  return trigger_event_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::unsafe_arena_set_allocated_trigger_event(
    ::std::string* trigger_event) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trigger_event != NULL) {
    set_has_trigger_event();
  } else {
    clear_has_trigger_event();
  }
  trigger_event_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trigger_event, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstromEvent.trigger_event)
}

// required bytes explore_point = 8;
inline bool ConfigMaelstromEvent::has_explore_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigMaelstromEvent::set_has_explore_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigMaelstromEvent::clear_has_explore_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigMaelstromEvent::clear_explore_point() {
  explore_point_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_explore_point();
}
inline const ::std::string& ConfigMaelstromEvent::explore_point() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.explore_point)
  return explore_point_.Get();
}
inline void ConfigMaelstromEvent::set_explore_point(const ::std::string& value) {
  set_has_explore_point();
  explore_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.explore_point)
}
#if LANG_CXX11
inline void ConfigMaelstromEvent::set_explore_point(::std::string&& value) {
  set_has_explore_point();
  explore_point_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigMaelstromEvent.explore_point)
}
#endif
inline void ConfigMaelstromEvent::set_explore_point(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_explore_point();
  explore_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigMaelstromEvent.explore_point)
}
inline void ConfigMaelstromEvent::set_explore_point(const void* value,
    size_t size) {
  set_has_explore_point();
  explore_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigMaelstromEvent.explore_point)
}
inline ::std::string* ConfigMaelstromEvent::mutable_explore_point() {
  set_has_explore_point();
  // @@protoc_insertion_point(field_mutable:db.ConfigMaelstromEvent.explore_point)
  return explore_point_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigMaelstromEvent::release_explore_point() {
  // @@protoc_insertion_point(field_release:db.ConfigMaelstromEvent.explore_point)
  if (!has_explore_point()) {
    return NULL;
  }
  clear_has_explore_point();
  return explore_point_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::set_allocated_explore_point(::std::string* explore_point) {
  if (explore_point != NULL) {
    set_has_explore_point();
  } else {
    clear_has_explore_point();
  }
  explore_point_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), explore_point,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigMaelstromEvent.explore_point)
}
inline ::std::string* ConfigMaelstromEvent::unsafe_arena_release_explore_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigMaelstromEvent.explore_point)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_explore_point();
  return explore_point_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigMaelstromEvent::unsafe_arena_set_allocated_explore_point(
    ::std::string* explore_point) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (explore_point != NULL) {
    set_has_explore_point();
  } else {
    clear_has_explore_point();
  }
  explore_point_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      explore_point, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigMaelstromEvent.explore_point)
}

// required int32 explore_level_up = 9;
inline bool ConfigMaelstromEvent::has_explore_level_up() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigMaelstromEvent::set_has_explore_level_up() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigMaelstromEvent::clear_has_explore_level_up() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigMaelstromEvent::clear_explore_level_up() {
  explore_level_up_ = 0;
  clear_has_explore_level_up();
}
inline ::google::protobuf::int32 ConfigMaelstromEvent::explore_level_up() const {
  // @@protoc_insertion_point(field_get:db.ConfigMaelstromEvent.explore_level_up)
  return explore_level_up_;
}
inline void ConfigMaelstromEvent::set_explore_level_up(::google::protobuf::int32 value) {
  set_has_explore_level_up();
  explore_level_up_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigMaelstromEvent.explore_level_up)
}

// -------------------------------------------------------------------

// ConfigProfession

// required int32 id = 1;
inline bool ConfigProfession::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigProfession::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigProfession::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigProfession::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigProfession::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigProfession.id)
  return id_;
}
inline void ConfigProfession::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigProfession.id)
}

// required int32 main_attr = 2;
inline bool ConfigProfession::has_main_attr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigProfession::set_has_main_attr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigProfession::clear_has_main_attr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigProfession::clear_main_attr() {
  main_attr_ = 0;
  clear_has_main_attr();
}
inline ::google::protobuf::int32 ConfigProfession::main_attr() const {
  // @@protoc_insertion_point(field_get:db.ConfigProfession.main_attr)
  return main_attr_;
}
inline void ConfigProfession::set_main_attr(::google::protobuf::int32 value) {
  set_has_main_attr();
  main_attr_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigProfession.main_attr)
}

// required bytes pro_args = 3;
inline bool ConfigProfession::has_pro_args() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigProfession::set_has_pro_args() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigProfession::clear_has_pro_args() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigProfession::clear_pro_args() {
  pro_args_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pro_args();
}
inline const ::std::string& ConfigProfession::pro_args() const {
  // @@protoc_insertion_point(field_get:db.ConfigProfession.pro_args)
  return pro_args_.Get();
}
inline void ConfigProfession::set_pro_args(const ::std::string& value) {
  set_has_pro_args();
  pro_args_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigProfession.pro_args)
}
#if LANG_CXX11
inline void ConfigProfession::set_pro_args(::std::string&& value) {
  set_has_pro_args();
  pro_args_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigProfession.pro_args)
}
#endif
inline void ConfigProfession::set_pro_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pro_args();
  pro_args_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigProfession.pro_args)
}
inline void ConfigProfession::set_pro_args(const void* value,
    size_t size) {
  set_has_pro_args();
  pro_args_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigProfession.pro_args)
}
inline ::std::string* ConfigProfession::mutable_pro_args() {
  set_has_pro_args();
  // @@protoc_insertion_point(field_mutable:db.ConfigProfession.pro_args)
  return pro_args_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigProfession::release_pro_args() {
  // @@protoc_insertion_point(field_release:db.ConfigProfession.pro_args)
  if (!has_pro_args()) {
    return NULL;
  }
  clear_has_pro_args();
  return pro_args_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigProfession::set_allocated_pro_args(::std::string* pro_args) {
  if (pro_args != NULL) {
    set_has_pro_args();
  } else {
    clear_has_pro_args();
  }
  pro_args_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pro_args,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigProfession.pro_args)
}
inline ::std::string* ConfigProfession::unsafe_arena_release_pro_args() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigProfession.pro_args)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pro_args();
  return pro_args_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigProfession::unsafe_arena_set_allocated_pro_args(
    ::std::string* pro_args) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pro_args != NULL) {
    set_has_pro_args();
  } else {
    clear_has_pro_args();
  }
  pro_args_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pro_args, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigProfession.pro_args)
}

// -------------------------------------------------------------------

// ConfigBeaconTalent

// required int32 id = 1;
inline bool ConfigBeaconTalent::has_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigBeaconTalent::set_has_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigBeaconTalent::clear_has_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigBeaconTalent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigBeaconTalent::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.id)
  return id_;
}
inline void ConfigBeaconTalent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.id)
}

// required int32 level = 2;
inline bool ConfigBeaconTalent::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigBeaconTalent::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigBeaconTalent::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigBeaconTalent::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigBeaconTalent::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.level)
  return level_;
}
inline void ConfigBeaconTalent::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.level)
}

// required int32 max_level = 3;
inline bool ConfigBeaconTalent::has_max_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigBeaconTalent::set_has_max_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigBeaconTalent::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigBeaconTalent::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 ConfigBeaconTalent::max_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.max_level)
  return max_level_;
}
inline void ConfigBeaconTalent::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.max_level)
}

// required int32 cost = 4;
inline bool ConfigBeaconTalent::has_cost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigBeaconTalent::set_has_cost() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigBeaconTalent::clear_has_cost() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigBeaconTalent::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 ConfigBeaconTalent::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.cost)
  return cost_;
}
inline void ConfigBeaconTalent::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.cost)
}

// required bytes pre_talent = 5;
inline bool ConfigBeaconTalent::has_pre_talent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigBeaconTalent::set_has_pre_talent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigBeaconTalent::clear_has_pre_talent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigBeaconTalent::clear_pre_talent() {
  pre_talent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pre_talent();
}
inline const ::std::string& ConfigBeaconTalent::pre_talent() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.pre_talent)
  return pre_talent_.Get();
}
inline void ConfigBeaconTalent::set_pre_talent(const ::std::string& value) {
  set_has_pre_talent();
  pre_talent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.pre_talent)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_pre_talent(::std::string&& value) {
  set_has_pre_talent();
  pre_talent_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.pre_talent)
}
#endif
inline void ConfigBeaconTalent::set_pre_talent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pre_talent();
  pre_talent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.pre_talent)
}
inline void ConfigBeaconTalent::set_pre_talent(const void* value,
    size_t size) {
  set_has_pre_talent();
  pre_talent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.pre_talent)
}
inline ::std::string* ConfigBeaconTalent::mutable_pre_talent() {
  set_has_pre_talent();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.pre_talent)
  return pre_talent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_pre_talent() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.pre_talent)
  if (!has_pre_talent()) {
    return NULL;
  }
  clear_has_pre_talent();
  return pre_talent_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_pre_talent(::std::string* pre_talent) {
  if (pre_talent != NULL) {
    set_has_pre_talent();
  } else {
    clear_has_pre_talent();
  }
  pre_talent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pre_talent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.pre_talent)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_pre_talent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.pre_talent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pre_talent();
  return pre_talent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_pre_talent(
    ::std::string* pre_talent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pre_talent != NULL) {
    set_has_pre_talent();
  } else {
    clear_has_pre_talent();
  }
  pre_talent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pre_talent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.pre_talent)
}

// required bytes get_item = 6;
inline bool ConfigBeaconTalent::has_get_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigBeaconTalent::set_has_get_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigBeaconTalent::clear_has_get_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigBeaconTalent::clear_get_item() {
  get_item_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_get_item();
}
inline const ::std::string& ConfigBeaconTalent::get_item() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.get_item)
  return get_item_.Get();
}
inline void ConfigBeaconTalent::set_get_item(const ::std::string& value) {
  set_has_get_item();
  get_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.get_item)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_get_item(::std::string&& value) {
  set_has_get_item();
  get_item_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.get_item)
}
#endif
inline void ConfigBeaconTalent::set_get_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_get_item();
  get_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.get_item)
}
inline void ConfigBeaconTalent::set_get_item(const void* value,
    size_t size) {
  set_has_get_item();
  get_item_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.get_item)
}
inline ::std::string* ConfigBeaconTalent::mutable_get_item() {
  set_has_get_item();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.get_item)
  return get_item_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_get_item() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.get_item)
  if (!has_get_item()) {
    return NULL;
  }
  clear_has_get_item();
  return get_item_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_get_item(::std::string* get_item) {
  if (get_item != NULL) {
    set_has_get_item();
  } else {
    clear_has_get_item();
  }
  get_item_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), get_item,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.get_item)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_get_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.get_item)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_get_item();
  return get_item_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_get_item(
    ::std::string* get_item) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (get_item != NULL) {
    set_has_get_item();
  } else {
    clear_has_get_item();
  }
  get_item_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      get_item, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.get_item)
}

// required bytes event_reward_add = 7;
inline bool ConfigBeaconTalent::has_event_reward_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigBeaconTalent::set_has_event_reward_add() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigBeaconTalent::clear_has_event_reward_add() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigBeaconTalent::clear_event_reward_add() {
  event_reward_add_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_event_reward_add();
}
inline const ::std::string& ConfigBeaconTalent::event_reward_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.event_reward_add)
  return event_reward_add_.Get();
}
inline void ConfigBeaconTalent::set_event_reward_add(const ::std::string& value) {
  set_has_event_reward_add();
  event_reward_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.event_reward_add)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_event_reward_add(::std::string&& value) {
  set_has_event_reward_add();
  event_reward_add_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.event_reward_add)
}
#endif
inline void ConfigBeaconTalent::set_event_reward_add(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_reward_add();
  event_reward_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.event_reward_add)
}
inline void ConfigBeaconTalent::set_event_reward_add(const void* value,
    size_t size) {
  set_has_event_reward_add();
  event_reward_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.event_reward_add)
}
inline ::std::string* ConfigBeaconTalent::mutable_event_reward_add() {
  set_has_event_reward_add();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.event_reward_add)
  return event_reward_add_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_event_reward_add() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.event_reward_add)
  if (!has_event_reward_add()) {
    return NULL;
  }
  clear_has_event_reward_add();
  return event_reward_add_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_event_reward_add(::std::string* event_reward_add) {
  if (event_reward_add != NULL) {
    set_has_event_reward_add();
  } else {
    clear_has_event_reward_add();
  }
  event_reward_add_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_reward_add,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.event_reward_add)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_event_reward_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.event_reward_add)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_event_reward_add();
  return event_reward_add_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_event_reward_add(
    ::std::string* event_reward_add) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (event_reward_add != NULL) {
    set_has_event_reward_add();
  } else {
    clear_has_event_reward_add();
  }
  event_reward_add_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      event_reward_add, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.event_reward_add)
}

// required bytes point_cost_down = 8;
inline bool ConfigBeaconTalent::has_point_cost_down() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigBeaconTalent::set_has_point_cost_down() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigBeaconTalent::clear_has_point_cost_down() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigBeaconTalent::clear_point_cost_down() {
  point_cost_down_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_point_cost_down();
}
inline const ::std::string& ConfigBeaconTalent::point_cost_down() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.point_cost_down)
  return point_cost_down_.Get();
}
inline void ConfigBeaconTalent::set_point_cost_down(const ::std::string& value) {
  set_has_point_cost_down();
  point_cost_down_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.point_cost_down)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_point_cost_down(::std::string&& value) {
  set_has_point_cost_down();
  point_cost_down_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.point_cost_down)
}
#endif
inline void ConfigBeaconTalent::set_point_cost_down(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_point_cost_down();
  point_cost_down_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.point_cost_down)
}
inline void ConfigBeaconTalent::set_point_cost_down(const void* value,
    size_t size) {
  set_has_point_cost_down();
  point_cost_down_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.point_cost_down)
}
inline ::std::string* ConfigBeaconTalent::mutable_point_cost_down() {
  set_has_point_cost_down();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.point_cost_down)
  return point_cost_down_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_point_cost_down() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.point_cost_down)
  if (!has_point_cost_down()) {
    return NULL;
  }
  clear_has_point_cost_down();
  return point_cost_down_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_point_cost_down(::std::string* point_cost_down) {
  if (point_cost_down != NULL) {
    set_has_point_cost_down();
  } else {
    clear_has_point_cost_down();
  }
  point_cost_down_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), point_cost_down,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.point_cost_down)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_point_cost_down() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.point_cost_down)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_point_cost_down();
  return point_cost_down_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_point_cost_down(
    ::std::string* point_cost_down) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (point_cost_down != NULL) {
    set_has_point_cost_down();
  } else {
    clear_has_point_cost_down();
  }
  point_cost_down_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      point_cost_down, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.point_cost_down)
}

// required bytes point_get_up = 9;
inline bool ConfigBeaconTalent::has_point_get_up() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigBeaconTalent::set_has_point_get_up() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigBeaconTalent::clear_has_point_get_up() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigBeaconTalent::clear_point_get_up() {
  point_get_up_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_point_get_up();
}
inline const ::std::string& ConfigBeaconTalent::point_get_up() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.point_get_up)
  return point_get_up_.Get();
}
inline void ConfigBeaconTalent::set_point_get_up(const ::std::string& value) {
  set_has_point_get_up();
  point_get_up_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.point_get_up)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_point_get_up(::std::string&& value) {
  set_has_point_get_up();
  point_get_up_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.point_get_up)
}
#endif
inline void ConfigBeaconTalent::set_point_get_up(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_point_get_up();
  point_get_up_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.point_get_up)
}
inline void ConfigBeaconTalent::set_point_get_up(const void* value,
    size_t size) {
  set_has_point_get_up();
  point_get_up_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.point_get_up)
}
inline ::std::string* ConfigBeaconTalent::mutable_point_get_up() {
  set_has_point_get_up();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.point_get_up)
  return point_get_up_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_point_get_up() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.point_get_up)
  if (!has_point_get_up()) {
    return NULL;
  }
  clear_has_point_get_up();
  return point_get_up_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_point_get_up(::std::string* point_get_up) {
  if (point_get_up != NULL) {
    set_has_point_get_up();
  } else {
    clear_has_point_get_up();
  }
  point_get_up_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), point_get_up,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.point_get_up)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_point_get_up() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.point_get_up)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_point_get_up();
  return point_get_up_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_point_get_up(
    ::std::string* point_get_up) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (point_get_up != NULL) {
    set_has_point_get_up();
  } else {
    clear_has_point_get_up();
  }
  point_get_up_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      point_get_up, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.point_get_up)
}

// required bytes adjunct = 10;
inline bool ConfigBeaconTalent::has_adjunct() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigBeaconTalent::set_has_adjunct() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigBeaconTalent::clear_has_adjunct() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigBeaconTalent::clear_adjunct() {
  adjunct_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_adjunct();
}
inline const ::std::string& ConfigBeaconTalent::adjunct() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.adjunct)
  return adjunct_.Get();
}
inline void ConfigBeaconTalent::set_adjunct(const ::std::string& value) {
  set_has_adjunct();
  adjunct_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.adjunct)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_adjunct(::std::string&& value) {
  set_has_adjunct();
  adjunct_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.adjunct)
}
#endif
inline void ConfigBeaconTalent::set_adjunct(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adjunct();
  adjunct_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.adjunct)
}
inline void ConfigBeaconTalent::set_adjunct(const void* value,
    size_t size) {
  set_has_adjunct();
  adjunct_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.adjunct)
}
inline ::std::string* ConfigBeaconTalent::mutable_adjunct() {
  set_has_adjunct();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.adjunct)
  return adjunct_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_adjunct() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.adjunct)
  if (!has_adjunct()) {
    return NULL;
  }
  clear_has_adjunct();
  return adjunct_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_adjunct(::std::string* adjunct) {
  if (adjunct != NULL) {
    set_has_adjunct();
  } else {
    clear_has_adjunct();
  }
  adjunct_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adjunct,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.adjunct)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_adjunct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.adjunct)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_adjunct();
  return adjunct_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_adjunct(
    ::std::string* adjunct) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (adjunct != NULL) {
    set_has_adjunct();
  } else {
    clear_has_adjunct();
  }
  adjunct_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      adjunct, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.adjunct)
}

// required bytes attribute_add = 11;
inline bool ConfigBeaconTalent::has_attribute_add() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigBeaconTalent::set_has_attribute_add() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigBeaconTalent::clear_has_attribute_add() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigBeaconTalent::clear_attribute_add() {
  attribute_add_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_attribute_add();
}
inline const ::std::string& ConfigBeaconTalent::attribute_add() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.attribute_add)
  return attribute_add_.Get();
}
inline void ConfigBeaconTalent::set_attribute_add(const ::std::string& value) {
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.attribute_add)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_attribute_add(::std::string&& value) {
  set_has_attribute_add();
  attribute_add_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.attribute_add)
}
#endif
inline void ConfigBeaconTalent::set_attribute_add(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.attribute_add)
}
inline void ConfigBeaconTalent::set_attribute_add(const void* value,
    size_t size) {
  set_has_attribute_add();
  attribute_add_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.attribute_add)
}
inline ::std::string* ConfigBeaconTalent::mutable_attribute_add() {
  set_has_attribute_add();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.attribute_add)
  return attribute_add_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_attribute_add() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.attribute_add)
  if (!has_attribute_add()) {
    return NULL;
  }
  clear_has_attribute_add();
  return attribute_add_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_attribute_add(::std::string* attribute_add) {
  if (attribute_add != NULL) {
    set_has_attribute_add();
  } else {
    clear_has_attribute_add();
  }
  attribute_add_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute_add,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.attribute_add)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_attribute_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.attribute_add)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_attribute_add();
  return attribute_add_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_attribute_add(
    ::std::string* attribute_add) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (attribute_add != NULL) {
    set_has_attribute_add();
  } else {
    clear_has_attribute_add();
  }
  attribute_add_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      attribute_add, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.attribute_add)
}

// required bytes enemy_weaken = 12;
inline bool ConfigBeaconTalent::has_enemy_weaken() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigBeaconTalent::set_has_enemy_weaken() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigBeaconTalent::clear_has_enemy_weaken() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigBeaconTalent::clear_enemy_weaken() {
  enemy_weaken_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_enemy_weaken();
}
inline const ::std::string& ConfigBeaconTalent::enemy_weaken() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.enemy_weaken)
  return enemy_weaken_.Get();
}
inline void ConfigBeaconTalent::set_enemy_weaken(const ::std::string& value) {
  set_has_enemy_weaken();
  enemy_weaken_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.enemy_weaken)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_enemy_weaken(::std::string&& value) {
  set_has_enemy_weaken();
  enemy_weaken_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.enemy_weaken)
}
#endif
inline void ConfigBeaconTalent::set_enemy_weaken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enemy_weaken();
  enemy_weaken_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.enemy_weaken)
}
inline void ConfigBeaconTalent::set_enemy_weaken(const void* value,
    size_t size) {
  set_has_enemy_weaken();
  enemy_weaken_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.enemy_weaken)
}
inline ::std::string* ConfigBeaconTalent::mutable_enemy_weaken() {
  set_has_enemy_weaken();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.enemy_weaken)
  return enemy_weaken_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_enemy_weaken() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.enemy_weaken)
  if (!has_enemy_weaken()) {
    return NULL;
  }
  clear_has_enemy_weaken();
  return enemy_weaken_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_enemy_weaken(::std::string* enemy_weaken) {
  if (enemy_weaken != NULL) {
    set_has_enemy_weaken();
  } else {
    clear_has_enemy_weaken();
  }
  enemy_weaken_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enemy_weaken,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.enemy_weaken)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_enemy_weaken() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.enemy_weaken)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_enemy_weaken();
  return enemy_weaken_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_enemy_weaken(
    ::std::string* enemy_weaken) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (enemy_weaken != NULL) {
    set_has_enemy_weaken();
  } else {
    clear_has_enemy_weaken();
  }
  enemy_weaken_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      enemy_weaken, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.enemy_weaken)
}

// required bytes event_weaken = 13;
inline bool ConfigBeaconTalent::has_event_weaken() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigBeaconTalent::set_has_event_weaken() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigBeaconTalent::clear_has_event_weaken() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigBeaconTalent::clear_event_weaken() {
  event_weaken_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_event_weaken();
}
inline const ::std::string& ConfigBeaconTalent::event_weaken() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalent.event_weaken)
  return event_weaken_.Get();
}
inline void ConfigBeaconTalent::set_event_weaken(const ::std::string& value) {
  set_has_event_weaken();
  event_weaken_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalent.event_weaken)
}
#if LANG_CXX11
inline void ConfigBeaconTalent::set_event_weaken(::std::string&& value) {
  set_has_event_weaken();
  event_weaken_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalent.event_weaken)
}
#endif
inline void ConfigBeaconTalent::set_event_weaken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_weaken();
  event_weaken_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalent.event_weaken)
}
inline void ConfigBeaconTalent::set_event_weaken(const void* value,
    size_t size) {
  set_has_event_weaken();
  event_weaken_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalent.event_weaken)
}
inline ::std::string* ConfigBeaconTalent::mutable_event_weaken() {
  set_has_event_weaken();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalent.event_weaken)
  return event_weaken_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalent::release_event_weaken() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalent.event_weaken)
  if (!has_event_weaken()) {
    return NULL;
  }
  clear_has_event_weaken();
  return event_weaken_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::set_allocated_event_weaken(::std::string* event_weaken) {
  if (event_weaken != NULL) {
    set_has_event_weaken();
  } else {
    clear_has_event_weaken();
  }
  event_weaken_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_weaken,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalent.event_weaken)
}
inline ::std::string* ConfigBeaconTalent::unsafe_arena_release_event_weaken() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalent.event_weaken)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_event_weaken();
  return event_weaken_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalent::unsafe_arena_set_allocated_event_weaken(
    ::std::string* event_weaken) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (event_weaken != NULL) {
    set_has_event_weaken();
  } else {
    clear_has_event_weaken();
  }
  event_weaken_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      event_weaken, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalent.event_weaken)
}

// -------------------------------------------------------------------

// ConfigBeaconTalentGroup

// required int32 id = 1;
inline bool ConfigBeaconTalentGroup::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigBeaconTalentGroup::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigBeaconTalentGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigBeaconTalentGroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigBeaconTalentGroup::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalentGroup.id)
  return id_;
}
inline void ConfigBeaconTalentGroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalentGroup.id)
}

// required bytes content = 2;
inline bool ConfigBeaconTalentGroup::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigBeaconTalentGroup::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigBeaconTalentGroup::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigBeaconTalentGroup::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_content();
}
inline const ::std::string& ConfigBeaconTalentGroup::content() const {
  // @@protoc_insertion_point(field_get:db.ConfigBeaconTalentGroup.content)
  return content_.Get();
}
inline void ConfigBeaconTalentGroup::set_content(const ::std::string& value) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigBeaconTalentGroup.content)
}
#if LANG_CXX11
inline void ConfigBeaconTalentGroup::set_content(::std::string&& value) {
  set_has_content();
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigBeaconTalentGroup.content)
}
#endif
inline void ConfigBeaconTalentGroup::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigBeaconTalentGroup.content)
}
inline void ConfigBeaconTalentGroup::set_content(const void* value,
    size_t size) {
  set_has_content();
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigBeaconTalentGroup.content)
}
inline ::std::string* ConfigBeaconTalentGroup::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:db.ConfigBeaconTalentGroup.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigBeaconTalentGroup::release_content() {
  // @@protoc_insertion_point(field_release:db.ConfigBeaconTalentGroup.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigBeaconTalentGroup::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigBeaconTalentGroup.content)
}
inline ::std::string* ConfigBeaconTalentGroup::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigBeaconTalentGroup.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_content();
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigBeaconTalentGroup::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigBeaconTalentGroup.content)
}

// -------------------------------------------------------------------

// ConfigDungeonChest

// required int32 id = 1;
inline bool ConfigDungeonChest::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigDungeonChest::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigDungeonChest::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigDungeonChest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigDungeonChest::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.id)
  return id_;
}
inline void ConfigDungeonChest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.id)
}

// required int32 type = 2;
inline bool ConfigDungeonChest::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigDungeonChest::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigDungeonChest::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigDungeonChest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigDungeonChest::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.type)
  return type_;
}
inline void ConfigDungeonChest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.type)
}

// required int32 max_times = 3;
inline bool ConfigDungeonChest::has_max_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigDungeonChest::set_has_max_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigDungeonChest::clear_has_max_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigDungeonChest::clear_max_times() {
  max_times_ = 0;
  clear_has_max_times();
}
inline ::google::protobuf::int32 ConfigDungeonChest::max_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.max_times)
  return max_times_;
}
inline void ConfigDungeonChest::set_max_times(::google::protobuf::int32 value) {
  set_has_max_times();
  max_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.max_times)
}

// required float probability = 4;
inline bool ConfigDungeonChest::has_probability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigDungeonChest::set_has_probability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigDungeonChest::clear_has_probability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigDungeonChest::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline float ConfigDungeonChest::probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.probability)
  return probability_;
}
inline void ConfigDungeonChest::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.probability)
}

// required float add_probability = 5;
inline bool ConfigDungeonChest::has_add_probability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigDungeonChest::set_has_add_probability() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigDungeonChest::clear_has_add_probability() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigDungeonChest::clear_add_probability() {
  add_probability_ = 0;
  clear_has_add_probability();
}
inline float ConfigDungeonChest::add_probability() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.add_probability)
  return add_probability_;
}
inline void ConfigDungeonChest::set_add_probability(float value) {
  set_has_add_probability();
  add_probability_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.add_probability)
}

// required bytes cost = 6;
inline bool ConfigDungeonChest::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDungeonChest::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigDungeonChest::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigDungeonChest::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigDungeonChest::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.cost)
  return cost_.Get();
}
inline void ConfigDungeonChest::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.cost)
}
#if LANG_CXX11
inline void ConfigDungeonChest::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonChest.cost)
}
#endif
inline void ConfigDungeonChest::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonChest.cost)
}
inline void ConfigDungeonChest::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonChest.cost)
}
inline ::std::string* ConfigDungeonChest::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonChest.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonChest::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonChest.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonChest::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonChest.cost)
}
inline ::std::string* ConfigDungeonChest::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonChest.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonChest::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonChest.cost)
}

// required bytes cost_in_dungeon = 7;
inline bool ConfigDungeonChest::has_cost_in_dungeon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigDungeonChest::set_has_cost_in_dungeon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigDungeonChest::clear_has_cost_in_dungeon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigDungeonChest::clear_cost_in_dungeon() {
  cost_in_dungeon_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost_in_dungeon();
}
inline const ::std::string& ConfigDungeonChest::cost_in_dungeon() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.cost_in_dungeon)
  return cost_in_dungeon_.Get();
}
inline void ConfigDungeonChest::set_cost_in_dungeon(const ::std::string& value) {
  set_has_cost_in_dungeon();
  cost_in_dungeon_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.cost_in_dungeon)
}
#if LANG_CXX11
inline void ConfigDungeonChest::set_cost_in_dungeon(::std::string&& value) {
  set_has_cost_in_dungeon();
  cost_in_dungeon_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonChest.cost_in_dungeon)
}
#endif
inline void ConfigDungeonChest::set_cost_in_dungeon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost_in_dungeon();
  cost_in_dungeon_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonChest.cost_in_dungeon)
}
inline void ConfigDungeonChest::set_cost_in_dungeon(const void* value,
    size_t size) {
  set_has_cost_in_dungeon();
  cost_in_dungeon_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonChest.cost_in_dungeon)
}
inline ::std::string* ConfigDungeonChest::mutable_cost_in_dungeon() {
  set_has_cost_in_dungeon();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonChest.cost_in_dungeon)
  return cost_in_dungeon_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonChest::release_cost_in_dungeon() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonChest.cost_in_dungeon)
  if (!has_cost_in_dungeon()) {
    return NULL;
  }
  clear_has_cost_in_dungeon();
  return cost_in_dungeon_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonChest::set_allocated_cost_in_dungeon(::std::string* cost_in_dungeon) {
  if (cost_in_dungeon != NULL) {
    set_has_cost_in_dungeon();
  } else {
    clear_has_cost_in_dungeon();
  }
  cost_in_dungeon_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost_in_dungeon,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonChest.cost_in_dungeon)
}
inline ::std::string* ConfigDungeonChest::unsafe_arena_release_cost_in_dungeon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonChest.cost_in_dungeon)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost_in_dungeon();
  return cost_in_dungeon_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonChest::unsafe_arena_set_allocated_cost_in_dungeon(
    ::std::string* cost_in_dungeon) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost_in_dungeon != NULL) {
    set_has_cost_in_dungeon();
  } else {
    clear_has_cost_in_dungeon();
  }
  cost_in_dungeon_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost_in_dungeon, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonChest.cost_in_dungeon)
}

// required bytes get = 8;
inline bool ConfigDungeonChest::has_get() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigDungeonChest::set_has_get() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigDungeonChest::clear_has_get() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigDungeonChest::clear_get() {
  get_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_get();
}
inline const ::std::string& ConfigDungeonChest::get() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.get)
  return get_.Get();
}
inline void ConfigDungeonChest::set_get(const ::std::string& value) {
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.get)
}
#if LANG_CXX11
inline void ConfigDungeonChest::set_get(::std::string&& value) {
  set_has_get();
  get_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonChest.get)
}
#endif
inline void ConfigDungeonChest::set_get(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonChest.get)
}
inline void ConfigDungeonChest::set_get(const void* value,
    size_t size) {
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonChest.get)
}
inline ::std::string* ConfigDungeonChest::mutable_get() {
  set_has_get();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonChest.get)
  return get_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonChest::release_get() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonChest.get)
  if (!has_get()) {
    return NULL;
  }
  clear_has_get();
  return get_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonChest::set_allocated_get(::std::string* get) {
  if (get != NULL) {
    set_has_get();
  } else {
    clear_has_get();
  }
  get_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), get,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonChest.get)
}
inline ::std::string* ConfigDungeonChest::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonChest.get)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_get();
  return get_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonChest::unsafe_arena_set_allocated_get(
    ::std::string* get) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (get != NULL) {
    set_has_get();
  } else {
    clear_has_get();
  }
  get_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      get, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonChest.get)
}

// required bytes get_in_dungeon = 9;
inline bool ConfigDungeonChest::has_get_in_dungeon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigDungeonChest::set_has_get_in_dungeon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigDungeonChest::clear_has_get_in_dungeon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigDungeonChest::clear_get_in_dungeon() {
  get_in_dungeon_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_get_in_dungeon();
}
inline const ::std::string& ConfigDungeonChest::get_in_dungeon() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.get_in_dungeon)
  return get_in_dungeon_.Get();
}
inline void ConfigDungeonChest::set_get_in_dungeon(const ::std::string& value) {
  set_has_get_in_dungeon();
  get_in_dungeon_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.get_in_dungeon)
}
#if LANG_CXX11
inline void ConfigDungeonChest::set_get_in_dungeon(::std::string&& value) {
  set_has_get_in_dungeon();
  get_in_dungeon_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonChest.get_in_dungeon)
}
#endif
inline void ConfigDungeonChest::set_get_in_dungeon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_get_in_dungeon();
  get_in_dungeon_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonChest.get_in_dungeon)
}
inline void ConfigDungeonChest::set_get_in_dungeon(const void* value,
    size_t size) {
  set_has_get_in_dungeon();
  get_in_dungeon_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonChest.get_in_dungeon)
}
inline ::std::string* ConfigDungeonChest::mutable_get_in_dungeon() {
  set_has_get_in_dungeon();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonChest.get_in_dungeon)
  return get_in_dungeon_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonChest::release_get_in_dungeon() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonChest.get_in_dungeon)
  if (!has_get_in_dungeon()) {
    return NULL;
  }
  clear_has_get_in_dungeon();
  return get_in_dungeon_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonChest::set_allocated_get_in_dungeon(::std::string* get_in_dungeon) {
  if (get_in_dungeon != NULL) {
    set_has_get_in_dungeon();
  } else {
    clear_has_get_in_dungeon();
  }
  get_in_dungeon_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), get_in_dungeon,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonChest.get_in_dungeon)
}
inline ::std::string* ConfigDungeonChest::unsafe_arena_release_get_in_dungeon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonChest.get_in_dungeon)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_get_in_dungeon();
  return get_in_dungeon_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonChest::unsafe_arena_set_allocated_get_in_dungeon(
    ::std::string* get_in_dungeon) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (get_in_dungeon != NULL) {
    set_has_get_in_dungeon();
  } else {
    clear_has_get_in_dungeon();
  }
  get_in_dungeon_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      get_in_dungeon, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonChest.get_in_dungeon)
}

// required bytes need_level = 10;
inline bool ConfigDungeonChest::has_need_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigDungeonChest::set_has_need_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigDungeonChest::clear_has_need_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigDungeonChest::clear_need_level() {
  need_level_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_need_level();
}
inline const ::std::string& ConfigDungeonChest::need_level() const {
  // @@protoc_insertion_point(field_get:db.ConfigDungeonChest.need_level)
  return need_level_.Get();
}
inline void ConfigDungeonChest::set_need_level(const ::std::string& value) {
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigDungeonChest.need_level)
}
#if LANG_CXX11
inline void ConfigDungeonChest::set_need_level(::std::string&& value) {
  set_has_need_level();
  need_level_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigDungeonChest.need_level)
}
#endif
inline void ConfigDungeonChest::set_need_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigDungeonChest.need_level)
}
inline void ConfigDungeonChest::set_need_level(const void* value,
    size_t size) {
  set_has_need_level();
  need_level_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigDungeonChest.need_level)
}
inline ::std::string* ConfigDungeonChest::mutable_need_level() {
  set_has_need_level();
  // @@protoc_insertion_point(field_mutable:db.ConfigDungeonChest.need_level)
  return need_level_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigDungeonChest::release_need_level() {
  // @@protoc_insertion_point(field_release:db.ConfigDungeonChest.need_level)
  if (!has_need_level()) {
    return NULL;
  }
  clear_has_need_level();
  return need_level_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigDungeonChest::set_allocated_need_level(::std::string* need_level) {
  if (need_level != NULL) {
    set_has_need_level();
  } else {
    clear_has_need_level();
  }
  need_level_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), need_level,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigDungeonChest.need_level)
}
inline ::std::string* ConfigDungeonChest::unsafe_arena_release_need_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigDungeonChest.need_level)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_need_level();
  return need_level_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigDungeonChest::unsafe_arena_set_allocated_need_level(
    ::std::string* need_level) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (need_level != NULL) {
    set_has_need_level();
  } else {
    clear_has_need_level();
  }
  need_level_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      need_level, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigDungeonChest.need_level)
}

// -------------------------------------------------------------------

// ConfigGuildStore

// required int32 level = 1;
inline bool ConfigGuildStore::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigGuildStore::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigGuildStore::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigGuildStore::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ConfigGuildStore::level() const {
  // @@protoc_insertion_point(field_get:db.ConfigGuildStore.level)
  return level_;
}
inline void ConfigGuildStore::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGuildStore.level)
}

// required int32 extra_goods_num = 2;
inline bool ConfigGuildStore::has_extra_goods_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigGuildStore::set_has_extra_goods_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigGuildStore::clear_has_extra_goods_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigGuildStore::clear_extra_goods_num() {
  extra_goods_num_ = 0;
  clear_has_extra_goods_num();
}
inline ::google::protobuf::int32 ConfigGuildStore::extra_goods_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigGuildStore.extra_goods_num)
  return extra_goods_num_;
}
inline void ConfigGuildStore::set_extra_goods_num(::google::protobuf::int32 value) {
  set_has_extra_goods_num();
  extra_goods_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGuildStore.extra_goods_num)
}

// required bytes normal_goods = 3;
inline bool ConfigGuildStore::has_normal_goods() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigGuildStore::set_has_normal_goods() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigGuildStore::clear_has_normal_goods() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigGuildStore::clear_normal_goods() {
  normal_goods_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_normal_goods();
}
inline const ::std::string& ConfigGuildStore::normal_goods() const {
  // @@protoc_insertion_point(field_get:db.ConfigGuildStore.normal_goods)
  return normal_goods_.Get();
}
inline void ConfigGuildStore::set_normal_goods(const ::std::string& value) {
  set_has_normal_goods();
  normal_goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGuildStore.normal_goods)
}
#if LANG_CXX11
inline void ConfigGuildStore::set_normal_goods(::std::string&& value) {
  set_has_normal_goods();
  normal_goods_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGuildStore.normal_goods)
}
#endif
inline void ConfigGuildStore::set_normal_goods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_normal_goods();
  normal_goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGuildStore.normal_goods)
}
inline void ConfigGuildStore::set_normal_goods(const void* value,
    size_t size) {
  set_has_normal_goods();
  normal_goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGuildStore.normal_goods)
}
inline ::std::string* ConfigGuildStore::mutable_normal_goods() {
  set_has_normal_goods();
  // @@protoc_insertion_point(field_mutable:db.ConfigGuildStore.normal_goods)
  return normal_goods_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGuildStore::release_normal_goods() {
  // @@protoc_insertion_point(field_release:db.ConfigGuildStore.normal_goods)
  if (!has_normal_goods()) {
    return NULL;
  }
  clear_has_normal_goods();
  return normal_goods_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGuildStore::set_allocated_normal_goods(::std::string* normal_goods) {
  if (normal_goods != NULL) {
    set_has_normal_goods();
  } else {
    clear_has_normal_goods();
  }
  normal_goods_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal_goods,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGuildStore.normal_goods)
}
inline ::std::string* ConfigGuildStore::unsafe_arena_release_normal_goods() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGuildStore.normal_goods)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_normal_goods();
  return normal_goods_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGuildStore::unsafe_arena_set_allocated_normal_goods(
    ::std::string* normal_goods) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (normal_goods != NULL) {
    set_has_normal_goods();
  } else {
    clear_has_normal_goods();
  }
  normal_goods_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      normal_goods, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGuildStore.normal_goods)
}

// required bytes extra_goods = 4;
inline bool ConfigGuildStore::has_extra_goods() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigGuildStore::set_has_extra_goods() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigGuildStore::clear_has_extra_goods() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigGuildStore::clear_extra_goods() {
  extra_goods_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_extra_goods();
}
inline const ::std::string& ConfigGuildStore::extra_goods() const {
  // @@protoc_insertion_point(field_get:db.ConfigGuildStore.extra_goods)
  return extra_goods_.Get();
}
inline void ConfigGuildStore::set_extra_goods(const ::std::string& value) {
  set_has_extra_goods();
  extra_goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGuildStore.extra_goods)
}
#if LANG_CXX11
inline void ConfigGuildStore::set_extra_goods(::std::string&& value) {
  set_has_extra_goods();
  extra_goods_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGuildStore.extra_goods)
}
#endif
inline void ConfigGuildStore::set_extra_goods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra_goods();
  extra_goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGuildStore.extra_goods)
}
inline void ConfigGuildStore::set_extra_goods(const void* value,
    size_t size) {
  set_has_extra_goods();
  extra_goods_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGuildStore.extra_goods)
}
inline ::std::string* ConfigGuildStore::mutable_extra_goods() {
  set_has_extra_goods();
  // @@protoc_insertion_point(field_mutable:db.ConfigGuildStore.extra_goods)
  return extra_goods_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGuildStore::release_extra_goods() {
  // @@protoc_insertion_point(field_release:db.ConfigGuildStore.extra_goods)
  if (!has_extra_goods()) {
    return NULL;
  }
  clear_has_extra_goods();
  return extra_goods_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGuildStore::set_allocated_extra_goods(::std::string* extra_goods) {
  if (extra_goods != NULL) {
    set_has_extra_goods();
  } else {
    clear_has_extra_goods();
  }
  extra_goods_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_goods,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGuildStore.extra_goods)
}
inline ::std::string* ConfigGuildStore::unsafe_arena_release_extra_goods() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGuildStore.extra_goods)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_extra_goods();
  return extra_goods_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGuildStore::unsafe_arena_set_allocated_extra_goods(
    ::std::string* extra_goods) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (extra_goods != NULL) {
    set_has_extra_goods();
  } else {
    clear_has_extra_goods();
  }
  extra_goods_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      extra_goods, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGuildStore.extra_goods)
}

// required bytes refresh_times = 5;
inline bool ConfigGuildStore::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigGuildStore::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigGuildStore::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigGuildStore::clear_refresh_times() {
  refresh_times_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_refresh_times();
}
inline const ::std::string& ConfigGuildStore::refresh_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigGuildStore.refresh_times)
  return refresh_times_.Get();
}
inline void ConfigGuildStore::set_refresh_times(const ::std::string& value) {
  set_has_refresh_times();
  refresh_times_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGuildStore.refresh_times)
}
#if LANG_CXX11
inline void ConfigGuildStore::set_refresh_times(::std::string&& value) {
  set_has_refresh_times();
  refresh_times_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGuildStore.refresh_times)
}
#endif
inline void ConfigGuildStore::set_refresh_times(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_refresh_times();
  refresh_times_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGuildStore.refresh_times)
}
inline void ConfigGuildStore::set_refresh_times(const void* value,
    size_t size) {
  set_has_refresh_times();
  refresh_times_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGuildStore.refresh_times)
}
inline ::std::string* ConfigGuildStore::mutable_refresh_times() {
  set_has_refresh_times();
  // @@protoc_insertion_point(field_mutable:db.ConfigGuildStore.refresh_times)
  return refresh_times_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGuildStore::release_refresh_times() {
  // @@protoc_insertion_point(field_release:db.ConfigGuildStore.refresh_times)
  if (!has_refresh_times()) {
    return NULL;
  }
  clear_has_refresh_times();
  return refresh_times_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGuildStore::set_allocated_refresh_times(::std::string* refresh_times) {
  if (refresh_times != NULL) {
    set_has_refresh_times();
  } else {
    clear_has_refresh_times();
  }
  refresh_times_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refresh_times,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGuildStore.refresh_times)
}
inline ::std::string* ConfigGuildStore::unsafe_arena_release_refresh_times() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGuildStore.refresh_times)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_refresh_times();
  return refresh_times_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGuildStore::unsafe_arena_set_allocated_refresh_times(
    ::std::string* refresh_times) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (refresh_times != NULL) {
    set_has_refresh_times();
  } else {
    clear_has_refresh_times();
  }
  refresh_times_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      refresh_times, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGuildStore.refresh_times)
}

// required bytes discount = 6;
inline bool ConfigGuildStore::has_discount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigGuildStore::set_has_discount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigGuildStore::clear_has_discount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigGuildStore::clear_discount() {
  discount_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_discount();
}
inline const ::std::string& ConfigGuildStore::discount() const {
  // @@protoc_insertion_point(field_get:db.ConfigGuildStore.discount)
  return discount_.Get();
}
inline void ConfigGuildStore::set_discount(const ::std::string& value) {
  set_has_discount();
  discount_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGuildStore.discount)
}
#if LANG_CXX11
inline void ConfigGuildStore::set_discount(::std::string&& value) {
  set_has_discount();
  discount_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGuildStore.discount)
}
#endif
inline void ConfigGuildStore::set_discount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_discount();
  discount_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGuildStore.discount)
}
inline void ConfigGuildStore::set_discount(const void* value,
    size_t size) {
  set_has_discount();
  discount_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGuildStore.discount)
}
inline ::std::string* ConfigGuildStore::mutable_discount() {
  set_has_discount();
  // @@protoc_insertion_point(field_mutable:db.ConfigGuildStore.discount)
  return discount_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGuildStore::release_discount() {
  // @@protoc_insertion_point(field_release:db.ConfigGuildStore.discount)
  if (!has_discount()) {
    return NULL;
  }
  clear_has_discount();
  return discount_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGuildStore::set_allocated_discount(::std::string* discount) {
  if (discount != NULL) {
    set_has_discount();
  } else {
    clear_has_discount();
  }
  discount_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discount,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGuildStore.discount)
}
inline ::std::string* ConfigGuildStore::unsafe_arena_release_discount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGuildStore.discount)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_discount();
  return discount_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGuildStore::unsafe_arena_set_allocated_discount(
    ::std::string* discount) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (discount != NULL) {
    set_has_discount();
  } else {
    clear_has_discount();
  }
  discount_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      discount, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGuildStore.discount)
}

// -------------------------------------------------------------------

// ConfigGameExchange

// required int32 id = 1;
inline bool ConfigGameExchange::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigGameExchange::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigGameExchange::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigGameExchange::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigGameExchange::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameExchange.id)
  return id_;
}
inline void ConfigGameExchange::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameExchange.id)
}

// required bytes cost = 2;
inline bool ConfigGameExchange::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigGameExchange::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigGameExchange::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigGameExchange::clear_cost() {
  cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_cost();
}
inline const ::std::string& ConfigGameExchange::cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameExchange.cost)
  return cost_.Get();
}
inline void ConfigGameExchange::set_cost(const ::std::string& value) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameExchange.cost)
}
#if LANG_CXX11
inline void ConfigGameExchange::set_cost(::std::string&& value) {
  set_has_cost();
  cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameExchange.cost)
}
#endif
inline void ConfigGameExchange::set_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameExchange.cost)
}
inline void ConfigGameExchange::set_cost(const void* value,
    size_t size) {
  set_has_cost();
  cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameExchange.cost)
}
inline ::std::string* ConfigGameExchange::mutable_cost() {
  set_has_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameExchange.cost)
  return cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameExchange::release_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigGameExchange.cost)
  if (!has_cost()) {
    return NULL;
  }
  clear_has_cost();
  return cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameExchange::set_allocated_cost(::std::string* cost) {
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameExchange.cost)
}
inline ::std::string* ConfigGameExchange::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameExchange.cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_cost();
  return cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameExchange::unsafe_arena_set_allocated_cost(
    ::std::string* cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cost != NULL) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameExchange.cost)
}

// required bytes get = 3;
inline bool ConfigGameExchange::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigGameExchange::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigGameExchange::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigGameExchange::clear_get() {
  get_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_get();
}
inline const ::std::string& ConfigGameExchange::get() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameExchange.get)
  return get_.Get();
}
inline void ConfigGameExchange::set_get(const ::std::string& value) {
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameExchange.get)
}
#if LANG_CXX11
inline void ConfigGameExchange::set_get(::std::string&& value) {
  set_has_get();
  get_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameExchange.get)
}
#endif
inline void ConfigGameExchange::set_get(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameExchange.get)
}
inline void ConfigGameExchange::set_get(const void* value,
    size_t size) {
  set_has_get();
  get_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameExchange.get)
}
inline ::std::string* ConfigGameExchange::mutable_get() {
  set_has_get();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameExchange.get)
  return get_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameExchange::release_get() {
  // @@protoc_insertion_point(field_release:db.ConfigGameExchange.get)
  if (!has_get()) {
    return NULL;
  }
  clear_has_get();
  return get_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameExchange::set_allocated_get(::std::string* get) {
  if (get != NULL) {
    set_has_get();
  } else {
    clear_has_get();
  }
  get_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), get,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameExchange.get)
}
inline ::std::string* ConfigGameExchange::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameExchange.get)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_get();
  return get_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameExchange::unsafe_arena_set_allocated_get(
    ::std::string* get) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (get != NULL) {
    set_has_get();
  } else {
    clear_has_get();
  }
  get_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      get, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameExchange.get)
}

// -------------------------------------------------------------------

// ConfigName

// required int32 id = 1;
inline bool ConfigName::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigName::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigName::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigName::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigName::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigName.id)
  return id_;
}
inline void ConfigName::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigName.id)
}

// required bytes name = 2;
inline bool ConfigName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigName::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigName::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigName.name)
  return name_.Get();
}
inline void ConfigName::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigName.name)
}
#if LANG_CXX11
inline void ConfigName::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigName.name)
}
#endif
inline void ConfigName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigName.name)
}
inline void ConfigName::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigName.name)
}
inline ::std::string* ConfigName::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigName.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigName::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigName.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigName.name)
}
inline ::std::string* ConfigName::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigName.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigName::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigName.name)
}

// -------------------------------------------------------------------

// ConfigFirstname

// required int32 id = 1;
inline bool ConfigFirstname::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFirstname::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigFirstname::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigFirstname::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigFirstname::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigFirstname.id)
  return id_;
}
inline void ConfigFirstname::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFirstname.id)
}

// required int32 type = 2;
inline bool ConfigFirstname::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFirstname::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigFirstname::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigFirstname::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigFirstname::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigFirstname.type)
  return type_;
}
inline void ConfigFirstname::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFirstname.type)
}

// required bytes name = 3;
inline bool ConfigFirstname::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFirstname::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigFirstname::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigFirstname::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigFirstname::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigFirstname.name)
  return name_.Get();
}
inline void ConfigFirstname::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigFirstname.name)
}
#if LANG_CXX11
inline void ConfigFirstname::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigFirstname.name)
}
#endif
inline void ConfigFirstname::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigFirstname.name)
}
inline void ConfigFirstname::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigFirstname.name)
}
inline ::std::string* ConfigFirstname::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigFirstname.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigFirstname::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigFirstname.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigFirstname::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigFirstname.name)
}
inline ::std::string* ConfigFirstname::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigFirstname.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigFirstname::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigFirstname.name)
}

// required int32 order = 4;
inline bool ConfigFirstname::has_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFirstname::set_has_order() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigFirstname::clear_has_order() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigFirstname::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 ConfigFirstname::order() const {
  // @@protoc_insertion_point(field_get:db.ConfigFirstname.order)
  return order_;
}
inline void ConfigFirstname::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigFirstname.order)
}

// -------------------------------------------------------------------

// ConfigLastname

// required int32 id = 1;
inline bool ConfigLastname::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigLastname::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigLastname::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigLastname::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigLastname::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigLastname.id)
  return id_;
}
inline void ConfigLastname::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLastname.id)
}

// required int32 type = 2;
inline bool ConfigLastname::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigLastname::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigLastname::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigLastname::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigLastname::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigLastname.type)
  return type_;
}
inline void ConfigLastname::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLastname.type)
}

// required bytes name = 3;
inline bool ConfigLastname::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigLastname::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigLastname::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigLastname::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& ConfigLastname::name() const {
  // @@protoc_insertion_point(field_get:db.ConfigLastname.name)
  return name_.Get();
}
inline void ConfigLastname::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigLastname.name)
}
#if LANG_CXX11
inline void ConfigLastname::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigLastname.name)
}
#endif
inline void ConfigLastname::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigLastname.name)
}
inline void ConfigLastname::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigLastname.name)
}
inline ::std::string* ConfigLastname::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.ConfigLastname.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigLastname::release_name() {
  // @@protoc_insertion_point(field_release:db.ConfigLastname.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigLastname::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigLastname.name)
}
inline ::std::string* ConfigLastname::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigLastname.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigLastname::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigLastname.name)
}

// required int32 order = 4;
inline bool ConfigLastname::has_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigLastname::set_has_order() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigLastname::clear_has_order() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigLastname::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 ConfigLastname::order() const {
  // @@protoc_insertion_point(field_get:db.ConfigLastname.order)
  return order_;
}
inline void ConfigLastname::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigLastname.order)
}

// -------------------------------------------------------------------

// ConfigPlayerInvade

// required bytes match_score = 1;
inline bool ConfigPlayerInvade::has_match_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigPlayerInvade::set_has_match_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigPlayerInvade::clear_has_match_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigPlayerInvade::clear_match_score() {
  match_score_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_match_score();
}
inline const ::std::string& ConfigPlayerInvade::match_score() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.match_score)
  return match_score_.Get();
}
inline void ConfigPlayerInvade::set_match_score(const ::std::string& value) {
  set_has_match_score();
  match_score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.match_score)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_match_score(::std::string&& value) {
  set_has_match_score();
  match_score_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.match_score)
}
#endif
inline void ConfigPlayerInvade::set_match_score(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_score();
  match_score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.match_score)
}
inline void ConfigPlayerInvade::set_match_score(const void* value,
    size_t size) {
  set_has_match_score();
  match_score_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.match_score)
}
inline ::std::string* ConfigPlayerInvade::mutable_match_score() {
  set_has_match_score();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.match_score)
  return match_score_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_match_score() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.match_score)
  if (!has_match_score()) {
    return NULL;
  }
  clear_has_match_score();
  return match_score_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_match_score(::std::string* match_score) {
  if (match_score != NULL) {
    set_has_match_score();
  } else {
    clear_has_match_score();
  }
  match_score_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_score,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.match_score)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_match_score() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.match_score)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_match_score();
  return match_score_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_match_score(
    ::std::string* match_score) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (match_score != NULL) {
    set_has_match_score();
  } else {
    clear_has_match_score();
  }
  match_score_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      match_score, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.match_score)
}

// required int32 match_remain = 2;
inline bool ConfigPlayerInvade::has_match_remain() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigPlayerInvade::set_has_match_remain() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigPlayerInvade::clear_has_match_remain() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigPlayerInvade::clear_match_remain() {
  match_remain_ = 0;
  clear_has_match_remain();
}
inline ::google::protobuf::int32 ConfigPlayerInvade::match_remain() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.match_remain)
  return match_remain_;
}
inline void ConfigPlayerInvade::set_match_remain(::google::protobuf::int32 value) {
  set_has_match_remain();
  match_remain_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.match_remain)
}

// required bytes refresh_times = 3;
inline bool ConfigPlayerInvade::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigPlayerInvade::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigPlayerInvade::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigPlayerInvade::clear_refresh_times() {
  refresh_times_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_refresh_times();
}
inline const ::std::string& ConfigPlayerInvade::refresh_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.refresh_times)
  return refresh_times_.Get();
}
inline void ConfigPlayerInvade::set_refresh_times(const ::std::string& value) {
  set_has_refresh_times();
  refresh_times_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.refresh_times)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_refresh_times(::std::string&& value) {
  set_has_refresh_times();
  refresh_times_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.refresh_times)
}
#endif
inline void ConfigPlayerInvade::set_refresh_times(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_refresh_times();
  refresh_times_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.refresh_times)
}
inline void ConfigPlayerInvade::set_refresh_times(const void* value,
    size_t size) {
  set_has_refresh_times();
  refresh_times_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.refresh_times)
}
inline ::std::string* ConfigPlayerInvade::mutable_refresh_times() {
  set_has_refresh_times();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.refresh_times)
  return refresh_times_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_refresh_times() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.refresh_times)
  if (!has_refresh_times()) {
    return NULL;
  }
  clear_has_refresh_times();
  return refresh_times_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_refresh_times(::std::string* refresh_times) {
  if (refresh_times != NULL) {
    set_has_refresh_times();
  } else {
    clear_has_refresh_times();
  }
  refresh_times_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refresh_times,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.refresh_times)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_refresh_times() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.refresh_times)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_refresh_times();
  return refresh_times_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_refresh_times(
    ::std::string* refresh_times) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (refresh_times != NULL) {
    set_has_refresh_times();
  } else {
    clear_has_refresh_times();
  }
  refresh_times_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      refresh_times, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.refresh_times)
}

// required bytes entrys = 4;
inline bool ConfigPlayerInvade::has_entrys() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigPlayerInvade::set_has_entrys() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigPlayerInvade::clear_has_entrys() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigPlayerInvade::clear_entrys() {
  entrys_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_entrys();
}
inline const ::std::string& ConfigPlayerInvade::entrys() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.entrys)
  return entrys_.Get();
}
inline void ConfigPlayerInvade::set_entrys(const ::std::string& value) {
  set_has_entrys();
  entrys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.entrys)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_entrys(::std::string&& value) {
  set_has_entrys();
  entrys_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.entrys)
}
#endif
inline void ConfigPlayerInvade::set_entrys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entrys();
  entrys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.entrys)
}
inline void ConfigPlayerInvade::set_entrys(const void* value,
    size_t size) {
  set_has_entrys();
  entrys_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.entrys)
}
inline ::std::string* ConfigPlayerInvade::mutable_entrys() {
  set_has_entrys();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.entrys)
  return entrys_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_entrys() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.entrys)
  if (!has_entrys()) {
    return NULL;
  }
  clear_has_entrys();
  return entrys_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_entrys(::std::string* entrys) {
  if (entrys != NULL) {
    set_has_entrys();
  } else {
    clear_has_entrys();
  }
  entrys_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entrys,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.entrys)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_entrys() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.entrys)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_entrys();
  return entrys_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_entrys(
    ::std::string* entrys) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (entrys != NULL) {
    set_has_entrys();
  } else {
    clear_has_entrys();
  }
  entrys_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      entrys, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.entrys)
}

// required bytes defend_time = 5;
inline bool ConfigPlayerInvade::has_defend_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigPlayerInvade::set_has_defend_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigPlayerInvade::clear_has_defend_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigPlayerInvade::clear_defend_time() {
  defend_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_defend_time();
}
inline const ::std::string& ConfigPlayerInvade::defend_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.defend_time)
  return defend_time_.Get();
}
inline void ConfigPlayerInvade::set_defend_time(const ::std::string& value) {
  set_has_defend_time();
  defend_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.defend_time)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_defend_time(::std::string&& value) {
  set_has_defend_time();
  defend_time_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.defend_time)
}
#endif
inline void ConfigPlayerInvade::set_defend_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_defend_time();
  defend_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.defend_time)
}
inline void ConfigPlayerInvade::set_defend_time(const void* value,
    size_t size) {
  set_has_defend_time();
  defend_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.defend_time)
}
inline ::std::string* ConfigPlayerInvade::mutable_defend_time() {
  set_has_defend_time();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.defend_time)
  return defend_time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_defend_time() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.defend_time)
  if (!has_defend_time()) {
    return NULL;
  }
  clear_has_defend_time();
  return defend_time_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_defend_time(::std::string* defend_time) {
  if (defend_time != NULL) {
    set_has_defend_time();
  } else {
    clear_has_defend_time();
  }
  defend_time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), defend_time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.defend_time)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_defend_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.defend_time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_defend_time();
  return defend_time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_defend_time(
    ::std::string* defend_time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (defend_time != NULL) {
    set_has_defend_time();
  } else {
    clear_has_defend_time();
  }
  defend_time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      defend_time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.defend_time)
}

// required bytes win_room = 6;
inline bool ConfigPlayerInvade::has_win_room() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigPlayerInvade::set_has_win_room() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigPlayerInvade::clear_has_win_room() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigPlayerInvade::clear_win_room() {
  win_room_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_win_room();
}
inline const ::std::string& ConfigPlayerInvade::win_room() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.win_room)
  return win_room_.Get();
}
inline void ConfigPlayerInvade::set_win_room(const ::std::string& value) {
  set_has_win_room();
  win_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.win_room)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_win_room(::std::string&& value) {
  set_has_win_room();
  win_room_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.win_room)
}
#endif
inline void ConfigPlayerInvade::set_win_room(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_win_room();
  win_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.win_room)
}
inline void ConfigPlayerInvade::set_win_room(const void* value,
    size_t size) {
  set_has_win_room();
  win_room_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.win_room)
}
inline ::std::string* ConfigPlayerInvade::mutable_win_room() {
  set_has_win_room();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.win_room)
  return win_room_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_win_room() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.win_room)
  if (!has_win_room()) {
    return NULL;
  }
  clear_has_win_room();
  return win_room_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_win_room(::std::string* win_room) {
  if (win_room != NULL) {
    set_has_win_room();
  } else {
    clear_has_win_room();
  }
  win_room_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), win_room,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.win_room)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_win_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.win_room)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_win_room();
  return win_room_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_win_room(
    ::std::string* win_room) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (win_room != NULL) {
    set_has_win_room();
  } else {
    clear_has_win_room();
  }
  win_room_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      win_room, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.win_room)
}

// required int32 revenge_time = 7;
inline bool ConfigPlayerInvade::has_revenge_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigPlayerInvade::set_has_revenge_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigPlayerInvade::clear_has_revenge_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigPlayerInvade::clear_revenge_time() {
  revenge_time_ = 0;
  clear_has_revenge_time();
}
inline ::google::protobuf::int32 ConfigPlayerInvade::revenge_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.revenge_time)
  return revenge_time_;
}
inline void ConfigPlayerInvade::set_revenge_time(::google::protobuf::int32 value) {
  set_has_revenge_time();
  revenge_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.revenge_time)
}

// required bytes reward_ratio = 8;
inline bool ConfigPlayerInvade::has_reward_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigPlayerInvade::set_has_reward_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigPlayerInvade::clear_has_reward_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigPlayerInvade::clear_reward_ratio() {
  reward_ratio_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_reward_ratio();
}
inline const ::std::string& ConfigPlayerInvade::reward_ratio() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.reward_ratio)
  return reward_ratio_.Get();
}
inline void ConfigPlayerInvade::set_reward_ratio(const ::std::string& value) {
  set_has_reward_ratio();
  reward_ratio_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.reward_ratio)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_reward_ratio(::std::string&& value) {
  set_has_reward_ratio();
  reward_ratio_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.reward_ratio)
}
#endif
inline void ConfigPlayerInvade::set_reward_ratio(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward_ratio();
  reward_ratio_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.reward_ratio)
}
inline void ConfigPlayerInvade::set_reward_ratio(const void* value,
    size_t size) {
  set_has_reward_ratio();
  reward_ratio_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.reward_ratio)
}
inline ::std::string* ConfigPlayerInvade::mutable_reward_ratio() {
  set_has_reward_ratio();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.reward_ratio)
  return reward_ratio_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_reward_ratio() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.reward_ratio)
  if (!has_reward_ratio()) {
    return NULL;
  }
  clear_has_reward_ratio();
  return reward_ratio_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_reward_ratio(::std::string* reward_ratio) {
  if (reward_ratio != NULL) {
    set_has_reward_ratio();
  } else {
    clear_has_reward_ratio();
  }
  reward_ratio_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward_ratio,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.reward_ratio)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_reward_ratio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.reward_ratio)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_reward_ratio();
  return reward_ratio_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_reward_ratio(
    ::std::string* reward_ratio) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reward_ratio != NULL) {
    set_has_reward_ratio();
  } else {
    clear_has_reward_ratio();
  }
  reward_ratio_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reward_ratio, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.reward_ratio)
}

// required float extra_reward_ratio = 9;
inline bool ConfigPlayerInvade::has_extra_reward_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigPlayerInvade::set_has_extra_reward_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigPlayerInvade::clear_has_extra_reward_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigPlayerInvade::clear_extra_reward_ratio() {
  extra_reward_ratio_ = 0;
  clear_has_extra_reward_ratio();
}
inline float ConfigPlayerInvade::extra_reward_ratio() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.extra_reward_ratio)
  return extra_reward_ratio_;
}
inline void ConfigPlayerInvade::set_extra_reward_ratio(float value) {
  set_has_extra_reward_ratio();
  extra_reward_ratio_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.extra_reward_ratio)
}

// required bytes invade_cost = 10;
inline bool ConfigPlayerInvade::has_invade_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigPlayerInvade::set_has_invade_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigPlayerInvade::clear_has_invade_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigPlayerInvade::clear_invade_cost() {
  invade_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_invade_cost();
}
inline const ::std::string& ConfigPlayerInvade::invade_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.invade_cost)
  return invade_cost_.Get();
}
inline void ConfigPlayerInvade::set_invade_cost(const ::std::string& value) {
  set_has_invade_cost();
  invade_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.invade_cost)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_invade_cost(::std::string&& value) {
  set_has_invade_cost();
  invade_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.invade_cost)
}
#endif
inline void ConfigPlayerInvade::set_invade_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invade_cost();
  invade_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.invade_cost)
}
inline void ConfigPlayerInvade::set_invade_cost(const void* value,
    size_t size) {
  set_has_invade_cost();
  invade_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.invade_cost)
}
inline ::std::string* ConfigPlayerInvade::mutable_invade_cost() {
  set_has_invade_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.invade_cost)
  return invade_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_invade_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.invade_cost)
  if (!has_invade_cost()) {
    return NULL;
  }
  clear_has_invade_cost();
  return invade_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_invade_cost(::std::string* invade_cost) {
  if (invade_cost != NULL) {
    set_has_invade_cost();
  } else {
    clear_has_invade_cost();
  }
  invade_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invade_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.invade_cost)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_invade_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.invade_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_invade_cost();
  return invade_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_invade_cost(
    ::std::string* invade_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (invade_cost != NULL) {
    set_has_invade_cost();
  } else {
    clear_has_invade_cost();
  }
  invade_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      invade_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.invade_cost)
}

// required int32 record_remain_time = 11;
inline bool ConfigPlayerInvade::has_record_remain_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigPlayerInvade::set_has_record_remain_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigPlayerInvade::clear_has_record_remain_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigPlayerInvade::clear_record_remain_time() {
  record_remain_time_ = 0;
  clear_has_record_remain_time();
}
inline ::google::protobuf::int32 ConfigPlayerInvade::record_remain_time() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.record_remain_time)
  return record_remain_time_;
}
inline void ConfigPlayerInvade::set_record_remain_time(::google::protobuf::int32 value) {
  set_has_record_remain_time();
  record_remain_time_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.record_remain_time)
}

// required bytes room_effect = 12;
inline bool ConfigPlayerInvade::has_room_effect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigPlayerInvade::set_has_room_effect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigPlayerInvade::clear_has_room_effect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigPlayerInvade::clear_room_effect() {
  room_effect_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_room_effect();
}
inline const ::std::string& ConfigPlayerInvade::room_effect() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.room_effect)
  return room_effect_.Get();
}
inline void ConfigPlayerInvade::set_room_effect(const ::std::string& value) {
  set_has_room_effect();
  room_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.room_effect)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_room_effect(::std::string&& value) {
  set_has_room_effect();
  room_effect_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.room_effect)
}
#endif
inline void ConfigPlayerInvade::set_room_effect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_room_effect();
  room_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.room_effect)
}
inline void ConfigPlayerInvade::set_room_effect(const void* value,
    size_t size) {
  set_has_room_effect();
  room_effect_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.room_effect)
}
inline ::std::string* ConfigPlayerInvade::mutable_room_effect() {
  set_has_room_effect();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.room_effect)
  return room_effect_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_room_effect() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.room_effect)
  if (!has_room_effect()) {
    return NULL;
  }
  clear_has_room_effect();
  return room_effect_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_room_effect(::std::string* room_effect) {
  if (room_effect != NULL) {
    set_has_room_effect();
  } else {
    clear_has_room_effect();
  }
  room_effect_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_effect,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.room_effect)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_room_effect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.room_effect)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_room_effect();
  return room_effect_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_room_effect(
    ::std::string* room_effect) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_effect != NULL) {
    set_has_room_effect();
  } else {
    clear_has_room_effect();
  }
  room_effect_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_effect, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.room_effect)
}

// required bytes drop_limit = 13;
inline bool ConfigPlayerInvade::has_drop_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigPlayerInvade::set_has_drop_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigPlayerInvade::clear_has_drop_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigPlayerInvade::clear_drop_limit() {
  drop_limit_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop_limit();
}
inline const ::std::string& ConfigPlayerInvade::drop_limit() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.drop_limit)
  return drop_limit_.Get();
}
inline void ConfigPlayerInvade::set_drop_limit(const ::std::string& value) {
  set_has_drop_limit();
  drop_limit_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.drop_limit)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_drop_limit(::std::string&& value) {
  set_has_drop_limit();
  drop_limit_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.drop_limit)
}
#endif
inline void ConfigPlayerInvade::set_drop_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop_limit();
  drop_limit_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.drop_limit)
}
inline void ConfigPlayerInvade::set_drop_limit(const void* value,
    size_t size) {
  set_has_drop_limit();
  drop_limit_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.drop_limit)
}
inline ::std::string* ConfigPlayerInvade::mutable_drop_limit() {
  set_has_drop_limit();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.drop_limit)
  return drop_limit_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_drop_limit() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.drop_limit)
  if (!has_drop_limit()) {
    return NULL;
  }
  clear_has_drop_limit();
  return drop_limit_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_drop_limit(::std::string* drop_limit) {
  if (drop_limit != NULL) {
    set_has_drop_limit();
  } else {
    clear_has_drop_limit();
  }
  drop_limit_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_limit,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.drop_limit)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_drop_limit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.drop_limit)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop_limit();
  return drop_limit_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_drop_limit(
    ::std::string* drop_limit) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop_limit != NULL) {
    set_has_drop_limit();
  } else {
    clear_has_drop_limit();
  }
  drop_limit_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop_limit, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.drop_limit)
}

// required bytes drop_limit_once = 14;
inline bool ConfigPlayerInvade::has_drop_limit_once() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigPlayerInvade::set_has_drop_limit_once() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigPlayerInvade::clear_has_drop_limit_once() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigPlayerInvade::clear_drop_limit_once() {
  drop_limit_once_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_drop_limit_once();
}
inline const ::std::string& ConfigPlayerInvade::drop_limit_once() const {
  // @@protoc_insertion_point(field_get:db.ConfigPlayerInvade.drop_limit_once)
  return drop_limit_once_.Get();
}
inline void ConfigPlayerInvade::set_drop_limit_once(const ::std::string& value) {
  set_has_drop_limit_once();
  drop_limit_once_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigPlayerInvade.drop_limit_once)
}
#if LANG_CXX11
inline void ConfigPlayerInvade::set_drop_limit_once(::std::string&& value) {
  set_has_drop_limit_once();
  drop_limit_once_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigPlayerInvade.drop_limit_once)
}
#endif
inline void ConfigPlayerInvade::set_drop_limit_once(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_drop_limit_once();
  drop_limit_once_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigPlayerInvade.drop_limit_once)
}
inline void ConfigPlayerInvade::set_drop_limit_once(const void* value,
    size_t size) {
  set_has_drop_limit_once();
  drop_limit_once_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigPlayerInvade.drop_limit_once)
}
inline ::std::string* ConfigPlayerInvade::mutable_drop_limit_once() {
  set_has_drop_limit_once();
  // @@protoc_insertion_point(field_mutable:db.ConfigPlayerInvade.drop_limit_once)
  return drop_limit_once_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigPlayerInvade::release_drop_limit_once() {
  // @@protoc_insertion_point(field_release:db.ConfigPlayerInvade.drop_limit_once)
  if (!has_drop_limit_once()) {
    return NULL;
  }
  clear_has_drop_limit_once();
  return drop_limit_once_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::set_allocated_drop_limit_once(::std::string* drop_limit_once) {
  if (drop_limit_once != NULL) {
    set_has_drop_limit_once();
  } else {
    clear_has_drop_limit_once();
  }
  drop_limit_once_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_limit_once,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigPlayerInvade.drop_limit_once)
}
inline ::std::string* ConfigPlayerInvade::unsafe_arena_release_drop_limit_once() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigPlayerInvade.drop_limit_once)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_drop_limit_once();
  return drop_limit_once_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigPlayerInvade::unsafe_arena_set_allocated_drop_limit_once(
    ::std::string* drop_limit_once) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (drop_limit_once != NULL) {
    set_has_drop_limit_once();
  } else {
    clear_has_drop_limit_once();
  }
  drop_limit_once_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      drop_limit_once, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigPlayerInvade.drop_limit_once)
}

// -------------------------------------------------------------------

// ConfigRoomModel

// required int32 id = 1;
inline bool ConfigRoomModel::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigRoomModel::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigRoomModel::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigRoomModel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConfigRoomModel::id() const {
  // @@protoc_insertion_point(field_get:db.ConfigRoomModel.id)
  return id_;
}
inline void ConfigRoomModel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRoomModel.id)
}

// required int32 type = 2;
inline bool ConfigRoomModel::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigRoomModel::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigRoomModel::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigRoomModel::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ConfigRoomModel::type() const {
  // @@protoc_insertion_point(field_get:db.ConfigRoomModel.type)
  return type_;
}
inline void ConfigRoomModel::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigRoomModel.type)
}

// required bytes size = 3;
inline bool ConfigRoomModel::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRoomModel::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRoomModel::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRoomModel::clear_size() {
  size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_size();
}
inline const ::std::string& ConfigRoomModel::size() const {
  // @@protoc_insertion_point(field_get:db.ConfigRoomModel.size)
  return size_.Get();
}
inline void ConfigRoomModel::set_size(const ::std::string& value) {
  set_has_size();
  size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRoomModel.size)
}
#if LANG_CXX11
inline void ConfigRoomModel::set_size(::std::string&& value) {
  set_has_size();
  size_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRoomModel.size)
}
#endif
inline void ConfigRoomModel::set_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_size();
  size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRoomModel.size)
}
inline void ConfigRoomModel::set_size(const void* value,
    size_t size) {
  set_has_size();
  size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRoomModel.size)
}
inline ::std::string* ConfigRoomModel::mutable_size() {
  set_has_size();
  // @@protoc_insertion_point(field_mutable:db.ConfigRoomModel.size)
  return size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRoomModel::release_size() {
  // @@protoc_insertion_point(field_release:db.ConfigRoomModel.size)
  if (!has_size()) {
    return NULL;
  }
  clear_has_size();
  return size_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRoomModel::set_allocated_size(::std::string* size) {
  if (size != NULL) {
    set_has_size();
  } else {
    clear_has_size();
  }
  size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRoomModel.size)
}
inline ::std::string* ConfigRoomModel::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRoomModel.size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_size();
  return size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRoomModel::unsafe_arena_set_allocated_size(
    ::std::string* size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (size != NULL) {
    set_has_size();
  } else {
    clear_has_size();
  }
  size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRoomModel.size)
}

// required bytes shape = 4;
inline bool ConfigRoomModel::has_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRoomModel::set_has_shape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRoomModel::clear_has_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRoomModel::clear_shape() {
  shape_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_shape();
}
inline const ::std::string& ConfigRoomModel::shape() const {
  // @@protoc_insertion_point(field_get:db.ConfigRoomModel.shape)
  return shape_.Get();
}
inline void ConfigRoomModel::set_shape(const ::std::string& value) {
  set_has_shape();
  shape_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRoomModel.shape)
}
#if LANG_CXX11
inline void ConfigRoomModel::set_shape(::std::string&& value) {
  set_has_shape();
  shape_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRoomModel.shape)
}
#endif
inline void ConfigRoomModel::set_shape(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shape();
  shape_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRoomModel.shape)
}
inline void ConfigRoomModel::set_shape(const void* value,
    size_t size) {
  set_has_shape();
  shape_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRoomModel.shape)
}
inline ::std::string* ConfigRoomModel::mutable_shape() {
  set_has_shape();
  // @@protoc_insertion_point(field_mutable:db.ConfigRoomModel.shape)
  return shape_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRoomModel::release_shape() {
  // @@protoc_insertion_point(field_release:db.ConfigRoomModel.shape)
  if (!has_shape()) {
    return NULL;
  }
  clear_has_shape();
  return shape_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRoomModel::set_allocated_shape(::std::string* shape) {
  if (shape != NULL) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shape,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRoomModel.shape)
}
inline ::std::string* ConfigRoomModel::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRoomModel.shape)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_shape();
  return shape_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRoomModel::unsafe_arena_set_allocated_shape(
    ::std::string* shape) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (shape != NULL) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      shape, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRoomModel.shape)
}

// required bytes unlock_cost = 5;
inline bool ConfigRoomModel::has_unlock_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigRoomModel::set_has_unlock_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigRoomModel::clear_has_unlock_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigRoomModel::clear_unlock_cost() {
  unlock_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_unlock_cost();
}
inline const ::std::string& ConfigRoomModel::unlock_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigRoomModel.unlock_cost)
  return unlock_cost_.Get();
}
inline void ConfigRoomModel::set_unlock_cost(const ::std::string& value) {
  set_has_unlock_cost();
  unlock_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigRoomModel.unlock_cost)
}
#if LANG_CXX11
inline void ConfigRoomModel::set_unlock_cost(::std::string&& value) {
  set_has_unlock_cost();
  unlock_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigRoomModel.unlock_cost)
}
#endif
inline void ConfigRoomModel::set_unlock_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_cost();
  unlock_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigRoomModel.unlock_cost)
}
inline void ConfigRoomModel::set_unlock_cost(const void* value,
    size_t size) {
  set_has_unlock_cost();
  unlock_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigRoomModel.unlock_cost)
}
inline ::std::string* ConfigRoomModel::mutable_unlock_cost() {
  set_has_unlock_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigRoomModel.unlock_cost)
  return unlock_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRoomModel::release_unlock_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigRoomModel.unlock_cost)
  if (!has_unlock_cost()) {
    return NULL;
  }
  clear_has_unlock_cost();
  return unlock_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigRoomModel::set_allocated_unlock_cost(::std::string* unlock_cost) {
  if (unlock_cost != NULL) {
    set_has_unlock_cost();
  } else {
    clear_has_unlock_cost();
  }
  unlock_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigRoomModel.unlock_cost)
}
inline ::std::string* ConfigRoomModel::unsafe_arena_release_unlock_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigRoomModel.unlock_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_unlock_cost();
  return unlock_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRoomModel::unsafe_arena_set_allocated_unlock_cost(
    ::std::string* unlock_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unlock_cost != NULL) {
    set_has_unlock_cost();
  } else {
    clear_has_unlock_cost();
  }
  unlock_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unlock_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigRoomModel.unlock_cost)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_StoredProcConfig_2eproto
