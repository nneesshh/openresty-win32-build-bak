// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcTreasureMap.proto

#include "StoredProcTreasureMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_StoredProcTreasureMap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcTreasureMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigTreasureMap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcTreasureMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigTreasureMapActivity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcTreasureMap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigTreasureMapTile;
}  // namespace protobuf_StoredProcTreasureMap_2eproto
namespace db {
class ConfigTreasureMapTileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigTreasureMapTile>
      _instance;
} _ConfigTreasureMapTile_default_instance_;
class ConfigTreasureMapTileListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigTreasureMapTileList>
      _instance;
} _ConfigTreasureMapTileList_default_instance_;
class ConfigTreasureMapActivityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigTreasureMapActivity>
      _instance;
} _ConfigTreasureMapActivity_default_instance_;
class ConfigTreasureMapActivityListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigTreasureMapActivityList>
      _instance;
} _ConfigTreasureMapActivityList_default_instance_;
class ConfigTreasureMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigTreasureMap>
      _instance;
} _ConfigTreasureMap_default_instance_;
class ConfigTreasureMapListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigTreasureMapList>
      _instance;
} _ConfigTreasureMapList_default_instance_;
class UserStatsTreasureMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserStatsTreasureMap>
      _instance;
} _UserStatsTreasureMap_default_instance_;
class UserTreasureMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserTreasureMap>
      _instance;
} _UserTreasureMap_default_instance_;
}  // namespace db
namespace protobuf_StoredProcTreasureMap_2eproto {
static void InitDefaultsConfigTreasureMapTile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigTreasureMapTile_default_instance_;
    new (ptr) ::db::ConfigTreasureMapTile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigTreasureMapTile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigTreasureMapTile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigTreasureMapTile}, {}};

static void InitDefaultsConfigTreasureMapTileList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigTreasureMapTileList_default_instance_;
    new (ptr) ::db::ConfigTreasureMapTileList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigTreasureMapTileList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigTreasureMapTileList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigTreasureMapTileList}, {
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapTile.base,}};

static void InitDefaultsConfigTreasureMapActivity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigTreasureMapActivity_default_instance_;
    new (ptr) ::db::ConfigTreasureMapActivity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigTreasureMapActivity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigTreasureMapActivity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigTreasureMapActivity}, {}};

static void InitDefaultsConfigTreasureMapActivityList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigTreasureMapActivityList_default_instance_;
    new (ptr) ::db::ConfigTreasureMapActivityList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigTreasureMapActivityList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigTreasureMapActivityList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigTreasureMapActivityList}, {
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapActivity.base,}};

static void InitDefaultsConfigTreasureMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigTreasureMap_default_instance_;
    new (ptr) ::db::ConfigTreasureMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigTreasureMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigTreasureMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigTreasureMap}, {}};

static void InitDefaultsConfigTreasureMapList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_ConfigTreasureMapList_default_instance_;
    new (ptr) ::db::ConfigTreasureMapList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::ConfigTreasureMapList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConfigTreasureMapList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfigTreasureMapList}, {
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMap.base,}};

static void InitDefaultsUserStatsTreasureMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserStatsTreasureMap_default_instance_;
    new (ptr) ::db::UserStatsTreasureMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserStatsTreasureMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserStatsTreasureMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserStatsTreasureMap}, {}};

static void InitDefaultsUserTreasureMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserTreasureMap_default_instance_;
    new (ptr) ::db::UserTreasureMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserTreasureMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserTreasureMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserTreasureMap}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigTreasureMapTile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigTreasureMapTileList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigTreasureMapActivity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigTreasureMapActivityList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigTreasureMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigTreasureMapList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserStatsTreasureMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserTreasureMap.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapTile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapTile, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapTile, map_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapTile, map_data_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapTileList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapTileList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapTileList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapActivity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapActivity, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapActivity, num1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapActivity, num2_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapActivityList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapActivityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapActivityList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, toolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, tool_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, level_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, monster_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, monster_drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, treasure_drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMap, trap_lost_),
  9,
  10,
  0,
  1,
  11,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::ConfigTreasureMapList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsTreasureMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsTreasureMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsTreasureMap, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsTreasureMap, refreshtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsTreasureMap, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsTreasureMap, num1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserStatsTreasureMap, num2_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, toolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, areaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, coord_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, coord_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, monster_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, trap_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, trap_lost_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserTreasureMap, optime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  7,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::db::ConfigTreasureMapTile)},
  { 11, 17, sizeof(::db::ConfigTreasureMapTileList)},
  { 18, 26, sizeof(::db::ConfigTreasureMapActivity)},
  { 29, 35, sizeof(::db::ConfigTreasureMapActivityList)},
  { 36, 53, sizeof(::db::ConfigTreasureMap)},
  { 65, 71, sizeof(::db::ConfigTreasureMapList)},
  { 72, 82, sizeof(::db::UserStatsTreasureMap)},
  { 87, 103, sizeof(::db::UserTreasureMap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigTreasureMapTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigTreasureMapTileList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigTreasureMapActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigTreasureMapActivityList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigTreasureMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_ConfigTreasureMapList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserStatsTreasureMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserTreasureMap_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "StoredProcTreasureMap.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033StoredProcTreasureMap.proto\022\002db\"J\n\025Con"
      "figTreasureMapTile\022\r\n\005level\030\001 \002(\005\022\020\n\010map"
      "_size\030\002 \002(\014\022\020\n\010map_data\030\003 \002(\014\"D\n\031ConfigT"
      "reasureMapTileList\022\'\n\004list\030\001 \003(\0132\031.db.Co"
      "nfigTreasureMapTile\"F\n\031ConfigTreasureMap"
      "Activity\022\r\n\005level\030\001 \002(\005\022\014\n\004num1\030\002 \002(\005\022\014\n"
      "\004num2\030\003 \002(\005\"L\n\035ConfigTreasureMapActivity"
      "List\022+\n\004list\030\001 \003(\0132\035.db.ConfigTreasureMa"
      "pActivity\"\361\001\n\021ConfigTreasureMap\022\016\n\006tooli"
      "d\030\001 \002(\005\022\021\n\ttool_type\030\002 \002(\005\022\014\n\004name\030\003 \002(\014"
      "\022\014\n\004desc\030\004 \002(\014\022\016\n\006itemid\030\005 \002(\004\022\020\n\010locati"
      "on\030\013 \002(\014\022\023\n\013level_range\030\014 \002(\014\022\017\n\007trigger"
      "\030\r \002(\014\022\025\n\rmonster_group\030\016 \002(\014\022\024\n\014monster"
      "_drop\030\017 \002(\014\022\025\n\rtreasure_drop\030\020 \002(\014\022\021\n\ttr"
      "ap_lost\030\021 \002(\014\"<\n\025ConfigTreasureMapList\022#"
      "\n\004list\030\001 \003(\0132\025.db.ConfigTreasureMap\"e\n\024U"
      "serStatsTreasureMap\022\016\n\006userid\030\001 \002(\014\022\023\n\013r"
      "efreshtime\030\002 \002(\020\022\014\n\004flag\030\003 \002(\r\022\014\n\004num1\030\004"
      " \002(\r\022\014\n\004num2\030\005 \002(\r\"\317\001\n\017UserTreasureMap\022\016"
      "\n\006userid\030\001 \002(\014\022\n\n\002sn\030\002 \002(\005\022\016\n\006toolid\030\003 \002"
      "(\005\022\r\n\005state\030\004 \002(\005\022\016\n\006areaid\030\005 \002(\005\022\017\n\007coo"
      "rd_x\030\006 \002(\005\022\017\n\007coord_y\030\007 \002(\005\022\025\n\rmonster_g"
      "roup\030\013 \002(\005\022\021\n\ttrap_type\030\025 \002(\005\022\025\n\rtrap_lo"
      "st_num\030\026 \002(\005\022\016\n\006optime\030\037 \001(\020B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 953);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StoredProcTreasureMap.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StoredProcTreasureMap_2eproto
namespace db {

// ===================================================================

void ConfigTreasureMapTile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigTreasureMapTile::kLevelFieldNumber;
const int ConfigTreasureMapTile::kMapSizeFieldNumber;
const int ConfigTreasureMapTile::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigTreasureMapTile::ConfigTreasureMapTile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapTile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigTreasureMapTile)
}
ConfigTreasureMapTile::ConfigTreasureMapTile(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapTile.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigTreasureMapTile)
}
ConfigTreasureMapTile::ConfigTreasureMapTile(const ConfigTreasureMapTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_size()) {
    map_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_size(),
      GetArenaNoVirtual());
  }
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_data()) {
    map_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data(),
      GetArenaNoVirtual());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:db.ConfigTreasureMapTile)
}

void ConfigTreasureMapTile::SharedCtor() {
  map_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

ConfigTreasureMapTile::~ConfigTreasureMapTile() {
  // @@protoc_insertion_point(destructor:db.ConfigTreasureMapTile)
  SharedDtor();
}

void ConfigTreasureMapTile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  map_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigTreasureMapTile::ArenaDtor(void* object) {
  ConfigTreasureMapTile* _this = reinterpret_cast< ConfigTreasureMapTile* >(object);
  (void)_this;
}
void ConfigTreasureMapTile::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigTreasureMapTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigTreasureMapTile::descriptor() {
  ::protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigTreasureMapTile& ConfigTreasureMapTile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapTile.base);
  return *internal_default_instance();
}


void ConfigTreasureMapTile::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigTreasureMapTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      map_size_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_data_.ClearNonDefaultToEmpty();
    }
  }
  level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigTreasureMapTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigTreasureMapTile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes map_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes map_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigTreasureMapTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigTreasureMapTile)
  return false;
#undef DO_
}

void ConfigTreasureMapTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigTreasureMapTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required bytes map_size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->map_size(), output);
  }

  // required bytes map_data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->map_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigTreasureMapTile)
}

::google::protobuf::uint8* ConfigTreasureMapTile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigTreasureMapTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required bytes map_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->map_size(), target);
  }

  // required bytes map_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->map_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigTreasureMapTile)
  return target;
}

size_t ConfigTreasureMapTile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigTreasureMapTile)
  size_t total_size = 0;

  if (has_map_size()) {
    // required bytes map_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_size());
  }

  if (has_map_data()) {
    // required bytes map_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_data());
  }

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  return total_size;
}
size_t ConfigTreasureMapTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigTreasureMapTile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes map_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_size());

    // required bytes map_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_data());

    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigTreasureMapTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigTreasureMapTile)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigTreasureMapTile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigTreasureMapTile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigTreasureMapTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigTreasureMapTile)
    MergeFrom(*source);
  }
}

void ConfigTreasureMapTile::MergeFrom(const ConfigTreasureMapTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigTreasureMapTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_map_size(from.map_size());
    }
    if (cached_has_bits & 0x00000002u) {
      set_map_data(from.map_data());
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigTreasureMapTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigTreasureMapTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigTreasureMapTile::CopyFrom(const ConfigTreasureMapTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigTreasureMapTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigTreasureMapTile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigTreasureMapTile::Swap(ConfigTreasureMapTile* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigTreasureMapTile* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigTreasureMapTile::UnsafeArenaSwap(ConfigTreasureMapTile* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigTreasureMapTile::InternalSwap(ConfigTreasureMapTile* other) {
  using std::swap;
  map_size_.Swap(&other->map_size_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_data_.Swap(&other->map_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigTreasureMapTile::GetMetadata() const {
  protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigTreasureMapTileList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigTreasureMapTileList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigTreasureMapTileList::ConfigTreasureMapTileList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapTileList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigTreasureMapTileList)
}
ConfigTreasureMapTileList::ConfigTreasureMapTileList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapTileList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigTreasureMapTileList)
}
ConfigTreasureMapTileList::ConfigTreasureMapTileList(const ConfigTreasureMapTileList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigTreasureMapTileList)
}

void ConfigTreasureMapTileList::SharedCtor() {
}

ConfigTreasureMapTileList::~ConfigTreasureMapTileList() {
  // @@protoc_insertion_point(destructor:db.ConfigTreasureMapTileList)
  SharedDtor();
}

void ConfigTreasureMapTileList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigTreasureMapTileList::ArenaDtor(void* object) {
  ConfigTreasureMapTileList* _this = reinterpret_cast< ConfigTreasureMapTileList* >(object);
  (void)_this;
}
void ConfigTreasureMapTileList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigTreasureMapTileList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigTreasureMapTileList::descriptor() {
  ::protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigTreasureMapTileList& ConfigTreasureMapTileList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapTileList.base);
  return *internal_default_instance();
}


void ConfigTreasureMapTileList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigTreasureMapTileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigTreasureMapTileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigTreasureMapTileList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigTreasureMapTile list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigTreasureMapTileList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigTreasureMapTileList)
  return false;
#undef DO_
}

void ConfigTreasureMapTileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigTreasureMapTileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigTreasureMapTile list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigTreasureMapTileList)
}

::google::protobuf::uint8* ConfigTreasureMapTileList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigTreasureMapTileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigTreasureMapTile list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigTreasureMapTileList)
  return target;
}

size_t ConfigTreasureMapTileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigTreasureMapTileList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigTreasureMapTile list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigTreasureMapTileList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigTreasureMapTileList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigTreasureMapTileList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigTreasureMapTileList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigTreasureMapTileList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigTreasureMapTileList)
    MergeFrom(*source);
  }
}

void ConfigTreasureMapTileList::MergeFrom(const ConfigTreasureMapTileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigTreasureMapTileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigTreasureMapTileList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigTreasureMapTileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigTreasureMapTileList::CopyFrom(const ConfigTreasureMapTileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigTreasureMapTileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigTreasureMapTileList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigTreasureMapTileList::Swap(ConfigTreasureMapTileList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigTreasureMapTileList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigTreasureMapTileList::UnsafeArenaSwap(ConfigTreasureMapTileList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigTreasureMapTileList::InternalSwap(ConfigTreasureMapTileList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigTreasureMapTileList::GetMetadata() const {
  protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigTreasureMapActivity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigTreasureMapActivity::kLevelFieldNumber;
const int ConfigTreasureMapActivity::kNum1FieldNumber;
const int ConfigTreasureMapActivity::kNum2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigTreasureMapActivity::ConfigTreasureMapActivity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapActivity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigTreasureMapActivity)
}
ConfigTreasureMapActivity::ConfigTreasureMapActivity(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapActivity.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigTreasureMapActivity)
}
ConfigTreasureMapActivity::ConfigTreasureMapActivity(const ConfigTreasureMapActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&num2_) -
    reinterpret_cast<char*>(&level_)) + sizeof(num2_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigTreasureMapActivity)
}

void ConfigTreasureMapActivity::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num2_) -
      reinterpret_cast<char*>(&level_)) + sizeof(num2_));
}

ConfigTreasureMapActivity::~ConfigTreasureMapActivity() {
  // @@protoc_insertion_point(destructor:db.ConfigTreasureMapActivity)
  SharedDtor();
}

void ConfigTreasureMapActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigTreasureMapActivity::ArenaDtor(void* object) {
  ConfigTreasureMapActivity* _this = reinterpret_cast< ConfigTreasureMapActivity* >(object);
  (void)_this;
}
void ConfigTreasureMapActivity::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigTreasureMapActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigTreasureMapActivity::descriptor() {
  ::protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigTreasureMapActivity& ConfigTreasureMapActivity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapActivity.base);
  return *internal_default_instance();
}


void ConfigTreasureMapActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigTreasureMapActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num2_) -
        reinterpret_cast<char*>(&level_)) + sizeof(num2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigTreasureMapActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigTreasureMapActivity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigTreasureMapActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigTreasureMapActivity)
  return false;
#undef DO_
}

void ConfigTreasureMapActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigTreasureMapActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 num1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num1(), output);
  }

  // required int32 num2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigTreasureMapActivity)
}

::google::protobuf::uint8* ConfigTreasureMapActivity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigTreasureMapActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 num1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num1(), target);
  }

  // required int32 num2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigTreasureMapActivity)
  return target;
}

size_t ConfigTreasureMapActivity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigTreasureMapActivity)
  size_t total_size = 0;

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_num1()) {
    // required int32 num1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num1());
  }

  if (has_num2()) {
    // required int32 num2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num2());
  }

  return total_size;
}
size_t ConfigTreasureMapActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigTreasureMapActivity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 num1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num1());

    // required int32 num2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigTreasureMapActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigTreasureMapActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigTreasureMapActivity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigTreasureMapActivity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigTreasureMapActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigTreasureMapActivity)
    MergeFrom(*source);
  }
}

void ConfigTreasureMapActivity::MergeFrom(const ConfigTreasureMapActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigTreasureMapActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      num1_ = from.num1_;
    }
    if (cached_has_bits & 0x00000004u) {
      num2_ = from.num2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigTreasureMapActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigTreasureMapActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigTreasureMapActivity::CopyFrom(const ConfigTreasureMapActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigTreasureMapActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigTreasureMapActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConfigTreasureMapActivity::Swap(ConfigTreasureMapActivity* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigTreasureMapActivity* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigTreasureMapActivity::UnsafeArenaSwap(ConfigTreasureMapActivity* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigTreasureMapActivity::InternalSwap(ConfigTreasureMapActivity* other) {
  using std::swap;
  swap(level_, other->level_);
  swap(num1_, other->num1_);
  swap(num2_, other->num2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigTreasureMapActivity::GetMetadata() const {
  protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigTreasureMapActivityList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigTreasureMapActivityList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigTreasureMapActivityList::ConfigTreasureMapActivityList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapActivityList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigTreasureMapActivityList)
}
ConfigTreasureMapActivityList::ConfigTreasureMapActivityList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapActivityList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigTreasureMapActivityList)
}
ConfigTreasureMapActivityList::ConfigTreasureMapActivityList(const ConfigTreasureMapActivityList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigTreasureMapActivityList)
}

void ConfigTreasureMapActivityList::SharedCtor() {
}

ConfigTreasureMapActivityList::~ConfigTreasureMapActivityList() {
  // @@protoc_insertion_point(destructor:db.ConfigTreasureMapActivityList)
  SharedDtor();
}

void ConfigTreasureMapActivityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigTreasureMapActivityList::ArenaDtor(void* object) {
  ConfigTreasureMapActivityList* _this = reinterpret_cast< ConfigTreasureMapActivityList* >(object);
  (void)_this;
}
void ConfigTreasureMapActivityList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigTreasureMapActivityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigTreasureMapActivityList::descriptor() {
  ::protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigTreasureMapActivityList& ConfigTreasureMapActivityList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapActivityList.base);
  return *internal_default_instance();
}


void ConfigTreasureMapActivityList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigTreasureMapActivityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigTreasureMapActivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigTreasureMapActivityList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigTreasureMapActivity list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigTreasureMapActivityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigTreasureMapActivityList)
  return false;
#undef DO_
}

void ConfigTreasureMapActivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigTreasureMapActivityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigTreasureMapActivity list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigTreasureMapActivityList)
}

::google::protobuf::uint8* ConfigTreasureMapActivityList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigTreasureMapActivityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigTreasureMapActivity list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigTreasureMapActivityList)
  return target;
}

size_t ConfigTreasureMapActivityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigTreasureMapActivityList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigTreasureMapActivity list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigTreasureMapActivityList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigTreasureMapActivityList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigTreasureMapActivityList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigTreasureMapActivityList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigTreasureMapActivityList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigTreasureMapActivityList)
    MergeFrom(*source);
  }
}

void ConfigTreasureMapActivityList::MergeFrom(const ConfigTreasureMapActivityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigTreasureMapActivityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigTreasureMapActivityList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigTreasureMapActivityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigTreasureMapActivityList::CopyFrom(const ConfigTreasureMapActivityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigTreasureMapActivityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigTreasureMapActivityList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigTreasureMapActivityList::Swap(ConfigTreasureMapActivityList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigTreasureMapActivityList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigTreasureMapActivityList::UnsafeArenaSwap(ConfigTreasureMapActivityList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigTreasureMapActivityList::InternalSwap(ConfigTreasureMapActivityList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigTreasureMapActivityList::GetMetadata() const {
  protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigTreasureMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigTreasureMap::kToolidFieldNumber;
const int ConfigTreasureMap::kToolTypeFieldNumber;
const int ConfigTreasureMap::kNameFieldNumber;
const int ConfigTreasureMap::kDescFieldNumber;
const int ConfigTreasureMap::kItemidFieldNumber;
const int ConfigTreasureMap::kLocationFieldNumber;
const int ConfigTreasureMap::kLevelRangeFieldNumber;
const int ConfigTreasureMap::kTriggerFieldNumber;
const int ConfigTreasureMap::kMonsterGroupFieldNumber;
const int ConfigTreasureMap::kMonsterDropFieldNumber;
const int ConfigTreasureMap::kTreasureDropFieldNumber;
const int ConfigTreasureMap::kTrapLostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigTreasureMap::ConfigTreasureMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigTreasureMap)
}
ConfigTreasureMap::ConfigTreasureMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMap.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigTreasureMap)
}
ConfigTreasureMap::ConfigTreasureMap(const ConfigTreasureMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc(),
      GetArenaNoVirtual());
  }
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location(),
      GetArenaNoVirtual());
  }
  level_range_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_level_range()) {
    level_range_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_range(),
      GetArenaNoVirtual());
  }
  trigger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger()) {
    trigger_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger(),
      GetArenaNoVirtual());
  }
  monster_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_monster_group()) {
    monster_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monster_group(),
      GetArenaNoVirtual());
  }
  monster_drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_monster_drop()) {
    monster_drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monster_drop(),
      GetArenaNoVirtual());
  }
  treasure_drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_treasure_drop()) {
    treasure_drop_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.treasure_drop(),
      GetArenaNoVirtual());
  }
  trap_lost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trap_lost()) {
    trap_lost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trap_lost(),
      GetArenaNoVirtual());
  }
  ::memcpy(&toolid_, &from.toolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&toolid_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:db.ConfigTreasureMap)
}

void ConfigTreasureMap::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_range_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monster_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monster_drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  treasure_drop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trap_lost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&toolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&toolid_)) + sizeof(itemid_));
}

ConfigTreasureMap::~ConfigTreasureMap() {
  // @@protoc_insertion_point(destructor:db.ConfigTreasureMap)
  SharedDtor();
}

void ConfigTreasureMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_range_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monster_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monster_drop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  treasure_drop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trap_lost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigTreasureMap::ArenaDtor(void* object) {
  ConfigTreasureMap* _this = reinterpret_cast< ConfigTreasureMap* >(object);
  (void)_this;
}
void ConfigTreasureMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigTreasureMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigTreasureMap::descriptor() {
  ::protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigTreasureMap& ConfigTreasureMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMap.base);
  return *internal_default_instance();
}


void ConfigTreasureMap::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      level_range_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      trigger_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      monster_group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      monster_drop_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      treasure_drop_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    trap_lost_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 3584u) {
    ::memset(&toolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&toolid_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigTreasureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigTreasureMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 toolid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_toolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tool_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tool_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 itemid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes location = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes level_range = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trigger = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes monster_group = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_monster_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes monster_drop = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_monster_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes treasure_drop = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_treasure_drop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes trap_lost = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trap_lost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigTreasureMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigTreasureMap)
  return false;
#undef DO_
}

void ConfigTreasureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 toolid = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->toolid(), output);
  }

  // required int32 tool_type = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tool_type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes desc = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->desc(), output);
  }

  // required uint64 itemid = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->itemid(), output);
  }

  // required bytes location = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->location(), output);
  }

  // required bytes level_range = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->level_range(), output);
  }

  // required bytes trigger = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->trigger(), output);
  }

  // required bytes monster_group = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->monster_group(), output);
  }

  // required bytes monster_drop = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->monster_drop(), output);
  }

  // required bytes treasure_drop = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->treasure_drop(), output);
  }

  // required bytes trap_lost = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->trap_lost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigTreasureMap)
}

::google::protobuf::uint8* ConfigTreasureMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 toolid = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->toolid(), target);
  }

  // required int32 tool_type = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tool_type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes desc = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->desc(), target);
  }

  // required uint64 itemid = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->itemid(), target);
  }

  // required bytes location = 11;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->location(), target);
  }

  // required bytes level_range = 12;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->level_range(), target);
  }

  // required bytes trigger = 13;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->trigger(), target);
  }

  // required bytes monster_group = 14;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->monster_group(), target);
  }

  // required bytes monster_drop = 15;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->monster_drop(), target);
  }

  // required bytes treasure_drop = 16;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->treasure_drop(), target);
  }

  // required bytes trap_lost = 17;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->trap_lost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigTreasureMap)
  return target;
}

size_t ConfigTreasureMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.ConfigTreasureMap)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_desc()) {
    // required bytes desc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (has_location()) {
    // required bytes location = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->location());
  }

  if (has_level_range()) {
    // required bytes level_range = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_range());
  }

  if (has_trigger()) {
    // required bytes trigger = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger());
  }

  if (has_monster_group()) {
    // required bytes monster_group = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monster_group());
  }

  if (has_monster_drop()) {
    // required bytes monster_drop = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monster_drop());
  }

  if (has_treasure_drop()) {
    // required bytes treasure_drop = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->treasure_drop());
  }

  if (has_trap_lost()) {
    // required bytes trap_lost = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trap_lost());
  }

  if (has_toolid()) {
    // required int32 toolid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toolid());
  }

  if (has_tool_type()) {
    // required int32 tool_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tool_type());
  }

  if (has_itemid()) {
    // required uint64 itemid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());
  }

  return total_size;
}
size_t ConfigTreasureMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigTreasureMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes desc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());

    // required bytes location = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->location());

    // required bytes level_range = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->level_range());

    // required bytes trigger = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trigger());

    // required bytes monster_group = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monster_group());

    // required bytes monster_drop = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->monster_drop());

    // required bytes treasure_drop = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->treasure_drop());

    // required bytes trap_lost = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trap_lost());

    // required int32 toolid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toolid());

    // required int32 tool_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tool_type());

    // required uint64 itemid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigTreasureMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigTreasureMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigTreasureMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigTreasureMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigTreasureMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigTreasureMap)
    MergeFrom(*source);
  }
}

void ConfigTreasureMap::MergeFrom(const ConfigTreasureMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigTreasureMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_desc(from.desc());
    }
    if (cached_has_bits & 0x00000004u) {
      set_location(from.location());
    }
    if (cached_has_bits & 0x00000008u) {
      set_level_range(from.level_range());
    }
    if (cached_has_bits & 0x00000010u) {
      set_trigger(from.trigger());
    }
    if (cached_has_bits & 0x00000020u) {
      set_monster_group(from.monster_group());
    }
    if (cached_has_bits & 0x00000040u) {
      set_monster_drop(from.monster_drop());
    }
    if (cached_has_bits & 0x00000080u) {
      set_treasure_drop(from.treasure_drop());
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      set_trap_lost(from.trap_lost());
    }
    if (cached_has_bits & 0x00000200u) {
      toolid_ = from.toolid_;
    }
    if (cached_has_bits & 0x00000400u) {
      tool_type_ = from.tool_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigTreasureMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigTreasureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigTreasureMap::CopyFrom(const ConfigTreasureMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigTreasureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigTreasureMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void ConfigTreasureMap::Swap(ConfigTreasureMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigTreasureMap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigTreasureMap::UnsafeArenaSwap(ConfigTreasureMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigTreasureMap::InternalSwap(ConfigTreasureMap* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level_range_.Swap(&other->level_range_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_.Swap(&other->trigger_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  monster_group_.Swap(&other->monster_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  monster_drop_.Swap(&other->monster_drop_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  treasure_drop_.Swap(&other->treasure_drop_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trap_lost_.Swap(&other->trap_lost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(toolid_, other->toolid_);
  swap(tool_type_, other->tool_type_);
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigTreasureMap::GetMetadata() const {
  protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfigTreasureMapList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigTreasureMapList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigTreasureMapList::ConfigTreasureMapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.ConfigTreasureMapList)
}
ConfigTreasureMapList::ConfigTreasureMapList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.ConfigTreasureMapList)
}
ConfigTreasureMapList::ConfigTreasureMapList(const ConfigTreasureMapList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:db.ConfigTreasureMapList)
}

void ConfigTreasureMapList::SharedCtor() {
}

ConfigTreasureMapList::~ConfigTreasureMapList() {
  // @@protoc_insertion_point(destructor:db.ConfigTreasureMapList)
  SharedDtor();
}

void ConfigTreasureMapList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ConfigTreasureMapList::ArenaDtor(void* object) {
  ConfigTreasureMapList* _this = reinterpret_cast< ConfigTreasureMapList* >(object);
  (void)_this;
}
void ConfigTreasureMapList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigTreasureMapList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfigTreasureMapList::descriptor() {
  ::protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigTreasureMapList& ConfigTreasureMapList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_ConfigTreasureMapList.base);
  return *internal_default_instance();
}


void ConfigTreasureMapList::Clear() {
// @@protoc_insertion_point(message_clear_start:db.ConfigTreasureMapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConfigTreasureMapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.ConfigTreasureMapList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db.ConfigTreasureMap list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.ConfigTreasureMapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.ConfigTreasureMapList)
  return false;
#undef DO_
}

void ConfigTreasureMapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.ConfigTreasureMapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigTreasureMap list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.ConfigTreasureMapList)
}

::google::protobuf::uint8* ConfigTreasureMapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.ConfigTreasureMapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .db.ConfigTreasureMap list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.ConfigTreasureMapList)
  return target;
}

size_t ConfigTreasureMapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.ConfigTreasureMapList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .db.ConfigTreasureMap list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigTreasureMapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.ConfigTreasureMapList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigTreasureMapList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigTreasureMapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.ConfigTreasureMapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.ConfigTreasureMapList)
    MergeFrom(*source);
  }
}

void ConfigTreasureMapList::MergeFrom(const ConfigTreasureMapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.ConfigTreasureMapList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ConfigTreasureMapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.ConfigTreasureMapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigTreasureMapList::CopyFrom(const ConfigTreasureMapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.ConfigTreasureMapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigTreasureMapList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ConfigTreasureMapList::Swap(ConfigTreasureMapList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigTreasureMapList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigTreasureMapList::UnsafeArenaSwap(ConfigTreasureMapList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigTreasureMapList::InternalSwap(ConfigTreasureMapList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfigTreasureMapList::GetMetadata() const {
  protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserStatsTreasureMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStatsTreasureMap::kUseridFieldNumber;
const int UserStatsTreasureMap::kRefreshtimeFieldNumber;
const int UserStatsTreasureMap::kFlagFieldNumber;
const int UserStatsTreasureMap::kNum1FieldNumber;
const int UserStatsTreasureMap::kNum2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStatsTreasureMap::UserStatsTreasureMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_UserStatsTreasureMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserStatsTreasureMap)
}
UserStatsTreasureMap::UserStatsTreasureMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_UserStatsTreasureMap.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserStatsTreasureMap)
}
UserStatsTreasureMap::UserStatsTreasureMap(const UserStatsTreasureMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&refreshtime_, &from.refreshtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&num2_) -
    reinterpret_cast<char*>(&refreshtime_)) + sizeof(num2_));
  // @@protoc_insertion_point(copy_constructor:db.UserStatsTreasureMap)
}

void UserStatsTreasureMap::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&refreshtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num2_) -
      reinterpret_cast<char*>(&refreshtime_)) + sizeof(num2_));
}

UserStatsTreasureMap::~UserStatsTreasureMap() {
  // @@protoc_insertion_point(destructor:db.UserStatsTreasureMap)
  SharedDtor();
}

void UserStatsTreasureMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserStatsTreasureMap::ArenaDtor(void* object) {
  UserStatsTreasureMap* _this = reinterpret_cast< UserStatsTreasureMap* >(object);
  (void)_this;
}
void UserStatsTreasureMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserStatsTreasureMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserStatsTreasureMap::descriptor() {
  ::protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserStatsTreasureMap& UserStatsTreasureMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_UserStatsTreasureMap.base);
  return *internal_default_instance();
}


void UserStatsTreasureMap::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserStatsTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 30u) {
    ::memset(&refreshtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num2_) -
        reinterpret_cast<char*>(&refreshtime_)) + sizeof(num2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserStatsTreasureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserStatsTreasureMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 refreshtime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_refreshtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &refreshtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 num1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 num2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserStatsTreasureMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserStatsTreasureMap)
  return false;
#undef DO_
}

void UserStatsTreasureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserStatsTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required sfixed64 refreshtime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->refreshtime(), output);
  }

  // required uint32 flag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  // required uint32 num1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num1(), output);
  }

  // required uint32 num2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserStatsTreasureMap)
}

::google::protobuf::uint8* UserStatsTreasureMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserStatsTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required sfixed64 refreshtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->refreshtime(), target);
  }

  // required uint32 flag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  // required uint32 num1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num1(), target);
  }

  // required uint32 num2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserStatsTreasureMap)
  return target;
}

size_t UserStatsTreasureMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserStatsTreasureMap)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_refreshtime()) {
    // required sfixed64 refreshtime = 2;
    total_size += 1 + 8;
  }

  if (has_flag()) {
    // required uint32 flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  if (has_num1()) {
    // required uint32 num1 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num1());
  }

  if (has_num2()) {
    // required uint32 num2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num2());
  }

  return total_size;
}
size_t UserStatsTreasureMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserStatsTreasureMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required sfixed64 refreshtime = 2;
    total_size += 1 + 8;

    // required uint32 flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());

    // required uint32 num1 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num1());

    // required uint32 num2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStatsTreasureMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserStatsTreasureMap)
  GOOGLE_DCHECK_NE(&from, this);
  const UserStatsTreasureMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserStatsTreasureMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserStatsTreasureMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserStatsTreasureMap)
    MergeFrom(*source);
  }
}

void UserStatsTreasureMap::MergeFrom(const UserStatsTreasureMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserStatsTreasureMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      refreshtime_ = from.refreshtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000008u) {
      num1_ = from.num1_;
    }
    if (cached_has_bits & 0x00000010u) {
      num2_ = from.num2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserStatsTreasureMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserStatsTreasureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatsTreasureMap::CopyFrom(const UserStatsTreasureMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserStatsTreasureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatsTreasureMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void UserStatsTreasureMap::Swap(UserStatsTreasureMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserStatsTreasureMap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserStatsTreasureMap::UnsafeArenaSwap(UserStatsTreasureMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserStatsTreasureMap::InternalSwap(UserStatsTreasureMap* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(refreshtime_, other->refreshtime_);
  swap(flag_, other->flag_);
  swap(num1_, other->num1_);
  swap(num2_, other->num2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserStatsTreasureMap::GetMetadata() const {
  protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserTreasureMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTreasureMap::kUseridFieldNumber;
const int UserTreasureMap::kSnFieldNumber;
const int UserTreasureMap::kToolidFieldNumber;
const int UserTreasureMap::kStateFieldNumber;
const int UserTreasureMap::kAreaidFieldNumber;
const int UserTreasureMap::kCoordXFieldNumber;
const int UserTreasureMap::kCoordYFieldNumber;
const int UserTreasureMap::kMonsterGroupFieldNumber;
const int UserTreasureMap::kTrapTypeFieldNumber;
const int UserTreasureMap::kTrapLostNumFieldNumber;
const int UserTreasureMap::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTreasureMap::UserTreasureMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StoredProcTreasureMap_2eproto::scc_info_UserTreasureMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserTreasureMap)
}
UserTreasureMap::UserTreasureMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_UserTreasureMap.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserTreasureMap)
}
UserTreasureMap::UserTreasureMap(const UserTreasureMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.UserTreasureMap)
}

void UserTreasureMap::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(optime_));
}

UserTreasureMap::~UserTreasureMap() {
  // @@protoc_insertion_point(destructor:db.UserTreasureMap)
  SharedDtor();
}

void UserTreasureMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserTreasureMap::ArenaDtor(void* object) {
  UserTreasureMap* _this = reinterpret_cast< UserTreasureMap* >(object);
  (void)_this;
}
void UserTreasureMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserTreasureMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserTreasureMap::descriptor() {
  ::protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserTreasureMap& UserTreasureMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StoredProcTreasureMap_2eproto::scc_info_UserTreasureMap.base);
  return *internal_default_instance();
}


void UserTreasureMap::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 254u) {
    ::memset(&sn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trap_lost_num_) -
        reinterpret_cast<char*>(&sn_)) + sizeof(trap_lost_num_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&monster_group_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&monster_group_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserTreasureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserTreasureMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 toolid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_toolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 areaid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_areaid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 coord_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_coord_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coord_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 coord_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_coord_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coord_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 monster_group = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_monster_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 trap_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_trap_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trap_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 trap_lost_num = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_trap_lost_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trap_lost_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 optime = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserTreasureMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserTreasureMap)
  return false;
#undef DO_
}

void UserTreasureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 sn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sn(), output);
  }

  // required int32 toolid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toolid(), output);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required int32 areaid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->areaid(), output);
  }

  // required int32 coord_x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->coord_x(), output);
  }

  // required int32 coord_y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->coord_y(), output);
  }

  // required int32 monster_group = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->monster_group(), output);
  }

  // required int32 trap_type = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->trap_type(), output);
  }

  // required int32 trap_lost_num = 22;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->trap_lost_num(), output);
  }

  // optional sfixed64 optime = 31;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(31, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserTreasureMap)
}

::google::protobuf::uint8* UserTreasureMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserTreasureMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 sn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sn(), target);
  }

  // required int32 toolid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toolid(), target);
  }

  // required int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required int32 areaid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->areaid(), target);
  }

  // required int32 coord_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->coord_x(), target);
  }

  // required int32 coord_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->coord_y(), target);
  }

  // required int32 monster_group = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->monster_group(), target);
  }

  // required int32 trap_type = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->trap_type(), target);
  }

  // required int32 trap_lost_num = 22;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->trap_lost_num(), target);
  }

  // optional sfixed64 optime = 31;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(31, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserTreasureMap)
  return target;
}

size_t UserTreasureMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserTreasureMap)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_sn()) {
    // required int32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());
  }

  if (has_toolid()) {
    // required int32 toolid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toolid());
  }

  if (has_state()) {
    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  if (has_areaid()) {
    // required int32 areaid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areaid());
  }

  if (has_coord_x()) {
    // required int32 coord_x = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coord_x());
  }

  if (has_coord_y()) {
    // required int32 coord_y = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coord_y());
  }

  if (has_trap_lost_num()) {
    // required int32 trap_lost_num = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trap_lost_num());
  }

  if (has_monster_group()) {
    // required int32 monster_group = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->monster_group());
  }

  if (has_trap_type()) {
    // required int32 trap_type = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trap_type());
  }

  return total_size;
}
size_t UserTreasureMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserTreasureMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required int32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());

    // required int32 toolid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toolid());

    // required int32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());

    // required int32 areaid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areaid());

    // required int32 coord_x = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coord_x());

    // required int32 coord_y = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coord_y());

    // required int32 trap_lost_num = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trap_lost_num());

    // required int32 monster_group = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->monster_group());

    // required int32 trap_type = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trap_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional sfixed64 optime = 31;
  if (has_optime()) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTreasureMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserTreasureMap)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTreasureMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserTreasureMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserTreasureMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserTreasureMap)
    MergeFrom(*source);
  }
}

void UserTreasureMap::MergeFrom(const UserTreasureMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserTreasureMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      sn_ = from.sn_;
    }
    if (cached_has_bits & 0x00000004u) {
      toolid_ = from.toolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      areaid_ = from.areaid_;
    }
    if (cached_has_bits & 0x00000020u) {
      coord_x_ = from.coord_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      coord_y_ = from.coord_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      trap_lost_num_ = from.trap_lost_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      monster_group_ = from.monster_group_;
    }
    if (cached_has_bits & 0x00000200u) {
      trap_type_ = from.trap_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserTreasureMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserTreasureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTreasureMap::CopyFrom(const UserTreasureMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserTreasureMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTreasureMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void UserTreasureMap::Swap(UserTreasureMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserTreasureMap* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserTreasureMap::UnsafeArenaSwap(UserTreasureMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserTreasureMap::InternalSwap(UserTreasureMap* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sn_, other->sn_);
  swap(toolid_, other->toolid_);
  swap(state_, other->state_);
  swap(areaid_, other->areaid_);
  swap(coord_x_, other->coord_x_);
  swap(coord_y_, other->coord_y_);
  swap(trap_lost_num_, other->trap_lost_num_);
  swap(monster_group_, other->monster_group_);
  swap(trap_type_, other->trap_type_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserTreasureMap::GetMetadata() const {
  protobuf_StoredProcTreasureMap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StoredProcTreasureMap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigTreasureMapTile* Arena::CreateMaybeMessage< ::db::ConfigTreasureMapTile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigTreasureMapTile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigTreasureMapTileList* Arena::CreateMaybeMessage< ::db::ConfigTreasureMapTileList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigTreasureMapTileList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigTreasureMapActivity* Arena::CreateMaybeMessage< ::db::ConfigTreasureMapActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigTreasureMapActivity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigTreasureMapActivityList* Arena::CreateMaybeMessage< ::db::ConfigTreasureMapActivityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigTreasureMapActivityList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigTreasureMap* Arena::CreateMaybeMessage< ::db::ConfigTreasureMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigTreasureMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::ConfigTreasureMapList* Arena::CreateMaybeMessage< ::db::ConfigTreasureMapList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::ConfigTreasureMapList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserStatsTreasureMap* Arena::CreateMaybeMessage< ::db::UserStatsTreasureMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserStatsTreasureMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserTreasureMap* Arena::CreateMaybeMessage< ::db::UserTreasureMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserTreasureMap >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
