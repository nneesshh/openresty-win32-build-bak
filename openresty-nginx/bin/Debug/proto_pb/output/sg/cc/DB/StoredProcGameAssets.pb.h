// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoredProcGameAssets.proto

#ifndef PROTOBUF_INCLUDED_StoredProcGameAssets_2eproto
#define PROTOBUF_INCLUDED_StoredProcGameAssets_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "UserDef.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_StoredProcGameAssets_2eproto 

namespace protobuf_StoredProcGameAssets_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_StoredProcGameAssets_2eproto
namespace db {
class ConfigGameServer;
class ConfigGameServerDefaultTypeInternal;
extern ConfigGameServerDefaultTypeInternal _ConfigGameServer_default_instance_;
class GameAnnouncement;
class GameAnnouncementDefaultTypeInternal;
extern GameAnnouncementDefaultTypeInternal _GameAnnouncement_default_instance_;
class GameRanking;
class GameRankingDefaultTypeInternal;
extern GameRankingDefaultTypeInternal _GameRanking_default_instance_;
class GameRobot;
class GameRobotDefaultTypeInternal;
extern GameRobotDefaultTypeInternal _GameRobot_default_instance_;
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class IslandBattleData;
class IslandBattleDataDefaultTypeInternal;
extern IslandBattleDataDefaultTypeInternal _IslandBattleData_default_instance_;
class UserCommonData;
class UserCommonDataDefaultTypeInternal;
extern UserCommonDataDefaultTypeInternal _UserCommonData_default_instance_;
class UserRankingData;
class UserRankingDataDefaultTypeInternal;
extern UserRankingDataDefaultTypeInternal _UserRankingData_default_instance_;
class proc_i_load_user_common_data;
class proc_i_load_user_common_dataDefaultTypeInternal;
extern proc_i_load_user_common_dataDefaultTypeInternal _proc_i_load_user_common_data_default_instance_;
class proc_i_load_user_common_data_Parameter;
class proc_i_load_user_common_data_ParameterDefaultTypeInternal;
extern proc_i_load_user_common_data_ParameterDefaultTypeInternal _proc_i_load_user_common_data_Parameter_default_instance_;
class proc_i_load_user_common_data_ReturnRecord;
class proc_i_load_user_common_data_ReturnRecordDefaultTypeInternal;
extern proc_i_load_user_common_data_ReturnRecordDefaultTypeInternal _proc_i_load_user_common_data_ReturnRecord_default_instance_;
class proc_i_load_user_ranking_data;
class proc_i_load_user_ranking_dataDefaultTypeInternal;
extern proc_i_load_user_ranking_dataDefaultTypeInternal _proc_i_load_user_ranking_data_default_instance_;
class proc_i_load_user_ranking_data_Parameter;
class proc_i_load_user_ranking_data_ParameterDefaultTypeInternal;
extern proc_i_load_user_ranking_data_ParameterDefaultTypeInternal _proc_i_load_user_ranking_data_Parameter_default_instance_;
class proc_i_load_user_ranking_data_ReturnRecord;
class proc_i_load_user_ranking_data_ReturnRecordDefaultTypeInternal;
extern proc_i_load_user_ranking_data_ReturnRecordDefaultTypeInternal _proc_i_load_user_ranking_data_ReturnRecord_default_instance_;
class proc_i_save_user_common_data;
class proc_i_save_user_common_dataDefaultTypeInternal;
extern proc_i_save_user_common_dataDefaultTypeInternal _proc_i_save_user_common_data_default_instance_;
class proc_i_save_user_common_data_Parameter;
class proc_i_save_user_common_data_ParameterDefaultTypeInternal;
extern proc_i_save_user_common_data_ParameterDefaultTypeInternal _proc_i_save_user_common_data_Parameter_default_instance_;
class proc_i_save_user_ranking_data;
class proc_i_save_user_ranking_dataDefaultTypeInternal;
extern proc_i_save_user_ranking_dataDefaultTypeInternal _proc_i_save_user_ranking_data_default_instance_;
class proc_i_save_user_ranking_data_Parameter;
class proc_i_save_user_ranking_data_ParameterDefaultTypeInternal;
extern proc_i_save_user_ranking_data_ParameterDefaultTypeInternal _proc_i_save_user_ranking_data_Parameter_default_instance_;
class proc_load_all_users;
class proc_load_all_usersDefaultTypeInternal;
extern proc_load_all_usersDefaultTypeInternal _proc_load_all_users_default_instance_;
class proc_load_all_users_Parameter;
class proc_load_all_users_ParameterDefaultTypeInternal;
extern proc_load_all_users_ParameterDefaultTypeInternal _proc_load_all_users_Parameter_default_instance_;
class proc_load_all_users_ReturnRecord;
class proc_load_all_users_ReturnRecordDefaultTypeInternal;
extern proc_load_all_users_ReturnRecordDefaultTypeInternal _proc_load_all_users_ReturnRecord_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::ConfigGameServer* Arena::CreateMaybeMessage<::db::ConfigGameServer>(Arena*);
template<> ::db::GameAnnouncement* Arena::CreateMaybeMessage<::db::GameAnnouncement>(Arena*);
template<> ::db::GameRanking* Arena::CreateMaybeMessage<::db::GameRanking>(Arena*);
template<> ::db::GameRobot* Arena::CreateMaybeMessage<::db::GameRobot>(Arena*);
template<> ::db::GameState* Arena::CreateMaybeMessage<::db::GameState>(Arena*);
template<> ::db::IslandBattleData* Arena::CreateMaybeMessage<::db::IslandBattleData>(Arena*);
template<> ::db::UserCommonData* Arena::CreateMaybeMessage<::db::UserCommonData>(Arena*);
template<> ::db::UserRankingData* Arena::CreateMaybeMessage<::db::UserRankingData>(Arena*);
template<> ::db::proc_i_load_user_common_data* Arena::CreateMaybeMessage<::db::proc_i_load_user_common_data>(Arena*);
template<> ::db::proc_i_load_user_common_data_Parameter* Arena::CreateMaybeMessage<::db::proc_i_load_user_common_data_Parameter>(Arena*);
template<> ::db::proc_i_load_user_common_data_ReturnRecord* Arena::CreateMaybeMessage<::db::proc_i_load_user_common_data_ReturnRecord>(Arena*);
template<> ::db::proc_i_load_user_ranking_data* Arena::CreateMaybeMessage<::db::proc_i_load_user_ranking_data>(Arena*);
template<> ::db::proc_i_load_user_ranking_data_Parameter* Arena::CreateMaybeMessage<::db::proc_i_load_user_ranking_data_Parameter>(Arena*);
template<> ::db::proc_i_load_user_ranking_data_ReturnRecord* Arena::CreateMaybeMessage<::db::proc_i_load_user_ranking_data_ReturnRecord>(Arena*);
template<> ::db::proc_i_save_user_common_data* Arena::CreateMaybeMessage<::db::proc_i_save_user_common_data>(Arena*);
template<> ::db::proc_i_save_user_common_data_Parameter* Arena::CreateMaybeMessage<::db::proc_i_save_user_common_data_Parameter>(Arena*);
template<> ::db::proc_i_save_user_ranking_data* Arena::CreateMaybeMessage<::db::proc_i_save_user_ranking_data>(Arena*);
template<> ::db::proc_i_save_user_ranking_data_Parameter* Arena::CreateMaybeMessage<::db::proc_i_save_user_ranking_data_Parameter>(Arena*);
template<> ::db::proc_load_all_users* Arena::CreateMaybeMessage<::db::proc_load_all_users>(Arena*);
template<> ::db::proc_load_all_users_Parameter* Arena::CreateMaybeMessage<::db::proc_load_all_users_Parameter>(Arena*);
template<> ::db::proc_load_all_users_ReturnRecord* Arena::CreateMaybeMessage<::db::proc_load_all_users_ReturnRecord>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class proc_load_all_users_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_load_all_users.Parameter) */ {
 public:
  proc_load_all_users_Parameter();
  virtual ~proc_load_all_users_Parameter();

  proc_load_all_users_Parameter(const proc_load_all_users_Parameter& from);

  inline proc_load_all_users_Parameter& operator=(const proc_load_all_users_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_load_all_users_Parameter(proc_load_all_users_Parameter&& from) noexcept
    : proc_load_all_users_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_load_all_users_Parameter& operator=(proc_load_all_users_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_load_all_users_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_load_all_users_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_load_all_users_Parameter*>(
               &_proc_load_all_users_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(proc_load_all_users_Parameter* other);
  void Swap(proc_load_all_users_Parameter* other);
  friend void swap(proc_load_all_users_Parameter& a, proc_load_all_users_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_load_all_users_Parameter* New() const final {
    return CreateMaybeMessage<proc_load_all_users_Parameter>(NULL);
  }

  proc_load_all_users_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_load_all_users_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_load_all_users_Parameter& from);
  void MergeFrom(const proc_load_all_users_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_load_all_users_Parameter* other);
  protected:
  explicit proc_load_all_users_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.proc_load_all_users.Parameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_load_all_users_ReturnRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_load_all_users.ReturnRecord) */ {
 public:
  proc_load_all_users_ReturnRecord();
  virtual ~proc_load_all_users_ReturnRecord();

  proc_load_all_users_ReturnRecord(const proc_load_all_users_ReturnRecord& from);

  inline proc_load_all_users_ReturnRecord& operator=(const proc_load_all_users_ReturnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_load_all_users_ReturnRecord(proc_load_all_users_ReturnRecord&& from) noexcept
    : proc_load_all_users_ReturnRecord() {
    *this = ::std::move(from);
  }

  inline proc_load_all_users_ReturnRecord& operator=(proc_load_all_users_ReturnRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_load_all_users_ReturnRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_load_all_users_ReturnRecord* internal_default_instance() {
    return reinterpret_cast<const proc_load_all_users_ReturnRecord*>(
               &_proc_load_all_users_ReturnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(proc_load_all_users_ReturnRecord* other);
  void Swap(proc_load_all_users_ReturnRecord* other);
  friend void swap(proc_load_all_users_ReturnRecord& a, proc_load_all_users_ReturnRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_load_all_users_ReturnRecord* New() const final {
    return CreateMaybeMessage<proc_load_all_users_ReturnRecord>(NULL);
  }

  proc_load_all_users_ReturnRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_load_all_users_ReturnRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_load_all_users_ReturnRecord& from);
  void MergeFrom(const proc_load_all_users_ReturnRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_load_all_users_ReturnRecord* other);
  protected:
  explicit proc_load_all_users_ReturnRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.UserAttribute attr = 1;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 1;
  private:
  const ::db::UserAttribute& _internal_attr() const;
  public:
  const ::db::UserAttribute& attr() const;
  ::db::UserAttribute* release_attr();
  ::db::UserAttribute* mutable_attr();
  void set_allocated_attr(::db::UserAttribute* attr);
  void unsafe_arena_set_allocated_attr(
      ::db::UserAttribute* attr);
  ::db::UserAttribute* unsafe_arena_release_attr();

  // @@protoc_insertion_point(class_scope:db.proc_load_all_users.ReturnRecord)
 private:
  void set_has_attr();
  void clear_has_attr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::UserAttribute* attr_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_load_all_users : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_load_all_users) */ {
 public:
  proc_load_all_users();
  virtual ~proc_load_all_users();

  proc_load_all_users(const proc_load_all_users& from);

  inline proc_load_all_users& operator=(const proc_load_all_users& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_load_all_users(proc_load_all_users&& from) noexcept
    : proc_load_all_users() {
    *this = ::std::move(from);
  }

  inline proc_load_all_users& operator=(proc_load_all_users&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_load_all_users& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_load_all_users* internal_default_instance() {
    return reinterpret_cast<const proc_load_all_users*>(
               &_proc_load_all_users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(proc_load_all_users* other);
  void Swap(proc_load_all_users* other);
  friend void swap(proc_load_all_users& a, proc_load_all_users& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_load_all_users* New() const final {
    return CreateMaybeMessage<proc_load_all_users>(NULL);
  }

  proc_load_all_users* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_load_all_users>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_load_all_users& from);
  void MergeFrom(const proc_load_all_users& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_load_all_users* other);
  protected:
  explicit proc_load_all_users(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_load_all_users_Parameter Parameter;
  typedef proc_load_all_users_ReturnRecord ReturnRecord;

  // accessors -------------------------------------------------------

  // repeated .db.proc_load_all_users.ReturnRecord return_record_list = 2;
  int return_record_list_size() const;
  void clear_return_record_list();
  static const int kReturnRecordListFieldNumber = 2;
  ::db::proc_load_all_users_ReturnRecord* mutable_return_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::proc_load_all_users_ReturnRecord >*
      mutable_return_record_list();
  const ::db::proc_load_all_users_ReturnRecord& return_record_list(int index) const;
  ::db::proc_load_all_users_ReturnRecord* add_return_record_list();
  const ::google::protobuf::RepeatedPtrField< ::db::proc_load_all_users_ReturnRecord >&
      return_record_list() const;

  // optional .db.proc_load_all_users.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_load_all_users_Parameter& _internal_param() const;
  public:
  const ::db::proc_load_all_users_Parameter& param() const;
  ::db::proc_load_all_users_Parameter* release_param();
  ::db::proc_load_all_users_Parameter* mutable_param();
  void set_allocated_param(::db::proc_load_all_users_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_load_all_users_Parameter* param);
  ::db::proc_load_all_users_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_load_all_users)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::proc_load_all_users_ReturnRecord > return_record_list_;
  ::db::proc_load_all_users_Parameter* param_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(GameState* other);
  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(NULL);
  }

  GameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  protected:
  explicit GameState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 daily_gift_id = 2;
  bool has_daily_gift_id() const;
  void clear_daily_gift_id();
  static const int kDailyGiftIdFieldNumber = 2;
  ::google::protobuf::int32 daily_gift_id() const;
  void set_daily_gift_id(::google::protobuf::int32 value);

  // optional sfixed64 daily_gift_refresh_time = 4;
  bool has_daily_gift_refresh_time() const;
  void clear_daily_gift_refresh_time();
  static const int kDailyGiftRefreshTimeFieldNumber = 4;
  ::google::protobuf::int64 daily_gift_refresh_time() const;
  void set_daily_gift_refresh_time(::google::protobuf::int64 value);

  // optional sfixed64 weekly_gift_refresh_time = 5;
  bool has_weekly_gift_refresh_time() const;
  void clear_weekly_gift_refresh_time();
  static const int kWeeklyGiftRefreshTimeFieldNumber = 5;
  ::google::protobuf::int64 weekly_gift_refresh_time() const;
  void set_weekly_gift_refresh_time(::google::protobuf::int64 value);

  // optional sfixed64 daily_pvp_reward_send_time = 6;
  bool has_daily_pvp_reward_send_time() const;
  void clear_daily_pvp_reward_send_time();
  static const int kDailyPvpRewardSendTimeFieldNumber = 6;
  ::google::protobuf::int64 daily_pvp_reward_send_time() const;
  void set_daily_pvp_reward_send_time(::google::protobuf::int64 value);

  // optional sfixed64 weekly_pvp_reward_send_time = 7;
  bool has_weekly_pvp_reward_send_time() const;
  void clear_weekly_pvp_reward_send_time();
  static const int kWeeklyPvpRewardSendTimeFieldNumber = 7;
  ::google::protobuf::int64 weekly_pvp_reward_send_time() const;
  void set_weekly_pvp_reward_send_time(::google::protobuf::int64 value);

  // optional sfixed64 monthly_pvp_reward_send_time = 8;
  bool has_monthly_pvp_reward_send_time() const;
  void clear_monthly_pvp_reward_send_time();
  static const int kMonthlyPvpRewardSendTimeFieldNumber = 8;
  ::google::protobuf::int64 monthly_pvp_reward_send_time() const;
  void set_monthly_pvp_reward_send_time(::google::protobuf::int64 value);

  // required int32 weekly_gift_id = 3;
  bool has_weekly_gift_id() const;
  void clear_weekly_gift_id();
  static const int kWeeklyGiftIdFieldNumber = 3;
  ::google::protobuf::int32 weekly_gift_id() const;
  void set_weekly_gift_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.GameState)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_daily_gift_id();
  void clear_has_daily_gift_id();
  void set_has_weekly_gift_id();
  void clear_has_weekly_gift_id();
  void set_has_daily_gift_refresh_time();
  void clear_has_daily_gift_refresh_time();
  void set_has_weekly_gift_refresh_time();
  void clear_has_weekly_gift_refresh_time();
  void set_has_daily_pvp_reward_send_time();
  void clear_has_daily_pvp_reward_send_time();
  void set_has_weekly_pvp_reward_send_time();
  void clear_has_weekly_pvp_reward_send_time();
  void set_has_monthly_pvp_reward_send_time();
  void clear_has_monthly_pvp_reward_send_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 daily_gift_id_;
  ::google::protobuf::int64 daily_gift_refresh_time_;
  ::google::protobuf::int64 weekly_gift_refresh_time_;
  ::google::protobuf::int64 daily_pvp_reward_send_time_;
  ::google::protobuf::int64 weekly_pvp_reward_send_time_;
  ::google::protobuf::int64 monthly_pvp_reward_send_time_;
  ::google::protobuf::int32 weekly_gift_id_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IslandBattleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.IslandBattleData) */ {
 public:
  IslandBattleData();
  virtual ~IslandBattleData();

  IslandBattleData(const IslandBattleData& from);

  inline IslandBattleData& operator=(const IslandBattleData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IslandBattleData(IslandBattleData&& from) noexcept
    : IslandBattleData() {
    *this = ::std::move(from);
  }

  inline IslandBattleData& operator=(IslandBattleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const IslandBattleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IslandBattleData* internal_default_instance() {
    return reinterpret_cast<const IslandBattleData*>(
               &_IslandBattleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(IslandBattleData* other);
  void Swap(IslandBattleData* other);
  friend void swap(IslandBattleData& a, IslandBattleData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IslandBattleData* New() const final {
    return CreateMaybeMessage<IslandBattleData>(NULL);
  }

  IslandBattleData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IslandBattleData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IslandBattleData& from);
  void MergeFrom(const IslandBattleData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IslandBattleData* other);
  protected:
  explicit IslandBattleData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes defender = 3;
  bool has_defender() const;
  void clear_defender();
  static const int kDefenderFieldNumber = 3;
  const ::std::string& defender() const;
  void set_defender(const ::std::string& value);
  #if LANG_CXX11
  void set_defender(::std::string&& value);
  #endif
  void set_defender(const char* value);
  void set_defender(const void* value, size_t size);
  ::std::string* mutable_defender();
  ::std::string* release_defender();
  void set_allocated_defender(::std::string* defender);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_defender();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_defender(
      ::std::string* defender);

  // required bytes defend_team = 4;
  bool has_defend_team() const;
  void clear_defend_team();
  static const int kDefendTeamFieldNumber = 4;
  const ::std::string& defend_team() const;
  void set_defend_team(const ::std::string& value);
  #if LANG_CXX11
  void set_defend_team(::std::string&& value);
  #endif
  void set_defend_team(const char* value);
  void set_defend_team(const void* value, size_t size);
  ::std::string* mutable_defend_team();
  ::std::string* release_defend_team();
  void set_allocated_defend_team(::std::string* defend_team);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_defend_team();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_defend_team(
      ::std::string* defend_team);

  // required bytes pve_map = 5;
  bool has_pve_map() const;
  void clear_pve_map();
  static const int kPveMapFieldNumber = 5;
  const ::std::string& pve_map() const;
  void set_pve_map(const ::std::string& value);
  #if LANG_CXX11
  void set_pve_map(::std::string&& value);
  #endif
  void set_pve_map(const char* value);
  void set_pve_map(const void* value, size_t size);
  ::std::string* mutable_pve_map();
  ::std::string* release_pve_map();
  void set_allocated_pve_map(::std::string* pve_map);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pve_map();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pve_map(
      ::std::string* pve_map);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.IslandBattleData)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_defender();
  void clear_has_defender();
  void set_has_defend_team();
  void clear_has_defend_team();
  void set_has_pve_map();
  void clear_has_pve_map();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr defender_;
  ::google::protobuf::internal::ArenaStringPtr defend_team_;
  ::google::protobuf::internal::ArenaStringPtr pve_map_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameRanking : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GameRanking) */ {
 public:
  GameRanking();
  virtual ~GameRanking();

  GameRanking(const GameRanking& from);

  inline GameRanking& operator=(const GameRanking& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameRanking(GameRanking&& from) noexcept
    : GameRanking() {
    *this = ::std::move(from);
  }

  inline GameRanking& operator=(GameRanking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameRanking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameRanking* internal_default_instance() {
    return reinterpret_cast<const GameRanking*>(
               &_GameRanking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(GameRanking* other);
  void Swap(GameRanking* other);
  friend void swap(GameRanking& a, GameRanking& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameRanking* New() const final {
    return CreateMaybeMessage<GameRanking>(NULL);
  }

  GameRanking* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameRanking>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameRanking& from);
  void MergeFrom(const GameRanking& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameRanking* other);
  protected:
  explicit GameRanking(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ranking = 1;
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 1;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // required int32 ticketid = 2;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 2;
  ::google::protobuf::int32 ticketid() const;
  void set_ticketid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.GameRanking)
 private:
  void set_has_ranking();
  void clear_has_ranking();
  void set_has_ticketid();
  void clear_has_ticketid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 ticketid_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserCommonData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserCommonData) */ {
 public:
  UserCommonData();
  virtual ~UserCommonData();

  UserCommonData(const UserCommonData& from);

  inline UserCommonData& operator=(const UserCommonData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserCommonData(UserCommonData&& from) noexcept
    : UserCommonData() {
    *this = ::std::move(from);
  }

  inline UserCommonData& operator=(UserCommonData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCommonData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserCommonData* internal_default_instance() {
    return reinterpret_cast<const UserCommonData*>(
               &_UserCommonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(UserCommonData* other);
  void Swap(UserCommonData* other);
  friend void swap(UserCommonData& a, UserCommonData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserCommonData* New() const final {
    return CreateMaybeMessage<UserCommonData>(NULL);
  }

  UserCommonData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserCommonData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserCommonData& from);
  void MergeFrom(const UserCommonData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserCommonData* other);
  protected:
  explicit UserCommonData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required uint64 event_record_count = 2;
  bool has_event_record_count() const;
  void clear_event_record_count();
  static const int kEventRecordCountFieldNumber = 2;
  ::google::protobuf::uint64 event_record_count() const;
  void set_event_record_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:db.UserCommonData)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_event_record_count();
  void clear_has_event_record_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::uint64 event_record_count_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_load_user_common_data_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_load_user_common_data.Parameter) */ {
 public:
  proc_i_load_user_common_data_Parameter();
  virtual ~proc_i_load_user_common_data_Parameter();

  proc_i_load_user_common_data_Parameter(const proc_i_load_user_common_data_Parameter& from);

  inline proc_i_load_user_common_data_Parameter& operator=(const proc_i_load_user_common_data_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_load_user_common_data_Parameter(proc_i_load_user_common_data_Parameter&& from) noexcept
    : proc_i_load_user_common_data_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_i_load_user_common_data_Parameter& operator=(proc_i_load_user_common_data_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_load_user_common_data_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_load_user_common_data_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_i_load_user_common_data_Parameter*>(
               &_proc_i_load_user_common_data_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(proc_i_load_user_common_data_Parameter* other);
  void Swap(proc_i_load_user_common_data_Parameter* other);
  friend void swap(proc_i_load_user_common_data_Parameter& a, proc_i_load_user_common_data_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_load_user_common_data_Parameter* New() const final {
    return CreateMaybeMessage<proc_i_load_user_common_data_Parameter>(NULL);
  }

  proc_i_load_user_common_data_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_load_user_common_data_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_load_user_common_data_Parameter& from);
  void MergeFrom(const proc_i_load_user_common_data_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_load_user_common_data_Parameter* other);
  protected:
  explicit proc_i_load_user_common_data_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.proc_i_load_user_common_data.Parameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_load_user_common_data_ReturnRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_load_user_common_data.ReturnRecord) */ {
 public:
  proc_i_load_user_common_data_ReturnRecord();
  virtual ~proc_i_load_user_common_data_ReturnRecord();

  proc_i_load_user_common_data_ReturnRecord(const proc_i_load_user_common_data_ReturnRecord& from);

  inline proc_i_load_user_common_data_ReturnRecord& operator=(const proc_i_load_user_common_data_ReturnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_load_user_common_data_ReturnRecord(proc_i_load_user_common_data_ReturnRecord&& from) noexcept
    : proc_i_load_user_common_data_ReturnRecord() {
    *this = ::std::move(from);
  }

  inline proc_i_load_user_common_data_ReturnRecord& operator=(proc_i_load_user_common_data_ReturnRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_load_user_common_data_ReturnRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_load_user_common_data_ReturnRecord* internal_default_instance() {
    return reinterpret_cast<const proc_i_load_user_common_data_ReturnRecord*>(
               &_proc_i_load_user_common_data_ReturnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(proc_i_load_user_common_data_ReturnRecord* other);
  void Swap(proc_i_load_user_common_data_ReturnRecord* other);
  friend void swap(proc_i_load_user_common_data_ReturnRecord& a, proc_i_load_user_common_data_ReturnRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_load_user_common_data_ReturnRecord* New() const final {
    return CreateMaybeMessage<proc_i_load_user_common_data_ReturnRecord>(NULL);
  }

  proc_i_load_user_common_data_ReturnRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_load_user_common_data_ReturnRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_load_user_common_data_ReturnRecord& from);
  void MergeFrom(const proc_i_load_user_common_data_ReturnRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_load_user_common_data_ReturnRecord* other);
  protected:
  explicit proc_i_load_user_common_data_ReturnRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.UserCommonData data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  private:
  const ::db::UserCommonData& _internal_data() const;
  public:
  const ::db::UserCommonData& data() const;
  ::db::UserCommonData* release_data();
  ::db::UserCommonData* mutable_data();
  void set_allocated_data(::db::UserCommonData* data);
  void unsafe_arena_set_allocated_data(
      ::db::UserCommonData* data);
  ::db::UserCommonData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:db.proc_i_load_user_common_data.ReturnRecord)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::UserCommonData* data_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_load_user_common_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_load_user_common_data) */ {
 public:
  proc_i_load_user_common_data();
  virtual ~proc_i_load_user_common_data();

  proc_i_load_user_common_data(const proc_i_load_user_common_data& from);

  inline proc_i_load_user_common_data& operator=(const proc_i_load_user_common_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_load_user_common_data(proc_i_load_user_common_data&& from) noexcept
    : proc_i_load_user_common_data() {
    *this = ::std::move(from);
  }

  inline proc_i_load_user_common_data& operator=(proc_i_load_user_common_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_load_user_common_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_load_user_common_data* internal_default_instance() {
    return reinterpret_cast<const proc_i_load_user_common_data*>(
               &_proc_i_load_user_common_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(proc_i_load_user_common_data* other);
  void Swap(proc_i_load_user_common_data* other);
  friend void swap(proc_i_load_user_common_data& a, proc_i_load_user_common_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_load_user_common_data* New() const final {
    return CreateMaybeMessage<proc_i_load_user_common_data>(NULL);
  }

  proc_i_load_user_common_data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_load_user_common_data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_load_user_common_data& from);
  void MergeFrom(const proc_i_load_user_common_data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_load_user_common_data* other);
  protected:
  explicit proc_i_load_user_common_data(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_i_load_user_common_data_Parameter Parameter;
  typedef proc_i_load_user_common_data_ReturnRecord ReturnRecord;

  // accessors -------------------------------------------------------

  // repeated .db.proc_i_load_user_common_data.ReturnRecord return_record_list = 2;
  int return_record_list_size() const;
  void clear_return_record_list();
  static const int kReturnRecordListFieldNumber = 2;
  ::db::proc_i_load_user_common_data_ReturnRecord* mutable_return_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_common_data_ReturnRecord >*
      mutable_return_record_list();
  const ::db::proc_i_load_user_common_data_ReturnRecord& return_record_list(int index) const;
  ::db::proc_i_load_user_common_data_ReturnRecord* add_return_record_list();
  const ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_common_data_ReturnRecord >&
      return_record_list() const;

  // optional .db.proc_i_load_user_common_data.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_i_load_user_common_data_Parameter& _internal_param() const;
  public:
  const ::db::proc_i_load_user_common_data_Parameter& param() const;
  ::db::proc_i_load_user_common_data_Parameter* release_param();
  ::db::proc_i_load_user_common_data_Parameter* mutable_param();
  void set_allocated_param(::db::proc_i_load_user_common_data_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_i_load_user_common_data_Parameter* param);
  ::db::proc_i_load_user_common_data_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_i_load_user_common_data)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_common_data_ReturnRecord > return_record_list_;
  ::db::proc_i_load_user_common_data_Parameter* param_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_save_user_common_data_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_save_user_common_data.Parameter) */ {
 public:
  proc_i_save_user_common_data_Parameter();
  virtual ~proc_i_save_user_common_data_Parameter();

  proc_i_save_user_common_data_Parameter(const proc_i_save_user_common_data_Parameter& from);

  inline proc_i_save_user_common_data_Parameter& operator=(const proc_i_save_user_common_data_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_save_user_common_data_Parameter(proc_i_save_user_common_data_Parameter&& from) noexcept
    : proc_i_save_user_common_data_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_i_save_user_common_data_Parameter& operator=(proc_i_save_user_common_data_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_save_user_common_data_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_save_user_common_data_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_i_save_user_common_data_Parameter*>(
               &_proc_i_save_user_common_data_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(proc_i_save_user_common_data_Parameter* other);
  void Swap(proc_i_save_user_common_data_Parameter* other);
  friend void swap(proc_i_save_user_common_data_Parameter& a, proc_i_save_user_common_data_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_save_user_common_data_Parameter* New() const final {
    return CreateMaybeMessage<proc_i_save_user_common_data_Parameter>(NULL);
  }

  proc_i_save_user_common_data_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_save_user_common_data_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_save_user_common_data_Parameter& from);
  void MergeFrom(const proc_i_save_user_common_data_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_save_user_common_data_Parameter* other);
  protected:
  explicit proc_i_save_user_common_data_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.UserCommonData p_data = 1;
  bool has_p_data() const;
  void clear_p_data();
  static const int kPDataFieldNumber = 1;
  private:
  const ::db::UserCommonData& _internal_p_data() const;
  public:
  const ::db::UserCommonData& p_data() const;
  ::db::UserCommonData* release_p_data();
  ::db::UserCommonData* mutable_p_data();
  void set_allocated_p_data(::db::UserCommonData* p_data);
  void unsafe_arena_set_allocated_p_data(
      ::db::UserCommonData* p_data);
  ::db::UserCommonData* unsafe_arena_release_p_data();

  // @@protoc_insertion_point(class_scope:db.proc_i_save_user_common_data.Parameter)
 private:
  void set_has_p_data();
  void clear_has_p_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::UserCommonData* p_data_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_save_user_common_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_save_user_common_data) */ {
 public:
  proc_i_save_user_common_data();
  virtual ~proc_i_save_user_common_data();

  proc_i_save_user_common_data(const proc_i_save_user_common_data& from);

  inline proc_i_save_user_common_data& operator=(const proc_i_save_user_common_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_save_user_common_data(proc_i_save_user_common_data&& from) noexcept
    : proc_i_save_user_common_data() {
    *this = ::std::move(from);
  }

  inline proc_i_save_user_common_data& operator=(proc_i_save_user_common_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_save_user_common_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_save_user_common_data* internal_default_instance() {
    return reinterpret_cast<const proc_i_save_user_common_data*>(
               &_proc_i_save_user_common_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(proc_i_save_user_common_data* other);
  void Swap(proc_i_save_user_common_data* other);
  friend void swap(proc_i_save_user_common_data& a, proc_i_save_user_common_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_save_user_common_data* New() const final {
    return CreateMaybeMessage<proc_i_save_user_common_data>(NULL);
  }

  proc_i_save_user_common_data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_save_user_common_data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_save_user_common_data& from);
  void MergeFrom(const proc_i_save_user_common_data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_save_user_common_data* other);
  protected:
  explicit proc_i_save_user_common_data(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_i_save_user_common_data_Parameter Parameter;

  // accessors -------------------------------------------------------

  // optional .db.proc_i_save_user_common_data.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_i_save_user_common_data_Parameter& _internal_param() const;
  public:
  const ::db::proc_i_save_user_common_data_Parameter& param() const;
  ::db::proc_i_save_user_common_data_Parameter* release_param();
  ::db::proc_i_save_user_common_data_Parameter* mutable_param();
  void set_allocated_param(::db::proc_i_save_user_common_data_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_i_save_user_common_data_Parameter* param);
  ::db::proc_i_save_user_common_data_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_i_save_user_common_data)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::proc_i_save_user_common_data_Parameter* param_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRankingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserRankingData) */ {
 public:
  UserRankingData();
  virtual ~UserRankingData();

  UserRankingData(const UserRankingData& from);

  inline UserRankingData& operator=(const UserRankingData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRankingData(UserRankingData&& from) noexcept
    : UserRankingData() {
    *this = ::std::move(from);
  }

  inline UserRankingData& operator=(UserRankingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRankingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRankingData* internal_default_instance() {
    return reinterpret_cast<const UserRankingData*>(
               &_UserRankingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(UserRankingData* other);
  void Swap(UserRankingData* other);
  friend void swap(UserRankingData& a, UserRankingData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRankingData* New() const final {
    return CreateMaybeMessage<UserRankingData>(NULL);
  }

  UserRankingData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRankingData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRankingData& from);
  void MergeFrom(const UserRankingData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRankingData* other);
  protected:
  explicit UserRankingData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes team = 6;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 6;
  const ::std::string& team() const;
  void set_team(const ::std::string& value);
  #if LANG_CXX11
  void set_team(::std::string&& value);
  #endif
  void set_team(const char* value);
  void set_team(const void* value, size_t size);
  ::std::string* mutable_team();
  ::std::string* release_team();
  void set_allocated_team(::std::string* team);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_team();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_team(
      ::std::string* team);

  // required int32 ticketid = 1;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 1;
  ::google::protobuf::int32 ticketid() const;
  void set_ticketid(::google::protobuf::int32 value);

  // required int32 ranking_score = 2;
  bool has_ranking_score() const;
  void clear_ranking_score();
  static const int kRankingScoreFieldNumber = 2;
  ::google::protobuf::int32 ranking_score() const;
  void set_ranking_score(::google::protobuf::int32 value);

  // required int32 win = 3;
  bool has_win() const;
  void clear_win();
  static const int kWinFieldNumber = 3;
  ::google::protobuf::int32 win() const;
  void set_win(::google::protobuf::int32 value);

  // required int32 lose = 4;
  bool has_lose() const;
  void clear_lose();
  static const int kLoseFieldNumber = 4;
  ::google::protobuf::int32 lose() const;
  void set_lose(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserRankingData)
 private:
  void set_has_ticketid();
  void clear_has_ticketid();
  void set_has_ranking_score();
  void clear_has_ranking_score();
  void set_has_win();
  void clear_has_win();
  void set_has_lose();
  void clear_has_lose();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_team();
  void clear_has_team();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_;
  ::google::protobuf::int32 ticketid_;
  ::google::protobuf::int32 ranking_score_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 lose_;
  ::google::protobuf::int64 timestamp_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_load_user_ranking_data_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_load_user_ranking_data.Parameter) */ {
 public:
  proc_i_load_user_ranking_data_Parameter();
  virtual ~proc_i_load_user_ranking_data_Parameter();

  proc_i_load_user_ranking_data_Parameter(const proc_i_load_user_ranking_data_Parameter& from);

  inline proc_i_load_user_ranking_data_Parameter& operator=(const proc_i_load_user_ranking_data_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_load_user_ranking_data_Parameter(proc_i_load_user_ranking_data_Parameter&& from) noexcept
    : proc_i_load_user_ranking_data_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_i_load_user_ranking_data_Parameter& operator=(proc_i_load_user_ranking_data_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_load_user_ranking_data_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_load_user_ranking_data_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_i_load_user_ranking_data_Parameter*>(
               &_proc_i_load_user_ranking_data_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(proc_i_load_user_ranking_data_Parameter* other);
  void Swap(proc_i_load_user_ranking_data_Parameter* other);
  friend void swap(proc_i_load_user_ranking_data_Parameter& a, proc_i_load_user_ranking_data_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_load_user_ranking_data_Parameter* New() const final {
    return CreateMaybeMessage<proc_i_load_user_ranking_data_Parameter>(NULL);
  }

  proc_i_load_user_ranking_data_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_load_user_ranking_data_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_load_user_ranking_data_Parameter& from);
  void MergeFrom(const proc_i_load_user_ranking_data_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_load_user_ranking_data_Parameter* other);
  protected:
  explicit proc_i_load_user_ranking_data_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:db.proc_i_load_user_ranking_data.Parameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_load_user_ranking_data_ReturnRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_load_user_ranking_data.ReturnRecord) */ {
 public:
  proc_i_load_user_ranking_data_ReturnRecord();
  virtual ~proc_i_load_user_ranking_data_ReturnRecord();

  proc_i_load_user_ranking_data_ReturnRecord(const proc_i_load_user_ranking_data_ReturnRecord& from);

  inline proc_i_load_user_ranking_data_ReturnRecord& operator=(const proc_i_load_user_ranking_data_ReturnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_load_user_ranking_data_ReturnRecord(proc_i_load_user_ranking_data_ReturnRecord&& from) noexcept
    : proc_i_load_user_ranking_data_ReturnRecord() {
    *this = ::std::move(from);
  }

  inline proc_i_load_user_ranking_data_ReturnRecord& operator=(proc_i_load_user_ranking_data_ReturnRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_load_user_ranking_data_ReturnRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_load_user_ranking_data_ReturnRecord* internal_default_instance() {
    return reinterpret_cast<const proc_i_load_user_ranking_data_ReturnRecord*>(
               &_proc_i_load_user_ranking_data_ReturnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(proc_i_load_user_ranking_data_ReturnRecord* other);
  void Swap(proc_i_load_user_ranking_data_ReturnRecord* other);
  friend void swap(proc_i_load_user_ranking_data_ReturnRecord& a, proc_i_load_user_ranking_data_ReturnRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_load_user_ranking_data_ReturnRecord* New() const final {
    return CreateMaybeMessage<proc_i_load_user_ranking_data_ReturnRecord>(NULL);
  }

  proc_i_load_user_ranking_data_ReturnRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_load_user_ranking_data_ReturnRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_load_user_ranking_data_ReturnRecord& from);
  void MergeFrom(const proc_i_load_user_ranking_data_ReturnRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_load_user_ranking_data_ReturnRecord* other);
  protected:
  explicit proc_i_load_user_ranking_data_ReturnRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.UserRankingData data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  private:
  const ::db::UserRankingData& _internal_data() const;
  public:
  const ::db::UserRankingData& data() const;
  ::db::UserRankingData* release_data();
  ::db::UserRankingData* mutable_data();
  void set_allocated_data(::db::UserRankingData* data);
  void unsafe_arena_set_allocated_data(
      ::db::UserRankingData* data);
  ::db::UserRankingData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:db.proc_i_load_user_ranking_data.ReturnRecord)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::UserRankingData* data_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_load_user_ranking_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_load_user_ranking_data) */ {
 public:
  proc_i_load_user_ranking_data();
  virtual ~proc_i_load_user_ranking_data();

  proc_i_load_user_ranking_data(const proc_i_load_user_ranking_data& from);

  inline proc_i_load_user_ranking_data& operator=(const proc_i_load_user_ranking_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_load_user_ranking_data(proc_i_load_user_ranking_data&& from) noexcept
    : proc_i_load_user_ranking_data() {
    *this = ::std::move(from);
  }

  inline proc_i_load_user_ranking_data& operator=(proc_i_load_user_ranking_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_load_user_ranking_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_load_user_ranking_data* internal_default_instance() {
    return reinterpret_cast<const proc_i_load_user_ranking_data*>(
               &_proc_i_load_user_ranking_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(proc_i_load_user_ranking_data* other);
  void Swap(proc_i_load_user_ranking_data* other);
  friend void swap(proc_i_load_user_ranking_data& a, proc_i_load_user_ranking_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_load_user_ranking_data* New() const final {
    return CreateMaybeMessage<proc_i_load_user_ranking_data>(NULL);
  }

  proc_i_load_user_ranking_data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_load_user_ranking_data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_load_user_ranking_data& from);
  void MergeFrom(const proc_i_load_user_ranking_data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_load_user_ranking_data* other);
  protected:
  explicit proc_i_load_user_ranking_data(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_i_load_user_ranking_data_Parameter Parameter;
  typedef proc_i_load_user_ranking_data_ReturnRecord ReturnRecord;

  // accessors -------------------------------------------------------

  // repeated .db.proc_i_load_user_ranking_data.ReturnRecord return_record_list = 2;
  int return_record_list_size() const;
  void clear_return_record_list();
  static const int kReturnRecordListFieldNumber = 2;
  ::db::proc_i_load_user_ranking_data_ReturnRecord* mutable_return_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_ranking_data_ReturnRecord >*
      mutable_return_record_list();
  const ::db::proc_i_load_user_ranking_data_ReturnRecord& return_record_list(int index) const;
  ::db::proc_i_load_user_ranking_data_ReturnRecord* add_return_record_list();
  const ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_ranking_data_ReturnRecord >&
      return_record_list() const;

  // optional .db.proc_i_load_user_ranking_data.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_i_load_user_ranking_data_Parameter& _internal_param() const;
  public:
  const ::db::proc_i_load_user_ranking_data_Parameter& param() const;
  ::db::proc_i_load_user_ranking_data_Parameter* release_param();
  ::db::proc_i_load_user_ranking_data_Parameter* mutable_param();
  void set_allocated_param(::db::proc_i_load_user_ranking_data_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_i_load_user_ranking_data_Parameter* param);
  ::db::proc_i_load_user_ranking_data_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_i_load_user_ranking_data)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_ranking_data_ReturnRecord > return_record_list_;
  ::db::proc_i_load_user_ranking_data_Parameter* param_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_save_user_ranking_data_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_save_user_ranking_data.Parameter) */ {
 public:
  proc_i_save_user_ranking_data_Parameter();
  virtual ~proc_i_save_user_ranking_data_Parameter();

  proc_i_save_user_ranking_data_Parameter(const proc_i_save_user_ranking_data_Parameter& from);

  inline proc_i_save_user_ranking_data_Parameter& operator=(const proc_i_save_user_ranking_data_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_save_user_ranking_data_Parameter(proc_i_save_user_ranking_data_Parameter&& from) noexcept
    : proc_i_save_user_ranking_data_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_i_save_user_ranking_data_Parameter& operator=(proc_i_save_user_ranking_data_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_save_user_ranking_data_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_save_user_ranking_data_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_i_save_user_ranking_data_Parameter*>(
               &_proc_i_save_user_ranking_data_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(proc_i_save_user_ranking_data_Parameter* other);
  void Swap(proc_i_save_user_ranking_data_Parameter* other);
  friend void swap(proc_i_save_user_ranking_data_Parameter& a, proc_i_save_user_ranking_data_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_save_user_ranking_data_Parameter* New() const final {
    return CreateMaybeMessage<proc_i_save_user_ranking_data_Parameter>(NULL);
  }

  proc_i_save_user_ranking_data_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_save_user_ranking_data_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_save_user_ranking_data_Parameter& from);
  void MergeFrom(const proc_i_save_user_ranking_data_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_save_user_ranking_data_Parameter* other);
  protected:
  explicit proc_i_save_user_ranking_data_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .db.UserRankingData p_data = 1;
  bool has_p_data() const;
  void clear_p_data();
  static const int kPDataFieldNumber = 1;
  private:
  const ::db::UserRankingData& _internal_p_data() const;
  public:
  const ::db::UserRankingData& p_data() const;
  ::db::UserRankingData* release_p_data();
  ::db::UserRankingData* mutable_p_data();
  void set_allocated_p_data(::db::UserRankingData* p_data);
  void unsafe_arena_set_allocated_p_data(
      ::db::UserRankingData* p_data);
  ::db::UserRankingData* unsafe_arena_release_p_data();

  // @@protoc_insertion_point(class_scope:db.proc_i_save_user_ranking_data.Parameter)
 private:
  void set_has_p_data();
  void clear_has_p_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::UserRankingData* p_data_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_i_save_user_ranking_data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_i_save_user_ranking_data) */ {
 public:
  proc_i_save_user_ranking_data();
  virtual ~proc_i_save_user_ranking_data();

  proc_i_save_user_ranking_data(const proc_i_save_user_ranking_data& from);

  inline proc_i_save_user_ranking_data& operator=(const proc_i_save_user_ranking_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_i_save_user_ranking_data(proc_i_save_user_ranking_data&& from) noexcept
    : proc_i_save_user_ranking_data() {
    *this = ::std::move(from);
  }

  inline proc_i_save_user_ranking_data& operator=(proc_i_save_user_ranking_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_i_save_user_ranking_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_i_save_user_ranking_data* internal_default_instance() {
    return reinterpret_cast<const proc_i_save_user_ranking_data*>(
               &_proc_i_save_user_ranking_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(proc_i_save_user_ranking_data* other);
  void Swap(proc_i_save_user_ranking_data* other);
  friend void swap(proc_i_save_user_ranking_data& a, proc_i_save_user_ranking_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_i_save_user_ranking_data* New() const final {
    return CreateMaybeMessage<proc_i_save_user_ranking_data>(NULL);
  }

  proc_i_save_user_ranking_data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_i_save_user_ranking_data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_i_save_user_ranking_data& from);
  void MergeFrom(const proc_i_save_user_ranking_data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_i_save_user_ranking_data* other);
  protected:
  explicit proc_i_save_user_ranking_data(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_i_save_user_ranking_data_Parameter Parameter;

  // accessors -------------------------------------------------------

  // optional .db.proc_i_save_user_ranking_data.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_i_save_user_ranking_data_Parameter& _internal_param() const;
  public:
  const ::db::proc_i_save_user_ranking_data_Parameter& param() const;
  ::db::proc_i_save_user_ranking_data_Parameter* release_param();
  ::db::proc_i_save_user_ranking_data_Parameter* mutable_param();
  void set_allocated_param(::db::proc_i_save_user_ranking_data_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_i_save_user_ranking_data_Parameter* param);
  ::db::proc_i_save_user_ranking_data_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_i_save_user_ranking_data)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::proc_i_save_user_ranking_data_Parameter* param_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigGameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.ConfigGameServer) */ {
 public:
  ConfigGameServer();
  virtual ~ConfigGameServer();

  ConfigGameServer(const ConfigGameServer& from);

  inline ConfigGameServer& operator=(const ConfigGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigGameServer(ConfigGameServer&& from) noexcept
    : ConfigGameServer() {
    *this = ::std::move(from);
  }

  inline ConfigGameServer& operator=(ConfigGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigGameServer* internal_default_instance() {
    return reinterpret_cast<const ConfigGameServer*>(
               &_ConfigGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(ConfigGameServer* other);
  void Swap(ConfigGameServer* other);
  friend void swap(ConfigGameServer& a, ConfigGameServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigGameServer* New() const final {
    return CreateMaybeMessage<ConfigGameServer>(NULL);
  }

  ConfigGameServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigGameServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigGameServer& from);
  void MergeFrom(const ConfigGameServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigGameServer* other);
  protected:
  explicit ConfigGameServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ghost_ship_reset_cost = 8;
  bool has_ghost_ship_reset_cost() const;
  void clear_ghost_ship_reset_cost();
  static const int kGhostShipResetCostFieldNumber = 8;
  const ::std::string& ghost_ship_reset_cost() const;
  void set_ghost_ship_reset_cost(const ::std::string& value);
  #if LANG_CXX11
  void set_ghost_ship_reset_cost(::std::string&& value);
  #endif
  void set_ghost_ship_reset_cost(const char* value);
  void set_ghost_ship_reset_cost(const void* value, size_t size);
  ::std::string* mutable_ghost_ship_reset_cost();
  ::std::string* release_ghost_ship_reset_cost();
  void set_allocated_ghost_ship_reset_cost(::std::string* ghost_ship_reset_cost);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ghost_ship_reset_cost();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ghost_ship_reset_cost(
      ::std::string* ghost_ship_reset_cost);

  // required bytes jjc_daily_mail_title = 11;
  bool has_jjc_daily_mail_title() const;
  void clear_jjc_daily_mail_title();
  static const int kJjcDailyMailTitleFieldNumber = 11;
  const ::std::string& jjc_daily_mail_title() const;
  void set_jjc_daily_mail_title(const ::std::string& value);
  #if LANG_CXX11
  void set_jjc_daily_mail_title(::std::string&& value);
  #endif
  void set_jjc_daily_mail_title(const char* value);
  void set_jjc_daily_mail_title(const void* value, size_t size);
  ::std::string* mutable_jjc_daily_mail_title();
  ::std::string* release_jjc_daily_mail_title();
  void set_allocated_jjc_daily_mail_title(::std::string* jjc_daily_mail_title);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_jjc_daily_mail_title();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jjc_daily_mail_title(
      ::std::string* jjc_daily_mail_title);

  // required bytes jjc_daily_mail_content = 12;
  bool has_jjc_daily_mail_content() const;
  void clear_jjc_daily_mail_content();
  static const int kJjcDailyMailContentFieldNumber = 12;
  const ::std::string& jjc_daily_mail_content() const;
  void set_jjc_daily_mail_content(const ::std::string& value);
  #if LANG_CXX11
  void set_jjc_daily_mail_content(::std::string&& value);
  #endif
  void set_jjc_daily_mail_content(const char* value);
  void set_jjc_daily_mail_content(const void* value, size_t size);
  ::std::string* mutable_jjc_daily_mail_content();
  ::std::string* release_jjc_daily_mail_content();
  void set_allocated_jjc_daily_mail_content(::std::string* jjc_daily_mail_content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_jjc_daily_mail_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jjc_daily_mail_content(
      ::std::string* jjc_daily_mail_content);

  // required bytes jjc_weekly_mail_title = 13;
  bool has_jjc_weekly_mail_title() const;
  void clear_jjc_weekly_mail_title();
  static const int kJjcWeeklyMailTitleFieldNumber = 13;
  const ::std::string& jjc_weekly_mail_title() const;
  void set_jjc_weekly_mail_title(const ::std::string& value);
  #if LANG_CXX11
  void set_jjc_weekly_mail_title(::std::string&& value);
  #endif
  void set_jjc_weekly_mail_title(const char* value);
  void set_jjc_weekly_mail_title(const void* value, size_t size);
  ::std::string* mutable_jjc_weekly_mail_title();
  ::std::string* release_jjc_weekly_mail_title();
  void set_allocated_jjc_weekly_mail_title(::std::string* jjc_weekly_mail_title);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_jjc_weekly_mail_title();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jjc_weekly_mail_title(
      ::std::string* jjc_weekly_mail_title);

  // required bytes jjc_weekly_mail_content = 14;
  bool has_jjc_weekly_mail_content() const;
  void clear_jjc_weekly_mail_content();
  static const int kJjcWeeklyMailContentFieldNumber = 14;
  const ::std::string& jjc_weekly_mail_content() const;
  void set_jjc_weekly_mail_content(const ::std::string& value);
  #if LANG_CXX11
  void set_jjc_weekly_mail_content(::std::string&& value);
  #endif
  void set_jjc_weekly_mail_content(const char* value);
  void set_jjc_weekly_mail_content(const void* value, size_t size);
  ::std::string* mutable_jjc_weekly_mail_content();
  ::std::string* release_jjc_weekly_mail_content();
  void set_allocated_jjc_weekly_mail_content(::std::string* jjc_weekly_mail_content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_jjc_weekly_mail_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jjc_weekly_mail_content(
      ::std::string* jjc_weekly_mail_content);

  // required bytes jjc_monthly_mail_title = 15;
  bool has_jjc_monthly_mail_title() const;
  void clear_jjc_monthly_mail_title();
  static const int kJjcMonthlyMailTitleFieldNumber = 15;
  const ::std::string& jjc_monthly_mail_title() const;
  void set_jjc_monthly_mail_title(const ::std::string& value);
  #if LANG_CXX11
  void set_jjc_monthly_mail_title(::std::string&& value);
  #endif
  void set_jjc_monthly_mail_title(const char* value);
  void set_jjc_monthly_mail_title(const void* value, size_t size);
  ::std::string* mutable_jjc_monthly_mail_title();
  ::std::string* release_jjc_monthly_mail_title();
  void set_allocated_jjc_monthly_mail_title(::std::string* jjc_monthly_mail_title);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_jjc_monthly_mail_title();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jjc_monthly_mail_title(
      ::std::string* jjc_monthly_mail_title);

  // required bytes jjc_monthly_mail_content = 16;
  bool has_jjc_monthly_mail_content() const;
  void clear_jjc_monthly_mail_content();
  static const int kJjcMonthlyMailContentFieldNumber = 16;
  const ::std::string& jjc_monthly_mail_content() const;
  void set_jjc_monthly_mail_content(const ::std::string& value);
  #if LANG_CXX11
  void set_jjc_monthly_mail_content(::std::string&& value);
  #endif
  void set_jjc_monthly_mail_content(const char* value);
  void set_jjc_monthly_mail_content(const void* value, size_t size);
  ::std::string* mutable_jjc_monthly_mail_content();
  ::std::string* release_jjc_monthly_mail_content();
  void set_allocated_jjc_monthly_mail_content(::std::string* jjc_monthly_mail_content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_jjc_monthly_mail_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jjc_monthly_mail_content(
      ::std::string* jjc_monthly_mail_content);

  // required int32 first_gold_lottery_id_once = 1;
  bool has_first_gold_lottery_id_once() const;
  void clear_first_gold_lottery_id_once();
  static const int kFirstGoldLotteryIdOnceFieldNumber = 1;
  ::google::protobuf::int32 first_gold_lottery_id_once() const;
  void set_first_gold_lottery_id_once(::google::protobuf::int32 value);

  // required int32 first_diamond_lottery_id_ten = 2;
  bool has_first_diamond_lottery_id_ten() const;
  void clear_first_diamond_lottery_id_ten();
  static const int kFirstDiamondLotteryIdTenFieldNumber = 2;
  ::google::protobuf::int32 first_diamond_lottery_id_ten() const;
  void set_first_diamond_lottery_id_ten(::google::protobuf::int32 value);

  // required int32 max_daily_system_task_num = 3;
  bool has_max_daily_system_task_num() const;
  void clear_max_daily_system_task_num();
  static const int kMaxDailySystemTaskNumFieldNumber = 3;
  ::google::protobuf::int32 max_daily_system_task_num() const;
  void set_max_daily_system_task_num(::google::protobuf::int32 value);

  // required int32 max_occupy_monster_ship_times = 4;
  bool has_max_occupy_monster_ship_times() const;
  void clear_max_occupy_monster_ship_times();
  static const int kMaxOccupyMonsterShipTimesFieldNumber = 4;
  ::google::protobuf::int32 max_occupy_monster_ship_times() const;
  void set_max_occupy_monster_ship_times(::google::protobuf::int32 value);

  // required int32 max_occupy_player_ship_times = 5;
  bool has_max_occupy_player_ship_times() const;
  void clear_max_occupy_player_ship_times();
  static const int kMaxOccupyPlayerShipTimesFieldNumber = 5;
  ::google::protobuf::int32 max_occupy_player_ship_times() const;
  void set_max_occupy_player_ship_times(::google::protobuf::int32 value);

  // required int32 max_occupy_special_ship_times = 6;
  bool has_max_occupy_special_ship_times() const;
  void clear_max_occupy_special_ship_times();
  static const int kMaxOccupySpecialShipTimesFieldNumber = 6;
  ::google::protobuf::int32 max_occupy_special_ship_times() const;
  void set_max_occupy_special_ship_times(::google::protobuf::int32 value);

  // required int32 max_ghost_ship_reset_times = 7;
  bool has_max_ghost_ship_reset_times() const;
  void clear_max_ghost_ship_reset_times();
  static const int kMaxGhostShipResetTimesFieldNumber = 7;
  ::google::protobuf::int32 max_ghost_ship_reset_times() const;
  void set_max_ghost_ship_reset_times(::google::protobuf::int32 value);

  // required int32 max_fast_reach_ticket_num = 9;
  bool has_max_fast_reach_ticket_num() const;
  void clear_max_fast_reach_ticket_num();
  static const int kMaxFastReachTicketNumFieldNumber = 9;
  ::google::protobuf::int32 max_fast_reach_ticket_num() const;
  void set_max_fast_reach_ticket_num(::google::protobuf::int32 value);

  // required int32 fast_reach_ticket_cd = 10;
  bool has_fast_reach_ticket_cd() const;
  void clear_fast_reach_ticket_cd();
  static const int kFastReachTicketCdFieldNumber = 10;
  ::google::protobuf::int32 fast_reach_ticket_cd() const;
  void set_fast_reach_ticket_cd(::google::protobuf::int32 value);

  // required int32 repeat_task_refresh_times = 17;
  bool has_repeat_task_refresh_times() const;
  void clear_repeat_task_refresh_times();
  static const int kRepeatTaskRefreshTimesFieldNumber = 17;
  ::google::protobuf::int32 repeat_task_refresh_times() const;
  void set_repeat_task_refresh_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.ConfigGameServer)
 private:
  void set_has_first_gold_lottery_id_once();
  void clear_has_first_gold_lottery_id_once();
  void set_has_first_diamond_lottery_id_ten();
  void clear_has_first_diamond_lottery_id_ten();
  void set_has_max_daily_system_task_num();
  void clear_has_max_daily_system_task_num();
  void set_has_max_occupy_monster_ship_times();
  void clear_has_max_occupy_monster_ship_times();
  void set_has_max_occupy_player_ship_times();
  void clear_has_max_occupy_player_ship_times();
  void set_has_max_occupy_special_ship_times();
  void clear_has_max_occupy_special_ship_times();
  void set_has_max_ghost_ship_reset_times();
  void clear_has_max_ghost_ship_reset_times();
  void set_has_ghost_ship_reset_cost();
  void clear_has_ghost_ship_reset_cost();
  void set_has_max_fast_reach_ticket_num();
  void clear_has_max_fast_reach_ticket_num();
  void set_has_fast_reach_ticket_cd();
  void clear_has_fast_reach_ticket_cd();
  void set_has_jjc_daily_mail_title();
  void clear_has_jjc_daily_mail_title();
  void set_has_jjc_daily_mail_content();
  void clear_has_jjc_daily_mail_content();
  void set_has_jjc_weekly_mail_title();
  void clear_has_jjc_weekly_mail_title();
  void set_has_jjc_weekly_mail_content();
  void clear_has_jjc_weekly_mail_content();
  void set_has_jjc_monthly_mail_title();
  void clear_has_jjc_monthly_mail_title();
  void set_has_jjc_monthly_mail_content();
  void clear_has_jjc_monthly_mail_content();
  void set_has_repeat_task_refresh_times();
  void clear_has_repeat_task_refresh_times();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ghost_ship_reset_cost_;
  ::google::protobuf::internal::ArenaStringPtr jjc_daily_mail_title_;
  ::google::protobuf::internal::ArenaStringPtr jjc_daily_mail_content_;
  ::google::protobuf::internal::ArenaStringPtr jjc_weekly_mail_title_;
  ::google::protobuf::internal::ArenaStringPtr jjc_weekly_mail_content_;
  ::google::protobuf::internal::ArenaStringPtr jjc_monthly_mail_title_;
  ::google::protobuf::internal::ArenaStringPtr jjc_monthly_mail_content_;
  ::google::protobuf::int32 first_gold_lottery_id_once_;
  ::google::protobuf::int32 first_diamond_lottery_id_ten_;
  ::google::protobuf::int32 max_daily_system_task_num_;
  ::google::protobuf::int32 max_occupy_monster_ship_times_;
  ::google::protobuf::int32 max_occupy_player_ship_times_;
  ::google::protobuf::int32 max_occupy_special_ship_times_;
  ::google::protobuf::int32 max_ghost_ship_reset_times_;
  ::google::protobuf::int32 max_fast_reach_ticket_num_;
  ::google::protobuf::int32 fast_reach_ticket_cd_;
  ::google::protobuf::int32 repeat_task_refresh_times_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameRobot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GameRobot) */ {
 public:
  GameRobot();
  virtual ~GameRobot();

  GameRobot(const GameRobot& from);

  inline GameRobot& operator=(const GameRobot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameRobot(GameRobot&& from) noexcept
    : GameRobot() {
    *this = ::std::move(from);
  }

  inline GameRobot& operator=(GameRobot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameRobot* internal_default_instance() {
    return reinterpret_cast<const GameRobot*>(
               &_GameRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(GameRobot* other);
  void Swap(GameRobot* other);
  friend void swap(GameRobot& a, GameRobot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameRobot* New() const final {
    return CreateMaybeMessage<GameRobot>(NULL);
  }

  GameRobot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameRobot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameRobot& from);
  void MergeFrom(const GameRobot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameRobot* other);
  protected:
  explicit GameRobot(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 ticketid = 2;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 2;
  ::google::protobuf::int32 ticketid() const;
  void set_ticketid(::google::protobuf::int32 value);

  // required int32 init_level = 3;
  bool has_init_level() const;
  void clear_init_level();
  static const int kInitLevelFieldNumber = 3;
  ::google::protobuf::int32 init_level() const;
  void set_init_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.GameRobot)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_ticketid();
  void clear_has_ticketid();
  void set_has_init_level();
  void clear_has_init_level();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ticketid_;
  ::google::protobuf::int32 init_level_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameAnnouncement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GameAnnouncement) */ {
 public:
  GameAnnouncement();
  virtual ~GameAnnouncement();

  GameAnnouncement(const GameAnnouncement& from);

  inline GameAnnouncement& operator=(const GameAnnouncement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameAnnouncement(GameAnnouncement&& from) noexcept
    : GameAnnouncement() {
    *this = ::std::move(from);
  }

  inline GameAnnouncement& operator=(GameAnnouncement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameAnnouncement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameAnnouncement* internal_default_instance() {
    return reinterpret_cast<const GameAnnouncement*>(
               &_GameAnnouncement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(GameAnnouncement* other);
  void Swap(GameAnnouncement* other);
  friend void swap(GameAnnouncement& a, GameAnnouncement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameAnnouncement* New() const final {
    return CreateMaybeMessage<GameAnnouncement>(NULL);
  }

  GameAnnouncement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameAnnouncement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameAnnouncement& from);
  void MergeFrom(const GameAnnouncement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAnnouncement* other);
  protected:
  explicit GameAnnouncement(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 6;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required sfixed64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required int32 circle_seconds = 4;
  bool has_circle_seconds() const;
  void clear_circle_seconds();
  static const int kCircleSecondsFieldNumber = 4;
  ::google::protobuf::int32 circle_seconds() const;
  void set_circle_seconds(::google::protobuf::int32 value);

  // required bool read = 5;
  bool has_read() const;
  void clear_read();
  static const int kReadFieldNumber = 5;
  bool read() const;
  void set_read(bool value);

  // @@protoc_insertion_point(class_scope:db.GameAnnouncement)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_circle_seconds();
  void clear_has_circle_seconds();
  void set_has_read();
  void clear_has_read();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 circle_seconds_;
  bool read_;
  friend struct ::protobuf_StoredProcGameAssets_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// proc_load_all_users_Parameter

// -------------------------------------------------------------------

// proc_load_all_users_ReturnRecord

// required .db.UserAttribute attr = 1;
inline bool proc_load_all_users_ReturnRecord::has_attr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_load_all_users_ReturnRecord::set_has_attr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_load_all_users_ReturnRecord::clear_has_attr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::db::UserAttribute& proc_load_all_users_ReturnRecord::_internal_attr() const {
  return *attr_;
}
inline const ::db::UserAttribute& proc_load_all_users_ReturnRecord::attr() const {
  const ::db::UserAttribute* p = attr_;
  // @@protoc_insertion_point(field_get:db.proc_load_all_users.ReturnRecord.attr)
  return p != NULL ? *p : *reinterpret_cast<const ::db::UserAttribute*>(
      &::db::_UserAttribute_default_instance_);
}
inline ::db::UserAttribute* proc_load_all_users_ReturnRecord::release_attr() {
  // @@protoc_insertion_point(field_release:db.proc_load_all_users.ReturnRecord.attr)
  clear_has_attr();
  ::db::UserAttribute* temp = attr_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  attr_ = NULL;
  return temp;
}
inline ::db::UserAttribute* proc_load_all_users_ReturnRecord::unsafe_arena_release_attr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_load_all_users.ReturnRecord.attr)
  clear_has_attr();
  ::db::UserAttribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline ::db::UserAttribute* proc_load_all_users_ReturnRecord::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) {
    auto* p = CreateMaybeMessage<::db::UserAttribute>(GetArenaNoVirtual());
    attr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_load_all_users.ReturnRecord.attr)
  return attr_;
}
inline void proc_load_all_users_ReturnRecord::set_allocated_attr(::db::UserAttribute* attr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attr_);
  }
  if (attr) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(attr)->GetArena();
    if (message_arena != submessage_arena) {
      attr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    set_has_attr();
  } else {
    clear_has_attr();
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:db.proc_load_all_users.ReturnRecord.attr)
}

// -------------------------------------------------------------------

// proc_load_all_users

// optional .db.proc_load_all_users.Parameter param = 1;
inline bool proc_load_all_users::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_load_all_users::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_load_all_users::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_load_all_users::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_load_all_users_Parameter& proc_load_all_users::_internal_param() const {
  return *param_;
}
inline const ::db::proc_load_all_users_Parameter& proc_load_all_users::param() const {
  const ::db::proc_load_all_users_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_load_all_users.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_load_all_users_Parameter*>(
      &::db::_proc_load_all_users_Parameter_default_instance_);
}
inline ::db::proc_load_all_users_Parameter* proc_load_all_users::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_load_all_users.param)
  clear_has_param();
  ::db::proc_load_all_users_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_load_all_users_Parameter* proc_load_all_users::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_load_all_users.param)
  clear_has_param();
  ::db::proc_load_all_users_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_load_all_users_Parameter* proc_load_all_users::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_load_all_users_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_load_all_users.param)
  return param_;
}
inline void proc_load_all_users::set_allocated_param(::db::proc_load_all_users_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_load_all_users.param)
}

// repeated .db.proc_load_all_users.ReturnRecord return_record_list = 2;
inline int proc_load_all_users::return_record_list_size() const {
  return return_record_list_.size();
}
inline void proc_load_all_users::clear_return_record_list() {
  return_record_list_.Clear();
}
inline ::db::proc_load_all_users_ReturnRecord* proc_load_all_users::mutable_return_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.proc_load_all_users.return_record_list)
  return return_record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::proc_load_all_users_ReturnRecord >*
proc_load_all_users::mutable_return_record_list() {
  // @@protoc_insertion_point(field_mutable_list:db.proc_load_all_users.return_record_list)
  return &return_record_list_;
}
inline const ::db::proc_load_all_users_ReturnRecord& proc_load_all_users::return_record_list(int index) const {
  // @@protoc_insertion_point(field_get:db.proc_load_all_users.return_record_list)
  return return_record_list_.Get(index);
}
inline ::db::proc_load_all_users_ReturnRecord* proc_load_all_users::add_return_record_list() {
  // @@protoc_insertion_point(field_add:db.proc_load_all_users.return_record_list)
  return return_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::proc_load_all_users_ReturnRecord >&
proc_load_all_users::return_record_list() const {
  // @@protoc_insertion_point(field_list:db.proc_load_all_users.return_record_list)
  return return_record_list_;
}

// -------------------------------------------------------------------

// GameState

// required int32 id = 1;
inline bool GameState::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameState::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameState::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameState::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GameState::id() const {
  // @@protoc_insertion_point(field_get:db.GameState.id)
  return id_;
}
inline void GameState::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.GameState.id)
}

// required int32 daily_gift_id = 2;
inline bool GameState::has_daily_gift_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameState::set_has_daily_gift_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameState::clear_has_daily_gift_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameState::clear_daily_gift_id() {
  daily_gift_id_ = 0;
  clear_has_daily_gift_id();
}
inline ::google::protobuf::int32 GameState::daily_gift_id() const {
  // @@protoc_insertion_point(field_get:db.GameState.daily_gift_id)
  return daily_gift_id_;
}
inline void GameState::set_daily_gift_id(::google::protobuf::int32 value) {
  set_has_daily_gift_id();
  daily_gift_id_ = value;
  // @@protoc_insertion_point(field_set:db.GameState.daily_gift_id)
}

// required int32 weekly_gift_id = 3;
inline bool GameState::has_weekly_gift_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameState::set_has_weekly_gift_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameState::clear_has_weekly_gift_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameState::clear_weekly_gift_id() {
  weekly_gift_id_ = 0;
  clear_has_weekly_gift_id();
}
inline ::google::protobuf::int32 GameState::weekly_gift_id() const {
  // @@protoc_insertion_point(field_get:db.GameState.weekly_gift_id)
  return weekly_gift_id_;
}
inline void GameState::set_weekly_gift_id(::google::protobuf::int32 value) {
  set_has_weekly_gift_id();
  weekly_gift_id_ = value;
  // @@protoc_insertion_point(field_set:db.GameState.weekly_gift_id)
}

// optional sfixed64 daily_gift_refresh_time = 4;
inline bool GameState::has_daily_gift_refresh_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameState::set_has_daily_gift_refresh_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameState::clear_has_daily_gift_refresh_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameState::clear_daily_gift_refresh_time() {
  daily_gift_refresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_daily_gift_refresh_time();
}
inline ::google::protobuf::int64 GameState::daily_gift_refresh_time() const {
  // @@protoc_insertion_point(field_get:db.GameState.daily_gift_refresh_time)
  return daily_gift_refresh_time_;
}
inline void GameState::set_daily_gift_refresh_time(::google::protobuf::int64 value) {
  set_has_daily_gift_refresh_time();
  daily_gift_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:db.GameState.daily_gift_refresh_time)
}

// optional sfixed64 weekly_gift_refresh_time = 5;
inline bool GameState::has_weekly_gift_refresh_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameState::set_has_weekly_gift_refresh_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameState::clear_has_weekly_gift_refresh_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameState::clear_weekly_gift_refresh_time() {
  weekly_gift_refresh_time_ = GOOGLE_LONGLONG(0);
  clear_has_weekly_gift_refresh_time();
}
inline ::google::protobuf::int64 GameState::weekly_gift_refresh_time() const {
  // @@protoc_insertion_point(field_get:db.GameState.weekly_gift_refresh_time)
  return weekly_gift_refresh_time_;
}
inline void GameState::set_weekly_gift_refresh_time(::google::protobuf::int64 value) {
  set_has_weekly_gift_refresh_time();
  weekly_gift_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:db.GameState.weekly_gift_refresh_time)
}

// optional sfixed64 daily_pvp_reward_send_time = 6;
inline bool GameState::has_daily_pvp_reward_send_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameState::set_has_daily_pvp_reward_send_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameState::clear_has_daily_pvp_reward_send_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameState::clear_daily_pvp_reward_send_time() {
  daily_pvp_reward_send_time_ = GOOGLE_LONGLONG(0);
  clear_has_daily_pvp_reward_send_time();
}
inline ::google::protobuf::int64 GameState::daily_pvp_reward_send_time() const {
  // @@protoc_insertion_point(field_get:db.GameState.daily_pvp_reward_send_time)
  return daily_pvp_reward_send_time_;
}
inline void GameState::set_daily_pvp_reward_send_time(::google::protobuf::int64 value) {
  set_has_daily_pvp_reward_send_time();
  daily_pvp_reward_send_time_ = value;
  // @@protoc_insertion_point(field_set:db.GameState.daily_pvp_reward_send_time)
}

// optional sfixed64 weekly_pvp_reward_send_time = 7;
inline bool GameState::has_weekly_pvp_reward_send_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameState::set_has_weekly_pvp_reward_send_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameState::clear_has_weekly_pvp_reward_send_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameState::clear_weekly_pvp_reward_send_time() {
  weekly_pvp_reward_send_time_ = GOOGLE_LONGLONG(0);
  clear_has_weekly_pvp_reward_send_time();
}
inline ::google::protobuf::int64 GameState::weekly_pvp_reward_send_time() const {
  // @@protoc_insertion_point(field_get:db.GameState.weekly_pvp_reward_send_time)
  return weekly_pvp_reward_send_time_;
}
inline void GameState::set_weekly_pvp_reward_send_time(::google::protobuf::int64 value) {
  set_has_weekly_pvp_reward_send_time();
  weekly_pvp_reward_send_time_ = value;
  // @@protoc_insertion_point(field_set:db.GameState.weekly_pvp_reward_send_time)
}

// optional sfixed64 monthly_pvp_reward_send_time = 8;
inline bool GameState::has_monthly_pvp_reward_send_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameState::set_has_monthly_pvp_reward_send_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameState::clear_has_monthly_pvp_reward_send_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameState::clear_monthly_pvp_reward_send_time() {
  monthly_pvp_reward_send_time_ = GOOGLE_LONGLONG(0);
  clear_has_monthly_pvp_reward_send_time();
}
inline ::google::protobuf::int64 GameState::monthly_pvp_reward_send_time() const {
  // @@protoc_insertion_point(field_get:db.GameState.monthly_pvp_reward_send_time)
  return monthly_pvp_reward_send_time_;
}
inline void GameState::set_monthly_pvp_reward_send_time(::google::protobuf::int64 value) {
  set_has_monthly_pvp_reward_send_time();
  monthly_pvp_reward_send_time_ = value;
  // @@protoc_insertion_point(field_set:db.GameState.monthly_pvp_reward_send_time)
}

// -------------------------------------------------------------------

// IslandBattleData

// required uint64 id = 1;
inline bool IslandBattleData::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IslandBattleData::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IslandBattleData::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IslandBattleData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 IslandBattleData::id() const {
  // @@protoc_insertion_point(field_get:db.IslandBattleData.id)
  return id_;
}
inline void IslandBattleData::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.IslandBattleData.id)
}

// required int32 type = 2;
inline bool IslandBattleData::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IslandBattleData::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IslandBattleData::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IslandBattleData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 IslandBattleData::type() const {
  // @@protoc_insertion_point(field_get:db.IslandBattleData.type)
  return type_;
}
inline void IslandBattleData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.IslandBattleData.type)
}

// required bytes defender = 3;
inline bool IslandBattleData::has_defender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IslandBattleData::set_has_defender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IslandBattleData::clear_has_defender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IslandBattleData::clear_defender() {
  defender_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_defender();
}
inline const ::std::string& IslandBattleData::defender() const {
  // @@protoc_insertion_point(field_get:db.IslandBattleData.defender)
  return defender_.Get();
}
inline void IslandBattleData::set_defender(const ::std::string& value) {
  set_has_defender();
  defender_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.IslandBattleData.defender)
}
#if LANG_CXX11
inline void IslandBattleData::set_defender(::std::string&& value) {
  set_has_defender();
  defender_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.IslandBattleData.defender)
}
#endif
inline void IslandBattleData::set_defender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_defender();
  defender_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.IslandBattleData.defender)
}
inline void IslandBattleData::set_defender(const void* value,
    size_t size) {
  set_has_defender();
  defender_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.IslandBattleData.defender)
}
inline ::std::string* IslandBattleData::mutable_defender() {
  set_has_defender();
  // @@protoc_insertion_point(field_mutable:db.IslandBattleData.defender)
  return defender_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* IslandBattleData::release_defender() {
  // @@protoc_insertion_point(field_release:db.IslandBattleData.defender)
  if (!has_defender()) {
    return NULL;
  }
  clear_has_defender();
  return defender_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void IslandBattleData::set_allocated_defender(::std::string* defender) {
  if (defender != NULL) {
    set_has_defender();
  } else {
    clear_has_defender();
  }
  defender_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), defender,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.IslandBattleData.defender)
}
inline ::std::string* IslandBattleData::unsafe_arena_release_defender() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.IslandBattleData.defender)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_defender();
  return defender_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void IslandBattleData::unsafe_arena_set_allocated_defender(
    ::std::string* defender) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (defender != NULL) {
    set_has_defender();
  } else {
    clear_has_defender();
  }
  defender_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      defender, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.IslandBattleData.defender)
}

// required bytes defend_team = 4;
inline bool IslandBattleData::has_defend_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IslandBattleData::set_has_defend_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IslandBattleData::clear_has_defend_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IslandBattleData::clear_defend_team() {
  defend_team_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_defend_team();
}
inline const ::std::string& IslandBattleData::defend_team() const {
  // @@protoc_insertion_point(field_get:db.IslandBattleData.defend_team)
  return defend_team_.Get();
}
inline void IslandBattleData::set_defend_team(const ::std::string& value) {
  set_has_defend_team();
  defend_team_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.IslandBattleData.defend_team)
}
#if LANG_CXX11
inline void IslandBattleData::set_defend_team(::std::string&& value) {
  set_has_defend_team();
  defend_team_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.IslandBattleData.defend_team)
}
#endif
inline void IslandBattleData::set_defend_team(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_defend_team();
  defend_team_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.IslandBattleData.defend_team)
}
inline void IslandBattleData::set_defend_team(const void* value,
    size_t size) {
  set_has_defend_team();
  defend_team_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.IslandBattleData.defend_team)
}
inline ::std::string* IslandBattleData::mutable_defend_team() {
  set_has_defend_team();
  // @@protoc_insertion_point(field_mutable:db.IslandBattleData.defend_team)
  return defend_team_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* IslandBattleData::release_defend_team() {
  // @@protoc_insertion_point(field_release:db.IslandBattleData.defend_team)
  if (!has_defend_team()) {
    return NULL;
  }
  clear_has_defend_team();
  return defend_team_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void IslandBattleData::set_allocated_defend_team(::std::string* defend_team) {
  if (defend_team != NULL) {
    set_has_defend_team();
  } else {
    clear_has_defend_team();
  }
  defend_team_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), defend_team,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.IslandBattleData.defend_team)
}
inline ::std::string* IslandBattleData::unsafe_arena_release_defend_team() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.IslandBattleData.defend_team)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_defend_team();
  return defend_team_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void IslandBattleData::unsafe_arena_set_allocated_defend_team(
    ::std::string* defend_team) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (defend_team != NULL) {
    set_has_defend_team();
  } else {
    clear_has_defend_team();
  }
  defend_team_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      defend_team, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.IslandBattleData.defend_team)
}

// required bytes pve_map = 5;
inline bool IslandBattleData::has_pve_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IslandBattleData::set_has_pve_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IslandBattleData::clear_has_pve_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IslandBattleData::clear_pve_map() {
  pve_map_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pve_map();
}
inline const ::std::string& IslandBattleData::pve_map() const {
  // @@protoc_insertion_point(field_get:db.IslandBattleData.pve_map)
  return pve_map_.Get();
}
inline void IslandBattleData::set_pve_map(const ::std::string& value) {
  set_has_pve_map();
  pve_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.IslandBattleData.pve_map)
}
#if LANG_CXX11
inline void IslandBattleData::set_pve_map(::std::string&& value) {
  set_has_pve_map();
  pve_map_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.IslandBattleData.pve_map)
}
#endif
inline void IslandBattleData::set_pve_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pve_map();
  pve_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.IslandBattleData.pve_map)
}
inline void IslandBattleData::set_pve_map(const void* value,
    size_t size) {
  set_has_pve_map();
  pve_map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.IslandBattleData.pve_map)
}
inline ::std::string* IslandBattleData::mutable_pve_map() {
  set_has_pve_map();
  // @@protoc_insertion_point(field_mutable:db.IslandBattleData.pve_map)
  return pve_map_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* IslandBattleData::release_pve_map() {
  // @@protoc_insertion_point(field_release:db.IslandBattleData.pve_map)
  if (!has_pve_map()) {
    return NULL;
  }
  clear_has_pve_map();
  return pve_map_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void IslandBattleData::set_allocated_pve_map(::std::string* pve_map) {
  if (pve_map != NULL) {
    set_has_pve_map();
  } else {
    clear_has_pve_map();
  }
  pve_map_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pve_map,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.IslandBattleData.pve_map)
}
inline ::std::string* IslandBattleData::unsafe_arena_release_pve_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.IslandBattleData.pve_map)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pve_map();
  return pve_map_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void IslandBattleData::unsafe_arena_set_allocated_pve_map(
    ::std::string* pve_map) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pve_map != NULL) {
    set_has_pve_map();
  } else {
    clear_has_pve_map();
  }
  pve_map_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pve_map, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.IslandBattleData.pve_map)
}

// -------------------------------------------------------------------

// GameRanking

// required int32 ranking = 1;
inline bool GameRanking::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameRanking::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameRanking::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameRanking::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 GameRanking::ranking() const {
  // @@protoc_insertion_point(field_get:db.GameRanking.ranking)
  return ranking_;
}
inline void GameRanking::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:db.GameRanking.ranking)
}

// required int32 ticketid = 2;
inline bool GameRanking::has_ticketid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameRanking::set_has_ticketid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameRanking::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameRanking::clear_ticketid() {
  ticketid_ = 0;
  clear_has_ticketid();
}
inline ::google::protobuf::int32 GameRanking::ticketid() const {
  // @@protoc_insertion_point(field_get:db.GameRanking.ticketid)
  return ticketid_;
}
inline void GameRanking::set_ticketid(::google::protobuf::int32 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.GameRanking.ticketid)
}

// -------------------------------------------------------------------

// UserCommonData

// required bytes userid = 1;
inline bool UserCommonData::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCommonData::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserCommonData::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserCommonData::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserCommonData::userid() const {
  // @@protoc_insertion_point(field_get:db.UserCommonData.userid)
  return userid_.Get();
}
inline void UserCommonData::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserCommonData.userid)
}
#if LANG_CXX11
inline void UserCommonData::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserCommonData.userid)
}
#endif
inline void UserCommonData::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserCommonData.userid)
}
inline void UserCommonData::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserCommonData.userid)
}
inline ::std::string* UserCommonData::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserCommonData.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserCommonData::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserCommonData.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserCommonData::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserCommonData.userid)
}
inline ::std::string* UserCommonData::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserCommonData.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserCommonData::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserCommonData.userid)
}

// required uint64 event_record_count = 2;
inline bool UserCommonData::has_event_record_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCommonData::set_has_event_record_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserCommonData::clear_has_event_record_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserCommonData::clear_event_record_count() {
  event_record_count_ = GOOGLE_ULONGLONG(0);
  clear_has_event_record_count();
}
inline ::google::protobuf::uint64 UserCommonData::event_record_count() const {
  // @@protoc_insertion_point(field_get:db.UserCommonData.event_record_count)
  return event_record_count_;
}
inline void UserCommonData::set_event_record_count(::google::protobuf::uint64 value) {
  set_has_event_record_count();
  event_record_count_ = value;
  // @@protoc_insertion_point(field_set:db.UserCommonData.event_record_count)
}

// -------------------------------------------------------------------

// proc_i_load_user_common_data_Parameter

// -------------------------------------------------------------------

// proc_i_load_user_common_data_ReturnRecord

// required .db.UserCommonData data = 1;
inline bool proc_i_load_user_common_data_ReturnRecord::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_i_load_user_common_data_ReturnRecord::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_i_load_user_common_data_ReturnRecord::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_i_load_user_common_data_ReturnRecord::clear_data() {
  if (data_ != NULL) data_->Clear();
  clear_has_data();
}
inline const ::db::UserCommonData& proc_i_load_user_common_data_ReturnRecord::_internal_data() const {
  return *data_;
}
inline const ::db::UserCommonData& proc_i_load_user_common_data_ReturnRecord::data() const {
  const ::db::UserCommonData* p = data_;
  // @@protoc_insertion_point(field_get:db.proc_i_load_user_common_data.ReturnRecord.data)
  return p != NULL ? *p : *reinterpret_cast<const ::db::UserCommonData*>(
      &::db::_UserCommonData_default_instance_);
}
inline ::db::UserCommonData* proc_i_load_user_common_data_ReturnRecord::release_data() {
  // @@protoc_insertion_point(field_release:db.proc_i_load_user_common_data.ReturnRecord.data)
  clear_has_data();
  ::db::UserCommonData* temp = data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  data_ = NULL;
  return temp;
}
inline ::db::UserCommonData* proc_i_load_user_common_data_ReturnRecord::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_i_load_user_common_data.ReturnRecord.data)
  clear_has_data();
  ::db::UserCommonData* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::db::UserCommonData* proc_i_load_user_common_data_ReturnRecord::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::db::UserCommonData>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_i_load_user_common_data.ReturnRecord.data)
  return data_;
}
inline void proc_i_load_user_common_data_ReturnRecord::set_allocated_data(::db::UserCommonData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
  } else {
    clear_has_data();
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:db.proc_i_load_user_common_data.ReturnRecord.data)
}

// -------------------------------------------------------------------

// proc_i_load_user_common_data

// optional .db.proc_i_load_user_common_data.Parameter param = 1;
inline bool proc_i_load_user_common_data::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_i_load_user_common_data::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_i_load_user_common_data::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_i_load_user_common_data::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_i_load_user_common_data_Parameter& proc_i_load_user_common_data::_internal_param() const {
  return *param_;
}
inline const ::db::proc_i_load_user_common_data_Parameter& proc_i_load_user_common_data::param() const {
  const ::db::proc_i_load_user_common_data_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_i_load_user_common_data.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_i_load_user_common_data_Parameter*>(
      &::db::_proc_i_load_user_common_data_Parameter_default_instance_);
}
inline ::db::proc_i_load_user_common_data_Parameter* proc_i_load_user_common_data::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_i_load_user_common_data.param)
  clear_has_param();
  ::db::proc_i_load_user_common_data_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_i_load_user_common_data_Parameter* proc_i_load_user_common_data::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_i_load_user_common_data.param)
  clear_has_param();
  ::db::proc_i_load_user_common_data_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_i_load_user_common_data_Parameter* proc_i_load_user_common_data::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_i_load_user_common_data_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_i_load_user_common_data.param)
  return param_;
}
inline void proc_i_load_user_common_data::set_allocated_param(::db::proc_i_load_user_common_data_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_i_load_user_common_data.param)
}

// repeated .db.proc_i_load_user_common_data.ReturnRecord return_record_list = 2;
inline int proc_i_load_user_common_data::return_record_list_size() const {
  return return_record_list_.size();
}
inline void proc_i_load_user_common_data::clear_return_record_list() {
  return_record_list_.Clear();
}
inline ::db::proc_i_load_user_common_data_ReturnRecord* proc_i_load_user_common_data::mutable_return_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.proc_i_load_user_common_data.return_record_list)
  return return_record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_common_data_ReturnRecord >*
proc_i_load_user_common_data::mutable_return_record_list() {
  // @@protoc_insertion_point(field_mutable_list:db.proc_i_load_user_common_data.return_record_list)
  return &return_record_list_;
}
inline const ::db::proc_i_load_user_common_data_ReturnRecord& proc_i_load_user_common_data::return_record_list(int index) const {
  // @@protoc_insertion_point(field_get:db.proc_i_load_user_common_data.return_record_list)
  return return_record_list_.Get(index);
}
inline ::db::proc_i_load_user_common_data_ReturnRecord* proc_i_load_user_common_data::add_return_record_list() {
  // @@protoc_insertion_point(field_add:db.proc_i_load_user_common_data.return_record_list)
  return return_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_common_data_ReturnRecord >&
proc_i_load_user_common_data::return_record_list() const {
  // @@protoc_insertion_point(field_list:db.proc_i_load_user_common_data.return_record_list)
  return return_record_list_;
}

// -------------------------------------------------------------------

// proc_i_save_user_common_data_Parameter

// required .db.UserCommonData p_data = 1;
inline bool proc_i_save_user_common_data_Parameter::has_p_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_i_save_user_common_data_Parameter::set_has_p_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_i_save_user_common_data_Parameter::clear_has_p_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_i_save_user_common_data_Parameter::clear_p_data() {
  if (p_data_ != NULL) p_data_->Clear();
  clear_has_p_data();
}
inline const ::db::UserCommonData& proc_i_save_user_common_data_Parameter::_internal_p_data() const {
  return *p_data_;
}
inline const ::db::UserCommonData& proc_i_save_user_common_data_Parameter::p_data() const {
  const ::db::UserCommonData* p = p_data_;
  // @@protoc_insertion_point(field_get:db.proc_i_save_user_common_data.Parameter.p_data)
  return p != NULL ? *p : *reinterpret_cast<const ::db::UserCommonData*>(
      &::db::_UserCommonData_default_instance_);
}
inline ::db::UserCommonData* proc_i_save_user_common_data_Parameter::release_p_data() {
  // @@protoc_insertion_point(field_release:db.proc_i_save_user_common_data.Parameter.p_data)
  clear_has_p_data();
  ::db::UserCommonData* temp = p_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  p_data_ = NULL;
  return temp;
}
inline ::db::UserCommonData* proc_i_save_user_common_data_Parameter::unsafe_arena_release_p_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_i_save_user_common_data.Parameter.p_data)
  clear_has_p_data();
  ::db::UserCommonData* temp = p_data_;
  p_data_ = NULL;
  return temp;
}
inline ::db::UserCommonData* proc_i_save_user_common_data_Parameter::mutable_p_data() {
  set_has_p_data();
  if (p_data_ == NULL) {
    auto* p = CreateMaybeMessage<::db::UserCommonData>(GetArenaNoVirtual());
    p_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_i_save_user_common_data.Parameter.p_data)
  return p_data_;
}
inline void proc_i_save_user_common_data_Parameter::set_allocated_p_data(::db::UserCommonData* p_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_data_;
  }
  if (p_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(p_data);
    if (message_arena != submessage_arena) {
      p_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_data, submessage_arena);
    }
    set_has_p_data();
  } else {
    clear_has_p_data();
  }
  p_data_ = p_data;
  // @@protoc_insertion_point(field_set_allocated:db.proc_i_save_user_common_data.Parameter.p_data)
}

// -------------------------------------------------------------------

// proc_i_save_user_common_data

// optional .db.proc_i_save_user_common_data.Parameter param = 1;
inline bool proc_i_save_user_common_data::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_i_save_user_common_data::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_i_save_user_common_data::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_i_save_user_common_data::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_i_save_user_common_data_Parameter& proc_i_save_user_common_data::_internal_param() const {
  return *param_;
}
inline const ::db::proc_i_save_user_common_data_Parameter& proc_i_save_user_common_data::param() const {
  const ::db::proc_i_save_user_common_data_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_i_save_user_common_data.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_i_save_user_common_data_Parameter*>(
      &::db::_proc_i_save_user_common_data_Parameter_default_instance_);
}
inline ::db::proc_i_save_user_common_data_Parameter* proc_i_save_user_common_data::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_i_save_user_common_data.param)
  clear_has_param();
  ::db::proc_i_save_user_common_data_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_i_save_user_common_data_Parameter* proc_i_save_user_common_data::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_i_save_user_common_data.param)
  clear_has_param();
  ::db::proc_i_save_user_common_data_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_i_save_user_common_data_Parameter* proc_i_save_user_common_data::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_i_save_user_common_data_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_i_save_user_common_data.param)
  return param_;
}
inline void proc_i_save_user_common_data::set_allocated_param(::db::proc_i_save_user_common_data_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_i_save_user_common_data.param)
}

// -------------------------------------------------------------------

// UserRankingData

// required int32 ticketid = 1;
inline bool UserRankingData::has_ticketid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRankingData::set_has_ticketid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRankingData::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRankingData::clear_ticketid() {
  ticketid_ = 0;
  clear_has_ticketid();
}
inline ::google::protobuf::int32 UserRankingData::ticketid() const {
  // @@protoc_insertion_point(field_get:db.UserRankingData.ticketid)
  return ticketid_;
}
inline void UserRankingData::set_ticketid(::google::protobuf::int32 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.UserRankingData.ticketid)
}

// required int32 ranking_score = 2;
inline bool UserRankingData::has_ranking_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRankingData::set_has_ranking_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRankingData::clear_has_ranking_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRankingData::clear_ranking_score() {
  ranking_score_ = 0;
  clear_has_ranking_score();
}
inline ::google::protobuf::int32 UserRankingData::ranking_score() const {
  // @@protoc_insertion_point(field_get:db.UserRankingData.ranking_score)
  return ranking_score_;
}
inline void UserRankingData::set_ranking_score(::google::protobuf::int32 value) {
  set_has_ranking_score();
  ranking_score_ = value;
  // @@protoc_insertion_point(field_set:db.UserRankingData.ranking_score)
}

// required int32 win = 3;
inline bool UserRankingData::has_win() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRankingData::set_has_win() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRankingData::clear_has_win() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRankingData::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 UserRankingData::win() const {
  // @@protoc_insertion_point(field_get:db.UserRankingData.win)
  return win_;
}
inline void UserRankingData::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
  // @@protoc_insertion_point(field_set:db.UserRankingData.win)
}

// required int32 lose = 4;
inline bool UserRankingData::has_lose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRankingData::set_has_lose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRankingData::clear_has_lose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRankingData::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
inline ::google::protobuf::int32 UserRankingData::lose() const {
  // @@protoc_insertion_point(field_get:db.UserRankingData.lose)
  return lose_;
}
inline void UserRankingData::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
  // @@protoc_insertion_point(field_set:db.UserRankingData.lose)
}

// required sfixed64 timestamp = 5;
inline bool UserRankingData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRankingData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRankingData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRankingData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserRankingData::timestamp() const {
  // @@protoc_insertion_point(field_get:db.UserRankingData.timestamp)
  return timestamp_;
}
inline void UserRankingData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.UserRankingData.timestamp)
}

// required bytes team = 6;
inline bool UserRankingData::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRankingData::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRankingData::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRankingData::clear_team() {
  team_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_team();
}
inline const ::std::string& UserRankingData::team() const {
  // @@protoc_insertion_point(field_get:db.UserRankingData.team)
  return team_.Get();
}
inline void UserRankingData::set_team(const ::std::string& value) {
  set_has_team();
  team_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserRankingData.team)
}
#if LANG_CXX11
inline void UserRankingData::set_team(::std::string&& value) {
  set_has_team();
  team_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserRankingData.team)
}
#endif
inline void UserRankingData::set_team(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team();
  team_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserRankingData.team)
}
inline void UserRankingData::set_team(const void* value,
    size_t size) {
  set_has_team();
  team_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserRankingData.team)
}
inline ::std::string* UserRankingData::mutable_team() {
  set_has_team();
  // @@protoc_insertion_point(field_mutable:db.UserRankingData.team)
  return team_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserRankingData::release_team() {
  // @@protoc_insertion_point(field_release:db.UserRankingData.team)
  if (!has_team()) {
    return NULL;
  }
  clear_has_team();
  return team_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserRankingData::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    set_has_team();
  } else {
    clear_has_team();
  }
  team_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserRankingData.team)
}
inline ::std::string* UserRankingData::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserRankingData.team)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_team();
  return team_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserRankingData::unsafe_arena_set_allocated_team(
    ::std::string* team) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (team != NULL) {
    set_has_team();
  } else {
    clear_has_team();
  }
  team_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      team, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserRankingData.team)
}

// -------------------------------------------------------------------

// proc_i_load_user_ranking_data_Parameter

// -------------------------------------------------------------------

// proc_i_load_user_ranking_data_ReturnRecord

// required .db.UserRankingData data = 1;
inline bool proc_i_load_user_ranking_data_ReturnRecord::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_i_load_user_ranking_data_ReturnRecord::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_i_load_user_ranking_data_ReturnRecord::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_i_load_user_ranking_data_ReturnRecord::clear_data() {
  if (data_ != NULL) data_->Clear();
  clear_has_data();
}
inline const ::db::UserRankingData& proc_i_load_user_ranking_data_ReturnRecord::_internal_data() const {
  return *data_;
}
inline const ::db::UserRankingData& proc_i_load_user_ranking_data_ReturnRecord::data() const {
  const ::db::UserRankingData* p = data_;
  // @@protoc_insertion_point(field_get:db.proc_i_load_user_ranking_data.ReturnRecord.data)
  return p != NULL ? *p : *reinterpret_cast<const ::db::UserRankingData*>(
      &::db::_UserRankingData_default_instance_);
}
inline ::db::UserRankingData* proc_i_load_user_ranking_data_ReturnRecord::release_data() {
  // @@protoc_insertion_point(field_release:db.proc_i_load_user_ranking_data.ReturnRecord.data)
  clear_has_data();
  ::db::UserRankingData* temp = data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  data_ = NULL;
  return temp;
}
inline ::db::UserRankingData* proc_i_load_user_ranking_data_ReturnRecord::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_i_load_user_ranking_data.ReturnRecord.data)
  clear_has_data();
  ::db::UserRankingData* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::db::UserRankingData* proc_i_load_user_ranking_data_ReturnRecord::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::db::UserRankingData>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_i_load_user_ranking_data.ReturnRecord.data)
  return data_;
}
inline void proc_i_load_user_ranking_data_ReturnRecord::set_allocated_data(::db::UserRankingData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
  } else {
    clear_has_data();
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:db.proc_i_load_user_ranking_data.ReturnRecord.data)
}

// -------------------------------------------------------------------

// proc_i_load_user_ranking_data

// optional .db.proc_i_load_user_ranking_data.Parameter param = 1;
inline bool proc_i_load_user_ranking_data::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_i_load_user_ranking_data::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_i_load_user_ranking_data::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_i_load_user_ranking_data::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_i_load_user_ranking_data_Parameter& proc_i_load_user_ranking_data::_internal_param() const {
  return *param_;
}
inline const ::db::proc_i_load_user_ranking_data_Parameter& proc_i_load_user_ranking_data::param() const {
  const ::db::proc_i_load_user_ranking_data_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_i_load_user_ranking_data.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_i_load_user_ranking_data_Parameter*>(
      &::db::_proc_i_load_user_ranking_data_Parameter_default_instance_);
}
inline ::db::proc_i_load_user_ranking_data_Parameter* proc_i_load_user_ranking_data::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_i_load_user_ranking_data.param)
  clear_has_param();
  ::db::proc_i_load_user_ranking_data_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_i_load_user_ranking_data_Parameter* proc_i_load_user_ranking_data::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_i_load_user_ranking_data.param)
  clear_has_param();
  ::db::proc_i_load_user_ranking_data_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_i_load_user_ranking_data_Parameter* proc_i_load_user_ranking_data::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_i_load_user_ranking_data_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_i_load_user_ranking_data.param)
  return param_;
}
inline void proc_i_load_user_ranking_data::set_allocated_param(::db::proc_i_load_user_ranking_data_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_i_load_user_ranking_data.param)
}

// repeated .db.proc_i_load_user_ranking_data.ReturnRecord return_record_list = 2;
inline int proc_i_load_user_ranking_data::return_record_list_size() const {
  return return_record_list_.size();
}
inline void proc_i_load_user_ranking_data::clear_return_record_list() {
  return_record_list_.Clear();
}
inline ::db::proc_i_load_user_ranking_data_ReturnRecord* proc_i_load_user_ranking_data::mutable_return_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.proc_i_load_user_ranking_data.return_record_list)
  return return_record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_ranking_data_ReturnRecord >*
proc_i_load_user_ranking_data::mutable_return_record_list() {
  // @@protoc_insertion_point(field_mutable_list:db.proc_i_load_user_ranking_data.return_record_list)
  return &return_record_list_;
}
inline const ::db::proc_i_load_user_ranking_data_ReturnRecord& proc_i_load_user_ranking_data::return_record_list(int index) const {
  // @@protoc_insertion_point(field_get:db.proc_i_load_user_ranking_data.return_record_list)
  return return_record_list_.Get(index);
}
inline ::db::proc_i_load_user_ranking_data_ReturnRecord* proc_i_load_user_ranking_data::add_return_record_list() {
  // @@protoc_insertion_point(field_add:db.proc_i_load_user_ranking_data.return_record_list)
  return return_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::proc_i_load_user_ranking_data_ReturnRecord >&
proc_i_load_user_ranking_data::return_record_list() const {
  // @@protoc_insertion_point(field_list:db.proc_i_load_user_ranking_data.return_record_list)
  return return_record_list_;
}

// -------------------------------------------------------------------

// proc_i_save_user_ranking_data_Parameter

// required .db.UserRankingData p_data = 1;
inline bool proc_i_save_user_ranking_data_Parameter::has_p_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_i_save_user_ranking_data_Parameter::set_has_p_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_i_save_user_ranking_data_Parameter::clear_has_p_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_i_save_user_ranking_data_Parameter::clear_p_data() {
  if (p_data_ != NULL) p_data_->Clear();
  clear_has_p_data();
}
inline const ::db::UserRankingData& proc_i_save_user_ranking_data_Parameter::_internal_p_data() const {
  return *p_data_;
}
inline const ::db::UserRankingData& proc_i_save_user_ranking_data_Parameter::p_data() const {
  const ::db::UserRankingData* p = p_data_;
  // @@protoc_insertion_point(field_get:db.proc_i_save_user_ranking_data.Parameter.p_data)
  return p != NULL ? *p : *reinterpret_cast<const ::db::UserRankingData*>(
      &::db::_UserRankingData_default_instance_);
}
inline ::db::UserRankingData* proc_i_save_user_ranking_data_Parameter::release_p_data() {
  // @@protoc_insertion_point(field_release:db.proc_i_save_user_ranking_data.Parameter.p_data)
  clear_has_p_data();
  ::db::UserRankingData* temp = p_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  p_data_ = NULL;
  return temp;
}
inline ::db::UserRankingData* proc_i_save_user_ranking_data_Parameter::unsafe_arena_release_p_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_i_save_user_ranking_data.Parameter.p_data)
  clear_has_p_data();
  ::db::UserRankingData* temp = p_data_;
  p_data_ = NULL;
  return temp;
}
inline ::db::UserRankingData* proc_i_save_user_ranking_data_Parameter::mutable_p_data() {
  set_has_p_data();
  if (p_data_ == NULL) {
    auto* p = CreateMaybeMessage<::db::UserRankingData>(GetArenaNoVirtual());
    p_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_i_save_user_ranking_data.Parameter.p_data)
  return p_data_;
}
inline void proc_i_save_user_ranking_data_Parameter::set_allocated_p_data(::db::UserRankingData* p_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_data_;
  }
  if (p_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(p_data);
    if (message_arena != submessage_arena) {
      p_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_data, submessage_arena);
    }
    set_has_p_data();
  } else {
    clear_has_p_data();
  }
  p_data_ = p_data;
  // @@protoc_insertion_point(field_set_allocated:db.proc_i_save_user_ranking_data.Parameter.p_data)
}

// -------------------------------------------------------------------

// proc_i_save_user_ranking_data

// optional .db.proc_i_save_user_ranking_data.Parameter param = 1;
inline bool proc_i_save_user_ranking_data::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_i_save_user_ranking_data::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_i_save_user_ranking_data::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_i_save_user_ranking_data::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_i_save_user_ranking_data_Parameter& proc_i_save_user_ranking_data::_internal_param() const {
  return *param_;
}
inline const ::db::proc_i_save_user_ranking_data_Parameter& proc_i_save_user_ranking_data::param() const {
  const ::db::proc_i_save_user_ranking_data_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_i_save_user_ranking_data.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_i_save_user_ranking_data_Parameter*>(
      &::db::_proc_i_save_user_ranking_data_Parameter_default_instance_);
}
inline ::db::proc_i_save_user_ranking_data_Parameter* proc_i_save_user_ranking_data::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_i_save_user_ranking_data.param)
  clear_has_param();
  ::db::proc_i_save_user_ranking_data_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_i_save_user_ranking_data_Parameter* proc_i_save_user_ranking_data::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_i_save_user_ranking_data.param)
  clear_has_param();
  ::db::proc_i_save_user_ranking_data_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_i_save_user_ranking_data_Parameter* proc_i_save_user_ranking_data::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_i_save_user_ranking_data_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_i_save_user_ranking_data.param)
  return param_;
}
inline void proc_i_save_user_ranking_data::set_allocated_param(::db::proc_i_save_user_ranking_data_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_i_save_user_ranking_data.param)
}

// -------------------------------------------------------------------

// ConfigGameServer

// required int32 first_gold_lottery_id_once = 1;
inline bool ConfigGameServer::has_first_gold_lottery_id_once() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigGameServer::set_has_first_gold_lottery_id_once() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigGameServer::clear_has_first_gold_lottery_id_once() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigGameServer::clear_first_gold_lottery_id_once() {
  first_gold_lottery_id_once_ = 0;
  clear_has_first_gold_lottery_id_once();
}
inline ::google::protobuf::int32 ConfigGameServer::first_gold_lottery_id_once() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.first_gold_lottery_id_once)
  return first_gold_lottery_id_once_;
}
inline void ConfigGameServer::set_first_gold_lottery_id_once(::google::protobuf::int32 value) {
  set_has_first_gold_lottery_id_once();
  first_gold_lottery_id_once_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.first_gold_lottery_id_once)
}

// required int32 first_diamond_lottery_id_ten = 2;
inline bool ConfigGameServer::has_first_diamond_lottery_id_ten() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigGameServer::set_has_first_diamond_lottery_id_ten() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigGameServer::clear_has_first_diamond_lottery_id_ten() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigGameServer::clear_first_diamond_lottery_id_ten() {
  first_diamond_lottery_id_ten_ = 0;
  clear_has_first_diamond_lottery_id_ten();
}
inline ::google::protobuf::int32 ConfigGameServer::first_diamond_lottery_id_ten() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.first_diamond_lottery_id_ten)
  return first_diamond_lottery_id_ten_;
}
inline void ConfigGameServer::set_first_diamond_lottery_id_ten(::google::protobuf::int32 value) {
  set_has_first_diamond_lottery_id_ten();
  first_diamond_lottery_id_ten_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.first_diamond_lottery_id_ten)
}

// required int32 max_daily_system_task_num = 3;
inline bool ConfigGameServer::has_max_daily_system_task_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigGameServer::set_has_max_daily_system_task_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigGameServer::clear_has_max_daily_system_task_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigGameServer::clear_max_daily_system_task_num() {
  max_daily_system_task_num_ = 0;
  clear_has_max_daily_system_task_num();
}
inline ::google::protobuf::int32 ConfigGameServer::max_daily_system_task_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.max_daily_system_task_num)
  return max_daily_system_task_num_;
}
inline void ConfigGameServer::set_max_daily_system_task_num(::google::protobuf::int32 value) {
  set_has_max_daily_system_task_num();
  max_daily_system_task_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.max_daily_system_task_num)
}

// required int32 max_occupy_monster_ship_times = 4;
inline bool ConfigGameServer::has_max_occupy_monster_ship_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigGameServer::set_has_max_occupy_monster_ship_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigGameServer::clear_has_max_occupy_monster_ship_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigGameServer::clear_max_occupy_monster_ship_times() {
  max_occupy_monster_ship_times_ = 0;
  clear_has_max_occupy_monster_ship_times();
}
inline ::google::protobuf::int32 ConfigGameServer::max_occupy_monster_ship_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.max_occupy_monster_ship_times)
  return max_occupy_monster_ship_times_;
}
inline void ConfigGameServer::set_max_occupy_monster_ship_times(::google::protobuf::int32 value) {
  set_has_max_occupy_monster_ship_times();
  max_occupy_monster_ship_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.max_occupy_monster_ship_times)
}

// required int32 max_occupy_player_ship_times = 5;
inline bool ConfigGameServer::has_max_occupy_player_ship_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigGameServer::set_has_max_occupy_player_ship_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigGameServer::clear_has_max_occupy_player_ship_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigGameServer::clear_max_occupy_player_ship_times() {
  max_occupy_player_ship_times_ = 0;
  clear_has_max_occupy_player_ship_times();
}
inline ::google::protobuf::int32 ConfigGameServer::max_occupy_player_ship_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.max_occupy_player_ship_times)
  return max_occupy_player_ship_times_;
}
inline void ConfigGameServer::set_max_occupy_player_ship_times(::google::protobuf::int32 value) {
  set_has_max_occupy_player_ship_times();
  max_occupy_player_ship_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.max_occupy_player_ship_times)
}

// required int32 max_occupy_special_ship_times = 6;
inline bool ConfigGameServer::has_max_occupy_special_ship_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigGameServer::set_has_max_occupy_special_ship_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigGameServer::clear_has_max_occupy_special_ship_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigGameServer::clear_max_occupy_special_ship_times() {
  max_occupy_special_ship_times_ = 0;
  clear_has_max_occupy_special_ship_times();
}
inline ::google::protobuf::int32 ConfigGameServer::max_occupy_special_ship_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.max_occupy_special_ship_times)
  return max_occupy_special_ship_times_;
}
inline void ConfigGameServer::set_max_occupy_special_ship_times(::google::protobuf::int32 value) {
  set_has_max_occupy_special_ship_times();
  max_occupy_special_ship_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.max_occupy_special_ship_times)
}

// required int32 max_ghost_ship_reset_times = 7;
inline bool ConfigGameServer::has_max_ghost_ship_reset_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigGameServer::set_has_max_ghost_ship_reset_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigGameServer::clear_has_max_ghost_ship_reset_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigGameServer::clear_max_ghost_ship_reset_times() {
  max_ghost_ship_reset_times_ = 0;
  clear_has_max_ghost_ship_reset_times();
}
inline ::google::protobuf::int32 ConfigGameServer::max_ghost_ship_reset_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.max_ghost_ship_reset_times)
  return max_ghost_ship_reset_times_;
}
inline void ConfigGameServer::set_max_ghost_ship_reset_times(::google::protobuf::int32 value) {
  set_has_max_ghost_ship_reset_times();
  max_ghost_ship_reset_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.max_ghost_ship_reset_times)
}

// required bytes ghost_ship_reset_cost = 8;
inline bool ConfigGameServer::has_ghost_ship_reset_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigGameServer::set_has_ghost_ship_reset_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigGameServer::clear_has_ghost_ship_reset_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigGameServer::clear_ghost_ship_reset_cost() {
  ghost_ship_reset_cost_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ghost_ship_reset_cost();
}
inline const ::std::string& ConfigGameServer::ghost_ship_reset_cost() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.ghost_ship_reset_cost)
  return ghost_ship_reset_cost_.Get();
}
inline void ConfigGameServer::set_ghost_ship_reset_cost(const ::std::string& value) {
  set_has_ghost_ship_reset_cost();
  ghost_ship_reset_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.ghost_ship_reset_cost)
}
#if LANG_CXX11
inline void ConfigGameServer::set_ghost_ship_reset_cost(::std::string&& value) {
  set_has_ghost_ship_reset_cost();
  ghost_ship_reset_cost_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameServer.ghost_ship_reset_cost)
}
#endif
inline void ConfigGameServer::set_ghost_ship_reset_cost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ghost_ship_reset_cost();
  ghost_ship_reset_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameServer.ghost_ship_reset_cost)
}
inline void ConfigGameServer::set_ghost_ship_reset_cost(const void* value,
    size_t size) {
  set_has_ghost_ship_reset_cost();
  ghost_ship_reset_cost_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameServer.ghost_ship_reset_cost)
}
inline ::std::string* ConfigGameServer::mutable_ghost_ship_reset_cost() {
  set_has_ghost_ship_reset_cost();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameServer.ghost_ship_reset_cost)
  return ghost_ship_reset_cost_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameServer::release_ghost_ship_reset_cost() {
  // @@protoc_insertion_point(field_release:db.ConfigGameServer.ghost_ship_reset_cost)
  if (!has_ghost_ship_reset_cost()) {
    return NULL;
  }
  clear_has_ghost_ship_reset_cost();
  return ghost_ship_reset_cost_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameServer::set_allocated_ghost_ship_reset_cost(::std::string* ghost_ship_reset_cost) {
  if (ghost_ship_reset_cost != NULL) {
    set_has_ghost_ship_reset_cost();
  } else {
    clear_has_ghost_ship_reset_cost();
  }
  ghost_ship_reset_cost_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ghost_ship_reset_cost,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameServer.ghost_ship_reset_cost)
}
inline ::std::string* ConfigGameServer::unsafe_arena_release_ghost_ship_reset_cost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameServer.ghost_ship_reset_cost)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ghost_ship_reset_cost();
  return ghost_ship_reset_cost_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameServer::unsafe_arena_set_allocated_ghost_ship_reset_cost(
    ::std::string* ghost_ship_reset_cost) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ghost_ship_reset_cost != NULL) {
    set_has_ghost_ship_reset_cost();
  } else {
    clear_has_ghost_ship_reset_cost();
  }
  ghost_ship_reset_cost_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ghost_ship_reset_cost, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameServer.ghost_ship_reset_cost)
}

// required int32 max_fast_reach_ticket_num = 9;
inline bool ConfigGameServer::has_max_fast_reach_ticket_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigGameServer::set_has_max_fast_reach_ticket_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigGameServer::clear_has_max_fast_reach_ticket_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigGameServer::clear_max_fast_reach_ticket_num() {
  max_fast_reach_ticket_num_ = 0;
  clear_has_max_fast_reach_ticket_num();
}
inline ::google::protobuf::int32 ConfigGameServer::max_fast_reach_ticket_num() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.max_fast_reach_ticket_num)
  return max_fast_reach_ticket_num_;
}
inline void ConfigGameServer::set_max_fast_reach_ticket_num(::google::protobuf::int32 value) {
  set_has_max_fast_reach_ticket_num();
  max_fast_reach_ticket_num_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.max_fast_reach_ticket_num)
}

// required int32 fast_reach_ticket_cd = 10;
inline bool ConfigGameServer::has_fast_reach_ticket_cd() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigGameServer::set_has_fast_reach_ticket_cd() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigGameServer::clear_has_fast_reach_ticket_cd() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigGameServer::clear_fast_reach_ticket_cd() {
  fast_reach_ticket_cd_ = 0;
  clear_has_fast_reach_ticket_cd();
}
inline ::google::protobuf::int32 ConfigGameServer::fast_reach_ticket_cd() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.fast_reach_ticket_cd)
  return fast_reach_ticket_cd_;
}
inline void ConfigGameServer::set_fast_reach_ticket_cd(::google::protobuf::int32 value) {
  set_has_fast_reach_ticket_cd();
  fast_reach_ticket_cd_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.fast_reach_ticket_cd)
}

// required bytes jjc_daily_mail_title = 11;
inline bool ConfigGameServer::has_jjc_daily_mail_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigGameServer::set_has_jjc_daily_mail_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigGameServer::clear_has_jjc_daily_mail_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigGameServer::clear_jjc_daily_mail_title() {
  jjc_daily_mail_title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_jjc_daily_mail_title();
}
inline const ::std::string& ConfigGameServer::jjc_daily_mail_title() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.jjc_daily_mail_title)
  return jjc_daily_mail_title_.Get();
}
inline void ConfigGameServer::set_jjc_daily_mail_title(const ::std::string& value) {
  set_has_jjc_daily_mail_title();
  jjc_daily_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.jjc_daily_mail_title)
}
#if LANG_CXX11
inline void ConfigGameServer::set_jjc_daily_mail_title(::std::string&& value) {
  set_has_jjc_daily_mail_title();
  jjc_daily_mail_title_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameServer.jjc_daily_mail_title)
}
#endif
inline void ConfigGameServer::set_jjc_daily_mail_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jjc_daily_mail_title();
  jjc_daily_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameServer.jjc_daily_mail_title)
}
inline void ConfigGameServer::set_jjc_daily_mail_title(const void* value,
    size_t size) {
  set_has_jjc_daily_mail_title();
  jjc_daily_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameServer.jjc_daily_mail_title)
}
inline ::std::string* ConfigGameServer::mutable_jjc_daily_mail_title() {
  set_has_jjc_daily_mail_title();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameServer.jjc_daily_mail_title)
  return jjc_daily_mail_title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameServer::release_jjc_daily_mail_title() {
  // @@protoc_insertion_point(field_release:db.ConfigGameServer.jjc_daily_mail_title)
  if (!has_jjc_daily_mail_title()) {
    return NULL;
  }
  clear_has_jjc_daily_mail_title();
  return jjc_daily_mail_title_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameServer::set_allocated_jjc_daily_mail_title(::std::string* jjc_daily_mail_title) {
  if (jjc_daily_mail_title != NULL) {
    set_has_jjc_daily_mail_title();
  } else {
    clear_has_jjc_daily_mail_title();
  }
  jjc_daily_mail_title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jjc_daily_mail_title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameServer.jjc_daily_mail_title)
}
inline ::std::string* ConfigGameServer::unsafe_arena_release_jjc_daily_mail_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameServer.jjc_daily_mail_title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_jjc_daily_mail_title();
  return jjc_daily_mail_title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameServer::unsafe_arena_set_allocated_jjc_daily_mail_title(
    ::std::string* jjc_daily_mail_title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (jjc_daily_mail_title != NULL) {
    set_has_jjc_daily_mail_title();
  } else {
    clear_has_jjc_daily_mail_title();
  }
  jjc_daily_mail_title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      jjc_daily_mail_title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameServer.jjc_daily_mail_title)
}

// required bytes jjc_daily_mail_content = 12;
inline bool ConfigGameServer::has_jjc_daily_mail_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigGameServer::set_has_jjc_daily_mail_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigGameServer::clear_has_jjc_daily_mail_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigGameServer::clear_jjc_daily_mail_content() {
  jjc_daily_mail_content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_jjc_daily_mail_content();
}
inline const ::std::string& ConfigGameServer::jjc_daily_mail_content() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.jjc_daily_mail_content)
  return jjc_daily_mail_content_.Get();
}
inline void ConfigGameServer::set_jjc_daily_mail_content(const ::std::string& value) {
  set_has_jjc_daily_mail_content();
  jjc_daily_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.jjc_daily_mail_content)
}
#if LANG_CXX11
inline void ConfigGameServer::set_jjc_daily_mail_content(::std::string&& value) {
  set_has_jjc_daily_mail_content();
  jjc_daily_mail_content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameServer.jjc_daily_mail_content)
}
#endif
inline void ConfigGameServer::set_jjc_daily_mail_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jjc_daily_mail_content();
  jjc_daily_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameServer.jjc_daily_mail_content)
}
inline void ConfigGameServer::set_jjc_daily_mail_content(const void* value,
    size_t size) {
  set_has_jjc_daily_mail_content();
  jjc_daily_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameServer.jjc_daily_mail_content)
}
inline ::std::string* ConfigGameServer::mutable_jjc_daily_mail_content() {
  set_has_jjc_daily_mail_content();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameServer.jjc_daily_mail_content)
  return jjc_daily_mail_content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameServer::release_jjc_daily_mail_content() {
  // @@protoc_insertion_point(field_release:db.ConfigGameServer.jjc_daily_mail_content)
  if (!has_jjc_daily_mail_content()) {
    return NULL;
  }
  clear_has_jjc_daily_mail_content();
  return jjc_daily_mail_content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameServer::set_allocated_jjc_daily_mail_content(::std::string* jjc_daily_mail_content) {
  if (jjc_daily_mail_content != NULL) {
    set_has_jjc_daily_mail_content();
  } else {
    clear_has_jjc_daily_mail_content();
  }
  jjc_daily_mail_content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jjc_daily_mail_content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameServer.jjc_daily_mail_content)
}
inline ::std::string* ConfigGameServer::unsafe_arena_release_jjc_daily_mail_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameServer.jjc_daily_mail_content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_jjc_daily_mail_content();
  return jjc_daily_mail_content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameServer::unsafe_arena_set_allocated_jjc_daily_mail_content(
    ::std::string* jjc_daily_mail_content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (jjc_daily_mail_content != NULL) {
    set_has_jjc_daily_mail_content();
  } else {
    clear_has_jjc_daily_mail_content();
  }
  jjc_daily_mail_content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      jjc_daily_mail_content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameServer.jjc_daily_mail_content)
}

// required bytes jjc_weekly_mail_title = 13;
inline bool ConfigGameServer::has_jjc_weekly_mail_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigGameServer::set_has_jjc_weekly_mail_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigGameServer::clear_has_jjc_weekly_mail_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigGameServer::clear_jjc_weekly_mail_title() {
  jjc_weekly_mail_title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_jjc_weekly_mail_title();
}
inline const ::std::string& ConfigGameServer::jjc_weekly_mail_title() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.jjc_weekly_mail_title)
  return jjc_weekly_mail_title_.Get();
}
inline void ConfigGameServer::set_jjc_weekly_mail_title(const ::std::string& value) {
  set_has_jjc_weekly_mail_title();
  jjc_weekly_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.jjc_weekly_mail_title)
}
#if LANG_CXX11
inline void ConfigGameServer::set_jjc_weekly_mail_title(::std::string&& value) {
  set_has_jjc_weekly_mail_title();
  jjc_weekly_mail_title_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameServer.jjc_weekly_mail_title)
}
#endif
inline void ConfigGameServer::set_jjc_weekly_mail_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jjc_weekly_mail_title();
  jjc_weekly_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameServer.jjc_weekly_mail_title)
}
inline void ConfigGameServer::set_jjc_weekly_mail_title(const void* value,
    size_t size) {
  set_has_jjc_weekly_mail_title();
  jjc_weekly_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameServer.jjc_weekly_mail_title)
}
inline ::std::string* ConfigGameServer::mutable_jjc_weekly_mail_title() {
  set_has_jjc_weekly_mail_title();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameServer.jjc_weekly_mail_title)
  return jjc_weekly_mail_title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameServer::release_jjc_weekly_mail_title() {
  // @@protoc_insertion_point(field_release:db.ConfigGameServer.jjc_weekly_mail_title)
  if (!has_jjc_weekly_mail_title()) {
    return NULL;
  }
  clear_has_jjc_weekly_mail_title();
  return jjc_weekly_mail_title_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameServer::set_allocated_jjc_weekly_mail_title(::std::string* jjc_weekly_mail_title) {
  if (jjc_weekly_mail_title != NULL) {
    set_has_jjc_weekly_mail_title();
  } else {
    clear_has_jjc_weekly_mail_title();
  }
  jjc_weekly_mail_title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jjc_weekly_mail_title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameServer.jjc_weekly_mail_title)
}
inline ::std::string* ConfigGameServer::unsafe_arena_release_jjc_weekly_mail_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameServer.jjc_weekly_mail_title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_jjc_weekly_mail_title();
  return jjc_weekly_mail_title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameServer::unsafe_arena_set_allocated_jjc_weekly_mail_title(
    ::std::string* jjc_weekly_mail_title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (jjc_weekly_mail_title != NULL) {
    set_has_jjc_weekly_mail_title();
  } else {
    clear_has_jjc_weekly_mail_title();
  }
  jjc_weekly_mail_title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      jjc_weekly_mail_title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameServer.jjc_weekly_mail_title)
}

// required bytes jjc_weekly_mail_content = 14;
inline bool ConfigGameServer::has_jjc_weekly_mail_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigGameServer::set_has_jjc_weekly_mail_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigGameServer::clear_has_jjc_weekly_mail_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigGameServer::clear_jjc_weekly_mail_content() {
  jjc_weekly_mail_content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_jjc_weekly_mail_content();
}
inline const ::std::string& ConfigGameServer::jjc_weekly_mail_content() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.jjc_weekly_mail_content)
  return jjc_weekly_mail_content_.Get();
}
inline void ConfigGameServer::set_jjc_weekly_mail_content(const ::std::string& value) {
  set_has_jjc_weekly_mail_content();
  jjc_weekly_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.jjc_weekly_mail_content)
}
#if LANG_CXX11
inline void ConfigGameServer::set_jjc_weekly_mail_content(::std::string&& value) {
  set_has_jjc_weekly_mail_content();
  jjc_weekly_mail_content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameServer.jjc_weekly_mail_content)
}
#endif
inline void ConfigGameServer::set_jjc_weekly_mail_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jjc_weekly_mail_content();
  jjc_weekly_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameServer.jjc_weekly_mail_content)
}
inline void ConfigGameServer::set_jjc_weekly_mail_content(const void* value,
    size_t size) {
  set_has_jjc_weekly_mail_content();
  jjc_weekly_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameServer.jjc_weekly_mail_content)
}
inline ::std::string* ConfigGameServer::mutable_jjc_weekly_mail_content() {
  set_has_jjc_weekly_mail_content();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameServer.jjc_weekly_mail_content)
  return jjc_weekly_mail_content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameServer::release_jjc_weekly_mail_content() {
  // @@protoc_insertion_point(field_release:db.ConfigGameServer.jjc_weekly_mail_content)
  if (!has_jjc_weekly_mail_content()) {
    return NULL;
  }
  clear_has_jjc_weekly_mail_content();
  return jjc_weekly_mail_content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameServer::set_allocated_jjc_weekly_mail_content(::std::string* jjc_weekly_mail_content) {
  if (jjc_weekly_mail_content != NULL) {
    set_has_jjc_weekly_mail_content();
  } else {
    clear_has_jjc_weekly_mail_content();
  }
  jjc_weekly_mail_content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jjc_weekly_mail_content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameServer.jjc_weekly_mail_content)
}
inline ::std::string* ConfigGameServer::unsafe_arena_release_jjc_weekly_mail_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameServer.jjc_weekly_mail_content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_jjc_weekly_mail_content();
  return jjc_weekly_mail_content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameServer::unsafe_arena_set_allocated_jjc_weekly_mail_content(
    ::std::string* jjc_weekly_mail_content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (jjc_weekly_mail_content != NULL) {
    set_has_jjc_weekly_mail_content();
  } else {
    clear_has_jjc_weekly_mail_content();
  }
  jjc_weekly_mail_content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      jjc_weekly_mail_content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameServer.jjc_weekly_mail_content)
}

// required bytes jjc_monthly_mail_title = 15;
inline bool ConfigGameServer::has_jjc_monthly_mail_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigGameServer::set_has_jjc_monthly_mail_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigGameServer::clear_has_jjc_monthly_mail_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigGameServer::clear_jjc_monthly_mail_title() {
  jjc_monthly_mail_title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_jjc_monthly_mail_title();
}
inline const ::std::string& ConfigGameServer::jjc_monthly_mail_title() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.jjc_monthly_mail_title)
  return jjc_monthly_mail_title_.Get();
}
inline void ConfigGameServer::set_jjc_monthly_mail_title(const ::std::string& value) {
  set_has_jjc_monthly_mail_title();
  jjc_monthly_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.jjc_monthly_mail_title)
}
#if LANG_CXX11
inline void ConfigGameServer::set_jjc_monthly_mail_title(::std::string&& value) {
  set_has_jjc_monthly_mail_title();
  jjc_monthly_mail_title_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameServer.jjc_monthly_mail_title)
}
#endif
inline void ConfigGameServer::set_jjc_monthly_mail_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jjc_monthly_mail_title();
  jjc_monthly_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameServer.jjc_monthly_mail_title)
}
inline void ConfigGameServer::set_jjc_monthly_mail_title(const void* value,
    size_t size) {
  set_has_jjc_monthly_mail_title();
  jjc_monthly_mail_title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameServer.jjc_monthly_mail_title)
}
inline ::std::string* ConfigGameServer::mutable_jjc_monthly_mail_title() {
  set_has_jjc_monthly_mail_title();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameServer.jjc_monthly_mail_title)
  return jjc_monthly_mail_title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameServer::release_jjc_monthly_mail_title() {
  // @@protoc_insertion_point(field_release:db.ConfigGameServer.jjc_monthly_mail_title)
  if (!has_jjc_monthly_mail_title()) {
    return NULL;
  }
  clear_has_jjc_monthly_mail_title();
  return jjc_monthly_mail_title_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameServer::set_allocated_jjc_monthly_mail_title(::std::string* jjc_monthly_mail_title) {
  if (jjc_monthly_mail_title != NULL) {
    set_has_jjc_monthly_mail_title();
  } else {
    clear_has_jjc_monthly_mail_title();
  }
  jjc_monthly_mail_title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jjc_monthly_mail_title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameServer.jjc_monthly_mail_title)
}
inline ::std::string* ConfigGameServer::unsafe_arena_release_jjc_monthly_mail_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameServer.jjc_monthly_mail_title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_jjc_monthly_mail_title();
  return jjc_monthly_mail_title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameServer::unsafe_arena_set_allocated_jjc_monthly_mail_title(
    ::std::string* jjc_monthly_mail_title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (jjc_monthly_mail_title != NULL) {
    set_has_jjc_monthly_mail_title();
  } else {
    clear_has_jjc_monthly_mail_title();
  }
  jjc_monthly_mail_title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      jjc_monthly_mail_title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameServer.jjc_monthly_mail_title)
}

// required bytes jjc_monthly_mail_content = 16;
inline bool ConfigGameServer::has_jjc_monthly_mail_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigGameServer::set_has_jjc_monthly_mail_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigGameServer::clear_has_jjc_monthly_mail_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigGameServer::clear_jjc_monthly_mail_content() {
  jjc_monthly_mail_content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_jjc_monthly_mail_content();
}
inline const ::std::string& ConfigGameServer::jjc_monthly_mail_content() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.jjc_monthly_mail_content)
  return jjc_monthly_mail_content_.Get();
}
inline void ConfigGameServer::set_jjc_monthly_mail_content(const ::std::string& value) {
  set_has_jjc_monthly_mail_content();
  jjc_monthly_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.jjc_monthly_mail_content)
}
#if LANG_CXX11
inline void ConfigGameServer::set_jjc_monthly_mail_content(::std::string&& value) {
  set_has_jjc_monthly_mail_content();
  jjc_monthly_mail_content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.ConfigGameServer.jjc_monthly_mail_content)
}
#endif
inline void ConfigGameServer::set_jjc_monthly_mail_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jjc_monthly_mail_content();
  jjc_monthly_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.ConfigGameServer.jjc_monthly_mail_content)
}
inline void ConfigGameServer::set_jjc_monthly_mail_content(const void* value,
    size_t size) {
  set_has_jjc_monthly_mail_content();
  jjc_monthly_mail_content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.ConfigGameServer.jjc_monthly_mail_content)
}
inline ::std::string* ConfigGameServer::mutable_jjc_monthly_mail_content() {
  set_has_jjc_monthly_mail_content();
  // @@protoc_insertion_point(field_mutable:db.ConfigGameServer.jjc_monthly_mail_content)
  return jjc_monthly_mail_content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigGameServer::release_jjc_monthly_mail_content() {
  // @@protoc_insertion_point(field_release:db.ConfigGameServer.jjc_monthly_mail_content)
  if (!has_jjc_monthly_mail_content()) {
    return NULL;
  }
  clear_has_jjc_monthly_mail_content();
  return jjc_monthly_mail_content_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ConfigGameServer::set_allocated_jjc_monthly_mail_content(::std::string* jjc_monthly_mail_content) {
  if (jjc_monthly_mail_content != NULL) {
    set_has_jjc_monthly_mail_content();
  } else {
    clear_has_jjc_monthly_mail_content();
  }
  jjc_monthly_mail_content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jjc_monthly_mail_content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.ConfigGameServer.jjc_monthly_mail_content)
}
inline ::std::string* ConfigGameServer::unsafe_arena_release_jjc_monthly_mail_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.ConfigGameServer.jjc_monthly_mail_content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_jjc_monthly_mail_content();
  return jjc_monthly_mail_content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigGameServer::unsafe_arena_set_allocated_jjc_monthly_mail_content(
    ::std::string* jjc_monthly_mail_content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (jjc_monthly_mail_content != NULL) {
    set_has_jjc_monthly_mail_content();
  } else {
    clear_has_jjc_monthly_mail_content();
  }
  jjc_monthly_mail_content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      jjc_monthly_mail_content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.ConfigGameServer.jjc_monthly_mail_content)
}

// required int32 repeat_task_refresh_times = 17;
inline bool ConfigGameServer::has_repeat_task_refresh_times() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigGameServer::set_has_repeat_task_refresh_times() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigGameServer::clear_has_repeat_task_refresh_times() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigGameServer::clear_repeat_task_refresh_times() {
  repeat_task_refresh_times_ = 0;
  clear_has_repeat_task_refresh_times();
}
inline ::google::protobuf::int32 ConfigGameServer::repeat_task_refresh_times() const {
  // @@protoc_insertion_point(field_get:db.ConfigGameServer.repeat_task_refresh_times)
  return repeat_task_refresh_times_;
}
inline void ConfigGameServer::set_repeat_task_refresh_times(::google::protobuf::int32 value) {
  set_has_repeat_task_refresh_times();
  repeat_task_refresh_times_ = value;
  // @@protoc_insertion_point(field_set:db.ConfigGameServer.repeat_task_refresh_times)
}

// -------------------------------------------------------------------

// GameRobot

// required int32 id = 1;
inline bool GameRobot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameRobot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameRobot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameRobot::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GameRobot::id() const {
  // @@protoc_insertion_point(field_get:db.GameRobot.id)
  return id_;
}
inline void GameRobot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.GameRobot.id)
}

// required int32 ticketid = 2;
inline bool GameRobot::has_ticketid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameRobot::set_has_ticketid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameRobot::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameRobot::clear_ticketid() {
  ticketid_ = 0;
  clear_has_ticketid();
}
inline ::google::protobuf::int32 GameRobot::ticketid() const {
  // @@protoc_insertion_point(field_get:db.GameRobot.ticketid)
  return ticketid_;
}
inline void GameRobot::set_ticketid(::google::protobuf::int32 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.GameRobot.ticketid)
}

// required int32 init_level = 3;
inline bool GameRobot::has_init_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameRobot::set_has_init_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameRobot::clear_has_init_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameRobot::clear_init_level() {
  init_level_ = 0;
  clear_has_init_level();
}
inline ::google::protobuf::int32 GameRobot::init_level() const {
  // @@protoc_insertion_point(field_get:db.GameRobot.init_level)
  return init_level_;
}
inline void GameRobot::set_init_level(::google::protobuf::int32 value) {
  set_has_init_level();
  init_level_ = value;
  // @@protoc_insertion_point(field_set:db.GameRobot.init_level)
}

// -------------------------------------------------------------------

// GameAnnouncement

// required int32 id = 1;
inline bool GameAnnouncement::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameAnnouncement::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameAnnouncement::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameAnnouncement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GameAnnouncement::id() const {
  // @@protoc_insertion_point(field_get:db.GameAnnouncement.id)
  return id_;
}
inline void GameAnnouncement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.GameAnnouncement.id)
}

// required int32 type = 2;
inline bool GameAnnouncement::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameAnnouncement::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameAnnouncement::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameAnnouncement::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GameAnnouncement::type() const {
  // @@protoc_insertion_point(field_get:db.GameAnnouncement.type)
  return type_;
}
inline void GameAnnouncement::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.GameAnnouncement.type)
}

// required sfixed64 timestamp = 3;
inline bool GameAnnouncement::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameAnnouncement::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameAnnouncement::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameAnnouncement::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 GameAnnouncement::timestamp() const {
  // @@protoc_insertion_point(field_get:db.GameAnnouncement.timestamp)
  return timestamp_;
}
inline void GameAnnouncement::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:db.GameAnnouncement.timestamp)
}

// required int32 circle_seconds = 4;
inline bool GameAnnouncement::has_circle_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameAnnouncement::set_has_circle_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameAnnouncement::clear_has_circle_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameAnnouncement::clear_circle_seconds() {
  circle_seconds_ = 0;
  clear_has_circle_seconds();
}
inline ::google::protobuf::int32 GameAnnouncement::circle_seconds() const {
  // @@protoc_insertion_point(field_get:db.GameAnnouncement.circle_seconds)
  return circle_seconds_;
}
inline void GameAnnouncement::set_circle_seconds(::google::protobuf::int32 value) {
  set_has_circle_seconds();
  circle_seconds_ = value;
  // @@protoc_insertion_point(field_set:db.GameAnnouncement.circle_seconds)
}

// required bool read = 5;
inline bool GameAnnouncement::has_read() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameAnnouncement::set_has_read() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameAnnouncement::clear_has_read() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameAnnouncement::clear_read() {
  read_ = false;
  clear_has_read();
}
inline bool GameAnnouncement::read() const {
  // @@protoc_insertion_point(field_get:db.GameAnnouncement.read)
  return read_;
}
inline void GameAnnouncement::set_read(bool value) {
  set_has_read();
  read_ = value;
  // @@protoc_insertion_point(field_set:db.GameAnnouncement.read)
}

// required bytes data = 6;
inline bool GameAnnouncement::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameAnnouncement::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameAnnouncement::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameAnnouncement::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& GameAnnouncement::data() const {
  // @@protoc_insertion_point(field_get:db.GameAnnouncement.data)
  return data_.Get();
}
inline void GameAnnouncement::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GameAnnouncement.data)
}
#if LANG_CXX11
inline void GameAnnouncement::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GameAnnouncement.data)
}
#endif
inline void GameAnnouncement::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GameAnnouncement.data)
}
inline void GameAnnouncement::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GameAnnouncement.data)
}
inline ::std::string* GameAnnouncement::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:db.GameAnnouncement.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GameAnnouncement::release_data() {
  // @@protoc_insertion_point(field_release:db.GameAnnouncement.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GameAnnouncement::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GameAnnouncement.data)
}
inline ::std::string* GameAnnouncement::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GameAnnouncement.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GameAnnouncement::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GameAnnouncement.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_StoredProcGameAssets_2eproto
