// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedisLuaTableDump.proto

#include "RedisLuaTableDump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace db {
class RedisListLuaTableDumpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedisListLuaTableDump>
      _instance;
} _RedisListLuaTableDump_default_instance_;
}  // namespace db
namespace protobuf_RedisLuaTableDump_2eproto {
static void InitDefaultsRedisListLuaTableDump() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_RedisListLuaTableDump_default_instance_;
    new (ptr) ::db::RedisListLuaTableDump();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::RedisListLuaTableDump::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RedisListLuaTableDump =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRedisListLuaTableDump}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RedisListLuaTableDump.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, l_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, c_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, c_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, mainid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::RedisListLuaTableDump, optime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::db::RedisListLuaTableDump)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_RedisListLuaTableDump_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "RedisLuaTableDump.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027RedisLuaTableDump.proto\022\002db\"\200\001\n\025RedisL"
      "istLuaTableDump\022\016\n\006module\030\001 \002(\014\022\n\n\002id\030\002 "
      "\002(\014\022\r\n\005l_val\030\003 \002(\014\022\r\n\005c_key\030\004 \002(\014\022\r\n\005c_v"
      "al\030\005 \002(\014\022\016\n\006mainid\030\006 \002(\014\022\016\n\006optime\030\013 \001(\020"
      "B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RedisLuaTableDump.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_RedisLuaTableDump_2eproto
namespace db {

// ===================================================================

void RedisListLuaTableDump::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisListLuaTableDump::kModuleFieldNumber;
const int RedisListLuaTableDump::kIdFieldNumber;
const int RedisListLuaTableDump::kLValFieldNumber;
const int RedisListLuaTableDump::kCKeyFieldNumber;
const int RedisListLuaTableDump::kCValFieldNumber;
const int RedisListLuaTableDump::kMainidFieldNumber;
const int RedisListLuaTableDump::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisListLuaTableDump::RedisListLuaTableDump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RedisLuaTableDump_2eproto::scc_info_RedisListLuaTableDump.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.RedisListLuaTableDump)
}
RedisListLuaTableDump::RedisListLuaTableDump(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_RedisLuaTableDump_2eproto::scc_info_RedisListLuaTableDump.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.RedisListLuaTableDump)
}
RedisListLuaTableDump::RedisListLuaTableDump(const RedisListLuaTableDump& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_module()) {
    module_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module(),
      GetArenaNoVirtual());
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  l_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_l_val()) {
    l_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.l_val(),
      GetArenaNoVirtual());
  }
  c_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_c_key()) {
    c_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.c_key(),
      GetArenaNoVirtual());
  }
  c_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_c_val()) {
    c_val_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.c_val(),
      GetArenaNoVirtual());
  }
  mainid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mainid()) {
    mainid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainid(),
      GetArenaNoVirtual());
  }
  optime_ = from.optime_;
  // @@protoc_insertion_point(copy_constructor:db.RedisListLuaTableDump)
}

void RedisListLuaTableDump::SharedCtor() {
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optime_ = GOOGLE_LONGLONG(0);
}

RedisListLuaTableDump::~RedisListLuaTableDump() {
  // @@protoc_insertion_point(destructor:db.RedisListLuaTableDump)
  SharedDtor();
}

void RedisListLuaTableDump::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l_val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisListLuaTableDump::ArenaDtor(void* object) {
  RedisListLuaTableDump* _this = reinterpret_cast< RedisListLuaTableDump* >(object);
  (void)_this;
}
void RedisListLuaTableDump::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RedisListLuaTableDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RedisListLuaTableDump::descriptor() {
  ::protobuf_RedisLuaTableDump_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RedisLuaTableDump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisListLuaTableDump& RedisListLuaTableDump::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RedisLuaTableDump_2eproto::scc_info_RedisListLuaTableDump.base);
  return *internal_default_instance();
}


void RedisListLuaTableDump::Clear() {
// @@protoc_insertion_point(message_clear_start:db.RedisListLuaTableDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      module_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      l_val_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      c_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      c_val_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      mainid_.ClearNonDefaultToEmpty();
    }
  }
  optime_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RedisListLuaTableDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.RedisListLuaTableDump)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes module = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes l_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_l_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes c_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes c_val = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes mainid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mainid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.RedisListLuaTableDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.RedisListLuaTableDump)
  return false;
#undef DO_
}

void RedisListLuaTableDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.RedisListLuaTableDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes module = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->module(), output);
  }

  // required bytes id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id(), output);
  }

  // required bytes l_val = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->l_val(), output);
  }

  // required bytes c_key = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->c_key(), output);
  }

  // required bytes c_val = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->c_val(), output);
  }

  // required bytes mainid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->mainid(), output);
  }

  // optional sfixed64 optime = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.RedisListLuaTableDump)
}

::google::protobuf::uint8* RedisListLuaTableDump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.RedisListLuaTableDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes module = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->module(), target);
  }

  // required bytes id = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // required bytes l_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->l_val(), target);
  }

  // required bytes c_key = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->c_key(), target);
  }

  // required bytes c_val = 5;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->c_val(), target);
  }

  // required bytes mainid = 6;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->mainid(), target);
  }

  // optional sfixed64 optime = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.RedisListLuaTableDump)
  return target;
}

size_t RedisListLuaTableDump::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.RedisListLuaTableDump)
  size_t total_size = 0;

  if (has_module()) {
    // required bytes module = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->module());
  }

  if (has_id()) {
    // required bytes id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  if (has_l_val()) {
    // required bytes l_val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->l_val());
  }

  if (has_c_key()) {
    // required bytes c_key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->c_key());
  }

  if (has_c_val()) {
    // required bytes c_val = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->c_val());
  }

  if (has_mainid()) {
    // required bytes mainid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mainid());
  }

  return total_size;
}
size_t RedisListLuaTableDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.RedisListLuaTableDump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes module = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->module());

    // required bytes id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());

    // required bytes l_val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->l_val());

    // required bytes c_key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->c_key());

    // required bytes c_val = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->c_val());

    // required bytes mainid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mainid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional sfixed64 optime = 11;
  if (has_optime()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedisListLuaTableDump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.RedisListLuaTableDump)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisListLuaTableDump* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisListLuaTableDump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.RedisListLuaTableDump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.RedisListLuaTableDump)
    MergeFrom(*source);
  }
}

void RedisListLuaTableDump::MergeFrom(const RedisListLuaTableDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.RedisListLuaTableDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_module(from.module());
    }
    if (cached_has_bits & 0x00000002u) {
      set_id(from.id());
    }
    if (cached_has_bits & 0x00000004u) {
      set_l_val(from.l_val());
    }
    if (cached_has_bits & 0x00000008u) {
      set_c_key(from.c_key());
    }
    if (cached_has_bits & 0x00000010u) {
      set_c_val(from.c_val());
    }
    if (cached_has_bits & 0x00000020u) {
      set_mainid(from.mainid());
    }
    if (cached_has_bits & 0x00000040u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RedisListLuaTableDump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.RedisListLuaTableDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisListLuaTableDump::CopyFrom(const RedisListLuaTableDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.RedisListLuaTableDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisListLuaTableDump::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void RedisListLuaTableDump::Swap(RedisListLuaTableDump* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RedisListLuaTableDump* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RedisListLuaTableDump::UnsafeArenaSwap(RedisListLuaTableDump* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RedisListLuaTableDump::InternalSwap(RedisListLuaTableDump* other) {
  using std::swap;
  module_.Swap(&other->module_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  l_val_.Swap(&other->l_val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c_key_.Swap(&other->c_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c_val_.Swap(&other->c_val_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mainid_.Swap(&other->mainid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RedisListLuaTableDump::GetMetadata() const {
  protobuf_RedisLuaTableDump_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RedisLuaTableDump_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::RedisListLuaTableDump* Arena::CreateMaybeMessage< ::db::RedisListLuaTableDump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::RedisListLuaTableDump >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
