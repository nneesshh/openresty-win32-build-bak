// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvpStage.proto

#ifndef PROTOBUF_INCLUDED_PvpStage_2eproto
#define PROTOBUF_INCLUDED_PvpStage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PvpStage_2eproto 

namespace protobuf_PvpStage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_PvpStage_2eproto
namespace db {
class GlobalPvpEvent;
class GlobalPvpEventDefaultTypeInternal;
extern GlobalPvpEventDefaultTypeInternal _GlobalPvpEvent_default_instance_;
class PvpStage;
class PvpStageDefaultTypeInternal;
extern PvpStageDefaultTypeInternal _PvpStage_default_instance_;
class UserPvpEventLog;
class UserPvpEventLogDefaultTypeInternal;
extern UserPvpEventLogDefaultTypeInternal _UserPvpEventLog_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::GlobalPvpEvent* Arena::CreateMaybeMessage<::db::GlobalPvpEvent>(Arena*);
template<> ::db::PvpStage* Arena::CreateMaybeMessage<::db::PvpStage>(Arena*);
template<> ::db::UserPvpEventLog* Arena::CreateMaybeMessage<::db::UserPvpEventLog>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

enum GLOBAL_PVP_EVENT_TYPE {
  GLOBAL_PVP_EVENT_TYPE_LOOT_START = 1,
  GLOBAL_PVP_EVENT_TYPE_LOOT_OVER = 2
};
bool GLOBAL_PVP_EVENT_TYPE_IsValid(int value);
const GLOBAL_PVP_EVENT_TYPE GLOBAL_PVP_EVENT_TYPE_MIN = GLOBAL_PVP_EVENT_TYPE_LOOT_START;
const GLOBAL_PVP_EVENT_TYPE GLOBAL_PVP_EVENT_TYPE_MAX = GLOBAL_PVP_EVENT_TYPE_LOOT_OVER;
const int GLOBAL_PVP_EVENT_TYPE_ARRAYSIZE = GLOBAL_PVP_EVENT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GLOBAL_PVP_EVENT_TYPE_descriptor();
inline const ::std::string& GLOBAL_PVP_EVENT_TYPE_Name(GLOBAL_PVP_EVENT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GLOBAL_PVP_EVENT_TYPE_descriptor(), value);
}
inline bool GLOBAL_PVP_EVENT_TYPE_Parse(
    const ::std::string& name, GLOBAL_PVP_EVENT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GLOBAL_PVP_EVENT_TYPE>(
    GLOBAL_PVP_EVENT_TYPE_descriptor(), name, value);
}
// ===================================================================

class PvpStage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.PvpStage) */ {
 public:
  PvpStage();
  virtual ~PvpStage();

  PvpStage(const PvpStage& from);

  inline PvpStage& operator=(const PvpStage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PvpStage(PvpStage&& from) noexcept
    : PvpStage() {
    *this = ::std::move(from);
  }

  inline PvpStage& operator=(PvpStage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpStage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PvpStage* internal_default_instance() {
    return reinterpret_cast<const PvpStage*>(
               &_PvpStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(PvpStage* other);
  void Swap(PvpStage* other);
  friend void swap(PvpStage& a, PvpStage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PvpStage* New() const final {
    return CreateMaybeMessage<PvpStage>(NULL);
  }

  PvpStage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PvpStage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PvpStage& from);
  void MergeFrom(const PvpStage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PvpStage* other);
  protected:
  explicit PvpStage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required bytes desc = 4;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 4;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_desc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      ::std::string* desc);

  // optional bytes data_bytes = 5;
  bool has_data_bytes() const;
  void clear_data_bytes();
  static const int kDataBytesFieldNumber = 5;
  const ::std::string& data_bytes() const;
  void set_data_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_data_bytes(::std::string&& value);
  #endif
  void set_data_bytes(const char* value);
  void set_data_bytes(const void* value, size_t size);
  ::std::string* mutable_data_bytes();
  ::std::string* release_data_bytes();
  void set_allocated_data_bytes(::std::string* data_bytes);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data_bytes();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data_bytes(
      ::std::string* data_bytes);

  // required int32 serverid = 1;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // required int32 stageid = 2;
  bool has_stageid() const;
  void clear_stageid();
  static const int kStageidFieldNumber = 2;
  ::google::protobuf::int32 stageid() const;
  void set_stageid(::google::protobuf::int32 value);

  // optional int32 gold = 6;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 6;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // optional int32 state = 7;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required sfixed64 optime = 11;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 11;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.PvpStage)
 private:
  void set_has_serverid();
  void clear_has_serverid();
  void set_has_stageid();
  void clear_has_stageid();
  void set_has_name();
  void clear_has_name();
  void set_has_desc();
  void clear_has_desc();
  void set_has_data_bytes();
  void clear_has_data_bytes();
  void set_has_gold();
  void clear_has_gold();
  void set_has_state();
  void clear_has_state();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr data_bytes_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 stageid_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_PvpStage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GlobalPvpEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GlobalPvpEvent) */ {
 public:
  GlobalPvpEvent();
  virtual ~GlobalPvpEvent();

  GlobalPvpEvent(const GlobalPvpEvent& from);

  inline GlobalPvpEvent& operator=(const GlobalPvpEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalPvpEvent(GlobalPvpEvent&& from) noexcept
    : GlobalPvpEvent() {
    *this = ::std::move(from);
  }

  inline GlobalPvpEvent& operator=(GlobalPvpEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPvpEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalPvpEvent* internal_default_instance() {
    return reinterpret_cast<const GlobalPvpEvent*>(
               &_GlobalPvpEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(GlobalPvpEvent* other);
  void Swap(GlobalPvpEvent* other);
  friend void swap(GlobalPvpEvent& a, GlobalPvpEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalPvpEvent* New() const final {
    return CreateMaybeMessage<GlobalPvpEvent>(NULL);
  }

  GlobalPvpEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GlobalPvpEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GlobalPvpEvent& from);
  void MergeFrom(const GlobalPvpEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalPvpEvent* other);
  protected:
  explicit GlobalPvpEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes source_nick = 2;
  bool has_source_nick() const;
  void clear_source_nick();
  static const int kSourceNickFieldNumber = 2;
  const ::std::string& source_nick() const;
  void set_source_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_source_nick(::std::string&& value);
  #endif
  void set_source_nick(const char* value);
  void set_source_nick(const void* value, size_t size);
  ::std::string* mutable_source_nick();
  ::std::string* release_source_nick();
  void set_allocated_source_nick(::std::string* source_nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_source_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_nick(
      ::std::string* source_nick);

  // required bytes source_data_bytes = 3;
  bool has_source_data_bytes() const;
  void clear_source_data_bytes();
  static const int kSourceDataBytesFieldNumber = 3;
  const ::std::string& source_data_bytes() const;
  void set_source_data_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_source_data_bytes(::std::string&& value);
  #endif
  void set_source_data_bytes(const char* value);
  void set_source_data_bytes(const void* value, size_t size);
  ::std::string* mutable_source_data_bytes();
  ::std::string* release_source_data_bytes();
  void set_allocated_source_data_bytes(::std::string* source_data_bytes);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_source_data_bytes();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_data_bytes(
      ::std::string* source_data_bytes);

  // required int32 gold_lock = 4;
  bool has_gold_lock() const;
  void clear_gold_lock();
  static const int kGoldLockFieldNumber = 4;
  ::google::protobuf::int32 gold_lock() const;
  void set_gold_lock(::google::protobuf::int32 value);

  // required int32 gold_refund = 5;
  bool has_gold_refund() const;
  void clear_gold_refund();
  static const int kGoldRefundFieldNumber = 5;
  ::google::protobuf::int32 gold_refund() const;
  void set_gold_refund(::google::protobuf::int32 value);

  // required sfixed64 optime = 11;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 11;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // required .db.GLOBAL_PVP_EVENT_TYPE type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::db::GLOBAL_PVP_EVENT_TYPE type() const;
  void set_type(::db::GLOBAL_PVP_EVENT_TYPE value);

  // @@protoc_insertion_point(class_scope:db.GlobalPvpEvent)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_source_nick();
  void clear_has_source_nick();
  void set_has_source_data_bytes();
  void clear_has_source_data_bytes();
  void set_has_gold_lock();
  void clear_has_gold_lock();
  void set_has_gold_refund();
  void clear_has_gold_refund();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_nick_;
  ::google::protobuf::internal::ArenaStringPtr source_data_bytes_;
  ::google::protobuf::int32 gold_lock_;
  ::google::protobuf::int32 gold_refund_;
  ::google::protobuf::int64 optime_;
  int type_;
  friend struct ::protobuf_PvpStage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserPvpEventLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.UserPvpEventLog) */ {
 public:
  UserPvpEventLog();
  virtual ~UserPvpEventLog();

  UserPvpEventLog(const UserPvpEventLog& from);

  inline UserPvpEventLog& operator=(const UserPvpEventLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserPvpEventLog(UserPvpEventLog&& from) noexcept
    : UserPvpEventLog() {
    *this = ::std::move(from);
  }

  inline UserPvpEventLog& operator=(UserPvpEventLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPvpEventLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPvpEventLog* internal_default_instance() {
    return reinterpret_cast<const UserPvpEventLog*>(
               &_UserPvpEventLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserPvpEventLog* other);
  void Swap(UserPvpEventLog* other);
  friend void swap(UserPvpEventLog& a, UserPvpEventLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPvpEventLog* New() const final {
    return CreateMaybeMessage<UserPvpEventLog>(NULL);
  }

  UserPvpEventLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserPvpEventLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserPvpEventLog& from);
  void MergeFrom(const UserPvpEventLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPvpEventLog* other);
  protected:
  explicit UserPvpEventLog(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes source_nick = 6;
  bool has_source_nick() const;
  void clear_source_nick();
  static const int kSourceNickFieldNumber = 6;
  const ::std::string& source_nick() const;
  void set_source_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_source_nick(::std::string&& value);
  #endif
  void set_source_nick(const char* value);
  void set_source_nick(const void* value, size_t size);
  ::std::string* mutable_source_nick();
  ::std::string* release_source_nick();
  void set_allocated_source_nick(::std::string* source_nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_source_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_nick(
      ::std::string* source_nick);

  // required bytes source_data_bytes = 7;
  bool has_source_data_bytes() const;
  void clear_source_data_bytes();
  static const int kSourceDataBytesFieldNumber = 7;
  const ::std::string& source_data_bytes() const;
  void set_source_data_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_source_data_bytes(::std::string&& value);
  #endif
  void set_source_data_bytes(const char* value);
  void set_source_data_bytes(const void* value, size_t size);
  ::std::string* mutable_source_data_bytes();
  ::std::string* release_source_data_bytes();
  void set_allocated_source_data_bytes(::std::string* source_data_bytes);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_source_data_bytes();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_data_bytes(
      ::std::string* source_data_bytes);

  // required int32 sn = 2;
  bool has_sn() const;
  void clear_sn();
  static const int kSnFieldNumber = 2;
  ::google::protobuf::int32 sn() const;
  void set_sn(::google::protobuf::int32 value);

  // required int32 event_type = 3;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  ::google::protobuf::int32 event_type() const;
  void set_event_type(::google::protobuf::int32 value);

  // required int32 event_state = 4;
  bool has_event_state() const;
  void clear_event_state();
  static const int kEventStateFieldNumber = 4;
  ::google::protobuf::int32 event_state() const;
  void set_event_state(::google::protobuf::int32 value);

  // required int32 defend_state = 5;
  bool has_defend_state() const;
  void clear_defend_state();
  static const int kDefendStateFieldNumber = 5;
  ::google::protobuf::int32 defend_state() const;
  void set_defend_state(::google::protobuf::int32 value);

  // required int32 gold_lock = 8;
  bool has_gold_lock() const;
  void clear_gold_lock();
  static const int kGoldLockFieldNumber = 8;
  ::google::protobuf::int32 gold_lock() const;
  void set_gold_lock(::google::protobuf::int32 value);

  // required int32 gold_refund = 9;
  bool has_gold_refund() const;
  void clear_gold_refund();
  static const int kGoldRefundFieldNumber = 9;
  ::google::protobuf::int32 gold_refund() const;
  void set_gold_refund(::google::protobuf::int32 value);

  // optional sfixed64 optime = 11;
  bool has_optime() const;
  void clear_optime();
  static const int kOptimeFieldNumber = 11;
  ::google::protobuf::int64 optime() const;
  void set_optime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.UserPvpEventLog)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_sn();
  void clear_has_sn();
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_event_state();
  void clear_has_event_state();
  void set_has_defend_state();
  void clear_has_defend_state();
  void set_has_source_nick();
  void clear_has_source_nick();
  void set_has_source_data_bytes();
  void clear_has_source_data_bytes();
  void set_has_gold_lock();
  void clear_has_gold_lock();
  void set_has_gold_refund();
  void clear_has_gold_refund();
  void set_has_optime();
  void clear_has_optime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr source_nick_;
  ::google::protobuf::internal::ArenaStringPtr source_data_bytes_;
  ::google::protobuf::int32 sn_;
  ::google::protobuf::int32 event_type_;
  ::google::protobuf::int32 event_state_;
  ::google::protobuf::int32 defend_state_;
  ::google::protobuf::int32 gold_lock_;
  ::google::protobuf::int32 gold_refund_;
  ::google::protobuf::int64 optime_;
  friend struct ::protobuf_PvpStage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PvpStage

// required int32 serverid = 1;
inline bool PvpStage::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpStage::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpStage::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpStage::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 PvpStage::serverid() const {
  // @@protoc_insertion_point(field_get:db.PvpStage.serverid)
  return serverid_;
}
inline void PvpStage::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:db.PvpStage.serverid)
}

// required int32 stageid = 2;
inline bool PvpStage::has_stageid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpStage::set_has_stageid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpStage::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpStage::clear_stageid() {
  stageid_ = 0;
  clear_has_stageid();
}
inline ::google::protobuf::int32 PvpStage::stageid() const {
  // @@protoc_insertion_point(field_get:db.PvpStage.stageid)
  return stageid_;
}
inline void PvpStage::set_stageid(::google::protobuf::int32 value) {
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:db.PvpStage.stageid)
}

// required bytes name = 3;
inline bool PvpStage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpStage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpStage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpStage::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& PvpStage::name() const {
  // @@protoc_insertion_point(field_get:db.PvpStage.name)
  return name_.Get();
}
inline void PvpStage::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.PvpStage.name)
}
#if LANG_CXX11
inline void PvpStage::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.PvpStage.name)
}
#endif
inline void PvpStage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.PvpStage.name)
}
inline void PvpStage::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.PvpStage.name)
}
inline ::std::string* PvpStage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.PvpStage.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PvpStage::release_name() {
  // @@protoc_insertion_point(field_release:db.PvpStage.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PvpStage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.PvpStage.name)
}
inline ::std::string* PvpStage::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.PvpStage.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PvpStage::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.PvpStage.name)
}

// required bytes desc = 4;
inline bool PvpStage::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpStage::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpStage::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpStage::clear_desc() {
  desc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_desc();
}
inline const ::std::string& PvpStage::desc() const {
  // @@protoc_insertion_point(field_get:db.PvpStage.desc)
  return desc_.Get();
}
inline void PvpStage::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.PvpStage.desc)
}
#if LANG_CXX11
inline void PvpStage::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.PvpStage.desc)
}
#endif
inline void PvpStage::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.PvpStage.desc)
}
inline void PvpStage::set_desc(const void* value,
    size_t size) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.PvpStage.desc)
}
inline ::std::string* PvpStage::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:db.PvpStage.desc)
  return desc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PvpStage::release_desc() {
  // @@protoc_insertion_point(field_release:db.PvpStage.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PvpStage::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.PvpStage.desc)
}
inline ::std::string* PvpStage::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.PvpStage.desc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_desc();
  return desc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PvpStage::unsafe_arena_set_allocated_desc(
    ::std::string* desc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      desc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.PvpStage.desc)
}

// optional bytes data_bytes = 5;
inline bool PvpStage::has_data_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpStage::set_has_data_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpStage::clear_has_data_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpStage::clear_data_bytes() {
  data_bytes_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data_bytes();
}
inline const ::std::string& PvpStage::data_bytes() const {
  // @@protoc_insertion_point(field_get:db.PvpStage.data_bytes)
  return data_bytes_.Get();
}
inline void PvpStage::set_data_bytes(const ::std::string& value) {
  set_has_data_bytes();
  data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.PvpStage.data_bytes)
}
#if LANG_CXX11
inline void PvpStage::set_data_bytes(::std::string&& value) {
  set_has_data_bytes();
  data_bytes_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.PvpStage.data_bytes)
}
#endif
inline void PvpStage::set_data_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_bytes();
  data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.PvpStage.data_bytes)
}
inline void PvpStage::set_data_bytes(const void* value,
    size_t size) {
  set_has_data_bytes();
  data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.PvpStage.data_bytes)
}
inline ::std::string* PvpStage::mutable_data_bytes() {
  set_has_data_bytes();
  // @@protoc_insertion_point(field_mutable:db.PvpStage.data_bytes)
  return data_bytes_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PvpStage::release_data_bytes() {
  // @@protoc_insertion_point(field_release:db.PvpStage.data_bytes)
  if (!has_data_bytes()) {
    return NULL;
  }
  clear_has_data_bytes();
  return data_bytes_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PvpStage::set_allocated_data_bytes(::std::string* data_bytes) {
  if (data_bytes != NULL) {
    set_has_data_bytes();
  } else {
    clear_has_data_bytes();
  }
  data_bytes_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_bytes,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.PvpStage.data_bytes)
}
inline ::std::string* PvpStage::unsafe_arena_release_data_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.PvpStage.data_bytes)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data_bytes();
  return data_bytes_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PvpStage::unsafe_arena_set_allocated_data_bytes(
    ::std::string* data_bytes) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data_bytes != NULL) {
    set_has_data_bytes();
  } else {
    clear_has_data_bytes();
  }
  data_bytes_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data_bytes, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.PvpStage.data_bytes)
}

// optional int32 gold = 6;
inline bool PvpStage::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvpStage::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvpStage::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvpStage::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 PvpStage::gold() const {
  // @@protoc_insertion_point(field_get:db.PvpStage.gold)
  return gold_;
}
inline void PvpStage::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:db.PvpStage.gold)
}

// optional int32 state = 7;
inline bool PvpStage::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpStage::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpStage::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpStage::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PvpStage::state() const {
  // @@protoc_insertion_point(field_get:db.PvpStage.state)
  return state_;
}
inline void PvpStage::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.PvpStage.state)
}

// required sfixed64 optime = 11;
inline bool PvpStage::has_optime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PvpStage::set_has_optime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PvpStage::clear_has_optime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PvpStage::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 PvpStage::optime() const {
  // @@protoc_insertion_point(field_get:db.PvpStage.optime)
  return optime_;
}
inline void PvpStage::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.PvpStage.optime)
}

// -------------------------------------------------------------------

// GlobalPvpEvent

// required .db.GLOBAL_PVP_EVENT_TYPE type = 1;
inline bool GlobalPvpEvent::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GlobalPvpEvent::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GlobalPvpEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GlobalPvpEvent::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::db::GLOBAL_PVP_EVENT_TYPE GlobalPvpEvent::type() const {
  // @@protoc_insertion_point(field_get:db.GlobalPvpEvent.type)
  return static_cast< ::db::GLOBAL_PVP_EVENT_TYPE >(type_);
}
inline void GlobalPvpEvent::set_type(::db::GLOBAL_PVP_EVENT_TYPE value) {
  assert(::db::GLOBAL_PVP_EVENT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:db.GlobalPvpEvent.type)
}

// required bytes source_nick = 2;
inline bool GlobalPvpEvent::has_source_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalPvpEvent::set_has_source_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalPvpEvent::clear_has_source_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalPvpEvent::clear_source_nick() {
  source_nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_source_nick();
}
inline const ::std::string& GlobalPvpEvent::source_nick() const {
  // @@protoc_insertion_point(field_get:db.GlobalPvpEvent.source_nick)
  return source_nick_.Get();
}
inline void GlobalPvpEvent::set_source_nick(const ::std::string& value) {
  set_has_source_nick();
  source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GlobalPvpEvent.source_nick)
}
#if LANG_CXX11
inline void GlobalPvpEvent::set_source_nick(::std::string&& value) {
  set_has_source_nick();
  source_nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GlobalPvpEvent.source_nick)
}
#endif
inline void GlobalPvpEvent::set_source_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_nick();
  source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GlobalPvpEvent.source_nick)
}
inline void GlobalPvpEvent::set_source_nick(const void* value,
    size_t size) {
  set_has_source_nick();
  source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GlobalPvpEvent.source_nick)
}
inline ::std::string* GlobalPvpEvent::mutable_source_nick() {
  set_has_source_nick();
  // @@protoc_insertion_point(field_mutable:db.GlobalPvpEvent.source_nick)
  return source_nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GlobalPvpEvent::release_source_nick() {
  // @@protoc_insertion_point(field_release:db.GlobalPvpEvent.source_nick)
  if (!has_source_nick()) {
    return NULL;
  }
  clear_has_source_nick();
  return source_nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GlobalPvpEvent::set_allocated_source_nick(::std::string* source_nick) {
  if (source_nick != NULL) {
    set_has_source_nick();
  } else {
    clear_has_source_nick();
  }
  source_nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GlobalPvpEvent.source_nick)
}
inline ::std::string* GlobalPvpEvent::unsafe_arena_release_source_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GlobalPvpEvent.source_nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_source_nick();
  return source_nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GlobalPvpEvent::unsafe_arena_set_allocated_source_nick(
    ::std::string* source_nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_nick != NULL) {
    set_has_source_nick();
  } else {
    clear_has_source_nick();
  }
  source_nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GlobalPvpEvent.source_nick)
}

// required bytes source_data_bytes = 3;
inline bool GlobalPvpEvent::has_source_data_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalPvpEvent::set_has_source_data_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalPvpEvent::clear_has_source_data_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalPvpEvent::clear_source_data_bytes() {
  source_data_bytes_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_source_data_bytes();
}
inline const ::std::string& GlobalPvpEvent::source_data_bytes() const {
  // @@protoc_insertion_point(field_get:db.GlobalPvpEvent.source_data_bytes)
  return source_data_bytes_.Get();
}
inline void GlobalPvpEvent::set_source_data_bytes(const ::std::string& value) {
  set_has_source_data_bytes();
  source_data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GlobalPvpEvent.source_data_bytes)
}
#if LANG_CXX11
inline void GlobalPvpEvent::set_source_data_bytes(::std::string&& value) {
  set_has_source_data_bytes();
  source_data_bytes_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GlobalPvpEvent.source_data_bytes)
}
#endif
inline void GlobalPvpEvent::set_source_data_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_data_bytes();
  source_data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GlobalPvpEvent.source_data_bytes)
}
inline void GlobalPvpEvent::set_source_data_bytes(const void* value,
    size_t size) {
  set_has_source_data_bytes();
  source_data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GlobalPvpEvent.source_data_bytes)
}
inline ::std::string* GlobalPvpEvent::mutable_source_data_bytes() {
  set_has_source_data_bytes();
  // @@protoc_insertion_point(field_mutable:db.GlobalPvpEvent.source_data_bytes)
  return source_data_bytes_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GlobalPvpEvent::release_source_data_bytes() {
  // @@protoc_insertion_point(field_release:db.GlobalPvpEvent.source_data_bytes)
  if (!has_source_data_bytes()) {
    return NULL;
  }
  clear_has_source_data_bytes();
  return source_data_bytes_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GlobalPvpEvent::set_allocated_source_data_bytes(::std::string* source_data_bytes) {
  if (source_data_bytes != NULL) {
    set_has_source_data_bytes();
  } else {
    clear_has_source_data_bytes();
  }
  source_data_bytes_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_data_bytes,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GlobalPvpEvent.source_data_bytes)
}
inline ::std::string* GlobalPvpEvent::unsafe_arena_release_source_data_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GlobalPvpEvent.source_data_bytes)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_source_data_bytes();
  return source_data_bytes_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GlobalPvpEvent::unsafe_arena_set_allocated_source_data_bytes(
    ::std::string* source_data_bytes) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_data_bytes != NULL) {
    set_has_source_data_bytes();
  } else {
    clear_has_source_data_bytes();
  }
  source_data_bytes_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_data_bytes, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GlobalPvpEvent.source_data_bytes)
}

// required int32 gold_lock = 4;
inline bool GlobalPvpEvent::has_gold_lock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalPvpEvent::set_has_gold_lock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalPvpEvent::clear_has_gold_lock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalPvpEvent::clear_gold_lock() {
  gold_lock_ = 0;
  clear_has_gold_lock();
}
inline ::google::protobuf::int32 GlobalPvpEvent::gold_lock() const {
  // @@protoc_insertion_point(field_get:db.GlobalPvpEvent.gold_lock)
  return gold_lock_;
}
inline void GlobalPvpEvent::set_gold_lock(::google::protobuf::int32 value) {
  set_has_gold_lock();
  gold_lock_ = value;
  // @@protoc_insertion_point(field_set:db.GlobalPvpEvent.gold_lock)
}

// required int32 gold_refund = 5;
inline bool GlobalPvpEvent::has_gold_refund() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GlobalPvpEvent::set_has_gold_refund() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GlobalPvpEvent::clear_has_gold_refund() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GlobalPvpEvent::clear_gold_refund() {
  gold_refund_ = 0;
  clear_has_gold_refund();
}
inline ::google::protobuf::int32 GlobalPvpEvent::gold_refund() const {
  // @@protoc_insertion_point(field_get:db.GlobalPvpEvent.gold_refund)
  return gold_refund_;
}
inline void GlobalPvpEvent::set_gold_refund(::google::protobuf::int32 value) {
  set_has_gold_refund();
  gold_refund_ = value;
  // @@protoc_insertion_point(field_set:db.GlobalPvpEvent.gold_refund)
}

// required sfixed64 optime = 11;
inline bool GlobalPvpEvent::has_optime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GlobalPvpEvent::set_has_optime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GlobalPvpEvent::clear_has_optime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GlobalPvpEvent::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 GlobalPvpEvent::optime() const {
  // @@protoc_insertion_point(field_get:db.GlobalPvpEvent.optime)
  return optime_;
}
inline void GlobalPvpEvent::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.GlobalPvpEvent.optime)
}

// -------------------------------------------------------------------

// UserPvpEventLog

// required bytes userid = 1;
inline bool UserPvpEventLog::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPvpEventLog::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPvpEventLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPvpEventLog::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& UserPvpEventLog::userid() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.userid)
  return userid_.Get();
}
inline void UserPvpEventLog::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.userid)
}
#if LANG_CXX11
inline void UserPvpEventLog::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPvpEventLog.userid)
}
#endif
inline void UserPvpEventLog::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPvpEventLog.userid)
}
inline void UserPvpEventLog::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPvpEventLog.userid)
}
inline ::std::string* UserPvpEventLog::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.UserPvpEventLog.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPvpEventLog::release_userid() {
  // @@protoc_insertion_point(field_release:db.UserPvpEventLog.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPvpEventLog::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPvpEventLog.userid)
}
inline ::std::string* UserPvpEventLog::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPvpEventLog.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPvpEventLog::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPvpEventLog.userid)
}

// required int32 sn = 2;
inline bool UserPvpEventLog::has_sn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPvpEventLog::set_has_sn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPvpEventLog::clear_has_sn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPvpEventLog::clear_sn() {
  sn_ = 0;
  clear_has_sn();
}
inline ::google::protobuf::int32 UserPvpEventLog::sn() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.sn)
  return sn_;
}
inline void UserPvpEventLog::set_sn(::google::protobuf::int32 value) {
  set_has_sn();
  sn_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.sn)
}

// required int32 event_type = 3;
inline bool UserPvpEventLog::has_event_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserPvpEventLog::set_has_event_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserPvpEventLog::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserPvpEventLog::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::google::protobuf::int32 UserPvpEventLog::event_type() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.event_type)
  return event_type_;
}
inline void UserPvpEventLog::set_event_type(::google::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.event_type)
}

// required int32 event_state = 4;
inline bool UserPvpEventLog::has_event_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserPvpEventLog::set_has_event_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserPvpEventLog::clear_has_event_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserPvpEventLog::clear_event_state() {
  event_state_ = 0;
  clear_has_event_state();
}
inline ::google::protobuf::int32 UserPvpEventLog::event_state() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.event_state)
  return event_state_;
}
inline void UserPvpEventLog::set_event_state(::google::protobuf::int32 value) {
  set_has_event_state();
  event_state_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.event_state)
}

// required int32 defend_state = 5;
inline bool UserPvpEventLog::has_defend_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserPvpEventLog::set_has_defend_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserPvpEventLog::clear_has_defend_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserPvpEventLog::clear_defend_state() {
  defend_state_ = 0;
  clear_has_defend_state();
}
inline ::google::protobuf::int32 UserPvpEventLog::defend_state() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.defend_state)
  return defend_state_;
}
inline void UserPvpEventLog::set_defend_state(::google::protobuf::int32 value) {
  set_has_defend_state();
  defend_state_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.defend_state)
}

// required bytes source_nick = 6;
inline bool UserPvpEventLog::has_source_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPvpEventLog::set_has_source_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPvpEventLog::clear_has_source_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPvpEventLog::clear_source_nick() {
  source_nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_source_nick();
}
inline const ::std::string& UserPvpEventLog::source_nick() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.source_nick)
  return source_nick_.Get();
}
inline void UserPvpEventLog::set_source_nick(const ::std::string& value) {
  set_has_source_nick();
  source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.source_nick)
}
#if LANG_CXX11
inline void UserPvpEventLog::set_source_nick(::std::string&& value) {
  set_has_source_nick();
  source_nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPvpEventLog.source_nick)
}
#endif
inline void UserPvpEventLog::set_source_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_nick();
  source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPvpEventLog.source_nick)
}
inline void UserPvpEventLog::set_source_nick(const void* value,
    size_t size) {
  set_has_source_nick();
  source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPvpEventLog.source_nick)
}
inline ::std::string* UserPvpEventLog::mutable_source_nick() {
  set_has_source_nick();
  // @@protoc_insertion_point(field_mutable:db.UserPvpEventLog.source_nick)
  return source_nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPvpEventLog::release_source_nick() {
  // @@protoc_insertion_point(field_release:db.UserPvpEventLog.source_nick)
  if (!has_source_nick()) {
    return NULL;
  }
  clear_has_source_nick();
  return source_nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPvpEventLog::set_allocated_source_nick(::std::string* source_nick) {
  if (source_nick != NULL) {
    set_has_source_nick();
  } else {
    clear_has_source_nick();
  }
  source_nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPvpEventLog.source_nick)
}
inline ::std::string* UserPvpEventLog::unsafe_arena_release_source_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPvpEventLog.source_nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_source_nick();
  return source_nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPvpEventLog::unsafe_arena_set_allocated_source_nick(
    ::std::string* source_nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_nick != NULL) {
    set_has_source_nick();
  } else {
    clear_has_source_nick();
  }
  source_nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPvpEventLog.source_nick)
}

// required bytes source_data_bytes = 7;
inline bool UserPvpEventLog::has_source_data_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPvpEventLog::set_has_source_data_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPvpEventLog::clear_has_source_data_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPvpEventLog::clear_source_data_bytes() {
  source_data_bytes_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_source_data_bytes();
}
inline const ::std::string& UserPvpEventLog::source_data_bytes() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.source_data_bytes)
  return source_data_bytes_.Get();
}
inline void UserPvpEventLog::set_source_data_bytes(const ::std::string& value) {
  set_has_source_data_bytes();
  source_data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.source_data_bytes)
}
#if LANG_CXX11
inline void UserPvpEventLog::set_source_data_bytes(::std::string&& value) {
  set_has_source_data_bytes();
  source_data_bytes_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.UserPvpEventLog.source_data_bytes)
}
#endif
inline void UserPvpEventLog::set_source_data_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_data_bytes();
  source_data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.UserPvpEventLog.source_data_bytes)
}
inline void UserPvpEventLog::set_source_data_bytes(const void* value,
    size_t size) {
  set_has_source_data_bytes();
  source_data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.UserPvpEventLog.source_data_bytes)
}
inline ::std::string* UserPvpEventLog::mutable_source_data_bytes() {
  set_has_source_data_bytes();
  // @@protoc_insertion_point(field_mutable:db.UserPvpEventLog.source_data_bytes)
  return source_data_bytes_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserPvpEventLog::release_source_data_bytes() {
  // @@protoc_insertion_point(field_release:db.UserPvpEventLog.source_data_bytes)
  if (!has_source_data_bytes()) {
    return NULL;
  }
  clear_has_source_data_bytes();
  return source_data_bytes_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UserPvpEventLog::set_allocated_source_data_bytes(::std::string* source_data_bytes) {
  if (source_data_bytes != NULL) {
    set_has_source_data_bytes();
  } else {
    clear_has_source_data_bytes();
  }
  source_data_bytes_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_data_bytes,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.UserPvpEventLog.source_data_bytes)
}
inline ::std::string* UserPvpEventLog::unsafe_arena_release_source_data_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.UserPvpEventLog.source_data_bytes)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_source_data_bytes();
  return source_data_bytes_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserPvpEventLog::unsafe_arena_set_allocated_source_data_bytes(
    ::std::string* source_data_bytes) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_data_bytes != NULL) {
    set_has_source_data_bytes();
  } else {
    clear_has_source_data_bytes();
  }
  source_data_bytes_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_data_bytes, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.UserPvpEventLog.source_data_bytes)
}

// required int32 gold_lock = 8;
inline bool UserPvpEventLog::has_gold_lock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserPvpEventLog::set_has_gold_lock() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserPvpEventLog::clear_has_gold_lock() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserPvpEventLog::clear_gold_lock() {
  gold_lock_ = 0;
  clear_has_gold_lock();
}
inline ::google::protobuf::int32 UserPvpEventLog::gold_lock() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.gold_lock)
  return gold_lock_;
}
inline void UserPvpEventLog::set_gold_lock(::google::protobuf::int32 value) {
  set_has_gold_lock();
  gold_lock_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.gold_lock)
}

// required int32 gold_refund = 9;
inline bool UserPvpEventLog::has_gold_refund() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserPvpEventLog::set_has_gold_refund() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserPvpEventLog::clear_has_gold_refund() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserPvpEventLog::clear_gold_refund() {
  gold_refund_ = 0;
  clear_has_gold_refund();
}
inline ::google::protobuf::int32 UserPvpEventLog::gold_refund() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.gold_refund)
  return gold_refund_;
}
inline void UserPvpEventLog::set_gold_refund(::google::protobuf::int32 value) {
  set_has_gold_refund();
  gold_refund_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.gold_refund)
}

// optional sfixed64 optime = 11;
inline bool UserPvpEventLog::has_optime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserPvpEventLog::set_has_optime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserPvpEventLog::clear_has_optime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserPvpEventLog::clear_optime() {
  optime_ = GOOGLE_LONGLONG(0);
  clear_has_optime();
}
inline ::google::protobuf::int64 UserPvpEventLog::optime() const {
  // @@protoc_insertion_point(field_get:db.UserPvpEventLog.optime)
  return optime_;
}
inline void UserPvpEventLog::set_optime(::google::protobuf::int64 value) {
  set_has_optime();
  optime_ = value;
  // @@protoc_insertion_point(field_set:db.UserPvpEventLog.optime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::db::GLOBAL_PVP_EVENT_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db::GLOBAL_PVP_EVENT_TYPE>() {
  return ::db::GLOBAL_PVP_EVENT_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PvpStage_2eproto
