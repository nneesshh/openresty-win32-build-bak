// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvpStage.proto

#include "PvpStage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace db {
class PvpStageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpStage>
      _instance;
} _PvpStage_default_instance_;
class GlobalPvpEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GlobalPvpEvent>
      _instance;
} _GlobalPvpEvent_default_instance_;
class UserPvpEventLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserPvpEventLog>
      _instance;
} _UserPvpEventLog_default_instance_;
}  // namespace db
namespace protobuf_PvpStage_2eproto {
static void InitDefaultsPvpStage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_PvpStage_default_instance_;
    new (ptr) ::db::PvpStage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::PvpStage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PvpStage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPvpStage}, {}};

static void InitDefaultsGlobalPvpEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_GlobalPvpEvent_default_instance_;
    new (ptr) ::db::GlobalPvpEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::GlobalPvpEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GlobalPvpEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGlobalPvpEvent}, {}};

static void InitDefaultsUserPvpEventLog() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::db::_UserPvpEventLog_default_instance_;
    new (ptr) ::db::UserPvpEventLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db::UserPvpEventLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserPvpEventLog =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserPvpEventLog}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PvpStage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GlobalPvpEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserPvpEventLog.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, stageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::PvpStage, optime_),
  3,
  4,
  0,
  1,
  2,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GlobalPvpEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GlobalPvpEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GlobalPvpEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GlobalPvpEvent, source_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GlobalPvpEvent, source_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GlobalPvpEvent, gold_lock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GlobalPvpEvent, gold_refund_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::GlobalPvpEvent, optime_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, event_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, defend_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, source_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, source_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, gold_lock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, gold_refund_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::db::UserPvpEventLog, optime_),
  0,
  3,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::db::PvpStage)},
  { 21, 32, sizeof(::db::GlobalPvpEvent)},
  { 38, 53, sizeof(::db::UserPvpEventLog)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_PvpStage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_GlobalPvpEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::db::_UserPvpEventLog_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "PvpStage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016PvpStage.proto\022\002db\"\212\001\n\010PvpStage\022\020\n\010ser"
      "verid\030\001 \002(\005\022\017\n\007stageid\030\002 \002(\005\022\014\n\004name\030\003 \002"
      "(\014\022\014\n\004desc\030\004 \002(\014\022\022\n\ndata_bytes\030\005 \001(\014\022\014\n\004"
      "gold\030\006 \001(\005\022\r\n\005state\030\007 \001(\005\022\016\n\006optime\030\013 \002("
      "\020\"\241\001\n\016GlobalPvpEvent\022\'\n\004type\030\001 \002(\0162\031.db."
      "GLOBAL_PVP_EVENT_TYPE\022\023\n\013source_nick\030\002 \002"
      "(\014\022\031\n\021source_data_bytes\030\003 \002(\014\022\021\n\tgold_lo"
      "ck\030\004 \002(\005\022\023\n\013gold_refund\030\005 \002(\005\022\016\n\006optime\030"
      "\013 \002(\020\"\324\001\n\017UserPvpEventLog\022\016\n\006userid\030\001 \002("
      "\014\022\n\n\002sn\030\002 \002(\005\022\022\n\nevent_type\030\003 \002(\005\022\023\n\013eve"
      "nt_state\030\004 \002(\005\022\024\n\014defend_state\030\005 \002(\005\022\023\n\013"
      "source_nick\030\006 \002(\014\022\031\n\021source_data_bytes\030\007"
      " \002(\014\022\021\n\tgold_lock\030\010 \002(\005\022\023\n\013gold_refund\030\t"
      " \002(\005\022\016\n\006optime\030\013 \001(\020*b\n\025GLOBAL_PVP_EVENT"
      "_TYPE\022$\n GLOBAL_PVP_EVENT_TYPE_LOOT_STAR"
      "T\020\001\022#\n\037GLOBAL_PVP_EVENT_TYPE_LOOT_OVER\020\002"
      "B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 645);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PvpStage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PvpStage_2eproto
namespace db {
const ::google::protobuf::EnumDescriptor* GLOBAL_PVP_EVENT_TYPE_descriptor() {
  protobuf_PvpStage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PvpStage_2eproto::file_level_enum_descriptors[0];
}
bool GLOBAL_PVP_EVENT_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PvpStage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpStage::kServeridFieldNumber;
const int PvpStage::kStageidFieldNumber;
const int PvpStage::kNameFieldNumber;
const int PvpStage::kDescFieldNumber;
const int PvpStage::kDataBytesFieldNumber;
const int PvpStage::kGoldFieldNumber;
const int PvpStage::kStateFieldNumber;
const int PvpStage::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpStage::PvpStage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PvpStage_2eproto::scc_info_PvpStage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.PvpStage)
}
PvpStage::PvpStage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PvpStage_2eproto::scc_info_PvpStage.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.PvpStage)
}
PvpStage::PvpStage(const PvpStage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc(),
      GetArenaNoVirtual());
  }
  data_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_bytes()) {
    data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_bytes(),
      GetArenaNoVirtual());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.PvpStage)
}

void PvpStage::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(optime_));
}

PvpStage::~PvpStage() {
  // @@protoc_insertion_point(destructor:db.PvpStage)
  SharedDtor();
}

void PvpStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PvpStage::ArenaDtor(void* object) {
  PvpStage* _this = reinterpret_cast< PvpStage* >(object);
  (void)_this;
}
void PvpStage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpStage::descriptor() {
  ::protobuf_PvpStage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PvpStage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpStage& PvpStage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PvpStage_2eproto::scc_info_PvpStage.base);
  return *internal_default_instance();
}


void PvpStage::Clear() {
// @@protoc_insertion_point(message_clear_start:db.PvpStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      data_bytes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&serverid_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.PvpStage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 stageid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.PvpStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.PvpStage)
  return false;
#undef DO_
}

void PvpStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.PvpStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 serverid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 stageid = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stageid(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes desc = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->desc(), output);
  }

  // optional bytes data_bytes = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data_bytes(), output);
  }

  // optional int32 gold = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold(), output);
  }

  // optional int32 state = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.PvpStage)
}

::google::protobuf::uint8* PvpStage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.PvpStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 serverid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 stageid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stageid(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes desc = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->desc(), target);
  }

  // optional bytes data_bytes = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data_bytes(), target);
  }

  // optional int32 gold = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gold(), target);
  }

  // optional int32 state = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.PvpStage)
  return target;
}

size_t PvpStage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.PvpStage)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_desc()) {
    // required bytes desc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (has_serverid()) {
    // required int32 serverid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  if (has_stageid()) {
    // required int32 stageid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stageid());
  }

  if (has_optime()) {
    // required sfixed64 optime = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t PvpStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.PvpStage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000009b) ^ 0x0000009b) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes desc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());

    // required int32 serverid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());

    // required int32 stageid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stageid());

    // required sfixed64 optime = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes data_bytes = 5;
  if (has_data_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_bytes());
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional int32 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpStage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.PvpStage)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpStage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpStage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.PvpStage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.PvpStage)
    MergeFrom(*source);
  }
}

void PvpStage::MergeFrom(const PvpStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.PvpStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_desc(from.desc());
    }
    if (cached_has_bits & 0x00000004u) {
      set_data_bytes(from.data_bytes());
    }
    if (cached_has_bits & 0x00000008u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000010u) {
      stageid_ = from.stageid_;
    }
    if (cached_has_bits & 0x00000020u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PvpStage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.PvpStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpStage::CopyFrom(const PvpStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.PvpStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009b) != 0x0000009b) return false;
  return true;
}

void PvpStage::Swap(PvpStage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpStage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpStage::UnsafeArenaSwap(PvpStage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpStage::InternalSwap(PvpStage* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_bytes_.Swap(&other->data_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serverid_, other->serverid_);
  swap(stageid_, other->stageid_);
  swap(gold_, other->gold_);
  swap(state_, other->state_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpStage::GetMetadata() const {
  protobuf_PvpStage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PvpStage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GlobalPvpEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalPvpEvent::kTypeFieldNumber;
const int GlobalPvpEvent::kSourceNickFieldNumber;
const int GlobalPvpEvent::kSourceDataBytesFieldNumber;
const int GlobalPvpEvent::kGoldLockFieldNumber;
const int GlobalPvpEvent::kGoldRefundFieldNumber;
const int GlobalPvpEvent::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalPvpEvent::GlobalPvpEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PvpStage_2eproto::scc_info_GlobalPvpEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.GlobalPvpEvent)
}
GlobalPvpEvent::GlobalPvpEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PvpStage_2eproto::scc_info_GlobalPvpEvent.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.GlobalPvpEvent)
}
GlobalPvpEvent::GlobalPvpEvent(const GlobalPvpEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_nick()) {
    source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_nick(),
      GetArenaNoVirtual());
  }
  source_data_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_data_bytes()) {
    source_data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_data_bytes(),
      GetArenaNoVirtual());
  }
  ::memcpy(&gold_lock_, &from.gold_lock_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&gold_lock_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:db.GlobalPvpEvent)
}

void GlobalPvpEvent::SharedCtor() {
  source_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_data_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gold_lock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&gold_lock_)) + sizeof(optime_));
  type_ = 1;
}

GlobalPvpEvent::~GlobalPvpEvent() {
  // @@protoc_insertion_point(destructor:db.GlobalPvpEvent)
  SharedDtor();
}

void GlobalPvpEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  source_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_data_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GlobalPvpEvent::ArenaDtor(void* object) {
  GlobalPvpEvent* _this = reinterpret_cast< GlobalPvpEvent* >(object);
  (void)_this;
}
void GlobalPvpEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GlobalPvpEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GlobalPvpEvent::descriptor() {
  ::protobuf_PvpStage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PvpStage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlobalPvpEvent& GlobalPvpEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PvpStage_2eproto::scc_info_GlobalPvpEvent.base);
  return *internal_default_instance();
}


void GlobalPvpEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:db.GlobalPvpEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_data_bytes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&gold_lock_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&gold_lock_)) + sizeof(optime_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GlobalPvpEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.GlobalPvpEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db.GLOBAL_PVP_EVENT_TYPE type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::db::GLOBAL_PVP_EVENT_TYPE_IsValid(value)) {
            set_type(static_cast< ::db::GLOBAL_PVP_EVENT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes source_nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes source_data_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_data_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold_lock = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gold_lock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold_refund = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gold_refund();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_refund_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.GlobalPvpEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.GlobalPvpEvent)
  return false;
#undef DO_
}

void GlobalPvpEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.GlobalPvpEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .db.GLOBAL_PVP_EVENT_TYPE type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes source_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->source_nick(), output);
  }

  // required bytes source_data_bytes = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->source_data_bytes(), output);
  }

  // required int32 gold_lock = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold_lock(), output);
  }

  // required int32 gold_refund = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold_refund(), output);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.GlobalPvpEvent)
}

::google::protobuf::uint8* GlobalPvpEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.GlobalPvpEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .db.GLOBAL_PVP_EVENT_TYPE type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes source_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->source_nick(), target);
  }

  // required bytes source_data_bytes = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->source_data_bytes(), target);
  }

  // required int32 gold_lock = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold_lock(), target);
  }

  // required int32 gold_refund = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold_refund(), target);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.GlobalPvpEvent)
  return target;
}

size_t GlobalPvpEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.GlobalPvpEvent)
  size_t total_size = 0;

  if (has_source_nick()) {
    // required bytes source_nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_nick());
  }

  if (has_source_data_bytes()) {
    // required bytes source_data_bytes = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_data_bytes());
  }

  if (has_gold_lock()) {
    // required int32 gold_lock = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_lock());
  }

  if (has_gold_refund()) {
    // required int32 gold_refund = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_refund());
  }

  if (has_optime()) {
    // required sfixed64 optime = 11;
    total_size += 1 + 8;
  }

  if (has_type()) {
    // required .db.GLOBAL_PVP_EVENT_TYPE type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t GlobalPvpEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.GlobalPvpEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes source_nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_nick());

    // required bytes source_data_bytes = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_data_bytes());

    // required int32 gold_lock = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_lock());

    // required int32 gold_refund = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_refund());

    // required sfixed64 optime = 11;
    total_size += 1 + 8;

    // required .db.GLOBAL_PVP_EVENT_TYPE type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalPvpEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.GlobalPvpEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalPvpEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalPvpEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.GlobalPvpEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.GlobalPvpEvent)
    MergeFrom(*source);
  }
}

void GlobalPvpEvent::MergeFrom(const GlobalPvpEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.GlobalPvpEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_source_nick(from.source_nick());
    }
    if (cached_has_bits & 0x00000002u) {
      set_source_data_bytes(from.source_data_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      gold_lock_ = from.gold_lock_;
    }
    if (cached_has_bits & 0x00000008u) {
      gold_refund_ = from.gold_refund_;
    }
    if (cached_has_bits & 0x00000010u) {
      optime_ = from.optime_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GlobalPvpEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.GlobalPvpEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalPvpEvent::CopyFrom(const GlobalPvpEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.GlobalPvpEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalPvpEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void GlobalPvpEvent::Swap(GlobalPvpEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GlobalPvpEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GlobalPvpEvent::UnsafeArenaSwap(GlobalPvpEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GlobalPvpEvent::InternalSwap(GlobalPvpEvent* other) {
  using std::swap;
  source_nick_.Swap(&other->source_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_data_bytes_.Swap(&other->source_data_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gold_lock_, other->gold_lock_);
  swap(gold_refund_, other->gold_refund_);
  swap(optime_, other->optime_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GlobalPvpEvent::GetMetadata() const {
  protobuf_PvpStage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PvpStage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserPvpEventLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPvpEventLog::kUseridFieldNumber;
const int UserPvpEventLog::kSnFieldNumber;
const int UserPvpEventLog::kEventTypeFieldNumber;
const int UserPvpEventLog::kEventStateFieldNumber;
const int UserPvpEventLog::kDefendStateFieldNumber;
const int UserPvpEventLog::kSourceNickFieldNumber;
const int UserPvpEventLog::kSourceDataBytesFieldNumber;
const int UserPvpEventLog::kGoldLockFieldNumber;
const int UserPvpEventLog::kGoldRefundFieldNumber;
const int UserPvpEventLog::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPvpEventLog::UserPvpEventLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PvpStage_2eproto::scc_info_UserPvpEventLog.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:db.UserPvpEventLog)
}
UserPvpEventLog::UserPvpEventLog(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_PvpStage_2eproto::scc_info_UserPvpEventLog.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:db.UserPvpEventLog)
}
UserPvpEventLog::UserPvpEventLog(const UserPvpEventLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid(),
      GetArenaNoVirtual());
  }
  source_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_nick()) {
    source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_nick(),
      GetArenaNoVirtual());
  }
  source_data_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_data_bytes()) {
    source_data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_data_bytes(),
      GetArenaNoVirtual());
  }
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&optime_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(optime_));
  // @@protoc_insertion_point(copy_constructor:db.UserPvpEventLog)
}

void UserPvpEventLog::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_data_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(optime_));
}

UserPvpEventLog::~UserPvpEventLog() {
  // @@protoc_insertion_point(destructor:db.UserPvpEventLog)
  SharedDtor();
}

void UserPvpEventLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_data_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserPvpEventLog::ArenaDtor(void* object) {
  UserPvpEventLog* _this = reinterpret_cast< UserPvpEventLog* >(object);
  (void)_this;
}
void UserPvpEventLog::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserPvpEventLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserPvpEventLog::descriptor() {
  ::protobuf_PvpStage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PvpStage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserPvpEventLog& UserPvpEventLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PvpStage_2eproto::scc_info_UserPvpEventLog.base);
  return *internal_default_instance();
}


void UserPvpEventLog::Clear() {
// @@protoc_insertion_point(message_clear_start:db.UserPvpEventLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      source_data_bytes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&sn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gold_lock_) -
        reinterpret_cast<char*>(&sn_)) + sizeof(gold_lock_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&gold_refund_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&gold_refund_)) + sizeof(optime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserPvpEventLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db.UserPvpEventLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 event_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_event_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 event_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_event_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 defend_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_defend_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defend_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes source_nick = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes source_data_bytes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_data_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold_lock = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_gold_lock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold_refund = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_gold_refund();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_refund_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db.UserPvpEventLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db.UserPvpEventLog)
  return false;
#undef DO_
}

void UserPvpEventLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db.UserPvpEventLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 sn = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sn(), output);
  }

  // required int32 event_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_type(), output);
  }

  // required int32 event_state = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_state(), output);
  }

  // required int32 defend_state = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defend_state(), output);
  }

  // required bytes source_nick = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->source_nick(), output);
  }

  // required bytes source_data_bytes = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->source_data_bytes(), output);
  }

  // required int32 gold_lock = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold_lock(), output);
  }

  // required int32 gold_refund = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gold_refund(), output);
  }

  // optional sfixed64 optime = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db.UserPvpEventLog)
}

::google::protobuf::uint8* UserPvpEventLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:db.UserPvpEventLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // required int32 sn = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sn(), target);
  }

  // required int32 event_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_type(), target);
  }

  // required int32 event_state = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_state(), target);
  }

  // required int32 defend_state = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defend_state(), target);
  }

  // required bytes source_nick = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->source_nick(), target);
  }

  // required bytes source_data_bytes = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->source_data_bytes(), target);
  }

  // required int32 gold_lock = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gold_lock(), target);
  }

  // required int32 gold_refund = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gold_refund(), target);
  }

  // optional sfixed64 optime = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db.UserPvpEventLog)
  return target;
}

size_t UserPvpEventLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:db.UserPvpEventLog)
  size_t total_size = 0;

  if (has_userid()) {
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());
  }

  if (has_source_nick()) {
    // required bytes source_nick = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_nick());
  }

  if (has_source_data_bytes()) {
    // required bytes source_data_bytes = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_data_bytes());
  }

  if (has_sn()) {
    // required int32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());
  }

  if (has_event_type()) {
    // required int32 event_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_type());
  }

  if (has_event_state()) {
    // required int32 event_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_state());
  }

  if (has_defend_state()) {
    // required int32 defend_state = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defend_state());
  }

  if (has_gold_lock()) {
    // required int32 gold_lock = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_lock());
  }

  if (has_gold_refund()) {
    // required int32 gold_refund = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_refund());
  }

  return total_size;
}
size_t UserPvpEventLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db.UserPvpEventLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->userid());

    // required bytes source_nick = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_nick());

    // required bytes source_data_bytes = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_data_bytes());

    // required int32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sn());

    // required int32 event_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_type());

    // required int32 event_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_state());

    // required int32 defend_state = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defend_state());

    // required int32 gold_lock = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_lock());

    // required int32 gold_refund = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_refund());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional sfixed64 optime = 11;
  if (has_optime()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPvpEventLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db.UserPvpEventLog)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPvpEventLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPvpEventLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db.UserPvpEventLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db.UserPvpEventLog)
    MergeFrom(*source);
  }
}

void UserPvpEventLog::MergeFrom(const UserPvpEventLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db.UserPvpEventLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_userid(from.userid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_source_nick(from.source_nick());
    }
    if (cached_has_bits & 0x00000004u) {
      set_source_data_bytes(from.source_data_bytes());
    }
    if (cached_has_bits & 0x00000008u) {
      sn_ = from.sn_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      event_state_ = from.event_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      defend_state_ = from.defend_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      gold_lock_ = from.gold_lock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      gold_refund_ = from.gold_refund_;
    }
    if (cached_has_bits & 0x00000200u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserPvpEventLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db.UserPvpEventLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPvpEventLog::CopyFrom(const UserPvpEventLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db.UserPvpEventLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPvpEventLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void UserPvpEventLog::Swap(UserPvpEventLog* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserPvpEventLog* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserPvpEventLog::UnsafeArenaSwap(UserPvpEventLog* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserPvpEventLog::InternalSwap(UserPvpEventLog* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_nick_.Swap(&other->source_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_data_bytes_.Swap(&other->source_data_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sn_, other->sn_);
  swap(event_type_, other->event_type_);
  swap(event_state_, other->event_state_);
  swap(defend_state_, other->defend_state_);
  swap(gold_lock_, other->gold_lock_);
  swap(gold_refund_, other->gold_refund_);
  swap(optime_, other->optime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserPvpEventLog::GetMetadata() const {
  protobuf_PvpStage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PvpStage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace db
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::PvpStage* Arena::CreateMaybeMessage< ::db::PvpStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::PvpStage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::GlobalPvpEvent* Arena::CreateMaybeMessage< ::db::GlobalPvpEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::GlobalPvpEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::db::UserPvpEventLog* Arena::CreateMaybeMessage< ::db::UserPvpEventLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::db::UserPvpEventLog >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
