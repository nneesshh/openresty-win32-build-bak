// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pvp.proto

#include "Pvp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseStruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseStruct_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Sailor;
}  // namespace protobuf_BaseStruct_2eproto
namespace protobuf_Pvp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CombatResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PvpReward;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RandList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StageData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserPvpEventLogService_EventLogRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CardList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CombatFrame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CombatFrameList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PvpEventLog;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PvpEventLogList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PvpService_PvpResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserPvpEventLogService_EventLogResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PvpCombat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pvp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PvpService_PvpRequest;
}  // namespace protobuf_Pvp_2eproto
namespace pvp {
class RandListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RandList>
      _instance;
} _RandList_default_instance_;
class StageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StageData>
      _instance;
} _StageData_default_instance_;
class StageDataListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StageDataList>
      _instance;
} _StageDataList_default_instance_;
class CardListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CardList>
      _instance;
} _CardList_default_instance_;
class PlayerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerData>
      _instance;
} _PlayerData_default_instance_;
class UserInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserInput>
      _instance;
} _UserInput_default_instance_;
class CombatFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CombatFrame>
      _instance;
} _CombatFrame_default_instance_;
class CombatFrameListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CombatFrameList>
      _instance;
} _CombatFrameList_default_instance_;
class CombatResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CombatResult>
      _instance;
} _CombatResult_default_instance_;
class PvpCombatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpCombat>
      _instance;
} _PvpCombat_default_instance_;
class PvpService_PvpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpService_PvpRequest>
      _instance;
} _PvpService_PvpRequest_default_instance_;
class PvpService_PvpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpService_PvpResponse>
      _instance;
} _PvpService_PvpResponse_default_instance_;
class PvpServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpService>
      _instance;
} _PvpService_default_instance_;
class PvpCombatStartNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpCombatStartNotify>
      _instance;
} _PvpCombatStartNotify_default_instance_;
class PvpFrameNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpFrameNotify>
      _instance;
} _PvpFrameNotify_default_instance_;
class PvpRewardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpReward>
      _instance;
} _PvpReward_default_instance_;
class PvpRewardNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpRewardNotify>
      _instance;
} _PvpRewardNotify_default_instance_;
class PvpEventLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpEventLog>
      _instance;
} _PvpEventLog_default_instance_;
class PvpEventLogListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpEventLogList>
      _instance;
} _PvpEventLogList_default_instance_;
class UserPvpEventLogService_EventLogRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserPvpEventLogService_EventLogRequest>
      _instance;
} _UserPvpEventLogService_EventLogRequest_default_instance_;
class UserPvpEventLogService_EventLogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserPvpEventLogService_EventLogResponse>
      _instance;
} _UserPvpEventLogService_EventLogResponse_default_instance_;
class UserPvpEventLogServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserPvpEventLogService>
      _instance;
} _UserPvpEventLogService_default_instance_;
class PvpEventLogStateNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpEventLogStateNotify>
      _instance;
} _PvpEventLogStateNotify_default_instance_;
class PvpLootNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PvpLootNotify>
      _instance;
} _PvpLootNotify_default_instance_;
}  // namespace pvp
namespace protobuf_Pvp_2eproto {
static void InitDefaultsRandList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_RandList_default_instance_;
    new (ptr) ::pvp::RandList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::RandList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RandList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRandList}, {}};

static void InitDefaultsStageData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_StageData_default_instance_;
    new (ptr) ::pvp::StageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::StageData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StageData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStageData}, {}};

static void InitDefaultsStageDataList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_StageDataList_default_instance_;
    new (ptr) ::pvp::StageDataList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::StageDataList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StageDataList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStageDataList}, {
      &protobuf_Pvp_2eproto::scc_info_StageData.base,}};

static void InitDefaultsCardList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_CardList_default_instance_;
    new (ptr) ::pvp::CardList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::CardList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CardList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCardList}, {
      &protobuf_BaseStruct_2eproto::scc_info_Sailor.base,}};

static void InitDefaultsPlayerData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PlayerData_default_instance_;
    new (ptr) ::pvp::PlayerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PlayerData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerData}, {
      &protobuf_Pvp_2eproto::scc_info_CardList.base,}};

static void InitDefaultsUserInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_UserInput_default_instance_;
    new (ptr) ::pvp::UserInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::UserInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserInput}, {}};

static void InitDefaultsCombatFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_CombatFrame_default_instance_;
    new (ptr) ::pvp::CombatFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::CombatFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CombatFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCombatFrame}, {
      &protobuf_Pvp_2eproto::scc_info_UserInput.base,}};

static void InitDefaultsCombatFrameList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_CombatFrameList_default_instance_;
    new (ptr) ::pvp::CombatFrameList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::CombatFrameList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CombatFrameList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCombatFrameList}, {
      &protobuf_Pvp_2eproto::scc_info_CombatFrame.base,}};

static void InitDefaultsCombatResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_CombatResult_default_instance_;
    new (ptr) ::pvp::CombatResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::CombatResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CombatResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCombatResult}, {}};

static void InitDefaultsPvpCombat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpCombat_default_instance_;
    new (ptr) ::pvp::PvpCombat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpCombat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PvpCombat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPvpCombat}, {
      &protobuf_Pvp_2eproto::scc_info_StageData.base,
      &protobuf_Pvp_2eproto::scc_info_RandList.base,}};

static void InitDefaultsPvpService_PvpRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpService_PvpRequest_default_instance_;
    new (ptr) ::pvp::PvpService_PvpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpService_PvpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PvpService_PvpRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPvpService_PvpRequest}, {
      &protobuf_Pvp_2eproto::scc_info_StageData.base,
      &protobuf_Pvp_2eproto::scc_info_CardList.base,
      &protobuf_Pvp_2eproto::scc_info_UserInput.base,}};

static void InitDefaultsPvpService_PvpResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpService_PvpResponse_default_instance_;
    new (ptr) ::pvp::PvpService_PvpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpService_PvpResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PvpService_PvpResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPvpService_PvpResponse}, {
      &protobuf_Pvp_2eproto::scc_info_PvpCombat.base,}};

static void InitDefaultsPvpService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpService_default_instance_;
    new (ptr) ::pvp::PvpService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PvpService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPvpService}, {
      &protobuf_Pvp_2eproto::scc_info_PvpService_PvpRequest.base,
      &protobuf_Pvp_2eproto::scc_info_PvpService_PvpResponse.base,}};

static void InitDefaultsPvpCombatStartNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpCombatStartNotify_default_instance_;
    new (ptr) ::pvp::PvpCombatStartNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpCombatStartNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PvpCombatStartNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPvpCombatStartNotify}, {
      &protobuf_Pvp_2eproto::scc_info_PlayerData.base,}};

static void InitDefaultsPvpFrameNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpFrameNotify_default_instance_;
    new (ptr) ::pvp::PvpFrameNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpFrameNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PvpFrameNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPvpFrameNotify}, {
      &protobuf_Pvp_2eproto::scc_info_CombatFrameList.base,
      &protobuf_Pvp_2eproto::scc_info_CombatResult.base,}};

static void InitDefaultsPvpReward() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpReward_default_instance_;
    new (ptr) ::pvp::PvpReward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpReward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PvpReward =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPvpReward}, {}};

static void InitDefaultsPvpRewardNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpRewardNotify_default_instance_;
    new (ptr) ::pvp::PvpRewardNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpRewardNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PvpRewardNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPvpRewardNotify}, {
      &protobuf_Pvp_2eproto::scc_info_PvpReward.base,}};

static void InitDefaultsPvpEventLog() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpEventLog_default_instance_;
    new (ptr) ::pvp::PvpEventLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpEventLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PvpEventLog =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPvpEventLog}, {
      &protobuf_Pvp_2eproto::scc_info_CardList.base,}};

static void InitDefaultsPvpEventLogList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpEventLogList_default_instance_;
    new (ptr) ::pvp::PvpEventLogList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpEventLogList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PvpEventLogList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPvpEventLogList}, {
      &protobuf_Pvp_2eproto::scc_info_PvpEventLog.base,}};

static void InitDefaultsUserPvpEventLogService_EventLogRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_UserPvpEventLogService_EventLogRequest_default_instance_;
    new (ptr) ::pvp::UserPvpEventLogService_EventLogRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::UserPvpEventLogService_EventLogRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserPvpEventLogService_EventLogRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserPvpEventLogService_EventLogRequest}, {}};

static void InitDefaultsUserPvpEventLogService_EventLogResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_UserPvpEventLogService_EventLogResponse_default_instance_;
    new (ptr) ::pvp::UserPvpEventLogService_EventLogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::UserPvpEventLogService_EventLogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserPvpEventLogService_EventLogResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserPvpEventLogService_EventLogResponse}, {
      &protobuf_Pvp_2eproto::scc_info_PvpEventLogList.base,}};

static void InitDefaultsUserPvpEventLogService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_UserPvpEventLogService_default_instance_;
    new (ptr) ::pvp::UserPvpEventLogService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::UserPvpEventLogService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserPvpEventLogService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserPvpEventLogService}, {
      &protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService_EventLogRequest.base,
      &protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService_EventLogResponse.base,}};

static void InitDefaultsPvpEventLogStateNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpEventLogStateNotify_default_instance_;
    new (ptr) ::pvp::PvpEventLogStateNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpEventLogStateNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PvpEventLogStateNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPvpEventLogStateNotify}, {
      &protobuf_Pvp_2eproto::scc_info_PvpEventLogList.base,}};

static void InitDefaultsPvpLootNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvp::_PvpLootNotify_default_instance_;
    new (ptr) ::pvp::PvpLootNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvp::PvpLootNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PvpLootNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPvpLootNotify}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RandList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StageData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StageDataList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CardList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CombatFrame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CombatFrameList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CombatResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpCombat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpService_PvpRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpService_PvpResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpCombatStartNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpFrameNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpReward.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpRewardNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpEventLog.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpEventLogList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserPvpEventLogService_EventLogRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserPvpEventLogService_EventLogResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserPvpEventLogService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpEventLogStateNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PvpLootNotify.base);
}

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::RandList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::RandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::RandList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, stageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageData, optime_),
  3,
  4,
  0,
  1,
  2,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageDataList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::StageDataList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CardList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CardList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PlayerData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PlayerData, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PlayerData, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PlayerData, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PlayerData, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PlayerData, card_list_),
  3,
  2,
  0,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, cardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserInput, pos_y_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatFrame, frameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatFrame, frame_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatFrame, input_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatFrameList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatFrameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatFrameList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatResult, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::CombatResult, star_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombat, combatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombat, combat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombat, stage_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombat, rand_list_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpRequest, combat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpRequest, stage_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpRequest, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpRequest, select_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpRequest, user_input_),
  4,
  3,
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService_PvpResponse, combat_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombatStartNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombatStartNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombatStartNotify, player0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpCombatStartNotify, player1_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpFrameNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpFrameNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpFrameNotify, frame_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpFrameNotify, result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpReward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpReward, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpReward, num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpRewardNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpRewardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpRewardNotify, combatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpRewardNotify, reward_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, event_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, defend_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, source_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, source_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, gold_lock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, gold_refund_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLog, optime_),
  2,
  8,
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLogList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLogList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLogList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogRequest, refund_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogResponse, log_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService_EventLogResponse, gold_refund_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::UserPvpEventLogService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLogStateNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLogStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpEventLogStateNotify, log_list_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpLootNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpLootNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pvp::PvpLootNotify, win_gold_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::pvp::RandList)},
  { 7, 20, sizeof(::pvp::StageData)},
  { 28, 34, sizeof(::pvp::StageDataList)},
  { 35, 41, sizeof(::pvp::CardList)},
  { 42, 52, sizeof(::pvp::PlayerData)},
  { 57, 69, sizeof(::pvp::UserInput)},
  { 76, 84, sizeof(::pvp::CombatFrame)},
  { 87, 93, sizeof(::pvp::CombatFrameList)},
  { 94, 101, sizeof(::pvp::CombatResult)},
  { 103, 112, sizeof(::pvp::PvpCombat)},
  { 116, 127, sizeof(::pvp::PvpService_PvpRequest)},
  { 133, 140, sizeof(::pvp::PvpService_PvpResponse)},
  { 142, 149, sizeof(::pvp::PvpService)},
  { 151, 158, sizeof(::pvp::PvpCombatStartNotify)},
  { 160, 167, sizeof(::pvp::PvpFrameNotify)},
  { 169, 176, sizeof(::pvp::PvpReward)},
  { 178, 185, sizeof(::pvp::PvpRewardNotify)},
  { 187, 201, sizeof(::pvp::PvpEventLog)},
  { 210, 216, sizeof(::pvp::PvpEventLogList)},
  { 217, 224, sizeof(::pvp::UserPvpEventLogService_EventLogRequest)},
  { 226, 234, sizeof(::pvp::UserPvpEventLogService_EventLogResponse)},
  { 237, 244, sizeof(::pvp::UserPvpEventLogService)},
  { 246, 252, sizeof(::pvp::PvpEventLogStateNotify)},
  { 253, 259, sizeof(::pvp::PvpLootNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_RandList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_StageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_StageDataList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_CardList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PlayerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_UserInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_CombatFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_CombatFrameList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_CombatResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpCombat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpService_PvpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpService_PvpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpCombatStartNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpFrameNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpReward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpRewardNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpEventLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpEventLogList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_UserPvpEventLogService_EventLogRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_UserPvpEventLogService_EventLogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_UserPvpEventLogService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpEventLogStateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pvp::_PvpLootNotify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Pvp.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tPvp.proto\022\003pvp\032\020BaseStruct.proto\"\030\n\010Ra"
      "ndList\022\014\n\004list\030\001 \003(\005\"\241\001\n\tStageData\022\020\n\010se"
      "rverid\030\001 \002(\005\022\017\n\007stageid\030\002 \002(\005\022\014\n\004name\030\003 "
      "\002(\014\022\014\n\004desc\030\004 \002(\014\022\022\n\ndata_bytes\030\005 \002(\014\022\014\n"
      "\004gold\030\006 \001(\005\022#\n\005state\030\007 \001(\0162\024.pvp.PVP_STA"
      "GE_STATE\022\016\n\006optime\030\013 \002(\020\"-\n\rStageDataLis"
      "t\022\034\n\004list\030\001 \003(\0132\016.pvp.StageData\"$\n\010CardL"
      "ist\022\030\n\004list\030\001 \003(\0132\n.sg.Sailor\"f\n\nPlayerD"
      "ata\022\013\n\003pid\030\001 \002(\005\022\014\n\004uuid\030\002 \002(\004\022\014\n\004nick\030\003"
      " \001(\014\022\r\n\005level\030\004 \001(\005\022 \n\tcard_list\030\013 \001(\0132\r"
      ".pvp.CardList\"\303\001\n\tUserInput\022)\n\004code\030\001 \002("
      "\0162\033.pvp.UserInput.INPUT_OPCODE\022\r\n\005score\030"
      "\002 \001(\005\022\014\n\004star\030\003 \001(\005\022\020\n\010playerid\030\013 \001(\005\022\016\n"
      "\006cardid\030\014 \001(\005\022\r\n\005pos_x\030\r \001(\005\022\r\n\005pos_y\030\016 "
      "\001(\005\".\n\014INPUT_OPCODE\022\020\n\014BATTLE_STATS\020\001\022\014\n"
      "\010ADD_CARD\020\002\"\316\001\n\013CombatFrame\022\017\n\007frameid\030\001"
      " \002(\003\0221\n\013frame_state\030\002 \002(\0162\034.pvp.CombatFr"
      "ame.FRAME_STATE\022\035\n\005input\030\003 \001(\0132\016.pvp.Use"
      "rInput\"\\\n\013FRAME_STATE\022\016\n\nFRAME_HEAD\020\001\022\020\n"
      "\014FRAME_MIDDLE\020\002\022\033\n\027FRAME_MIDDLE_WITH_INP"
      "UT\020\003\022\016\n\nFRAME_TAIL\020\004\"1\n\017CombatFrameList\022"
      "\036\n\004list\030\001 \003(\0132\020.pvp.CombatFrame\"+\n\014Comba"
      "tResult\022\r\n\005score\030\002 \001(\005\022\014\n\004star\030\003 \001(\005\"\212\001\n"
      "\tPvpCombat\022\020\n\010combatid\030\001 \002(\005\022%\n\013combat_t"
      "ype\030\002 \002(\0162\020.pvp.COMBAT_TYPE\022\"\n\nstage_dat"
      "a\030\003 \001(\0132\016.pvp.StageData\022 \n\trand_list\030\004 \001"
      "(\0132\r.pvp.RandList\"\334\003\n\nPvpService\022\'\n\003req\030"
      "\001 \001(\0132\032.pvp.PvpService.PvpRequest\022)\n\004res"
      "p\030\002 \001(\0132\033.pvp.PvpService.PvpResponse\032\341\001\n"
      "\nPvpRequest\022(\n\003cmd\030\001 \002(\0162\033.pvp.PvpServic"
      "e.PVP_COMMAND\022%\n\013combat_type\030\002 \001(\0162\020.pvp"
      ".COMBAT_TYPE\022\"\n\nstage_data\030\003 \001(\0132\016.pvp.S"
      "tageData\022 \n\tcard_list\030\004 \001(\0132\r.pvp.CardLi"
      "st\022\030\n\020select_card_list\030\013 \003(\005\022\"\n\nuser_inp"
      "ut\030\014 \001(\0132\016.pvp.UserInput\032=\n\013PvpResponse\022"
      "\016\n\006result\030\001 \002(\005\022\036\n\006combat\030\002 \001(\0132\016.pvp.Pv"
      "pCombat\"W\n\013PVP_COMMAND\022\t\n\005QUERY\020\001\022\n\n\006UPL"
      "OAD\020\002\022\010\n\004JOIN\020\013\022\t\n\005INPUT\020\014\022\n\n\006CANCEL\020\r\022\020"
      "\n\014ACCEP_REWARD\020\016\"Z\n\024PvpCombatStartNotify"
      "\022 \n\007player0\030\001 \002(\0132\017.pvp.PlayerData\022 \n\007pl"
      "ayer1\030\002 \002(\0132\017.pvp.PlayerData\"]\n\016PvpFrame"
      "Notify\022(\n\nframe_list\030\001 \002(\0132\024.pvp.CombatF"
      "rameList\022!\n\006result\030\002 \001(\0132\021.pvp.CombatRes"
      "ult\"(\n\tPvpReward\022\016\n\006typeid\030\001 \002(\004\022\013\n\003num\030"
      "\002 \002(\004\"H\n\017PvpRewardNotify\022\020\n\010combatid\030\001 \002"
      "(\005\022#\n\013reward_list\030\002 \003(\0132\016.pvp.PvpReward\""
      "\353\002\n\013PvpEventLog\022\n\n\002id\030\001 \002(\005\022\'\n\nevent_typ"
      "e\030\002 \002(\0162\023.pvp.PVP_EVENT_TYPE\022\023\n\013event_st"
      "ate\030\003 \002(\005\0223\n\014defend_state\030\004 \002(\0162\035.pvp.Pv"
      "pEventLog.DEFEND_STATE\022\023\n\013source_nick\030\005 "
      "\002(\014\022\'\n\020source_card_list\030\006 \002(\0132\r.pvp.Card"
      "List\022\021\n\tgold_lock\030\007 \002(\005\022\023\n\013gold_refund\030\010"
      " \002(\005\022\016\n\006optime\030\013 \001(\020\"7\n\nLOOT_STATE\022\010\n\004ID"
      "LE\020\000\022\t\n\005START\020\001\022\010\n\004OVER\020\002\022\n\n\006REFUND\020\003\".\n"
      "\014DEFEND_STATE\022\013\n\007SUSPEND\020\000\022\007\n\003WIN\020\001\022\010\n\004L"
      "OSE\020\002\"1\n\017PvpEventLogList\022\036\n\004list\030\001 \003(\0132\020"
      ".pvp.PvpEventLog\"\205\003\n\026UserPvpEventLogServ"
      "ice\0228\n\003req\030\001 \001(\0132+.pvp.UserPvpEventLogSe"
      "rvice.EventLogRequest\022:\n\004resp\030\002 \001(\0132,.pv"
      "p.UserPvpEventLogService.EventLogRespons"
      "e\032`\n\017EventLogRequest\022:\n\003cmd\030\001 \002(\0162-.pvp."
      "UserPvpEventLogService.EVENT_LOG_COMMAND"
      "\022\021\n\trefund_id\030\002 \001(\005\032_\n\020EventLogResponse\022"
      "\016\n\006result\030\001 \002(\005\022&\n\010log_list\030\013 \001(\0132\024.pvp."
      "PvpEventLogList\022\023\n\013gold_refund\030\014 \001(\005\"2\n\021"
      "EVENT_LOG_COMMAND\022\r\n\tQUERY_LOG\020\001\022\016\n\nREFU"
      "ND_LOG\020\002\"@\n\026PvpEventLogStateNotify\022&\n\010lo"
      "g_list\030\001 \002(\0132\024.pvp.PvpEventLogList\"!\n\rPv"
      "pLootNotify\022\020\n\010win_gold\030\001 \002(\005*0\n\013COMBAT_"
      "TYPE\022\017\n\013COMBAT_NONE\020\000\022\020\n\014COMBAT_ARENA\020\001*"
      "r\n\017PVP_STAGE_STATE\022&\n\031PVP_STAGE_STATE_TO"
      "_DELETE\020\377\377\377\377\377\377\377\377\377\001\022\033\n\027PVP_STAGE_STATE_OF"
      "FLINE\020\000\022\032\n\026PVP_STAGE_STATE_ONLINE\020\001*)\n\016P"
      "VP_EVENT_TYPE\022\027\n\023PVP_EVENT_TYPE_LOOT\020\001B\003"
      "\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2963);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pvp.proto", &protobuf_RegisterTypes);
  ::protobuf_BaseStruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Pvp_2eproto
namespace pvp {
const ::google::protobuf::EnumDescriptor* UserInput_INPUT_OPCODE_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[0];
}
bool UserInput_INPUT_OPCODE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserInput_INPUT_OPCODE UserInput::BATTLE_STATS;
const UserInput_INPUT_OPCODE UserInput::ADD_CARD;
const UserInput_INPUT_OPCODE UserInput::INPUT_OPCODE_MIN;
const UserInput_INPUT_OPCODE UserInput::INPUT_OPCODE_MAX;
const int UserInput::INPUT_OPCODE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CombatFrame_FRAME_STATE_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[1];
}
bool CombatFrame_FRAME_STATE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CombatFrame_FRAME_STATE CombatFrame::FRAME_HEAD;
const CombatFrame_FRAME_STATE CombatFrame::FRAME_MIDDLE;
const CombatFrame_FRAME_STATE CombatFrame::FRAME_MIDDLE_WITH_INPUT;
const CombatFrame_FRAME_STATE CombatFrame::FRAME_TAIL;
const CombatFrame_FRAME_STATE CombatFrame::FRAME_STATE_MIN;
const CombatFrame_FRAME_STATE CombatFrame::FRAME_STATE_MAX;
const int CombatFrame::FRAME_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PvpService_PVP_COMMAND_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[2];
}
bool PvpService_PVP_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PvpService_PVP_COMMAND PvpService::QUERY;
const PvpService_PVP_COMMAND PvpService::UPLOAD;
const PvpService_PVP_COMMAND PvpService::JOIN;
const PvpService_PVP_COMMAND PvpService::INPUT;
const PvpService_PVP_COMMAND PvpService::CANCEL;
const PvpService_PVP_COMMAND PvpService::ACCEP_REWARD;
const PvpService_PVP_COMMAND PvpService::PVP_COMMAND_MIN;
const PvpService_PVP_COMMAND PvpService::PVP_COMMAND_MAX;
const int PvpService::PVP_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PvpEventLog_LOOT_STATE_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[3];
}
bool PvpEventLog_LOOT_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PvpEventLog_LOOT_STATE PvpEventLog::IDLE;
const PvpEventLog_LOOT_STATE PvpEventLog::START;
const PvpEventLog_LOOT_STATE PvpEventLog::OVER;
const PvpEventLog_LOOT_STATE PvpEventLog::REFUND;
const PvpEventLog_LOOT_STATE PvpEventLog::LOOT_STATE_MIN;
const PvpEventLog_LOOT_STATE PvpEventLog::LOOT_STATE_MAX;
const int PvpEventLog::LOOT_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PvpEventLog_DEFEND_STATE_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[4];
}
bool PvpEventLog_DEFEND_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PvpEventLog_DEFEND_STATE PvpEventLog::SUSPEND;
const PvpEventLog_DEFEND_STATE PvpEventLog::WIN;
const PvpEventLog_DEFEND_STATE PvpEventLog::LOSE;
const PvpEventLog_DEFEND_STATE PvpEventLog::DEFEND_STATE_MIN;
const PvpEventLog_DEFEND_STATE PvpEventLog::DEFEND_STATE_MAX;
const int PvpEventLog::DEFEND_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserPvpEventLogService_EVENT_LOG_COMMAND_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[5];
}
bool UserPvpEventLogService_EVENT_LOG_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserPvpEventLogService_EVENT_LOG_COMMAND UserPvpEventLogService::QUERY_LOG;
const UserPvpEventLogService_EVENT_LOG_COMMAND UserPvpEventLogService::REFUND_LOG;
const UserPvpEventLogService_EVENT_LOG_COMMAND UserPvpEventLogService::EVENT_LOG_COMMAND_MIN;
const UserPvpEventLogService_EVENT_LOG_COMMAND UserPvpEventLogService::EVENT_LOG_COMMAND_MAX;
const int UserPvpEventLogService::EVENT_LOG_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* COMBAT_TYPE_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[6];
}
bool COMBAT_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PVP_STAGE_STATE_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[7];
}
bool PVP_STAGE_STATE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PVP_EVENT_TYPE_descriptor() {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Pvp_2eproto::file_level_enum_descriptors[8];
}
bool PVP_EVENT_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RandList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandList::RandList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_RandList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.RandList)
}
RandList::RandList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_RandList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.RandList)
}
RandList::RandList(const RandList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pvp.RandList)
}

void RandList::SharedCtor() {
}

RandList::~RandList() {
  // @@protoc_insertion_point(destructor:pvp.RandList)
  SharedDtor();
}

void RandList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void RandList::ArenaDtor(void* object) {
  RandList* _this = reinterpret_cast< RandList* >(object);
  (void)_this;
}
void RandList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RandList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RandList::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandList& RandList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_RandList.base);
  return *internal_default_instance();
}


void RandList::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.RandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.RandList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.RandList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.RandList)
  return false;
#undef DO_
}

void RandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.RandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 list = 1;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.RandList)
}

::google::protobuf::uint8* RandList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.RandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 list = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->list_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.RandList)
  return target;
}

size_t RandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.RandList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->list_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.RandList)
  GOOGLE_DCHECK_NE(&from, this);
  const RandList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.RandList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.RandList)
    MergeFrom(*source);
  }
}

void RandList::MergeFrom(const RandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.RandList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void RandList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.RandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandList::CopyFrom(const RandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.RandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandList::IsInitialized() const {
  return true;
}

void RandList::Swap(RandList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RandList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RandList::UnsafeArenaSwap(RandList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RandList::InternalSwap(RandList* other) {
  using std::swap;
  list_.InternalSwap(&other->list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RandList::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StageData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StageData::kServeridFieldNumber;
const int StageData::kStageidFieldNumber;
const int StageData::kNameFieldNumber;
const int StageData::kDescFieldNumber;
const int StageData::kDataBytesFieldNumber;
const int StageData::kGoldFieldNumber;
const int StageData::kStateFieldNumber;
const int StageData::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageData::StageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_StageData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.StageData)
}
StageData::StageData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_StageData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.StageData)
}
StageData::StageData(const StageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc(),
      GetArenaNoVirtual());
  }
  data_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_bytes()) {
    data_bytes_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_bytes(),
      GetArenaNoVirtual());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:pvp.StageData)
}

void StageData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(optime_));
  state_ = -1;
}

StageData::~StageData() {
  // @@protoc_insertion_point(destructor:pvp.StageData)
  SharedDtor();
}

void StageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StageData::ArenaDtor(void* object) {
  StageData* _this = reinterpret_cast< StageData* >(object);
  (void)_this;
}
void StageData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StageData::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StageData& StageData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_StageData.base);
  return *internal_default_instance();
}


void StageData::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.StageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      data_bytes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&serverid_)) + sizeof(optime_));
    state_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.StageData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 stageid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.PVP_STAGE_STATE state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::PVP_STAGE_STATE_IsValid(value)) {
            set_state(static_cast< ::pvp::PVP_STAGE_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.StageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.StageData)
  return false;
#undef DO_
}

void StageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.StageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 serverid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 stageid = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stageid(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes desc = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->desc(), output);
  }

  // required bytes data_bytes = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data_bytes(), output);
  }

  // optional int32 gold = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold(), output);
  }

  // optional .pvp.PVP_STAGE_STATE state = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.StageData)
}

::google::protobuf::uint8* StageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.StageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 serverid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 stageid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stageid(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes desc = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->desc(), target);
  }

  // required bytes data_bytes = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data_bytes(), target);
  }

  // optional int32 gold = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gold(), target);
  }

  // optional .pvp.PVP_STAGE_STATE state = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->state(), target);
  }

  // required sfixed64 optime = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.StageData)
  return target;
}

size_t StageData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pvp.StageData)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_desc()) {
    // required bytes desc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (has_data_bytes()) {
    // required bytes data_bytes = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_bytes());
  }

  if (has_serverid()) {
    // required int32 serverid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  if (has_stageid()) {
    // required int32 stageid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stageid());
  }

  if (has_optime()) {
    // required sfixed64 optime = 11;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t StageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.StageData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000005f) ^ 0x0000005f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes desc = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());

    // required bytes data_bytes = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_bytes());

    // required int32 serverid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());

    // required int32 stageid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stageid());

    // required sfixed64 optime = 11;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 gold = 6;
  if (has_gold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  // optional .pvp.PVP_STAGE_STATE state = 7;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.StageData)
  GOOGLE_DCHECK_NE(&from, this);
  const StageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.StageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.StageData)
    MergeFrom(*source);
  }
}

void StageData::MergeFrom(const StageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.StageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      set_desc(from.desc());
    }
    if (cached_has_bits & 0x00000004u) {
      set_data_bytes(from.data_bytes());
    }
    if (cached_has_bits & 0x00000008u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000010u) {
      stageid_ = from.stageid_;
    }
    if (cached_has_bits & 0x00000020u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000040u) {
      optime_ = from.optime_;
    }
    if (cached_has_bits & 0x00000080u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.StageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageData::CopyFrom(const StageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.StageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;
  return true;
}

void StageData::Swap(StageData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StageData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StageData::UnsafeArenaSwap(StageData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StageData::InternalSwap(StageData* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_bytes_.Swap(&other->data_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serverid_, other->serverid_);
  swap(stageid_, other->stageid_);
  swap(gold_, other->gold_);
  swap(optime_, other->optime_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StageData::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StageDataList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StageDataList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageDataList::StageDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_StageDataList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.StageDataList)
}
StageDataList::StageDataList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_StageDataList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.StageDataList)
}
StageDataList::StageDataList(const StageDataList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pvp.StageDataList)
}

void StageDataList::SharedCtor() {
}

StageDataList::~StageDataList() {
  // @@protoc_insertion_point(destructor:pvp.StageDataList)
  SharedDtor();
}

void StageDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void StageDataList::ArenaDtor(void* object) {
  StageDataList* _this = reinterpret_cast< StageDataList* >(object);
  (void)_this;
}
void StageDataList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StageDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StageDataList::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StageDataList& StageDataList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_StageDataList.base);
  return *internal_default_instance();
}


void StageDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.StageDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StageDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.StageDataList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pvp.StageData list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.StageDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.StageDataList)
  return false;
#undef DO_
}

void StageDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.StageDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pvp.StageData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.StageDataList)
}

::google::protobuf::uint8* StageDataList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.StageDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pvp.StageData list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.StageDataList)
  return target;
}

size_t StageDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.StageDataList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pvp.StageData list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StageDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.StageDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const StageDataList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StageDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.StageDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.StageDataList)
    MergeFrom(*source);
  }
}

void StageDataList::MergeFrom(const StageDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.StageDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void StageDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.StageDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageDataList::CopyFrom(const StageDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.StageDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageDataList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void StageDataList::Swap(StageDataList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StageDataList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StageDataList::UnsafeArenaSwap(StageDataList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StageDataList::InternalSwap(StageDataList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StageDataList::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CardList::InitAsDefaultInstance() {
}
void CardList::clear_list() {
  list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardList::CardList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_CardList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.CardList)
}
CardList::CardList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_CardList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.CardList)
}
CardList::CardList(const CardList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pvp.CardList)
}

void CardList::SharedCtor() {
}

CardList::~CardList() {
  // @@protoc_insertion_point(destructor:pvp.CardList)
  SharedDtor();
}

void CardList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CardList::ArenaDtor(void* object) {
  CardList* _this = reinterpret_cast< CardList* >(object);
  (void)_this;
}
void CardList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CardList::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardList& CardList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_CardList.base);
  return *internal_default_instance();
}


void CardList::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.CardList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.CardList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sg.Sailor list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.CardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.CardList)
  return false;
#undef DO_
}

void CardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.CardList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.Sailor list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.CardList)
}

::google::protobuf::uint8* CardList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.CardList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sg.Sailor list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.CardList)
  return target;
}

size_t CardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.CardList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .sg.Sailor list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.CardList)
  GOOGLE_DCHECK_NE(&from, this);
  const CardList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.CardList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.CardList)
    MergeFrom(*source);
  }
}

void CardList::MergeFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.CardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CardList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardList::CopyFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void CardList::Swap(CardList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CardList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CardList::UnsafeArenaSwap(CardList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CardList::InternalSwap(CardList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CardList::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerData::InitAsDefaultInstance() {
  ::pvp::_PlayerData_default_instance_._instance.get_mutable()->card_list_ = const_cast< ::pvp::CardList*>(
      ::pvp::CardList::internal_default_instance());
}
void PlayerData::unsafe_arena_set_allocated_card_list(
    ::pvp::CardList* card_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete card_list_;
  }
  card_list_ = card_list;
  if (card_list) {
    set_has_card_list();
  } else {
    clear_has_card_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PlayerData.card_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerData::kPidFieldNumber;
const int PlayerData::kUuidFieldNumber;
const int PlayerData::kNickFieldNumber;
const int PlayerData::kLevelFieldNumber;
const int PlayerData::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerData::PlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PlayerData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PlayerData)
}
PlayerData::PlayerData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PlayerData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PlayerData)
}
PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  if (from.has_card_list()) {
    card_list_ = new ::pvp::CardList(*from.card_list_);
  } else {
    card_list_ = NULL;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:pvp.PlayerData)
}

void PlayerData::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&card_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&card_list_)) + sizeof(level_));
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:pvp.PlayerData)
  SharedDtor();
}

void PlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete card_list_;
}

void PlayerData::ArenaDtor(void* object) {
  PlayerData* _this = reinterpret_cast< PlayerData* >(object);
  (void)_this;
}
void PlayerData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerData& PlayerData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PlayerData.base);
  return *internal_default_instance();
}


void PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(card_list_ != NULL);
      card_list_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PlayerData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.CardList card_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PlayerData)
  return false;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // required uint64 uuid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional bytes nick = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nick(), output);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional .pvp.CardList card_list = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_card_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PlayerData)
}

::google::protobuf::uint8* PlayerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // required uint64 uuid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional bytes nick = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional .pvp.CardList card_list = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_card_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PlayerData)
  return target;
}

size_t PlayerData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pvp.PlayerData)
  size_t total_size = 0;

  if (has_uuid()) {
    // required uint64 uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  if (has_pid()) {
    // required int32 pid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  return total_size;
}
size_t PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PlayerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint64 uuid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());

    // required int32 pid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick());
    }

    // optional .pvp.CardList card_list = 11;
    if (has_card_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *card_list_);
    }

  }
  // optional int32 level = 4;
  if (has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PlayerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PlayerData)
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_card_list()->::pvp::CardList::MergeFrom(from.card_list());
    }
    if (cached_has_bits & 0x00000004u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000008u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_card_list()) {
    if (!this->card_list_->IsInitialized()) return false;
  }
  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlayerData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PlayerData::UnsafeArenaSwap(PlayerData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlayerData::InternalSwap(PlayerData* other) {
  using std::swap;
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(card_list_, other->card_list_);
  swap(uuid_, other->uuid_);
  swap(pid_, other->pid_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInput::kCodeFieldNumber;
const int UserInput::kScoreFieldNumber;
const int UserInput::kStarFieldNumber;
const int UserInput::kPlayeridFieldNumber;
const int UserInput::kCardidFieldNumber;
const int UserInput::kPosXFieldNumber;
const int UserInput::kPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInput::UserInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_UserInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.UserInput)
}
UserInput::UserInput(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_UserInput.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.UserInput)
}
UserInput::UserInput(const UserInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&score_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:pvp.UserInput)
}

void UserInput::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&score_)) + sizeof(pos_y_));
  code_ = 1;
}

UserInput::~UserInput() {
  // @@protoc_insertion_point(destructor:pvp.UserInput)
  SharedDtor();
}

void UserInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserInput::ArenaDtor(void* object) {
  UserInput* _this = reinterpret_cast< UserInput* >(object);
  (void)_this;
}
void UserInput::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserInput::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInput& UserInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_UserInput.base);
  return *internal_default_instance();
}


void UserInput::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.UserInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_y_) -
        reinterpret_cast<char*>(&score_)) + sizeof(pos_y_));
    code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.UserInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pvp.UserInput.INPUT_OPCODE code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::UserInput_INPUT_OPCODE_IsValid(value)) {
            set_code(static_cast< ::pvp::UserInput_INPUT_OPCODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playerid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cardid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_cardid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_x = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_y = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.UserInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.UserInput)
  return false;
#undef DO_
}

void UserInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.UserInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.UserInput.INPUT_OPCODE code = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 star = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 playerid = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->playerid(), output);
  }

  // optional int32 cardid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cardid(), output);
  }

  // optional int32 pos_x = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pos_x(), output);
  }

  // optional int32 pos_y = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pos_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.UserInput)
}

::google::protobuf::uint8* UserInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.UserInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.UserInput.INPUT_OPCODE code = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 star = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 playerid = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->playerid(), target);
  }

  // optional int32 cardid = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cardid(), target);
  }

  // optional int32 pos_x = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pos_x(), target);
  }

  // optional int32 pos_y = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pos_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.UserInput)
  return target;
}

size_t UserInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.UserInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .pvp.UserInput.INPUT_OPCODE code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 playerid = 11;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int32 cardid = 12;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

    // optional int32 pos_x = 13;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 14;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.UserInput)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.UserInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.UserInput)
    MergeFrom(*source);
  }
}

void UserInput::MergeFrom(const UserInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.UserInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      cardid_ = from.cardid_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.UserInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInput::CopyFrom(const UserInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.UserInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  return true;
}

void UserInput::Swap(UserInput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserInput* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserInput::UnsafeArenaSwap(UserInput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserInput::InternalSwap(UserInput* other) {
  using std::swap;
  swap(score_, other->score_);
  swap(star_, other->star_);
  swap(playerid_, other->playerid_);
  swap(cardid_, other->cardid_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(code_, other->code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserInput::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CombatFrame::InitAsDefaultInstance() {
  ::pvp::_CombatFrame_default_instance_._instance.get_mutable()->input_ = const_cast< ::pvp::UserInput*>(
      ::pvp::UserInput::internal_default_instance());
}
void CombatFrame::unsafe_arena_set_allocated_input(
    ::pvp::UserInput* input) {
  if (GetArenaNoVirtual() == NULL) {
    delete input_;
  }
  input_ = input;
  if (input) {
    set_has_input();
  } else {
    clear_has_input();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.CombatFrame.input)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatFrame::kFrameidFieldNumber;
const int CombatFrame::kFrameStateFieldNumber;
const int CombatFrame::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatFrame::CombatFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_CombatFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.CombatFrame)
}
CombatFrame::CombatFrame(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_CombatFrame.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.CombatFrame)
}
CombatFrame::CombatFrame(const CombatFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::pvp::UserInput(*from.input_);
  } else {
    input_ = NULL;
  }
  ::memcpy(&frameid_, &from.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_state_) -
    reinterpret_cast<char*>(&frameid_)) + sizeof(frame_state_));
  // @@protoc_insertion_point(copy_constructor:pvp.CombatFrame)
}

void CombatFrame::SharedCtor() {
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frameid_) -
      reinterpret_cast<char*>(&input_)) + sizeof(frameid_));
  frame_state_ = 1;
}

CombatFrame::~CombatFrame() {
  // @@protoc_insertion_point(destructor:pvp.CombatFrame)
  SharedDtor();
}

void CombatFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete input_;
}

void CombatFrame::ArenaDtor(void* object) {
  CombatFrame* _this = reinterpret_cast< CombatFrame* >(object);
  (void)_this;
}
void CombatFrame::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CombatFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CombatFrame::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CombatFrame& CombatFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_CombatFrame.base);
  return *internal_default_instance();
}


void CombatFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.CombatFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(input_ != NULL);
    input_->Clear();
  }
  if (cached_has_bits & 6u) {
    frameid_ = GOOGLE_LONGLONG(0);
    frame_state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.CombatFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 frameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pvp.CombatFrame.FRAME_STATE frame_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::CombatFrame_FRAME_STATE_IsValid(value)) {
            set_frame_state(static_cast< ::pvp::CombatFrame_FRAME_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.UserInput input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.CombatFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.CombatFrame)
  return false;
#undef DO_
}

void CombatFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.CombatFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 frameid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frameid(), output);
  }

  // required .pvp.CombatFrame.FRAME_STATE frame_state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->frame_state(), output);
  }

  // optional .pvp.UserInput input = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_input(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.CombatFrame)
}

::google::protobuf::uint8* CombatFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.CombatFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 frameid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frameid(), target);
  }

  // required .pvp.CombatFrame.FRAME_STATE frame_state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->frame_state(), target);
  }

  // optional .pvp.UserInput input = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_input(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.CombatFrame)
  return target;
}

size_t CombatFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pvp.CombatFrame)
  size_t total_size = 0;

  if (has_frameid()) {
    // required int64 frameid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frameid());
  }

  if (has_frame_state()) {
    // required .pvp.CombatFrame.FRAME_STATE frame_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame_state());
  }

  return total_size;
}
size_t CombatFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.CombatFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int64 frameid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frameid());

    // required .pvp.CombatFrame.FRAME_STATE frame_state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->frame_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .pvp.UserInput input = 3;
  if (has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CombatFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.CombatFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.CombatFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.CombatFrame)
    MergeFrom(*source);
  }
}

void CombatFrame::MergeFrom(const CombatFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.CombatFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_input()->::pvp::UserInput::MergeFrom(from.input());
    }
    if (cached_has_bits & 0x00000002u) {
      frameid_ = from.frameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_state_ = from.frame_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CombatFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.CombatFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatFrame::CopyFrom(const CombatFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.CombatFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_input()) {
    if (!this->input_->IsInitialized()) return false;
  }
  return true;
}

void CombatFrame::Swap(CombatFrame* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CombatFrame* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CombatFrame::UnsafeArenaSwap(CombatFrame* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CombatFrame::InternalSwap(CombatFrame* other) {
  using std::swap;
  swap(input_, other->input_);
  swap(frameid_, other->frameid_);
  swap(frame_state_, other->frame_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CombatFrame::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CombatFrameList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatFrameList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatFrameList::CombatFrameList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_CombatFrameList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.CombatFrameList)
}
CombatFrameList::CombatFrameList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_CombatFrameList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.CombatFrameList)
}
CombatFrameList::CombatFrameList(const CombatFrameList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pvp.CombatFrameList)
}

void CombatFrameList::SharedCtor() {
}

CombatFrameList::~CombatFrameList() {
  // @@protoc_insertion_point(destructor:pvp.CombatFrameList)
  SharedDtor();
}

void CombatFrameList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CombatFrameList::ArenaDtor(void* object) {
  CombatFrameList* _this = reinterpret_cast< CombatFrameList* >(object);
  (void)_this;
}
void CombatFrameList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CombatFrameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CombatFrameList::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CombatFrameList& CombatFrameList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_CombatFrameList.base);
  return *internal_default_instance();
}


void CombatFrameList::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.CombatFrameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatFrameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.CombatFrameList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pvp.CombatFrame list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.CombatFrameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.CombatFrameList)
  return false;
#undef DO_
}

void CombatFrameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.CombatFrameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pvp.CombatFrame list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.CombatFrameList)
}

::google::protobuf::uint8* CombatFrameList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.CombatFrameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pvp.CombatFrame list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.CombatFrameList)
  return target;
}

size_t CombatFrameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.CombatFrameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pvp.CombatFrame list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CombatFrameList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.CombatFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatFrameList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatFrameList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.CombatFrameList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.CombatFrameList)
    MergeFrom(*source);
  }
}

void CombatFrameList::MergeFrom(const CombatFrameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.CombatFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CombatFrameList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.CombatFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatFrameList::CopyFrom(const CombatFrameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.CombatFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatFrameList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void CombatFrameList::Swap(CombatFrameList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CombatFrameList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CombatFrameList::UnsafeArenaSwap(CombatFrameList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CombatFrameList::InternalSwap(CombatFrameList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CombatFrameList::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CombatResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatResult::kScoreFieldNumber;
const int CombatResult::kStarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatResult::CombatResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_CombatResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.CombatResult)
}
CombatResult::CombatResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_CombatResult.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.CombatResult)
}
CombatResult::CombatResult(const CombatResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_) -
    reinterpret_cast<char*>(&score_)) + sizeof(star_));
  // @@protoc_insertion_point(copy_constructor:pvp.CombatResult)
}

void CombatResult::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_) -
      reinterpret_cast<char*>(&score_)) + sizeof(star_));
}

CombatResult::~CombatResult() {
  // @@protoc_insertion_point(destructor:pvp.CombatResult)
  SharedDtor();
}

void CombatResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CombatResult::ArenaDtor(void* object) {
  CombatResult* _this = reinterpret_cast< CombatResult* >(object);
  (void)_this;
}
void CombatResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CombatResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CombatResult::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CombatResult& CombatResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_CombatResult.base);
  return *internal_default_instance();
}


void CombatResult::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.CombatResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&star_) -
        reinterpret_cast<char*>(&score_)) + sizeof(star_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.CombatResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.CombatResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.CombatResult)
  return false;
#undef DO_
}

void CombatResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.CombatResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 star = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.CombatResult)
}

::google::protobuf::uint8* CombatResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.CombatResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 star = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.CombatResult)
  return target;
}

size_t CombatResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.CombatResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CombatResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.CombatResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.CombatResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.CombatResult)
    MergeFrom(*source);
  }
}

void CombatResult::MergeFrom(const CombatResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.CombatResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      star_ = from.star_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CombatResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.CombatResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatResult::CopyFrom(const CombatResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.CombatResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatResult::IsInitialized() const {
  return true;
}

void CombatResult::Swap(CombatResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CombatResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CombatResult::UnsafeArenaSwap(CombatResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CombatResult::InternalSwap(CombatResult* other) {
  using std::swap;
  swap(score_, other->score_);
  swap(star_, other->star_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CombatResult::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpCombat::InitAsDefaultInstance() {
  ::pvp::_PvpCombat_default_instance_._instance.get_mutable()->stage_data_ = const_cast< ::pvp::StageData*>(
      ::pvp::StageData::internal_default_instance());
  ::pvp::_PvpCombat_default_instance_._instance.get_mutable()->rand_list_ = const_cast< ::pvp::RandList*>(
      ::pvp::RandList::internal_default_instance());
}
void PvpCombat::unsafe_arena_set_allocated_stage_data(
    ::pvp::StageData* stage_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete stage_data_;
  }
  stage_data_ = stage_data;
  if (stage_data) {
    set_has_stage_data();
  } else {
    clear_has_stage_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpCombat.stage_data)
}
void PvpCombat::unsafe_arena_set_allocated_rand_list(
    ::pvp::RandList* rand_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete rand_list_;
  }
  rand_list_ = rand_list;
  if (rand_list) {
    set_has_rand_list();
  } else {
    clear_has_rand_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpCombat.rand_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpCombat::kCombatidFieldNumber;
const int PvpCombat::kCombatTypeFieldNumber;
const int PvpCombat::kStageDataFieldNumber;
const int PvpCombat::kRandListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpCombat::PvpCombat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpCombat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpCombat)
}
PvpCombat::PvpCombat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpCombat.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpCombat)
}
PvpCombat::PvpCombat(const PvpCombat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stage_data()) {
    stage_data_ = new ::pvp::StageData(*from.stage_data_);
  } else {
    stage_data_ = NULL;
  }
  if (from.has_rand_list()) {
    rand_list_ = new ::pvp::RandList(*from.rand_list_);
  } else {
    rand_list_ = NULL;
  }
  ::memcpy(&combatid_, &from.combatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&combat_type_) -
    reinterpret_cast<char*>(&combatid_)) + sizeof(combat_type_));
  // @@protoc_insertion_point(copy_constructor:pvp.PvpCombat)
}

void PvpCombat::SharedCtor() {
  ::memset(&stage_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&combat_type_) -
      reinterpret_cast<char*>(&stage_data_)) + sizeof(combat_type_));
}

PvpCombat::~PvpCombat() {
  // @@protoc_insertion_point(destructor:pvp.PvpCombat)
  SharedDtor();
}

void PvpCombat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete stage_data_;
  if (this != internal_default_instance()) delete rand_list_;
}

void PvpCombat::ArenaDtor(void* object) {
  PvpCombat* _this = reinterpret_cast< PvpCombat* >(object);
  (void)_this;
}
void PvpCombat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpCombat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpCombat::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpCombat& PvpCombat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpCombat.base);
  return *internal_default_instance();
}


void PvpCombat::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpCombat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stage_data_ != NULL);
      stage_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rand_list_ != NULL);
      rand_list_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&combatid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&combat_type_) -
        reinterpret_cast<char*>(&combatid_)) + sizeof(combat_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpCombat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpCombat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 combatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_combatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pvp.COMBAT_TYPE combat_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::COMBAT_TYPE_IsValid(value)) {
            set_combat_type(static_cast< ::pvp::COMBAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.StageData stage_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stage_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.RandList rand_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rand_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpCombat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpCombat)
  return false;
#undef DO_
}

void PvpCombat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpCombat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 combatid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->combatid(), output);
  }

  // required .pvp.COMBAT_TYPE combat_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->combat_type(), output);
  }

  // optional .pvp.StageData stage_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_stage_data(), output);
  }

  // optional .pvp.RandList rand_list = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_rand_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpCombat)
}

::google::protobuf::uint8* PvpCombat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpCombat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 combatid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->combatid(), target);
  }

  // required .pvp.COMBAT_TYPE combat_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->combat_type(), target);
  }

  // optional .pvp.StageData stage_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_stage_data(), deterministic, target);
  }

  // optional .pvp.RandList rand_list = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_rand_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpCombat)
  return target;
}

size_t PvpCombat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pvp.PvpCombat)
  size_t total_size = 0;

  if (has_combatid()) {
    // required int32 combatid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combatid());
  }

  if (has_combat_type()) {
    // required .pvp.COMBAT_TYPE combat_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->combat_type());
  }

  return total_size;
}
size_t PvpCombat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpCombat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required int32 combatid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combatid());

    // required .pvp.COMBAT_TYPE combat_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->combat_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .pvp.StageData stage_data = 3;
    if (has_stage_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stage_data_);
    }

    // optional .pvp.RandList rand_list = 4;
    if (has_rand_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rand_list_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpCombat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpCombat)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpCombat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpCombat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpCombat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpCombat)
    MergeFrom(*source);
  }
}

void PvpCombat::MergeFrom(const PvpCombat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpCombat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stage_data()->::pvp::StageData::MergeFrom(from.stage_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rand_list()->::pvp::RandList::MergeFrom(from.rand_list());
    }
    if (cached_has_bits & 0x00000004u) {
      combatid_ = from.combatid_;
    }
    if (cached_has_bits & 0x00000008u) {
      combat_type_ = from.combat_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PvpCombat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpCombat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpCombat::CopyFrom(const PvpCombat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpCombat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpCombat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_stage_data()) {
    if (!this->stage_data_->IsInitialized()) return false;
  }
  return true;
}

void PvpCombat::Swap(PvpCombat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpCombat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpCombat::UnsafeArenaSwap(PvpCombat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpCombat::InternalSwap(PvpCombat* other) {
  using std::swap;
  swap(stage_data_, other->stage_data_);
  swap(rand_list_, other->rand_list_);
  swap(combatid_, other->combatid_);
  swap(combat_type_, other->combat_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpCombat::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpService_PvpRequest::InitAsDefaultInstance() {
  ::pvp::_PvpService_PvpRequest_default_instance_._instance.get_mutable()->stage_data_ = const_cast< ::pvp::StageData*>(
      ::pvp::StageData::internal_default_instance());
  ::pvp::_PvpService_PvpRequest_default_instance_._instance.get_mutable()->card_list_ = const_cast< ::pvp::CardList*>(
      ::pvp::CardList::internal_default_instance());
  ::pvp::_PvpService_PvpRequest_default_instance_._instance.get_mutable()->user_input_ = const_cast< ::pvp::UserInput*>(
      ::pvp::UserInput::internal_default_instance());
}
void PvpService_PvpRequest::unsafe_arena_set_allocated_stage_data(
    ::pvp::StageData* stage_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete stage_data_;
  }
  stage_data_ = stage_data;
  if (stage_data) {
    set_has_stage_data();
  } else {
    clear_has_stage_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpService.PvpRequest.stage_data)
}
void PvpService_PvpRequest::unsafe_arena_set_allocated_card_list(
    ::pvp::CardList* card_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete card_list_;
  }
  card_list_ = card_list;
  if (card_list) {
    set_has_card_list();
  } else {
    clear_has_card_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpService.PvpRequest.card_list)
}
void PvpService_PvpRequest::unsafe_arena_set_allocated_user_input(
    ::pvp::UserInput* user_input) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_input_;
  }
  user_input_ = user_input;
  if (user_input) {
    set_has_user_input();
  } else {
    clear_has_user_input();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpService.PvpRequest.user_input)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpService_PvpRequest::kCmdFieldNumber;
const int PvpService_PvpRequest::kCombatTypeFieldNumber;
const int PvpService_PvpRequest::kStageDataFieldNumber;
const int PvpService_PvpRequest::kCardListFieldNumber;
const int PvpService_PvpRequest::kSelectCardListFieldNumber;
const int PvpService_PvpRequest::kUserInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpService_PvpRequest::PvpService_PvpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpService_PvpRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpService.PvpRequest)
}
PvpService_PvpRequest::PvpService_PvpRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  select_card_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpService_PvpRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpService.PvpRequest)
}
PvpService_PvpRequest::PvpService_PvpRequest(const PvpService_PvpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      select_card_list_(from.select_card_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stage_data()) {
    stage_data_ = new ::pvp::StageData(*from.stage_data_);
  } else {
    stage_data_ = NULL;
  }
  if (from.has_card_list()) {
    card_list_ = new ::pvp::CardList(*from.card_list_);
  } else {
    card_list_ = NULL;
  }
  if (from.has_user_input()) {
    user_input_ = new ::pvp::UserInput(*from.user_input_);
  } else {
    user_input_ = NULL;
  }
  ::memcpy(&combat_type_, &from.combat_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&combat_type_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:pvp.PvpService.PvpRequest)
}

void PvpService_PvpRequest::SharedCtor() {
  ::memset(&stage_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&combat_type_) -
      reinterpret_cast<char*>(&stage_data_)) + sizeof(combat_type_));
  cmd_ = 1;
}

PvpService_PvpRequest::~PvpService_PvpRequest() {
  // @@protoc_insertion_point(destructor:pvp.PvpService.PvpRequest)
  SharedDtor();
}

void PvpService_PvpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete stage_data_;
  if (this != internal_default_instance()) delete card_list_;
  if (this != internal_default_instance()) delete user_input_;
}

void PvpService_PvpRequest::ArenaDtor(void* object) {
  PvpService_PvpRequest* _this = reinterpret_cast< PvpService_PvpRequest* >(object);
  (void)_this;
}
void PvpService_PvpRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpService_PvpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpService_PvpRequest::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpService_PvpRequest& PvpService_PvpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpService_PvpRequest.base);
  return *internal_default_instance();
}


void PvpService_PvpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpService.PvpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  select_card_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stage_data_ != NULL);
      stage_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(card_list_ != NULL);
      card_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(user_input_ != NULL);
      user_input_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    combat_type_ = 0;
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpService_PvpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpService.PvpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pvp.PvpService.PVP_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::PvpService_PVP_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::pvp::PvpService_PVP_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.COMBAT_TYPE combat_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::COMBAT_TYPE_IsValid(value)) {
            set_combat_type(static_cast< ::pvp::COMBAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.StageData stage_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stage_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.CardList card_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 select_card_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88u, input, this->mutable_select_card_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_select_card_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.UserInput user_input = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpService.PvpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpService.PvpRequest)
  return false;
#undef DO_
}

void PvpService_PvpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpService.PvpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.PvpService.PVP_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .pvp.COMBAT_TYPE combat_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->combat_type(), output);
  }

  // optional .pvp.StageData stage_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_stage_data(), output);
  }

  // optional .pvp.CardList card_list = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_card_list(), output);
  }

  // repeated int32 select_card_list = 11;
  for (int i = 0, n = this->select_card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->select_card_list(i), output);
  }

  // optional .pvp.UserInput user_input = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_user_input(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpService.PvpRequest)
}

::google::protobuf::uint8* PvpService_PvpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpService.PvpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.PvpService.PVP_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .pvp.COMBAT_TYPE combat_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->combat_type(), target);
  }

  // optional .pvp.StageData stage_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_stage_data(), deterministic, target);
  }

  // optional .pvp.CardList card_list = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_card_list(), deterministic, target);
  }

  // repeated int32 select_card_list = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(11, this->select_card_list_, target);

  // optional .pvp.UserInput user_input = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_user_input(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpService.PvpRequest)
  return target;
}

size_t PvpService_PvpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpService.PvpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .pvp.PvpService.PVP_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // repeated int32 select_card_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->select_card_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->select_card_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .pvp.StageData stage_data = 3;
    if (has_stage_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stage_data_);
    }

    // optional .pvp.CardList card_list = 4;
    if (has_card_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *card_list_);
    }

    // optional .pvp.UserInput user_input = 12;
    if (has_user_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_input_);
    }

    // optional .pvp.COMBAT_TYPE combat_type = 2;
    if (has_combat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->combat_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpService_PvpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpService.PvpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpService_PvpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpService_PvpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpService.PvpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpService.PvpRequest)
    MergeFrom(*source);
  }
}

void PvpService_PvpRequest::MergeFrom(const PvpService_PvpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpService.PvpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  select_card_list_.MergeFrom(from.select_card_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stage_data()->::pvp::StageData::MergeFrom(from.stage_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_card_list()->::pvp::CardList::MergeFrom(from.card_list());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user_input()->::pvp::UserInput::MergeFrom(from.user_input());
    }
    if (cached_has_bits & 0x00000008u) {
      combat_type_ = from.combat_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PvpService_PvpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpService.PvpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpService_PvpRequest::CopyFrom(const PvpService_PvpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpService.PvpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpService_PvpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_stage_data()) {
    if (!this->stage_data_->IsInitialized()) return false;
  }
  if (has_card_list()) {
    if (!this->card_list_->IsInitialized()) return false;
  }
  if (has_user_input()) {
    if (!this->user_input_->IsInitialized()) return false;
  }
  return true;
}

void PvpService_PvpRequest::Swap(PvpService_PvpRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpService_PvpRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpService_PvpRequest::UnsafeArenaSwap(PvpService_PvpRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpService_PvpRequest::InternalSwap(PvpService_PvpRequest* other) {
  using std::swap;
  select_card_list_.InternalSwap(&other->select_card_list_);
  swap(stage_data_, other->stage_data_);
  swap(card_list_, other->card_list_);
  swap(user_input_, other->user_input_);
  swap(combat_type_, other->combat_type_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpService_PvpRequest::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpService_PvpResponse::InitAsDefaultInstance() {
  ::pvp::_PvpService_PvpResponse_default_instance_._instance.get_mutable()->combat_ = const_cast< ::pvp::PvpCombat*>(
      ::pvp::PvpCombat::internal_default_instance());
}
void PvpService_PvpResponse::unsafe_arena_set_allocated_combat(
    ::pvp::PvpCombat* combat) {
  if (GetArenaNoVirtual() == NULL) {
    delete combat_;
  }
  combat_ = combat;
  if (combat) {
    set_has_combat();
  } else {
    clear_has_combat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpService.PvpResponse.combat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpService_PvpResponse::kResultFieldNumber;
const int PvpService_PvpResponse::kCombatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpService_PvpResponse::PvpService_PvpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpService_PvpResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpService.PvpResponse)
}
PvpService_PvpResponse::PvpService_PvpResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpService_PvpResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpService.PvpResponse)
}
PvpService_PvpResponse::PvpService_PvpResponse(const PvpService_PvpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_combat()) {
    combat_ = new ::pvp::PvpCombat(*from.combat_);
  } else {
    combat_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pvp.PvpService.PvpResponse)
}

void PvpService_PvpResponse::SharedCtor() {
  ::memset(&combat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&combat_)) + sizeof(result_));
}

PvpService_PvpResponse::~PvpService_PvpResponse() {
  // @@protoc_insertion_point(destructor:pvp.PvpService.PvpResponse)
  SharedDtor();
}

void PvpService_PvpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete combat_;
}

void PvpService_PvpResponse::ArenaDtor(void* object) {
  PvpService_PvpResponse* _this = reinterpret_cast< PvpService_PvpResponse* >(object);
  (void)_this;
}
void PvpService_PvpResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpService_PvpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpService_PvpResponse::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpService_PvpResponse& PvpService_PvpResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpService_PvpResponse.base);
  return *internal_default_instance();
}


void PvpService_PvpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpService.PvpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(combat_ != NULL);
    combat_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpService_PvpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpService.PvpResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.PvpCombat combat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_combat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpService.PvpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpService.PvpResponse)
  return false;
#undef DO_
}

void PvpService_PvpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpService.PvpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .pvp.PvpCombat combat = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_combat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpService.PvpResponse)
}

::google::protobuf::uint8* PvpService_PvpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpService.PvpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .pvp.PvpCombat combat = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_combat(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpService.PvpResponse)
  return target;
}

size_t PvpService_PvpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpService.PvpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional .pvp.PvpCombat combat = 2;
  if (has_combat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *combat_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpService_PvpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpService.PvpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpService_PvpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpService_PvpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpService.PvpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpService.PvpResponse)
    MergeFrom(*source);
  }
}

void PvpService_PvpResponse::MergeFrom(const PvpService_PvpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpService.PvpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_combat()->::pvp::PvpCombat::MergeFrom(from.combat());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PvpService_PvpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpService.PvpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpService_PvpResponse::CopyFrom(const PvpService_PvpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpService.PvpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpService_PvpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_combat()) {
    if (!this->combat_->IsInitialized()) return false;
  }
  return true;
}

void PvpService_PvpResponse::Swap(PvpService_PvpResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpService_PvpResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpService_PvpResponse::UnsafeArenaSwap(PvpService_PvpResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpService_PvpResponse::InternalSwap(PvpService_PvpResponse* other) {
  using std::swap;
  swap(combat_, other->combat_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpService_PvpResponse::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpService::InitAsDefaultInstance() {
  ::pvp::_PvpService_default_instance_._instance.get_mutable()->req_ = const_cast< ::pvp::PvpService_PvpRequest*>(
      ::pvp::PvpService_PvpRequest::internal_default_instance());
  ::pvp::_PvpService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::pvp::PvpService_PvpResponse*>(
      ::pvp::PvpService_PvpResponse::internal_default_instance());
}
void PvpService::unsafe_arena_set_allocated_req(
    ::pvp::PvpService_PvpRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpService.req)
}
void PvpService::unsafe_arena_set_allocated_resp(
    ::pvp::PvpService_PvpResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpService::kReqFieldNumber;
const int PvpService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpService::PvpService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpService)
}
PvpService::PvpService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpService)
}
PvpService::PvpService(const PvpService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::pvp::PvpService_PvpRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::pvp::PvpService_PvpResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pvp.PvpService)
}

void PvpService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

PvpService::~PvpService() {
  // @@protoc_insertion_point(destructor:pvp.PvpService)
  SharedDtor();
}

void PvpService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void PvpService::ArenaDtor(void* object) {
  PvpService* _this = reinterpret_cast< PvpService* >(object);
  (void)_this;
}
void PvpService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpService::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpService& PvpService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpService.base);
  return *internal_default_instance();
}


void PvpService::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pvp.PvpService.PvpRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.PvpService.PvpResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpService)
  return false;
#undef DO_
}

void PvpService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pvp.PvpService.PvpRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .pvp.PvpService.PvpResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpService)
}

::google::protobuf::uint8* PvpService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pvp.PvpService.PvpRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .pvp.PvpService.PvpResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpService)
  return target;
}

size_t PvpService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .pvp.PvpService.PvpRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .pvp.PvpService.PvpResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpService)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpService)
    MergeFrom(*source);
  }
}

void PvpService::MergeFrom(const PvpService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::pvp::PvpService_PvpRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::pvp::PvpService_PvpResponse::MergeFrom(from.resp());
    }
  }
}

void PvpService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpService::CopyFrom(const PvpService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void PvpService::Swap(PvpService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpService::UnsafeArenaSwap(PvpService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpService::InternalSwap(PvpService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpService::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpCombatStartNotify::InitAsDefaultInstance() {
  ::pvp::_PvpCombatStartNotify_default_instance_._instance.get_mutable()->player0_ = const_cast< ::pvp::PlayerData*>(
      ::pvp::PlayerData::internal_default_instance());
  ::pvp::_PvpCombatStartNotify_default_instance_._instance.get_mutable()->player1_ = const_cast< ::pvp::PlayerData*>(
      ::pvp::PlayerData::internal_default_instance());
}
void PvpCombatStartNotify::unsafe_arena_set_allocated_player0(
    ::pvp::PlayerData* player0) {
  if (GetArenaNoVirtual() == NULL) {
    delete player0_;
  }
  player0_ = player0;
  if (player0) {
    set_has_player0();
  } else {
    clear_has_player0();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpCombatStartNotify.player0)
}
void PvpCombatStartNotify::unsafe_arena_set_allocated_player1(
    ::pvp::PlayerData* player1) {
  if (GetArenaNoVirtual() == NULL) {
    delete player1_;
  }
  player1_ = player1;
  if (player1) {
    set_has_player1();
  } else {
    clear_has_player1();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpCombatStartNotify.player1)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpCombatStartNotify::kPlayer0FieldNumber;
const int PvpCombatStartNotify::kPlayer1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpCombatStartNotify::PvpCombatStartNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpCombatStartNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpCombatStartNotify)
}
PvpCombatStartNotify::PvpCombatStartNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpCombatStartNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpCombatStartNotify)
}
PvpCombatStartNotify::PvpCombatStartNotify(const PvpCombatStartNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player0()) {
    player0_ = new ::pvp::PlayerData(*from.player0_);
  } else {
    player0_ = NULL;
  }
  if (from.has_player1()) {
    player1_ = new ::pvp::PlayerData(*from.player1_);
  } else {
    player1_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pvp.PvpCombatStartNotify)
}

void PvpCombatStartNotify::SharedCtor() {
  ::memset(&player0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player1_) -
      reinterpret_cast<char*>(&player0_)) + sizeof(player1_));
}

PvpCombatStartNotify::~PvpCombatStartNotify() {
  // @@protoc_insertion_point(destructor:pvp.PvpCombatStartNotify)
  SharedDtor();
}

void PvpCombatStartNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete player0_;
  if (this != internal_default_instance()) delete player1_;
}

void PvpCombatStartNotify::ArenaDtor(void* object) {
  PvpCombatStartNotify* _this = reinterpret_cast< PvpCombatStartNotify* >(object);
  (void)_this;
}
void PvpCombatStartNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpCombatStartNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpCombatStartNotify::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpCombatStartNotify& PvpCombatStartNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpCombatStartNotify.base);
  return *internal_default_instance();
}


void PvpCombatStartNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpCombatStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player0_ != NULL);
      player0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player1_ != NULL);
      player1_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpCombatStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpCombatStartNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pvp.PlayerData player0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pvp.PlayerData player1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpCombatStartNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpCombatStartNotify)
  return false;
#undef DO_
}

void PvpCombatStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpCombatStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.PlayerData player0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player0(), output);
  }

  // required .pvp.PlayerData player1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_player1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpCombatStartNotify)
}

::google::protobuf::uint8* PvpCombatStartNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpCombatStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.PlayerData player0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player0(), deterministic, target);
  }

  // required .pvp.PlayerData player1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_player1(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpCombatStartNotify)
  return target;
}

size_t PvpCombatStartNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pvp.PvpCombatStartNotify)
  size_t total_size = 0;

  if (has_player0()) {
    // required .pvp.PlayerData player0 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player0_);
  }

  if (has_player1()) {
    // required .pvp.PlayerData player1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player1_);
  }

  return total_size;
}
size_t PvpCombatStartNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpCombatStartNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pvp.PlayerData player0 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player0_);

    // required .pvp.PlayerData player1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player1_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpCombatStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpCombatStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpCombatStartNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpCombatStartNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpCombatStartNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpCombatStartNotify)
    MergeFrom(*source);
  }
}

void PvpCombatStartNotify::MergeFrom(const PvpCombatStartNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpCombatStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player0()->::pvp::PlayerData::MergeFrom(from.player0());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player1()->::pvp::PlayerData::MergeFrom(from.player1());
    }
  }
}

void PvpCombatStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpCombatStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpCombatStartNotify::CopyFrom(const PvpCombatStartNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpCombatStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpCombatStartNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_player0()) {
    if (!this->player0_->IsInitialized()) return false;
  }
  if (has_player1()) {
    if (!this->player1_->IsInitialized()) return false;
  }
  return true;
}

void PvpCombatStartNotify::Swap(PvpCombatStartNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpCombatStartNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpCombatStartNotify::UnsafeArenaSwap(PvpCombatStartNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpCombatStartNotify::InternalSwap(PvpCombatStartNotify* other) {
  using std::swap;
  swap(player0_, other->player0_);
  swap(player1_, other->player1_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpCombatStartNotify::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpFrameNotify::InitAsDefaultInstance() {
  ::pvp::_PvpFrameNotify_default_instance_._instance.get_mutable()->frame_list_ = const_cast< ::pvp::CombatFrameList*>(
      ::pvp::CombatFrameList::internal_default_instance());
  ::pvp::_PvpFrameNotify_default_instance_._instance.get_mutable()->result_ = const_cast< ::pvp::CombatResult*>(
      ::pvp::CombatResult::internal_default_instance());
}
void PvpFrameNotify::unsafe_arena_set_allocated_frame_list(
    ::pvp::CombatFrameList* frame_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete frame_list_;
  }
  frame_list_ = frame_list;
  if (frame_list) {
    set_has_frame_list();
  } else {
    clear_has_frame_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpFrameNotify.frame_list)
}
void PvpFrameNotify::unsafe_arena_set_allocated_result(
    ::pvp::CombatResult* result) {
  if (GetArenaNoVirtual() == NULL) {
    delete result_;
  }
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpFrameNotify.result)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpFrameNotify::kFrameListFieldNumber;
const int PvpFrameNotify::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpFrameNotify::PvpFrameNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpFrameNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpFrameNotify)
}
PvpFrameNotify::PvpFrameNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpFrameNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpFrameNotify)
}
PvpFrameNotify::PvpFrameNotify(const PvpFrameNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frame_list()) {
    frame_list_ = new ::pvp::CombatFrameList(*from.frame_list_);
  } else {
    frame_list_ = NULL;
  }
  if (from.has_result()) {
    result_ = new ::pvp::CombatResult(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pvp.PvpFrameNotify)
}

void PvpFrameNotify::SharedCtor() {
  ::memset(&frame_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&frame_list_)) + sizeof(result_));
}

PvpFrameNotify::~PvpFrameNotify() {
  // @@protoc_insertion_point(destructor:pvp.PvpFrameNotify)
  SharedDtor();
}

void PvpFrameNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete frame_list_;
  if (this != internal_default_instance()) delete result_;
}

void PvpFrameNotify::ArenaDtor(void* object) {
  PvpFrameNotify* _this = reinterpret_cast< PvpFrameNotify* >(object);
  (void)_this;
}
void PvpFrameNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpFrameNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpFrameNotify::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpFrameNotify& PvpFrameNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpFrameNotify.base);
  return *internal_default_instance();
}


void PvpFrameNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpFrameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(frame_list_ != NULL);
      frame_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(result_ != NULL);
      result_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpFrameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpFrameNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pvp.CombatFrameList frame_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.CombatResult result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpFrameNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpFrameNotify)
  return false;
#undef DO_
}

void PvpFrameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpFrameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.CombatFrameList frame_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_frame_list(), output);
  }

  // optional .pvp.CombatResult result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpFrameNotify)
}

::google::protobuf::uint8* PvpFrameNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpFrameNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.CombatFrameList frame_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_frame_list(), deterministic, target);
  }

  // optional .pvp.CombatResult result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_result(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpFrameNotify)
  return target;
}

size_t PvpFrameNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpFrameNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .pvp.CombatFrameList frame_list = 1;
  if (has_frame_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frame_list_);
  }
  // optional .pvp.CombatResult result = 2;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpFrameNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpFrameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpFrameNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpFrameNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpFrameNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpFrameNotify)
    MergeFrom(*source);
  }
}

void PvpFrameNotify::MergeFrom(const PvpFrameNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpFrameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_frame_list()->::pvp::CombatFrameList::MergeFrom(from.frame_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_result()->::pvp::CombatResult::MergeFrom(from.result());
    }
  }
}

void PvpFrameNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpFrameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpFrameNotify::CopyFrom(const PvpFrameNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpFrameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpFrameNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_frame_list()) {
    if (!this->frame_list_->IsInitialized()) return false;
  }
  return true;
}

void PvpFrameNotify::Swap(PvpFrameNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpFrameNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpFrameNotify::UnsafeArenaSwap(PvpFrameNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpFrameNotify::InternalSwap(PvpFrameNotify* other) {
  using std::swap;
  swap(frame_list_, other->frame_list_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpFrameNotify::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpReward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpReward::kTypeidFieldNumber;
const int PvpReward::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpReward::PvpReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpReward.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpReward)
}
PvpReward::PvpReward(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpReward.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpReward)
}
PvpReward::PvpReward(const PvpReward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&typeid__, &from.typeid__,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&typeid__)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:pvp.PvpReward)
}

void PvpReward::SharedCtor() {
  ::memset(&typeid__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&typeid__)) + sizeof(num_));
}

PvpReward::~PvpReward() {
  // @@protoc_insertion_point(destructor:pvp.PvpReward)
  SharedDtor();
}

void PvpReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PvpReward::ArenaDtor(void* object) {
  PvpReward* _this = reinterpret_cast< PvpReward* >(object);
  (void)_this;
}
void PvpReward::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpReward::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpReward& PvpReward::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpReward.base);
  return *internal_default_instance();
}


void PvpReward::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&typeid__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&typeid__)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpReward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 typeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_typeid_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpReward)
  return false;
#undef DO_
}

void PvpReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->typeid_(), output);
  }

  // required uint64 num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpReward)
}

::google::protobuf::uint8* PvpReward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpReward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->typeid_(), target);
  }

  // required uint64 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpReward)
  return target;
}

size_t PvpReward::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pvp.PvpReward)
  size_t total_size = 0;

  if (has_typeid_()) {
    // required uint64 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->typeid_());
  }

  if (has_num()) {
    // required uint64 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num());
  }

  return total_size;
}
size_t PvpReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpReward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 typeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->typeid_());

    // required uint64 num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpReward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpReward)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpReward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpReward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpReward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpReward)
    MergeFrom(*source);
  }
}

void PvpReward::MergeFrom(const PvpReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PvpReward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpReward::CopyFrom(const PvpReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PvpReward::Swap(PvpReward* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpReward* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpReward::UnsafeArenaSwap(PvpReward* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpReward::InternalSwap(PvpReward* other) {
  using std::swap;
  swap(typeid__, other->typeid__);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpReward::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpRewardNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpRewardNotify::kCombatidFieldNumber;
const int PvpRewardNotify::kRewardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpRewardNotify::PvpRewardNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpRewardNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpRewardNotify)
}
PvpRewardNotify::PvpRewardNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reward_list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpRewardNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpRewardNotify)
}
PvpRewardNotify::PvpRewardNotify(const PvpRewardNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  combatid_ = from.combatid_;
  // @@protoc_insertion_point(copy_constructor:pvp.PvpRewardNotify)
}

void PvpRewardNotify::SharedCtor() {
  combatid_ = 0;
}

PvpRewardNotify::~PvpRewardNotify() {
  // @@protoc_insertion_point(destructor:pvp.PvpRewardNotify)
  SharedDtor();
}

void PvpRewardNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PvpRewardNotify::ArenaDtor(void* object) {
  PvpRewardNotify* _this = reinterpret_cast< PvpRewardNotify* >(object);
  (void)_this;
}
void PvpRewardNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpRewardNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpRewardNotify::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpRewardNotify& PvpRewardNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpRewardNotify.base);
  return *internal_default_instance();
}


void PvpRewardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpRewardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  combatid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpRewardNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 combatid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_combatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pvp.PvpReward reward_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reward_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpRewardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpRewardNotify)
  return false;
#undef DO_
}

void PvpRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpRewardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 combatid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->combatid(), output);
  }

  // repeated .pvp.PvpReward reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->reward_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpRewardNotify)
}

::google::protobuf::uint8* PvpRewardNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpRewardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 combatid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->combatid(), target);
  }

  // repeated .pvp.PvpReward reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->reward_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpRewardNotify)
  return target;
}

size_t PvpRewardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpRewardNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 combatid = 1;
  if (has_combatid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combatid());
  }
  // repeated .pvp.PvpReward reward_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->reward_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reward_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpRewardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpRewardNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpRewardNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpRewardNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpRewardNotify)
    MergeFrom(*source);
  }
}

void PvpRewardNotify::MergeFrom(const PvpRewardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpRewardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.has_combatid()) {
    set_combatid(from.combatid());
  }
}

void PvpRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpRewardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRewardNotify::CopyFrom(const PvpRewardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpRewardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRewardNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward_list())) return false;
  return true;
}

void PvpRewardNotify::Swap(PvpRewardNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpRewardNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpRewardNotify::UnsafeArenaSwap(PvpRewardNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpRewardNotify::InternalSwap(PvpRewardNotify* other) {
  using std::swap;
  CastToBase(&reward_list_)->InternalSwap(CastToBase(&other->reward_list_));
  swap(combatid_, other->combatid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpRewardNotify::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpEventLog::InitAsDefaultInstance() {
  ::pvp::_PvpEventLog_default_instance_._instance.get_mutable()->source_card_list_ = const_cast< ::pvp::CardList*>(
      ::pvp::CardList::internal_default_instance());
}
void PvpEventLog::unsafe_arena_set_allocated_source_card_list(
    ::pvp::CardList* source_card_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_card_list_;
  }
  source_card_list_ = source_card_list;
  if (source_card_list) {
    set_has_source_card_list();
  } else {
    clear_has_source_card_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpEventLog.source_card_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpEventLog::kIdFieldNumber;
const int PvpEventLog::kEventTypeFieldNumber;
const int PvpEventLog::kEventStateFieldNumber;
const int PvpEventLog::kDefendStateFieldNumber;
const int PvpEventLog::kSourceNickFieldNumber;
const int PvpEventLog::kSourceCardListFieldNumber;
const int PvpEventLog::kGoldLockFieldNumber;
const int PvpEventLog::kGoldRefundFieldNumber;
const int PvpEventLog::kOptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpEventLog::PvpEventLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpEventLog.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpEventLog)
}
PvpEventLog::PvpEventLog(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpEventLog.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpEventLog)
}
PvpEventLog::PvpEventLog(const PvpEventLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_nick()) {
    source_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_nick(),
      GetArenaNoVirtual());
  }
  if (from.has_source_card_list()) {
    source_card_list_ = new ::pvp::CardList(*from.source_card_list_);
  } else {
    source_card_list_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(event_type_));
  // @@protoc_insertion_point(copy_constructor:pvp.PvpEventLog)
}

void PvpEventLog::SharedCtor() {
  source_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_card_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optime_) -
      reinterpret_cast<char*>(&source_card_list_)) + sizeof(optime_));
  event_type_ = 1;
}

PvpEventLog::~PvpEventLog() {
  // @@protoc_insertion_point(destructor:pvp.PvpEventLog)
  SharedDtor();
}

void PvpEventLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  source_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_card_list_;
}

void PvpEventLog::ArenaDtor(void* object) {
  PvpEventLog* _this = reinterpret_cast< PvpEventLog* >(object);
  (void)_this;
}
void PvpEventLog::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpEventLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpEventLog::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpEventLog& PvpEventLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpEventLog.base);
  return *internal_default_instance();
}


void PvpEventLog::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpEventLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_card_list_ != NULL);
      source_card_list_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optime_) -
        reinterpret_cast<char*>(&id_)) + sizeof(optime_));
  }
  event_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpEventLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpEventLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pvp.PVP_EVENT_TYPE event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::PVP_EVENT_TYPE_IsValid(value)) {
            set_event_type(static_cast< ::pvp::PVP_EVENT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 event_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_event_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pvp.PvpEventLog.DEFEND_STATE defend_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::PvpEventLog_DEFEND_STATE_IsValid(value)) {
            set_defend_state(static_cast< ::pvp::PvpEventLog_DEFEND_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes source_nick = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pvp.CardList source_card_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold_lock = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_gold_lock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold_refund = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_gold_refund();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_refund_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 optime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_optime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpEventLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpEventLog)
  return false;
#undef DO_
}

void PvpEventLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpEventLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .pvp.PVP_EVENT_TYPE event_type = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // required int32 event_state = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_state(), output);
  }

  // required .pvp.PvpEventLog.DEFEND_STATE defend_state = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->defend_state(), output);
  }

  // required bytes source_nick = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->source_nick(), output);
  }

  // required .pvp.CardList source_card_list = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_source_card_list(), output);
  }

  // required int32 gold_lock = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gold_lock(), output);
  }

  // required int32 gold_refund = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold_refund(), output);
  }

  // optional sfixed64 optime = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->optime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpEventLog)
}

::google::protobuf::uint8* PvpEventLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpEventLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .pvp.PVP_EVENT_TYPE event_type = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // required int32 event_state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_state(), target);
  }

  // required .pvp.PvpEventLog.DEFEND_STATE defend_state = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->defend_state(), target);
  }

  // required bytes source_nick = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->source_nick(), target);
  }

  // required .pvp.CardList source_card_list = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_source_card_list(), deterministic, target);
  }

  // required int32 gold_lock = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gold_lock(), target);
  }

  // required int32 gold_refund = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gold_refund(), target);
  }

  // optional sfixed64 optime = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->optime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpEventLog)
  return target;
}

size_t PvpEventLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pvp.PvpEventLog)
  size_t total_size = 0;

  if (has_source_nick()) {
    // required bytes source_nick = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_nick());
  }

  if (has_source_card_list()) {
    // required .pvp.CardList source_card_list = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_card_list_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_event_state()) {
    // required int32 event_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_state());
  }

  if (has_defend_state()) {
    // required .pvp.PvpEventLog.DEFEND_STATE defend_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->defend_state());
  }

  if (has_gold_lock()) {
    // required int32 gold_lock = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_lock());
  }

  if (has_gold_refund()) {
    // required int32 gold_refund = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_refund());
  }

  if (has_event_type()) {
    // required .pvp.PVP_EVENT_TYPE event_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  return total_size;
}
size_t PvpEventLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpEventLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000017f) ^ 0x0000017f) == 0) {  // All required fields are present.
    // required bytes source_nick = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->source_nick());

    // required .pvp.CardList source_card_list = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_card_list_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 event_state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_state());

    // required .pvp.PvpEventLog.DEFEND_STATE defend_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->defend_state());

    // required int32 gold_lock = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_lock());

    // required int32 gold_refund = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_refund());

    // required .pvp.PVP_EVENT_TYPE event_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional sfixed64 optime = 11;
  if (has_optime()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpEventLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpEventLog)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpEventLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpEventLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpEventLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpEventLog)
    MergeFrom(*source);
  }
}

void PvpEventLog::MergeFrom(const PvpEventLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpEventLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_source_nick(from.source_nick());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_source_card_list()->::pvp::CardList::MergeFrom(from.source_card_list());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_state_ = from.event_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      defend_state_ = from.defend_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      gold_lock_ = from.gold_lock_;
    }
    if (cached_has_bits & 0x00000040u) {
      gold_refund_ = from.gold_refund_;
    }
    if (cached_has_bits & 0x00000080u) {
      optime_ = from.optime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_event_type(from.event_type());
  }
}

void PvpEventLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpEventLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpEventLog::CopyFrom(const PvpEventLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpEventLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpEventLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017f) != 0x0000017f) return false;
  if (has_source_card_list()) {
    if (!this->source_card_list_->IsInitialized()) return false;
  }
  return true;
}

void PvpEventLog::Swap(PvpEventLog* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpEventLog* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpEventLog::UnsafeArenaSwap(PvpEventLog* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpEventLog::InternalSwap(PvpEventLog* other) {
  using std::swap;
  source_nick_.Swap(&other->source_nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_card_list_, other->source_card_list_);
  swap(id_, other->id_);
  swap(event_state_, other->event_state_);
  swap(defend_state_, other->defend_state_);
  swap(gold_lock_, other->gold_lock_);
  swap(gold_refund_, other->gold_refund_);
  swap(optime_, other->optime_);
  swap(event_type_, other->event_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpEventLog::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpEventLogList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpEventLogList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpEventLogList::PvpEventLogList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpEventLogList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpEventLogList)
}
PvpEventLogList::PvpEventLogList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpEventLogList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpEventLogList)
}
PvpEventLogList::PvpEventLogList(const PvpEventLogList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pvp.PvpEventLogList)
}

void PvpEventLogList::SharedCtor() {
}

PvpEventLogList::~PvpEventLogList() {
  // @@protoc_insertion_point(destructor:pvp.PvpEventLogList)
  SharedDtor();
}

void PvpEventLogList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PvpEventLogList::ArenaDtor(void* object) {
  PvpEventLogList* _this = reinterpret_cast< PvpEventLogList* >(object);
  (void)_this;
}
void PvpEventLogList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpEventLogList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpEventLogList::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpEventLogList& PvpEventLogList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpEventLogList.base);
  return *internal_default_instance();
}


void PvpEventLogList::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpEventLogList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpEventLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpEventLogList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pvp.PvpEventLog list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpEventLogList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpEventLogList)
  return false;
#undef DO_
}

void PvpEventLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpEventLogList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pvp.PvpEventLog list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpEventLogList)
}

::google::protobuf::uint8* PvpEventLogList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpEventLogList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pvp.PvpEventLog list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpEventLogList)
  return target;
}

size_t PvpEventLogList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpEventLogList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pvp.PvpEventLog list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpEventLogList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpEventLogList)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpEventLogList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpEventLogList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpEventLogList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpEventLogList)
    MergeFrom(*source);
  }
}

void PvpEventLogList::MergeFrom(const PvpEventLogList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpEventLogList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void PvpEventLogList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpEventLogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpEventLogList::CopyFrom(const PvpEventLogList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpEventLogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpEventLogList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PvpEventLogList::Swap(PvpEventLogList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpEventLogList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpEventLogList::UnsafeArenaSwap(PvpEventLogList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpEventLogList::InternalSwap(PvpEventLogList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpEventLogList::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserPvpEventLogService_EventLogRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPvpEventLogService_EventLogRequest::kCmdFieldNumber;
const int UserPvpEventLogService_EventLogRequest::kRefundIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPvpEventLogService_EventLogRequest::UserPvpEventLogService_EventLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService_EventLogRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.UserPvpEventLogService.EventLogRequest)
}
UserPvpEventLogService_EventLogRequest::UserPvpEventLogService_EventLogRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService_EventLogRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.UserPvpEventLogService.EventLogRequest)
}
UserPvpEventLogService_EventLogRequest::UserPvpEventLogService_EventLogRequest(const UserPvpEventLogService_EventLogRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&refund_id_, &from.refund_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&refund_id_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:pvp.UserPvpEventLogService.EventLogRequest)
}

void UserPvpEventLogService_EventLogRequest::SharedCtor() {
  refund_id_ = 0;
  cmd_ = 1;
}

UserPvpEventLogService_EventLogRequest::~UserPvpEventLogService_EventLogRequest() {
  // @@protoc_insertion_point(destructor:pvp.UserPvpEventLogService.EventLogRequest)
  SharedDtor();
}

void UserPvpEventLogService_EventLogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void UserPvpEventLogService_EventLogRequest::ArenaDtor(void* object) {
  UserPvpEventLogService_EventLogRequest* _this = reinterpret_cast< UserPvpEventLogService_EventLogRequest* >(object);
  (void)_this;
}
void UserPvpEventLogService_EventLogRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserPvpEventLogService_EventLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserPvpEventLogService_EventLogRequest::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserPvpEventLogService_EventLogRequest& UserPvpEventLogService_EventLogRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService_EventLogRequest.base);
  return *internal_default_instance();
}


void UserPvpEventLogService_EventLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.UserPvpEventLogService.EventLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    refund_id_ = 0;
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserPvpEventLogService_EventLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.UserPvpEventLogService.EventLogRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pvp.UserPvpEventLogService.EVENT_LOG_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pvp::UserPvpEventLogService_EVENT_LOG_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::pvp::UserPvpEventLogService_EVENT_LOG_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 refund_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_refund_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refund_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.UserPvpEventLogService.EventLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.UserPvpEventLogService.EventLogRequest)
  return false;
#undef DO_
}

void UserPvpEventLogService_EventLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.UserPvpEventLogService.EventLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.UserPvpEventLogService.EVENT_LOG_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 refund_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refund_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.UserPvpEventLogService.EventLogRequest)
}

::google::protobuf::uint8* UserPvpEventLogService_EventLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.UserPvpEventLogService.EventLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.UserPvpEventLogService.EVENT_LOG_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 refund_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refund_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.UserPvpEventLogService.EventLogRequest)
  return target;
}

size_t UserPvpEventLogService_EventLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.UserPvpEventLogService.EventLogRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .pvp.UserPvpEventLogService.EVENT_LOG_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // optional int32 refund_id = 2;
  if (has_refund_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refund_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPvpEventLogService_EventLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.UserPvpEventLogService.EventLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPvpEventLogService_EventLogRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPvpEventLogService_EventLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.UserPvpEventLogService.EventLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.UserPvpEventLogService.EventLogRequest)
    MergeFrom(*source);
  }
}

void UserPvpEventLogService_EventLogRequest::MergeFrom(const UserPvpEventLogService_EventLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.UserPvpEventLogService.EventLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      refund_id_ = from.refund_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserPvpEventLogService_EventLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.UserPvpEventLogService.EventLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPvpEventLogService_EventLogRequest::CopyFrom(const UserPvpEventLogService_EventLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.UserPvpEventLogService.EventLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPvpEventLogService_EventLogRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void UserPvpEventLogService_EventLogRequest::Swap(UserPvpEventLogService_EventLogRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserPvpEventLogService_EventLogRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserPvpEventLogService_EventLogRequest::UnsafeArenaSwap(UserPvpEventLogService_EventLogRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserPvpEventLogService_EventLogRequest::InternalSwap(UserPvpEventLogService_EventLogRequest* other) {
  using std::swap;
  swap(refund_id_, other->refund_id_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserPvpEventLogService_EventLogRequest::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserPvpEventLogService_EventLogResponse::InitAsDefaultInstance() {
  ::pvp::_UserPvpEventLogService_EventLogResponse_default_instance_._instance.get_mutable()->log_list_ = const_cast< ::pvp::PvpEventLogList*>(
      ::pvp::PvpEventLogList::internal_default_instance());
}
void UserPvpEventLogService_EventLogResponse::unsafe_arena_set_allocated_log_list(
    ::pvp::PvpEventLogList* log_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete log_list_;
  }
  log_list_ = log_list;
  if (log_list) {
    set_has_log_list();
  } else {
    clear_has_log_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.UserPvpEventLogService.EventLogResponse.log_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPvpEventLogService_EventLogResponse::kResultFieldNumber;
const int UserPvpEventLogService_EventLogResponse::kLogListFieldNumber;
const int UserPvpEventLogService_EventLogResponse::kGoldRefundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPvpEventLogService_EventLogResponse::UserPvpEventLogService_EventLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService_EventLogResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.UserPvpEventLogService.EventLogResponse)
}
UserPvpEventLogService_EventLogResponse::UserPvpEventLogService_EventLogResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService_EventLogResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.UserPvpEventLogService.EventLogResponse)
}
UserPvpEventLogService_EventLogResponse::UserPvpEventLogService_EventLogResponse(const UserPvpEventLogService_EventLogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_log_list()) {
    log_list_ = new ::pvp::PvpEventLogList(*from.log_list_);
  } else {
    log_list_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&gold_refund_) -
    reinterpret_cast<char*>(&result_)) + sizeof(gold_refund_));
  // @@protoc_insertion_point(copy_constructor:pvp.UserPvpEventLogService.EventLogResponse)
}

void UserPvpEventLogService_EventLogResponse::SharedCtor() {
  ::memset(&log_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_refund_) -
      reinterpret_cast<char*>(&log_list_)) + sizeof(gold_refund_));
}

UserPvpEventLogService_EventLogResponse::~UserPvpEventLogService_EventLogResponse() {
  // @@protoc_insertion_point(destructor:pvp.UserPvpEventLogService.EventLogResponse)
  SharedDtor();
}

void UserPvpEventLogService_EventLogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete log_list_;
}

void UserPvpEventLogService_EventLogResponse::ArenaDtor(void* object) {
  UserPvpEventLogService_EventLogResponse* _this = reinterpret_cast< UserPvpEventLogService_EventLogResponse* >(object);
  (void)_this;
}
void UserPvpEventLogService_EventLogResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserPvpEventLogService_EventLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserPvpEventLogService_EventLogResponse::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserPvpEventLogService_EventLogResponse& UserPvpEventLogService_EventLogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService_EventLogResponse.base);
  return *internal_default_instance();
}


void UserPvpEventLogService_EventLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.UserPvpEventLogService.EventLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(log_list_ != NULL);
    log_list_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gold_refund_) -
        reinterpret_cast<char*>(&result_)) + sizeof(gold_refund_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserPvpEventLogService_EventLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.UserPvpEventLogService.EventLogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.PvpEventLogList log_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gold_refund = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_gold_refund();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_refund_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.UserPvpEventLogService.EventLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.UserPvpEventLogService.EventLogResponse)
  return false;
#undef DO_
}

void UserPvpEventLogService_EventLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.UserPvpEventLogService.EventLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .pvp.PvpEventLogList log_list = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_log_list(), output);
  }

  // optional int32 gold_refund = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gold_refund(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.UserPvpEventLogService.EventLogResponse)
}

::google::protobuf::uint8* UserPvpEventLogService_EventLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.UserPvpEventLogService.EventLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .pvp.PvpEventLogList log_list = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_log_list(), deterministic, target);
  }

  // optional int32 gold_refund = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gold_refund(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.UserPvpEventLogService.EventLogResponse)
  return target;
}

size_t UserPvpEventLogService_EventLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.UserPvpEventLogService.EventLogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional .pvp.PvpEventLogList log_list = 11;
  if (has_log_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *log_list_);
  }

  // optional int32 gold_refund = 12;
  if (has_gold_refund()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold_refund());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPvpEventLogService_EventLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.UserPvpEventLogService.EventLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPvpEventLogService_EventLogResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPvpEventLogService_EventLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.UserPvpEventLogService.EventLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.UserPvpEventLogService.EventLogResponse)
    MergeFrom(*source);
  }
}

void UserPvpEventLogService_EventLogResponse::MergeFrom(const UserPvpEventLogService_EventLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.UserPvpEventLogService.EventLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_log_list()->::pvp::PvpEventLogList::MergeFrom(from.log_list());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      gold_refund_ = from.gold_refund_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserPvpEventLogService_EventLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.UserPvpEventLogService.EventLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPvpEventLogService_EventLogResponse::CopyFrom(const UserPvpEventLogService_EventLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.UserPvpEventLogService.EventLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPvpEventLogService_EventLogResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_log_list()) {
    if (!this->log_list_->IsInitialized()) return false;
  }
  return true;
}

void UserPvpEventLogService_EventLogResponse::Swap(UserPvpEventLogService_EventLogResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserPvpEventLogService_EventLogResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserPvpEventLogService_EventLogResponse::UnsafeArenaSwap(UserPvpEventLogService_EventLogResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserPvpEventLogService_EventLogResponse::InternalSwap(UserPvpEventLogService_EventLogResponse* other) {
  using std::swap;
  swap(log_list_, other->log_list_);
  swap(result_, other->result_);
  swap(gold_refund_, other->gold_refund_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserPvpEventLogService_EventLogResponse::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserPvpEventLogService::InitAsDefaultInstance() {
  ::pvp::_UserPvpEventLogService_default_instance_._instance.get_mutable()->req_ = const_cast< ::pvp::UserPvpEventLogService_EventLogRequest*>(
      ::pvp::UserPvpEventLogService_EventLogRequest::internal_default_instance());
  ::pvp::_UserPvpEventLogService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::pvp::UserPvpEventLogService_EventLogResponse*>(
      ::pvp::UserPvpEventLogService_EventLogResponse::internal_default_instance());
}
void UserPvpEventLogService::unsafe_arena_set_allocated_req(
    ::pvp::UserPvpEventLogService_EventLogRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.UserPvpEventLogService.req)
}
void UserPvpEventLogService::unsafe_arena_set_allocated_resp(
    ::pvp::UserPvpEventLogService_EventLogResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.UserPvpEventLogService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPvpEventLogService::kReqFieldNumber;
const int UserPvpEventLogService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPvpEventLogService::UserPvpEventLogService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.UserPvpEventLogService)
}
UserPvpEventLogService::UserPvpEventLogService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.UserPvpEventLogService)
}
UserPvpEventLogService::UserPvpEventLogService(const UserPvpEventLogService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::pvp::UserPvpEventLogService_EventLogRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::pvp::UserPvpEventLogService_EventLogResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pvp.UserPvpEventLogService)
}

void UserPvpEventLogService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

UserPvpEventLogService::~UserPvpEventLogService() {
  // @@protoc_insertion_point(destructor:pvp.UserPvpEventLogService)
  SharedDtor();
}

void UserPvpEventLogService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void UserPvpEventLogService::ArenaDtor(void* object) {
  UserPvpEventLogService* _this = reinterpret_cast< UserPvpEventLogService* >(object);
  (void)_this;
}
void UserPvpEventLogService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserPvpEventLogService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserPvpEventLogService::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserPvpEventLogService& UserPvpEventLogService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_UserPvpEventLogService.base);
  return *internal_default_instance();
}


void UserPvpEventLogService::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.UserPvpEventLogService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserPvpEventLogService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.UserPvpEventLogService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pvp.UserPvpEventLogService.EventLogRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pvp.UserPvpEventLogService.EventLogResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.UserPvpEventLogService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.UserPvpEventLogService)
  return false;
#undef DO_
}

void UserPvpEventLogService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.UserPvpEventLogService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pvp.UserPvpEventLogService.EventLogRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .pvp.UserPvpEventLogService.EventLogResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.UserPvpEventLogService)
}

::google::protobuf::uint8* UserPvpEventLogService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.UserPvpEventLogService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pvp.UserPvpEventLogService.EventLogRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .pvp.UserPvpEventLogService.EventLogResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.UserPvpEventLogService)
  return target;
}

size_t UserPvpEventLogService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.UserPvpEventLogService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .pvp.UserPvpEventLogService.EventLogRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .pvp.UserPvpEventLogService.EventLogResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPvpEventLogService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.UserPvpEventLogService)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPvpEventLogService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPvpEventLogService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.UserPvpEventLogService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.UserPvpEventLogService)
    MergeFrom(*source);
  }
}

void UserPvpEventLogService::MergeFrom(const UserPvpEventLogService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.UserPvpEventLogService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::pvp::UserPvpEventLogService_EventLogRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::pvp::UserPvpEventLogService_EventLogResponse::MergeFrom(from.resp());
    }
  }
}

void UserPvpEventLogService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.UserPvpEventLogService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPvpEventLogService::CopyFrom(const UserPvpEventLogService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.UserPvpEventLogService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPvpEventLogService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void UserPvpEventLogService::Swap(UserPvpEventLogService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserPvpEventLogService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserPvpEventLogService::UnsafeArenaSwap(UserPvpEventLogService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserPvpEventLogService::InternalSwap(UserPvpEventLogService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserPvpEventLogService::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpEventLogStateNotify::InitAsDefaultInstance() {
  ::pvp::_PvpEventLogStateNotify_default_instance_._instance.get_mutable()->log_list_ = const_cast< ::pvp::PvpEventLogList*>(
      ::pvp::PvpEventLogList::internal_default_instance());
}
void PvpEventLogStateNotify::unsafe_arena_set_allocated_log_list(
    ::pvp::PvpEventLogList* log_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete log_list_;
  }
  log_list_ = log_list;
  if (log_list) {
    set_has_log_list();
  } else {
    clear_has_log_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pvp.PvpEventLogStateNotify.log_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpEventLogStateNotify::kLogListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpEventLogStateNotify::PvpEventLogStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpEventLogStateNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpEventLogStateNotify)
}
PvpEventLogStateNotify::PvpEventLogStateNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpEventLogStateNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpEventLogStateNotify)
}
PvpEventLogStateNotify::PvpEventLogStateNotify(const PvpEventLogStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_log_list()) {
    log_list_ = new ::pvp::PvpEventLogList(*from.log_list_);
  } else {
    log_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pvp.PvpEventLogStateNotify)
}

void PvpEventLogStateNotify::SharedCtor() {
  log_list_ = NULL;
}

PvpEventLogStateNotify::~PvpEventLogStateNotify() {
  // @@protoc_insertion_point(destructor:pvp.PvpEventLogStateNotify)
  SharedDtor();
}

void PvpEventLogStateNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete log_list_;
}

void PvpEventLogStateNotify::ArenaDtor(void* object) {
  PvpEventLogStateNotify* _this = reinterpret_cast< PvpEventLogStateNotify* >(object);
  (void)_this;
}
void PvpEventLogStateNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpEventLogStateNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpEventLogStateNotify::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpEventLogStateNotify& PvpEventLogStateNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpEventLogStateNotify.base);
  return *internal_default_instance();
}


void PvpEventLogStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpEventLogStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(log_list_ != NULL);
    log_list_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpEventLogStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpEventLogStateNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pvp.PvpEventLogList log_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpEventLogStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpEventLogStateNotify)
  return false;
#undef DO_
}

void PvpEventLogStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpEventLogStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.PvpEventLogList log_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_log_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpEventLogStateNotify)
}

::google::protobuf::uint8* PvpEventLogStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpEventLogStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pvp.PvpEventLogList log_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_log_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpEventLogStateNotify)
  return target;
}

size_t PvpEventLogStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpEventLogStateNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .pvp.PvpEventLogList log_list = 1;
  if (has_log_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *log_list_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpEventLogStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpEventLogStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpEventLogStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpEventLogStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpEventLogStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpEventLogStateNotify)
    MergeFrom(*source);
  }
}

void PvpEventLogStateNotify::MergeFrom(const PvpEventLogStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpEventLogStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_log_list()) {
    mutable_log_list()->::pvp::PvpEventLogList::MergeFrom(from.log_list());
  }
}

void PvpEventLogStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpEventLogStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpEventLogStateNotify::CopyFrom(const PvpEventLogStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpEventLogStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpEventLogStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_log_list()) {
    if (!this->log_list_->IsInitialized()) return false;
  }
  return true;
}

void PvpEventLogStateNotify::Swap(PvpEventLogStateNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpEventLogStateNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpEventLogStateNotify::UnsafeArenaSwap(PvpEventLogStateNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpEventLogStateNotify::InternalSwap(PvpEventLogStateNotify* other) {
  using std::swap;
  swap(log_list_, other->log_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpEventLogStateNotify::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PvpLootNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PvpLootNotify::kWinGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PvpLootNotify::PvpLootNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Pvp_2eproto::scc_info_PvpLootNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvp.PvpLootNotify)
}
PvpLootNotify::PvpLootNotify(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpLootNotify.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pvp.PvpLootNotify)
}
PvpLootNotify::PvpLootNotify(const PvpLootNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  win_gold_ = from.win_gold_;
  // @@protoc_insertion_point(copy_constructor:pvp.PvpLootNotify)
}

void PvpLootNotify::SharedCtor() {
  win_gold_ = 0;
}

PvpLootNotify::~PvpLootNotify() {
  // @@protoc_insertion_point(destructor:pvp.PvpLootNotify)
  SharedDtor();
}

void PvpLootNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PvpLootNotify::ArenaDtor(void* object) {
  PvpLootNotify* _this = reinterpret_cast< PvpLootNotify* >(object);
  (void)_this;
}
void PvpLootNotify::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PvpLootNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PvpLootNotify::descriptor() {
  ::protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PvpLootNotify& PvpLootNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Pvp_2eproto::scc_info_PvpLootNotify.base);
  return *internal_default_instance();
}


void PvpLootNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pvp.PvpLootNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  win_gold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PvpLootNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pvp.PvpLootNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 win_gold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_win_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pvp.PvpLootNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pvp.PvpLootNotify)
  return false;
#undef DO_
}

void PvpLootNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pvp.PvpLootNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 win_gold = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win_gold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pvp.PvpLootNotify)
}

::google::protobuf::uint8* PvpLootNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pvp.PvpLootNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 win_gold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win_gold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvp.PvpLootNotify)
  return target;
}

size_t PvpLootNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvp.PvpLootNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 win_gold = 1;
  if (has_win_gold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win_gold());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvpLootNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvp.PvpLootNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PvpLootNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PvpLootNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvp.PvpLootNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvp.PvpLootNotify)
    MergeFrom(*source);
  }
}

void PvpLootNotify::MergeFrom(const PvpLootNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvp.PvpLootNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_win_gold()) {
    set_win_gold(from.win_gold());
  }
}

void PvpLootNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvp.PvpLootNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpLootNotify::CopyFrom(const PvpLootNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvp.PvpLootNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpLootNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PvpLootNotify::Swap(PvpLootNotify* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PvpLootNotify* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PvpLootNotify::UnsafeArenaSwap(PvpLootNotify* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PvpLootNotify::InternalSwap(PvpLootNotify* other) {
  using std::swap;
  swap(win_gold_, other->win_gold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PvpLootNotify::GetMetadata() const {
  protobuf_Pvp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Pvp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pvp
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::RandList* Arena::CreateMaybeMessage< ::pvp::RandList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::RandList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::StageData* Arena::CreateMaybeMessage< ::pvp::StageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::StageData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::StageDataList* Arena::CreateMaybeMessage< ::pvp::StageDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::StageDataList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::CardList* Arena::CreateMaybeMessage< ::pvp::CardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::CardList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PlayerData* Arena::CreateMaybeMessage< ::pvp::PlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PlayerData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::UserInput* Arena::CreateMaybeMessage< ::pvp::UserInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::UserInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::CombatFrame* Arena::CreateMaybeMessage< ::pvp::CombatFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::CombatFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::CombatFrameList* Arena::CreateMaybeMessage< ::pvp::CombatFrameList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::CombatFrameList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::CombatResult* Arena::CreateMaybeMessage< ::pvp::CombatResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::CombatResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpCombat* Arena::CreateMaybeMessage< ::pvp::PvpCombat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpCombat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpService_PvpRequest* Arena::CreateMaybeMessage< ::pvp::PvpService_PvpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpService_PvpRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpService_PvpResponse* Arena::CreateMaybeMessage< ::pvp::PvpService_PvpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpService_PvpResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpService* Arena::CreateMaybeMessage< ::pvp::PvpService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpCombatStartNotify* Arena::CreateMaybeMessage< ::pvp::PvpCombatStartNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpCombatStartNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpFrameNotify* Arena::CreateMaybeMessage< ::pvp::PvpFrameNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpFrameNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpReward* Arena::CreateMaybeMessage< ::pvp::PvpReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpReward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpRewardNotify* Arena::CreateMaybeMessage< ::pvp::PvpRewardNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpRewardNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpEventLog* Arena::CreateMaybeMessage< ::pvp::PvpEventLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpEventLog >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpEventLogList* Arena::CreateMaybeMessage< ::pvp::PvpEventLogList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpEventLogList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::UserPvpEventLogService_EventLogRequest* Arena::CreateMaybeMessage< ::pvp::UserPvpEventLogService_EventLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::UserPvpEventLogService_EventLogRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::UserPvpEventLogService_EventLogResponse* Arena::CreateMaybeMessage< ::pvp::UserPvpEventLogService_EventLogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::UserPvpEventLogService_EventLogResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::UserPvpEventLogService* Arena::CreateMaybeMessage< ::pvp::UserPvpEventLogService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::UserPvpEventLogService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpEventLogStateNotify* Arena::CreateMaybeMessage< ::pvp::PvpEventLogStateNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpEventLogStateNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pvp::PvpLootNotify* Arena::CreateMaybeMessage< ::pvp::PvpLootNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pvp::PvpLootNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
