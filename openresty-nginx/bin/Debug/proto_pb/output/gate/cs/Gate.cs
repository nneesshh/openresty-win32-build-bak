// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace gate {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Gate {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_gate_ErrorNo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.ErrorNo, global::gate.ErrorNo.Builder> internal__static_gate_ErrorNo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_RegisterAccountService__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.RegisterAccountService, global::gate.RegisterAccountService.Builder> internal__static_gate_RegisterAccountService__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_RegisterAccountService_RegisterRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.RegisterAccountService.Types.RegisterRequest, global::gate.RegisterAccountService.Types.RegisterRequest.Builder> internal__static_gate_RegisterAccountService_RegisterRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_RegisterAccountService_RegisterResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.RegisterAccountService.Types.RegisterResponse, global::gate.RegisterAccountService.Types.RegisterResponse.Builder> internal__static_gate_RegisterAccountService_RegisterResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_FastRegisterAccountService__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.FastRegisterAccountService, global::gate.FastRegisterAccountService.Builder> internal__static_gate_FastRegisterAccountService__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_FastRegisterAccountService_RegisterRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.FastRegisterAccountService.Types.RegisterRequest, global::gate.FastRegisterAccountService.Types.RegisterRequest.Builder> internal__static_gate_FastRegisterAccountService_RegisterRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_FastRegisterAccountService_RegisterResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.FastRegisterAccountService.Types.RegisterResponse, global::gate.FastRegisterAccountService.Types.RegisterResponse.Builder> internal__static_gate_FastRegisterAccountService_RegisterResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_AccountLoginService__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.AccountLoginService, global::gate.AccountLoginService.Builder> internal__static_gate_AccountLoginService__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_AccountLoginService_LoginRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.AccountLoginService.Types.LoginRequest, global::gate.AccountLoginService.Types.LoginRequest.Builder> internal__static_gate_AccountLoginService_LoginRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_AccountLoginService_LoginResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.AccountLoginService.Types.LoginResponse, global::gate.AccountLoginService.Types.LoginResponse.Builder> internal__static_gate_AccountLoginService_LoginResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_AccountReloginService__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.AccountReloginService, global::gate.AccountReloginService.Builder> internal__static_gate_AccountReloginService__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_AccountReloginService_ReloginRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.AccountReloginService.Types.ReloginRequest, global::gate.AccountReloginService.Types.ReloginRequest.Builder> internal__static_gate_AccountReloginService_ReloginRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_AccountReloginService_ReloginResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.AccountReloginService.Types.ReloginResponse, global::gate.AccountReloginService.Types.ReloginResponse.Builder> internal__static_gate_AccountReloginService_ReloginResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_GameServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.GameServer, global::gate.GameServer.Builder> internal__static_gate_GameServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_GameServerList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.GameServerList, global::gate.GameServerList.Builder> internal__static_gate_GameServerList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_GameServerService__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.GameServerService, global::gate.GameServerService.Builder> internal__static_gate_GameServerService__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_GameServerService_GameServerRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.GameServerService.Types.GameServerRequest, global::gate.GameServerService.Types.GameServerRequest.Builder> internal__static_gate_GameServerService_GameServerRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gate_GameServerService_GameServerResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gate.GameServerService.Types.GameServerResponse, global::gate.GameServerService.Types.GameServerResponse.Builder> internal__static_gate_GameServerService_GameServerResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;

    static Gate() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpHYXRlLnByb3RvEgRnYXRlIoIBCgdFcnJvck5vEhAKCGVycm9yX25vGAEg", 
            "AigFEgwKBGRlc2MYAiACKAwiVwoIRVJST1JfTk8SFAoHUkVMT0dJThDYuf//", 
            "//////8BEhkKDElQX0lTX0JBTk5FRBDXuf////////8BEhoKDVVJRF9JU19C", 
            "QU5ORUQQ1rn/////////ASLWAwoWUmVnaXN0ZXJBY2NvdW50U2VydmljZRI5", 
            "CgNyZXEYASABKAsyLC5nYXRlLlJlZ2lzdGVyQWNjb3VudFNlcnZpY2UuUmVn", 
            "aXN0ZXJSZXF1ZXN0EjsKBHJlc3AYAiABKAsyLS5nYXRlLlJlZ2lzdGVyQWNj", 
            "b3VudFNlcnZpY2UuUmVnaXN0ZXJSZXNwb25zZRpdCg9SZWdpc3RlclJlcXVl", 
            "c3QSCwoDdWlkGAEgAigMEgsKA3B3ZBgCIAIoDBIMCgRuaWNrGAMgAigMEg0K", 
            "BWVtYWlsGAQgAigMEhMKC3Nwb25zb3JfdWlkGAsgASgMGkcKEFJlZ2lzdGVy", 
            "UmVzcG9uc2USMwoGcmVzdWx0GAEgAigOMiMuZ2F0ZS5SZWdpc3RlckFjY291", 
            "bnRTZXJ2aWNlLlJFU1VMVCKbAQoGUkVTVUxUEgYKAk9LEAASIQoUVUlEX09S", 
            "X1BXRF9UT09fU0hPUlQQ////////////ARIfChJVSURfQUxSRUFEWV9FWElT", 
            "VFMQ/v//////////ARIpChxVSURfTVVTVF9TVEFSVF9XSVRIX0FfTEVUVEVS", 
            "EP3//////////wESGgoNRU1BSUxfSU5WQUxJRBD8//////////8BIo8CChpG", 
            "YXN0UmVnaXN0ZXJBY2NvdW50U2VydmljZRI9CgNyZXEYASABKAsyMC5nYXRl", 
            "LkZhc3RSZWdpc3RlckFjY291bnRTZXJ2aWNlLlJlZ2lzdGVyUmVxdWVzdBI/", 
            "CgRyZXNwGAIgASgLMjEuZ2F0ZS5GYXN0UmVnaXN0ZXJBY2NvdW50U2Vydmlj", 
            "ZS5SZWdpc3RlclJlc3BvbnNlGhEKD1JlZ2lzdGVyUmVxdWVzdBpeChBSZWdp", 
            "c3RlclJlc3BvbnNlEgsKA3VpZBgBIAIoDBILCgNwd2QYAiACKAwSDAoEbmlj", 
            "axgDIAIoDBINCgVlbWFpbBgEIAIoDBITCgtzcG9uc29yX3VpZBgLIAEoDCLi", 
            "AwoTQWNjb3VudExvZ2luU2VydmljZRIzCgNyZXEYASABKAsyJi5nYXRlLkFj", 
            "Y291bnRMb2dpblNlcnZpY2UuTG9naW5SZXF1ZXN0EjUKBHJlc3AYAiABKAsy", 
            "Jy5nYXRlLkFjY291bnRMb2dpblNlcnZpY2UuTG9naW5SZXNwb25zZRpsCgxM", 
            "b2dpblJlcXVlc3QSCwoDdWlkGAEgAigMEgsKA3B3ZBgCIAIoDBISCgp3c19l", 
            "bnRyeWlkGAsgASgFEhYKDmNoYW5uZWxfcGxhdGlkGAwgASgMEhYKDmNoYW5u", 
            "ZWxfZ2FtZWlkGA0gASgMGk8KDUxvZ2luUmVzcG9uc2USMAoGcmVzdWx0GAEg", 
            "AigOMiAuZ2F0ZS5BY2NvdW50TG9naW5TZXJ2aWNlLlJFU1VMVBIMCgR1dWlk", 
            "GAIgASgEIp8BCgZSRVNVTFQSBgoCT0sQABIkChdVSURfT1JfUFdEX0lTX05P", 
            "VF9WQUxJRBD///////////8BEiQKF1VTRVJfQVNTRVRTX0xPQURfRkFJTEVE", 
            "EP7//////////wESHQoQVE9PX01BTllfUkVRVUVTVBD9//////////8BEiIK", 
            "FUdBTUVfU0VSVkVSX05PVF9SRUFEWRD8//////////8BIqoCChVBY2NvdW50", 
            "UmVsb2dpblNlcnZpY2USNwoDcmVxGAEgASgLMiouZ2F0ZS5BY2NvdW50UmVs", 
            "b2dpblNlcnZpY2UuUmVsb2dpblJlcXVlc3QSOQoEcmVzcBgCIAEoCzIrLmdh", 
            "dGUuQWNjb3VudFJlbG9naW5TZXJ2aWNlLlJlbG9naW5SZXNwb25zZRoqCg5S", 
            "ZWxvZ2luUmVxdWVzdBILCgN1aWQYASACKAwSCwoDcHdkGAIgAigMGlMKD1Jl", 
            "bG9naW5SZXNwb25zZRIyCgZyZXN1bHQYASACKA4yIi5nYXRlLkFjY291bnRS", 
            "ZWxvZ2luU2VydmljZS5SRVNVTFQSDAoEdXVpZBgCIAEoBCIcCgZSRVNVTFQS", 
            "BgoCT0sQABIKCgZGQUlMRUQQASImCgpHYW1lU2VydmVyEgoKAmlkGAEgAigF", 
            "EgwKBG5hbWUYAiACKAwiMAoOR2FtZVNlcnZlckxpc3QSHgoEbGlzdBgBIAMo", 
            "CzIQLmdhdGUuR2FtZVNlcnZlciKDAwoRR2FtZVNlcnZlclNlcnZpY2USNgoD", 
            "cmVxGAEgASgLMikuZ2F0ZS5HYW1lU2VydmVyU2VydmljZS5HYW1lU2VydmVy", 
            "UmVxdWVzdBI4CgRyZXNwGAIgASgLMiouZ2F0ZS5HYW1lU2VydmVyU2Vydmlj", 
            "ZS5HYW1lU2VydmVyUmVzcG9uc2UaXwoRR2FtZVNlcnZlclJlcXVlc3QSOAoD", 
            "Y21kGAEgAigOMisuZ2F0ZS5HYW1lU2VydmVyU2VydmljZS5HQU1FX1NFUlZF", 
            "Ul9DT01NQU5EEhAKCHNlcnZlcmlkGAIgASgFGmYKEkdhbWVTZXJ2ZXJSZXNw", 
            "b25zZRIOCgZyZXN1bHQYASACKAUSKQoLc2VydmVyX2xpc3QYAiABKAsyFC5n", 
            "YXRlLkdhbWVTZXJ2ZXJMaXN0EhUKDWxhc3Rfc2VydmVyaWQYAyABKAUiMwoT", 
            "R0FNRV9TRVJWRVJfQ09NTUFORBIJCgVRVUVSWRABEhEKDVNFTEVDVF9TRVJW", 
          "RVIQAg=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_gate_ErrorNo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_gate_ErrorNo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.ErrorNo, global::gate.ErrorNo.Builder>(internal__static_gate_ErrorNo__Descriptor,
                new string[] { "ErrorNo_", "Desc", });
        internal__static_gate_RegisterAccountService__Descriptor = Descriptor.MessageTypes[1];
        internal__static_gate_RegisterAccountService__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.RegisterAccountService, global::gate.RegisterAccountService.Builder>(internal__static_gate_RegisterAccountService__Descriptor,
                new string[] { "Req", "Resp", });
        internal__static_gate_RegisterAccountService_RegisterRequest__Descriptor = internal__static_gate_RegisterAccountService__Descriptor.NestedTypes[0];
        internal__static_gate_RegisterAccountService_RegisterRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.RegisterAccountService.Types.RegisterRequest, global::gate.RegisterAccountService.Types.RegisterRequest.Builder>(internal__static_gate_RegisterAccountService_RegisterRequest__Descriptor,
                new string[] { "Uid", "Pwd", "Nick", "Email", "SponsorUid", });
        internal__static_gate_RegisterAccountService_RegisterResponse__Descriptor = internal__static_gate_RegisterAccountService__Descriptor.NestedTypes[1];
        internal__static_gate_RegisterAccountService_RegisterResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.RegisterAccountService.Types.RegisterResponse, global::gate.RegisterAccountService.Types.RegisterResponse.Builder>(internal__static_gate_RegisterAccountService_RegisterResponse__Descriptor,
                new string[] { "Result", });
        internal__static_gate_FastRegisterAccountService__Descriptor = Descriptor.MessageTypes[2];
        internal__static_gate_FastRegisterAccountService__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.FastRegisterAccountService, global::gate.FastRegisterAccountService.Builder>(internal__static_gate_FastRegisterAccountService__Descriptor,
                new string[] { "Req", "Resp", });
        internal__static_gate_FastRegisterAccountService_RegisterRequest__Descriptor = internal__static_gate_FastRegisterAccountService__Descriptor.NestedTypes[0];
        internal__static_gate_FastRegisterAccountService_RegisterRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.FastRegisterAccountService.Types.RegisterRequest, global::gate.FastRegisterAccountService.Types.RegisterRequest.Builder>(internal__static_gate_FastRegisterAccountService_RegisterRequest__Descriptor,
                new string[] { });
        internal__static_gate_FastRegisterAccountService_RegisterResponse__Descriptor = internal__static_gate_FastRegisterAccountService__Descriptor.NestedTypes[1];
        internal__static_gate_FastRegisterAccountService_RegisterResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.FastRegisterAccountService.Types.RegisterResponse, global::gate.FastRegisterAccountService.Types.RegisterResponse.Builder>(internal__static_gate_FastRegisterAccountService_RegisterResponse__Descriptor,
                new string[] { "Uid", "Pwd", "Nick", "Email", "SponsorUid", });
        internal__static_gate_AccountLoginService__Descriptor = Descriptor.MessageTypes[3];
        internal__static_gate_AccountLoginService__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.AccountLoginService, global::gate.AccountLoginService.Builder>(internal__static_gate_AccountLoginService__Descriptor,
                new string[] { "Req", "Resp", });
        internal__static_gate_AccountLoginService_LoginRequest__Descriptor = internal__static_gate_AccountLoginService__Descriptor.NestedTypes[0];
        internal__static_gate_AccountLoginService_LoginRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.AccountLoginService.Types.LoginRequest, global::gate.AccountLoginService.Types.LoginRequest.Builder>(internal__static_gate_AccountLoginService_LoginRequest__Descriptor,
                new string[] { "Uid", "Pwd", "WsEntryid", "ChannelPlatid", "ChannelGameid", });
        internal__static_gate_AccountLoginService_LoginResponse__Descriptor = internal__static_gate_AccountLoginService__Descriptor.NestedTypes[1];
        internal__static_gate_AccountLoginService_LoginResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.AccountLoginService.Types.LoginResponse, global::gate.AccountLoginService.Types.LoginResponse.Builder>(internal__static_gate_AccountLoginService_LoginResponse__Descriptor,
                new string[] { "Result", "Uuid", });
        internal__static_gate_AccountReloginService__Descriptor = Descriptor.MessageTypes[4];
        internal__static_gate_AccountReloginService__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.AccountReloginService, global::gate.AccountReloginService.Builder>(internal__static_gate_AccountReloginService__Descriptor,
                new string[] { "Req", "Resp", });
        internal__static_gate_AccountReloginService_ReloginRequest__Descriptor = internal__static_gate_AccountReloginService__Descriptor.NestedTypes[0];
        internal__static_gate_AccountReloginService_ReloginRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.AccountReloginService.Types.ReloginRequest, global::gate.AccountReloginService.Types.ReloginRequest.Builder>(internal__static_gate_AccountReloginService_ReloginRequest__Descriptor,
                new string[] { "Uid", "Pwd", });
        internal__static_gate_AccountReloginService_ReloginResponse__Descriptor = internal__static_gate_AccountReloginService__Descriptor.NestedTypes[1];
        internal__static_gate_AccountReloginService_ReloginResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.AccountReloginService.Types.ReloginResponse, global::gate.AccountReloginService.Types.ReloginResponse.Builder>(internal__static_gate_AccountReloginService_ReloginResponse__Descriptor,
                new string[] { "Result", "Uuid", });
        internal__static_gate_GameServer__Descriptor = Descriptor.MessageTypes[5];
        internal__static_gate_GameServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.GameServer, global::gate.GameServer.Builder>(internal__static_gate_GameServer__Descriptor,
                new string[] { "Id", "Name", });
        internal__static_gate_GameServerList__Descriptor = Descriptor.MessageTypes[6];
        internal__static_gate_GameServerList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.GameServerList, global::gate.GameServerList.Builder>(internal__static_gate_GameServerList__Descriptor,
                new string[] { "List", });
        internal__static_gate_GameServerService__Descriptor = Descriptor.MessageTypes[7];
        internal__static_gate_GameServerService__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.GameServerService, global::gate.GameServerService.Builder>(internal__static_gate_GameServerService__Descriptor,
                new string[] { "Req", "Resp", });
        internal__static_gate_GameServerService_GameServerRequest__Descriptor = internal__static_gate_GameServerService__Descriptor.NestedTypes[0];
        internal__static_gate_GameServerService_GameServerRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.GameServerService.Types.GameServerRequest, global::gate.GameServerService.Types.GameServerRequest.Builder>(internal__static_gate_GameServerService_GameServerRequest__Descriptor,
                new string[] { "Cmd", "Serverid", });
        internal__static_gate_GameServerService_GameServerResponse__Descriptor = internal__static_gate_GameServerService__Descriptor.NestedTypes[1];
        internal__static_gate_GameServerService_GameServerResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gate.GameServerService.Types.GameServerResponse, global::gate.GameServerService.Types.GameServerResponse.Builder>(internal__static_gate_GameServerService_GameServerResponse__Descriptor,
                new string[] { "Result", "ServerList", "LastServerid", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ErrorNo : pb::GeneratedMessage<ErrorNo, ErrorNo.Builder> {
    private ErrorNo() { }
    private static readonly ErrorNo defaultInstance = new ErrorNo().MakeReadOnly();
    private static readonly string[] _errorNoFieldNames = new string[] { "desc", "error_no" };
    private static readonly uint[] _errorNoFieldTags = new uint[] { 18, 8 };
    public static ErrorNo DefaultInstance {
      get { return defaultInstance; }
    }

    public override ErrorNo DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ErrorNo ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::gate.Gate.internal__static_gate_ErrorNo__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ErrorNo, ErrorNo.Builder> InternalFieldAccessors {
      get { return global::gate.Gate.internal__static_gate_ErrorNo__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ERROR_NO {
        RELOGIN = -9000,
        IP_IS_BANNED = -9001,
        UID_IS_BANNED = -9002,
      }

    }
    #endregion

    public const int ErrorNo_FieldNumber = 1;
    private bool hasErrorNo_;
    private int errorNo_;
    public bool HasErrorNo_ {
      get { return hasErrorNo_; }
    }
    public int ErrorNo_ {
      get { return errorNo_; }
    }

    public const int DescFieldNumber = 2;
    private bool hasDesc;
    private pb::ByteString desc_ = pb::ByteString.Empty;
    public bool HasDesc {
      get { return hasDesc; }
    }
    public pb::ByteString Desc {
      get { return desc_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasErrorNo_) return false;
        if (!hasDesc) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _errorNoFieldNames;
      if (hasErrorNo_) {
        output.WriteInt32(1, field_names[1], ErrorNo_);
      }
      if (hasDesc) {
        output.WriteBytes(2, field_names[0], Desc);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasErrorNo_) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, ErrorNo_);
      }
      if (hasDesc) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Desc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ErrorNo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorNo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorNo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorNo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorNo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorNo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorNo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ErrorNo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ErrorNo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorNo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ErrorNo MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorNo prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorNo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ErrorNo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ErrorNo result;

      private ErrorNo PrepareBuilder() {
        if (resultIsReadOnly) {
          ErrorNo original = result;
          result = new ErrorNo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override ErrorNo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gate.ErrorNo.Descriptor; }
      }

      public override ErrorNo DefaultInstanceForType {
        get { return global::gate.ErrorNo.DefaultInstance; }
      }

      public override ErrorNo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorNo) {
          return MergeFrom((ErrorNo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ErrorNo other) {
        if (other == global::gate.ErrorNo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorNo_) {
          ErrorNo_ = other.ErrorNo_;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorNoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorNoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasErrorNo_ = input.ReadInt32(ref result.errorNo_);
              break;
            }
            case 18: {
              result.hasDesc = input.ReadBytes(ref result.desc_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasErrorNo_ {
        get { return result.hasErrorNo_; }
      }
      public int ErrorNo_ {
        get { return result.ErrorNo_; }
        set { SetErrorNo_(value); }
      }
      public Builder SetErrorNo_(int value) {
        PrepareBuilder();
        result.hasErrorNo_ = true;
        result.errorNo_ = value;
        return this;
      }
      public Builder ClearErrorNo_() {
        PrepareBuilder();
        result.hasErrorNo_ = false;
        result.errorNo_ = 0;
        return this;
      }

      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public pb::ByteString Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ErrorNo() {
      object.ReferenceEquals(global::gate.Gate.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RegisterAccountService : pb::GeneratedMessage<RegisterAccountService, RegisterAccountService.Builder> {
    private RegisterAccountService() { }
    private static readonly RegisterAccountService defaultInstance = new RegisterAccountService().MakeReadOnly();
    private static readonly string[] _registerAccountServiceFieldNames = new string[] { "req", "resp" };
    private static readonly uint[] _registerAccountServiceFieldTags = new uint[] { 10, 18 };
    public static RegisterAccountService DefaultInstance {
      get { return defaultInstance; }
    }

    public override RegisterAccountService DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override RegisterAccountService ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::gate.Gate.internal__static_gate_RegisterAccountService__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<RegisterAccountService, RegisterAccountService.Builder> InternalFieldAccessors {
      get { return global::gate.Gate.internal__static_gate_RegisterAccountService__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum RESULT {
        OK = 0,
        UID_OR_PWD_TOO_SHORT = -1,
        UID_ALREADY_EXISTS = -2,
        UID_MUST_START_WITH_A_LETTER = -3,
        EMAIL_INVALID = -4,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RegisterRequest : pb::GeneratedMessage<RegisterRequest, RegisterRequest.Builder> {
        private RegisterRequest() { }
        private static readonly RegisterRequest defaultInstance = new RegisterRequest().MakeReadOnly();
        private static readonly string[] _registerRequestFieldNames = new string[] { "email", "nick", "pwd", "sponsor_uid", "uid" };
        private static readonly uint[] _registerRequestFieldTags = new uint[] { 34, 26, 18, 90, 10 };
        public static RegisterRequest DefaultInstance {
          get { return defaultInstance; }
        }

        public override RegisterRequest DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RegisterRequest ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_RegisterAccountService_RegisterRequest__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<RegisterRequest, RegisterRequest.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_RegisterAccountService_RegisterRequest__FieldAccessorTable; }
        }

        public const int UidFieldNumber = 1;
        private bool hasUid;
        private pb::ByteString uid_ = pb::ByteString.Empty;
        public bool HasUid {
          get { return hasUid; }
        }
        public pb::ByteString Uid {
          get { return uid_; }
        }

        public const int PwdFieldNumber = 2;
        private bool hasPwd;
        private pb::ByteString pwd_ = pb::ByteString.Empty;
        public bool HasPwd {
          get { return hasPwd; }
        }
        public pb::ByteString Pwd {
          get { return pwd_; }
        }

        public const int NickFieldNumber = 3;
        private bool hasNick;
        private pb::ByteString nick_ = pb::ByteString.Empty;
        public bool HasNick {
          get { return hasNick; }
        }
        public pb::ByteString Nick {
          get { return nick_; }
        }

        public const int EmailFieldNumber = 4;
        private bool hasEmail;
        private pb::ByteString email_ = pb::ByteString.Empty;
        public bool HasEmail {
          get { return hasEmail; }
        }
        public pb::ByteString Email {
          get { return email_; }
        }

        public const int SponsorUidFieldNumber = 11;
        private bool hasSponsorUid;
        private pb::ByteString sponsorUid_ = pb::ByteString.Empty;
        public bool HasSponsorUid {
          get { return hasSponsorUid; }
        }
        public pb::ByteString SponsorUid {
          get { return sponsorUid_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasUid) return false;
            if (!hasPwd) return false;
            if (!hasNick) return false;
            if (!hasEmail) return false;
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _registerRequestFieldNames;
          if (hasUid) {
            output.WriteBytes(1, field_names[4], Uid);
          }
          if (hasPwd) {
            output.WriteBytes(2, field_names[2], Pwd);
          }
          if (hasNick) {
            output.WriteBytes(3, field_names[1], Nick);
          }
          if (hasEmail) {
            output.WriteBytes(4, field_names[0], Email);
          }
          if (hasSponsorUid) {
            output.WriteBytes(11, field_names[3], SponsorUid);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasUid) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, Uid);
          }
          if (hasPwd) {
            size += pb::CodedOutputStream.ComputeBytesSize(2, Pwd);
          }
          if (hasNick) {
            size += pb::CodedOutputStream.ComputeBytesSize(3, Nick);
          }
          if (hasEmail) {
            size += pb::CodedOutputStream.ComputeBytesSize(4, Email);
          }
          if (hasSponsorUid) {
            size += pb::CodedOutputStream.ComputeBytesSize(11, SponsorUid);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static RegisterRequest ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RegisterRequest ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RegisterRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RegisterRequest ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RegisterRequest MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RegisterRequest prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<RegisterRequest, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RegisterRequest cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RegisterRequest result;

          private RegisterRequest PrepareBuilder() {
            if (resultIsReadOnly) {
              RegisterRequest original = result;
              result = new RegisterRequest();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RegisterRequest MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.RegisterAccountService.Types.RegisterRequest.Descriptor; }
          }

          public override RegisterRequest DefaultInstanceForType {
            get { return global::gate.RegisterAccountService.Types.RegisterRequest.DefaultInstance; }
          }

          public override RegisterRequest BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is RegisterRequest) {
              return MergeFrom((RegisterRequest) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RegisterRequest other) {
            if (other == global::gate.RegisterAccountService.Types.RegisterRequest.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasUid) {
              Uid = other.Uid;
            }
            if (other.HasPwd) {
              Pwd = other.Pwd;
            }
            if (other.HasNick) {
              Nick = other.Nick;
            }
            if (other.HasEmail) {
              Email = other.Email;
            }
            if (other.HasSponsorUid) {
              SponsorUid = other.SponsorUid;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_registerRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _registerRequestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasUid = input.ReadBytes(ref result.uid_);
                  break;
                }
                case 18: {
                  result.hasPwd = input.ReadBytes(ref result.pwd_);
                  break;
                }
                case 26: {
                  result.hasNick = input.ReadBytes(ref result.nick_);
                  break;
                }
                case 34: {
                  result.hasEmail = input.ReadBytes(ref result.email_);
                  break;
                }
                case 90: {
                  result.hasSponsorUid = input.ReadBytes(ref result.sponsorUid_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasUid {
            get { return result.hasUid; }
          }
          public pb::ByteString Uid {
            get { return result.Uid; }
            set { SetUid(value); }
          }
          public Builder SetUid(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUid = true;
            result.uid_ = value;
            return this;
          }
          public Builder ClearUid() {
            PrepareBuilder();
            result.hasUid = false;
            result.uid_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasPwd {
            get { return result.hasPwd; }
          }
          public pb::ByteString Pwd {
            get { return result.Pwd; }
            set { SetPwd(value); }
          }
          public Builder SetPwd(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPwd = true;
            result.pwd_ = value;
            return this;
          }
          public Builder ClearPwd() {
            PrepareBuilder();
            result.hasPwd = false;
            result.pwd_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasNick {
            get { return result.hasNick; }
          }
          public pb::ByteString Nick {
            get { return result.Nick; }
            set { SetNick(value); }
          }
          public Builder SetNick(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasNick = true;
            result.nick_ = value;
            return this;
          }
          public Builder ClearNick() {
            PrepareBuilder();
            result.hasNick = false;
            result.nick_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasEmail {
            get { return result.hasEmail; }
          }
          public pb::ByteString Email {
            get { return result.Email; }
            set { SetEmail(value); }
          }
          public Builder SetEmail(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasEmail = true;
            result.email_ = value;
            return this;
          }
          public Builder ClearEmail() {
            PrepareBuilder();
            result.hasEmail = false;
            result.email_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasSponsorUid {
            get { return result.hasSponsorUid; }
          }
          public pb::ByteString SponsorUid {
            get { return result.SponsorUid; }
            set { SetSponsorUid(value); }
          }
          public Builder SetSponsorUid(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSponsorUid = true;
            result.sponsorUid_ = value;
            return this;
          }
          public Builder ClearSponsorUid() {
            PrepareBuilder();
            result.hasSponsorUid = false;
            result.sponsorUid_ = pb::ByteString.Empty;
            return this;
          }
        }
        static RegisterRequest() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RegisterResponse : pb::GeneratedMessage<RegisterResponse, RegisterResponse.Builder> {
        private RegisterResponse() { }
        private static readonly RegisterResponse defaultInstance = new RegisterResponse().MakeReadOnly();
        private static readonly string[] _registerResponseFieldNames = new string[] { "result" };
        private static readonly uint[] _registerResponseFieldTags = new uint[] { 8 };
        public static RegisterResponse DefaultInstance {
          get { return defaultInstance; }
        }

        public override RegisterResponse DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RegisterResponse ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_RegisterAccountService_RegisterResponse__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<RegisterResponse, RegisterResponse.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_RegisterAccountService_RegisterResponse__FieldAccessorTable; }
        }

        public const int ResultFieldNumber = 1;
        private bool hasResult;
        private global::gate.RegisterAccountService.Types.RESULT result_ = global::gate.RegisterAccountService.Types.RESULT.OK;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::gate.RegisterAccountService.Types.RESULT Result {
          get { return result_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasResult) return false;
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _registerResponseFieldNames;
          if (hasResult) {
            output.WriteEnum(1, field_names[0], (int) Result, Result);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasResult) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Result);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static RegisterResponse ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RegisterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RegisterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RegisterResponse ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RegisterResponse MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RegisterResponse prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<RegisterResponse, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RegisterResponse cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RegisterResponse result;

          private RegisterResponse PrepareBuilder() {
            if (resultIsReadOnly) {
              RegisterResponse original = result;
              result = new RegisterResponse();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RegisterResponse MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.RegisterAccountService.Types.RegisterResponse.Descriptor; }
          }

          public override RegisterResponse DefaultInstanceForType {
            get { return global::gate.RegisterAccountService.Types.RegisterResponse.DefaultInstance; }
          }

          public override RegisterResponse BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is RegisterResponse) {
              return MergeFrom((RegisterResponse) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RegisterResponse other) {
            if (other == global::gate.RegisterAccountService.Types.RegisterResponse.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasResult) {
              Result = other.Result;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_registerResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _registerResponseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.result_, out unknown)) {
                    result.hasResult = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasResult {
            get { return result.hasResult; }
          }
          public global::gate.RegisterAccountService.Types.RESULT Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::gate.RegisterAccountService.Types.RESULT value) {
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = global::gate.RegisterAccountService.Types.RESULT.OK;
            return this;
          }
        }
        static RegisterResponse() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

    }
    #endregion

    public const int ReqFieldNumber = 1;
    private bool hasReq;
    private global::gate.RegisterAccountService.Types.RegisterRequest req_;
    public bool HasReq {
      get { return hasReq; }
    }
    public global::gate.RegisterAccountService.Types.RegisterRequest Req {
      get { return req_ ?? global::gate.RegisterAccountService.Types.RegisterRequest.DefaultInstance; }
    }

    public const int RespFieldNumber = 2;
    private bool hasResp;
    private global::gate.RegisterAccountService.Types.RegisterResponse resp_;
    public bool HasResp {
      get { return hasResp; }
    }
    public global::gate.RegisterAccountService.Types.RegisterResponse Resp {
      get { return resp_ ?? global::gate.RegisterAccountService.Types.RegisterResponse.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (HasReq) {
          if (!Req.IsInitialized) return false;
        }
        if (HasResp) {
          if (!Resp.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _registerAccountServiceFieldNames;
      if (hasReq) {
        output.WriteMessage(1, field_names[0], Req);
      }
      if (hasResp) {
        output.WriteMessage(2, field_names[1], Resp);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasReq) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Req);
      }
      if (hasResp) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Resp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RegisterAccountService ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterAccountService ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterAccountService ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterAccountService ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterAccountService ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterAccountService ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegisterAccountService ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegisterAccountService ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegisterAccountService ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterAccountService ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegisterAccountService MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegisterAccountService prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RegisterAccountService, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegisterAccountService cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private RegisterAccountService result;

      private RegisterAccountService PrepareBuilder() {
        if (resultIsReadOnly) {
          RegisterAccountService original = result;
          result = new RegisterAccountService();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override RegisterAccountService MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gate.RegisterAccountService.Descriptor; }
      }

      public override RegisterAccountService DefaultInstanceForType {
        get { return global::gate.RegisterAccountService.DefaultInstance; }
      }

      public override RegisterAccountService BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegisterAccountService) {
          return MergeFrom((RegisterAccountService) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(RegisterAccountService other) {
        if (other == global::gate.RegisterAccountService.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReq) {
          MergeReq(other.Req);
        }
        if (other.HasResp) {
          MergeResp(other.Resp);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registerAccountServiceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registerAccountServiceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gate.RegisterAccountService.Types.RegisterRequest.Builder subBuilder = global::gate.RegisterAccountService.Types.RegisterRequest.CreateBuilder();
              if (result.hasReq) {
                subBuilder.MergeFrom(Req);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Req = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::gate.RegisterAccountService.Types.RegisterResponse.Builder subBuilder = global::gate.RegisterAccountService.Types.RegisterResponse.CreateBuilder();
              if (result.hasResp) {
                subBuilder.MergeFrom(Resp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Resp = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasReq {
       get { return result.hasReq; }
      }
      public global::gate.RegisterAccountService.Types.RegisterRequest Req {
        get { return result.Req; }
        set { SetReq(value); }
      }
      public Builder SetReq(global::gate.RegisterAccountService.Types.RegisterRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = value;
        return this;
      }
      public Builder SetReq(global::gate.RegisterAccountService.Types.RegisterRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReq(global::gate.RegisterAccountService.Types.RegisterRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReq &&
            result.req_ != global::gate.RegisterAccountService.Types.RegisterRequest.DefaultInstance) {
            result.req_ = global::gate.RegisterAccountService.Types.RegisterRequest.CreateBuilder(result.req_).MergeFrom(value).BuildPartial();
        } else {
          result.req_ = value;
        }
        result.hasReq = true;
        return this;
      }
      public Builder ClearReq() {
        PrepareBuilder();
        result.hasReq = false;
        result.req_ = null;
        return this;
      }

      public bool HasResp {
       get { return result.hasResp; }
      }
      public global::gate.RegisterAccountService.Types.RegisterResponse Resp {
        get { return result.Resp; }
        set { SetResp(value); }
      }
      public Builder SetResp(global::gate.RegisterAccountService.Types.RegisterResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = value;
        return this;
      }
      public Builder SetResp(global::gate.RegisterAccountService.Types.RegisterResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResp(global::gate.RegisterAccountService.Types.RegisterResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResp &&
            result.resp_ != global::gate.RegisterAccountService.Types.RegisterResponse.DefaultInstance) {
            result.resp_ = global::gate.RegisterAccountService.Types.RegisterResponse.CreateBuilder(result.resp_).MergeFrom(value).BuildPartial();
        } else {
          result.resp_ = value;
        }
        result.hasResp = true;
        return this;
      }
      public Builder ClearResp() {
        PrepareBuilder();
        result.hasResp = false;
        result.resp_ = null;
        return this;
      }
    }
    static RegisterAccountService() {
      object.ReferenceEquals(global::gate.Gate.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FastRegisterAccountService : pb::GeneratedMessage<FastRegisterAccountService, FastRegisterAccountService.Builder> {
    private FastRegisterAccountService() { }
    private static readonly FastRegisterAccountService defaultInstance = new FastRegisterAccountService().MakeReadOnly();
    private static readonly string[] _fastRegisterAccountServiceFieldNames = new string[] { "req", "resp" };
    private static readonly uint[] _fastRegisterAccountServiceFieldTags = new uint[] { 10, 18 };
    public static FastRegisterAccountService DefaultInstance {
      get { return defaultInstance; }
    }

    public override FastRegisterAccountService DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override FastRegisterAccountService ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::gate.Gate.internal__static_gate_FastRegisterAccountService__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<FastRegisterAccountService, FastRegisterAccountService.Builder> InternalFieldAccessors {
      get { return global::gate.Gate.internal__static_gate_FastRegisterAccountService__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RegisterRequest : pb::GeneratedMessage<RegisterRequest, RegisterRequest.Builder> {
        private RegisterRequest() { }
        private static readonly RegisterRequest defaultInstance = new RegisterRequest().MakeReadOnly();
        private static readonly string[] _registerRequestFieldNames = new string[] {  };
        private static readonly uint[] _registerRequestFieldTags = new uint[] {  };
        public static RegisterRequest DefaultInstance {
          get { return defaultInstance; }
        }

        public override RegisterRequest DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RegisterRequest ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_FastRegisterAccountService_RegisterRequest__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<RegisterRequest, RegisterRequest.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_FastRegisterAccountService_RegisterRequest__FieldAccessorTable; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _registerRequestFieldNames;
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static RegisterRequest ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RegisterRequest ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RegisterRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RegisterRequest ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RegisterRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RegisterRequest MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RegisterRequest prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<RegisterRequest, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RegisterRequest cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RegisterRequest result;

          private RegisterRequest PrepareBuilder() {
            if (resultIsReadOnly) {
              RegisterRequest original = result;
              result = new RegisterRequest();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RegisterRequest MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.FastRegisterAccountService.Types.RegisterRequest.Descriptor; }
          }

          public override RegisterRequest DefaultInstanceForType {
            get { return global::gate.FastRegisterAccountService.Types.RegisterRequest.DefaultInstance; }
          }

          public override RegisterRequest BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is RegisterRequest) {
              return MergeFrom((RegisterRequest) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RegisterRequest other) {
            if (other == global::gate.FastRegisterAccountService.Types.RegisterRequest.DefaultInstance) return this;
            PrepareBuilder();
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_registerRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _registerRequestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }

        }
        static RegisterRequest() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RegisterResponse : pb::GeneratedMessage<RegisterResponse, RegisterResponse.Builder> {
        private RegisterResponse() { }
        private static readonly RegisterResponse defaultInstance = new RegisterResponse().MakeReadOnly();
        private static readonly string[] _registerResponseFieldNames = new string[] { "email", "nick", "pwd", "sponsor_uid", "uid" };
        private static readonly uint[] _registerResponseFieldTags = new uint[] { 34, 26, 18, 90, 10 };
        public static RegisterResponse DefaultInstance {
          get { return defaultInstance; }
        }

        public override RegisterResponse DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RegisterResponse ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_FastRegisterAccountService_RegisterResponse__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<RegisterResponse, RegisterResponse.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_FastRegisterAccountService_RegisterResponse__FieldAccessorTable; }
        }

        public const int UidFieldNumber = 1;
        private bool hasUid;
        private pb::ByteString uid_ = pb::ByteString.Empty;
        public bool HasUid {
          get { return hasUid; }
        }
        public pb::ByteString Uid {
          get { return uid_; }
        }

        public const int PwdFieldNumber = 2;
        private bool hasPwd;
        private pb::ByteString pwd_ = pb::ByteString.Empty;
        public bool HasPwd {
          get { return hasPwd; }
        }
        public pb::ByteString Pwd {
          get { return pwd_; }
        }

        public const int NickFieldNumber = 3;
        private bool hasNick;
        private pb::ByteString nick_ = pb::ByteString.Empty;
        public bool HasNick {
          get { return hasNick; }
        }
        public pb::ByteString Nick {
          get { return nick_; }
        }

        public const int EmailFieldNumber = 4;
        private bool hasEmail;
        private pb::ByteString email_ = pb::ByteString.Empty;
        public bool HasEmail {
          get { return hasEmail; }
        }
        public pb::ByteString Email {
          get { return email_; }
        }

        public const int SponsorUidFieldNumber = 11;
        private bool hasSponsorUid;
        private pb::ByteString sponsorUid_ = pb::ByteString.Empty;
        public bool HasSponsorUid {
          get { return hasSponsorUid; }
        }
        public pb::ByteString SponsorUid {
          get { return sponsorUid_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasUid) return false;
            if (!hasPwd) return false;
            if (!hasNick) return false;
            if (!hasEmail) return false;
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _registerResponseFieldNames;
          if (hasUid) {
            output.WriteBytes(1, field_names[4], Uid);
          }
          if (hasPwd) {
            output.WriteBytes(2, field_names[2], Pwd);
          }
          if (hasNick) {
            output.WriteBytes(3, field_names[1], Nick);
          }
          if (hasEmail) {
            output.WriteBytes(4, field_names[0], Email);
          }
          if (hasSponsorUid) {
            output.WriteBytes(11, field_names[3], SponsorUid);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasUid) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, Uid);
          }
          if (hasPwd) {
            size += pb::CodedOutputStream.ComputeBytesSize(2, Pwd);
          }
          if (hasNick) {
            size += pb::CodedOutputStream.ComputeBytesSize(3, Nick);
          }
          if (hasEmail) {
            size += pb::CodedOutputStream.ComputeBytesSize(4, Email);
          }
          if (hasSponsorUid) {
            size += pb::CodedOutputStream.ComputeBytesSize(11, SponsorUid);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static RegisterResponse ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RegisterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RegisterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RegisterResponse ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RegisterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RegisterResponse MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RegisterResponse prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<RegisterResponse, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RegisterResponse cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RegisterResponse result;

          private RegisterResponse PrepareBuilder() {
            if (resultIsReadOnly) {
              RegisterResponse original = result;
              result = new RegisterResponse();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RegisterResponse MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.FastRegisterAccountService.Types.RegisterResponse.Descriptor; }
          }

          public override RegisterResponse DefaultInstanceForType {
            get { return global::gate.FastRegisterAccountService.Types.RegisterResponse.DefaultInstance; }
          }

          public override RegisterResponse BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is RegisterResponse) {
              return MergeFrom((RegisterResponse) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RegisterResponse other) {
            if (other == global::gate.FastRegisterAccountService.Types.RegisterResponse.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasUid) {
              Uid = other.Uid;
            }
            if (other.HasPwd) {
              Pwd = other.Pwd;
            }
            if (other.HasNick) {
              Nick = other.Nick;
            }
            if (other.HasEmail) {
              Email = other.Email;
            }
            if (other.HasSponsorUid) {
              SponsorUid = other.SponsorUid;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_registerResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _registerResponseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasUid = input.ReadBytes(ref result.uid_);
                  break;
                }
                case 18: {
                  result.hasPwd = input.ReadBytes(ref result.pwd_);
                  break;
                }
                case 26: {
                  result.hasNick = input.ReadBytes(ref result.nick_);
                  break;
                }
                case 34: {
                  result.hasEmail = input.ReadBytes(ref result.email_);
                  break;
                }
                case 90: {
                  result.hasSponsorUid = input.ReadBytes(ref result.sponsorUid_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasUid {
            get { return result.hasUid; }
          }
          public pb::ByteString Uid {
            get { return result.Uid; }
            set { SetUid(value); }
          }
          public Builder SetUid(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUid = true;
            result.uid_ = value;
            return this;
          }
          public Builder ClearUid() {
            PrepareBuilder();
            result.hasUid = false;
            result.uid_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasPwd {
            get { return result.hasPwd; }
          }
          public pb::ByteString Pwd {
            get { return result.Pwd; }
            set { SetPwd(value); }
          }
          public Builder SetPwd(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPwd = true;
            result.pwd_ = value;
            return this;
          }
          public Builder ClearPwd() {
            PrepareBuilder();
            result.hasPwd = false;
            result.pwd_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasNick {
            get { return result.hasNick; }
          }
          public pb::ByteString Nick {
            get { return result.Nick; }
            set { SetNick(value); }
          }
          public Builder SetNick(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasNick = true;
            result.nick_ = value;
            return this;
          }
          public Builder ClearNick() {
            PrepareBuilder();
            result.hasNick = false;
            result.nick_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasEmail {
            get { return result.hasEmail; }
          }
          public pb::ByteString Email {
            get { return result.Email; }
            set { SetEmail(value); }
          }
          public Builder SetEmail(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasEmail = true;
            result.email_ = value;
            return this;
          }
          public Builder ClearEmail() {
            PrepareBuilder();
            result.hasEmail = false;
            result.email_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasSponsorUid {
            get { return result.hasSponsorUid; }
          }
          public pb::ByteString SponsorUid {
            get { return result.SponsorUid; }
            set { SetSponsorUid(value); }
          }
          public Builder SetSponsorUid(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSponsorUid = true;
            result.sponsorUid_ = value;
            return this;
          }
          public Builder ClearSponsorUid() {
            PrepareBuilder();
            result.hasSponsorUid = false;
            result.sponsorUid_ = pb::ByteString.Empty;
            return this;
          }
        }
        static RegisterResponse() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

    }
    #endregion

    public const int ReqFieldNumber = 1;
    private bool hasReq;
    private global::gate.FastRegisterAccountService.Types.RegisterRequest req_;
    public bool HasReq {
      get { return hasReq; }
    }
    public global::gate.FastRegisterAccountService.Types.RegisterRequest Req {
      get { return req_ ?? global::gate.FastRegisterAccountService.Types.RegisterRequest.DefaultInstance; }
    }

    public const int RespFieldNumber = 2;
    private bool hasResp;
    private global::gate.FastRegisterAccountService.Types.RegisterResponse resp_;
    public bool HasResp {
      get { return hasResp; }
    }
    public global::gate.FastRegisterAccountService.Types.RegisterResponse Resp {
      get { return resp_ ?? global::gate.FastRegisterAccountService.Types.RegisterResponse.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (HasResp) {
          if (!Resp.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fastRegisterAccountServiceFieldNames;
      if (hasReq) {
        output.WriteMessage(1, field_names[0], Req);
      }
      if (hasResp) {
        output.WriteMessage(2, field_names[1], Resp);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasReq) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Req);
      }
      if (hasResp) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Resp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FastRegisterAccountService ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FastRegisterAccountService ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FastRegisterAccountService ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FastRegisterAccountService ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FastRegisterAccountService ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FastRegisterAccountService ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FastRegisterAccountService ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FastRegisterAccountService ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FastRegisterAccountService ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FastRegisterAccountService ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FastRegisterAccountService MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FastRegisterAccountService prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FastRegisterAccountService, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FastRegisterAccountService cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private FastRegisterAccountService result;

      private FastRegisterAccountService PrepareBuilder() {
        if (resultIsReadOnly) {
          FastRegisterAccountService original = result;
          result = new FastRegisterAccountService();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override FastRegisterAccountService MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gate.FastRegisterAccountService.Descriptor; }
      }

      public override FastRegisterAccountService DefaultInstanceForType {
        get { return global::gate.FastRegisterAccountService.DefaultInstance; }
      }

      public override FastRegisterAccountService BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FastRegisterAccountService) {
          return MergeFrom((FastRegisterAccountService) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(FastRegisterAccountService other) {
        if (other == global::gate.FastRegisterAccountService.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReq) {
          MergeReq(other.Req);
        }
        if (other.HasResp) {
          MergeResp(other.Resp);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fastRegisterAccountServiceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fastRegisterAccountServiceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gate.FastRegisterAccountService.Types.RegisterRequest.Builder subBuilder = global::gate.FastRegisterAccountService.Types.RegisterRequest.CreateBuilder();
              if (result.hasReq) {
                subBuilder.MergeFrom(Req);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Req = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::gate.FastRegisterAccountService.Types.RegisterResponse.Builder subBuilder = global::gate.FastRegisterAccountService.Types.RegisterResponse.CreateBuilder();
              if (result.hasResp) {
                subBuilder.MergeFrom(Resp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Resp = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasReq {
       get { return result.hasReq; }
      }
      public global::gate.FastRegisterAccountService.Types.RegisterRequest Req {
        get { return result.Req; }
        set { SetReq(value); }
      }
      public Builder SetReq(global::gate.FastRegisterAccountService.Types.RegisterRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = value;
        return this;
      }
      public Builder SetReq(global::gate.FastRegisterAccountService.Types.RegisterRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReq(global::gate.FastRegisterAccountService.Types.RegisterRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReq &&
            result.req_ != global::gate.FastRegisterAccountService.Types.RegisterRequest.DefaultInstance) {
            result.req_ = global::gate.FastRegisterAccountService.Types.RegisterRequest.CreateBuilder(result.req_).MergeFrom(value).BuildPartial();
        } else {
          result.req_ = value;
        }
        result.hasReq = true;
        return this;
      }
      public Builder ClearReq() {
        PrepareBuilder();
        result.hasReq = false;
        result.req_ = null;
        return this;
      }

      public bool HasResp {
       get { return result.hasResp; }
      }
      public global::gate.FastRegisterAccountService.Types.RegisterResponse Resp {
        get { return result.Resp; }
        set { SetResp(value); }
      }
      public Builder SetResp(global::gate.FastRegisterAccountService.Types.RegisterResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = value;
        return this;
      }
      public Builder SetResp(global::gate.FastRegisterAccountService.Types.RegisterResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResp(global::gate.FastRegisterAccountService.Types.RegisterResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResp &&
            result.resp_ != global::gate.FastRegisterAccountService.Types.RegisterResponse.DefaultInstance) {
            result.resp_ = global::gate.FastRegisterAccountService.Types.RegisterResponse.CreateBuilder(result.resp_).MergeFrom(value).BuildPartial();
        } else {
          result.resp_ = value;
        }
        result.hasResp = true;
        return this;
      }
      public Builder ClearResp() {
        PrepareBuilder();
        result.hasResp = false;
        result.resp_ = null;
        return this;
      }
    }
    static FastRegisterAccountService() {
      object.ReferenceEquals(global::gate.Gate.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountLoginService : pb::GeneratedMessage<AccountLoginService, AccountLoginService.Builder> {
    private AccountLoginService() { }
    private static readonly AccountLoginService defaultInstance = new AccountLoginService().MakeReadOnly();
    private static readonly string[] _accountLoginServiceFieldNames = new string[] { "req", "resp" };
    private static readonly uint[] _accountLoginServiceFieldTags = new uint[] { 10, 18 };
    public static AccountLoginService DefaultInstance {
      get { return defaultInstance; }
    }

    public override AccountLoginService DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override AccountLoginService ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::gate.Gate.internal__static_gate_AccountLoginService__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AccountLoginService, AccountLoginService.Builder> InternalFieldAccessors {
      get { return global::gate.Gate.internal__static_gate_AccountLoginService__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum RESULT {
        OK = 0,
        UID_OR_PWD_IS_NOT_VALID = -1,
        USER_ASSETS_LOAD_FAILED = -2,
        TOO_MANY_REQUEST = -3,
        GAME_SERVER_NOT_READY = -4,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LoginRequest : pb::GeneratedMessage<LoginRequest, LoginRequest.Builder> {
        private LoginRequest() { }
        private static readonly LoginRequest defaultInstance = new LoginRequest().MakeReadOnly();
        private static readonly string[] _loginRequestFieldNames = new string[] { "channel_gameid", "channel_platid", "pwd", "uid", "ws_entryid" };
        private static readonly uint[] _loginRequestFieldTags = new uint[] { 106, 98, 18, 10, 88 };
        public static LoginRequest DefaultInstance {
          get { return defaultInstance; }
        }

        public override LoginRequest DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override LoginRequest ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_AccountLoginService_LoginRequest__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<LoginRequest, LoginRequest.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_AccountLoginService_LoginRequest__FieldAccessorTable; }
        }

        public const int UidFieldNumber = 1;
        private bool hasUid;
        private pb::ByteString uid_ = pb::ByteString.Empty;
        public bool HasUid {
          get { return hasUid; }
        }
        public pb::ByteString Uid {
          get { return uid_; }
        }

        public const int PwdFieldNumber = 2;
        private bool hasPwd;
        private pb::ByteString pwd_ = pb::ByteString.Empty;
        public bool HasPwd {
          get { return hasPwd; }
        }
        public pb::ByteString Pwd {
          get { return pwd_; }
        }

        public const int WsEntryidFieldNumber = 11;
        private bool hasWsEntryid;
        private int wsEntryid_;
        public bool HasWsEntryid {
          get { return hasWsEntryid; }
        }
        public int WsEntryid {
          get { return wsEntryid_; }
        }

        public const int ChannelPlatidFieldNumber = 12;
        private bool hasChannelPlatid;
        private pb::ByteString channelPlatid_ = pb::ByteString.Empty;
        public bool HasChannelPlatid {
          get { return hasChannelPlatid; }
        }
        public pb::ByteString ChannelPlatid {
          get { return channelPlatid_; }
        }

        public const int ChannelGameidFieldNumber = 13;
        private bool hasChannelGameid;
        private pb::ByteString channelGameid_ = pb::ByteString.Empty;
        public bool HasChannelGameid {
          get { return hasChannelGameid; }
        }
        public pb::ByteString ChannelGameid {
          get { return channelGameid_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasUid) return false;
            if (!hasPwd) return false;
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _loginRequestFieldNames;
          if (hasUid) {
            output.WriteBytes(1, field_names[3], Uid);
          }
          if (hasPwd) {
            output.WriteBytes(2, field_names[2], Pwd);
          }
          if (hasWsEntryid) {
            output.WriteInt32(11, field_names[4], WsEntryid);
          }
          if (hasChannelPlatid) {
            output.WriteBytes(12, field_names[1], ChannelPlatid);
          }
          if (hasChannelGameid) {
            output.WriteBytes(13, field_names[0], ChannelGameid);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasUid) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, Uid);
          }
          if (hasPwd) {
            size += pb::CodedOutputStream.ComputeBytesSize(2, Pwd);
          }
          if (hasWsEntryid) {
            size += pb::CodedOutputStream.ComputeInt32Size(11, WsEntryid);
          }
          if (hasChannelPlatid) {
            size += pb::CodedOutputStream.ComputeBytesSize(12, ChannelPlatid);
          }
          if (hasChannelGameid) {
            size += pb::CodedOutputStream.ComputeBytesSize(13, ChannelGameid);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static LoginRequest ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LoginRequest ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LoginRequest ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static LoginRequest ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private LoginRequest MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(LoginRequest prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<LoginRequest, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(LoginRequest cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private LoginRequest result;

          private LoginRequest PrepareBuilder() {
            if (resultIsReadOnly) {
              LoginRequest original = result;
              result = new LoginRequest();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override LoginRequest MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.AccountLoginService.Types.LoginRequest.Descriptor; }
          }

          public override LoginRequest DefaultInstanceForType {
            get { return global::gate.AccountLoginService.Types.LoginRequest.DefaultInstance; }
          }

          public override LoginRequest BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is LoginRequest) {
              return MergeFrom((LoginRequest) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(LoginRequest other) {
            if (other == global::gate.AccountLoginService.Types.LoginRequest.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasUid) {
              Uid = other.Uid;
            }
            if (other.HasPwd) {
              Pwd = other.Pwd;
            }
            if (other.HasWsEntryid) {
              WsEntryid = other.WsEntryid;
            }
            if (other.HasChannelPlatid) {
              ChannelPlatid = other.ChannelPlatid;
            }
            if (other.HasChannelGameid) {
              ChannelGameid = other.ChannelGameid;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_loginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _loginRequestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasUid = input.ReadBytes(ref result.uid_);
                  break;
                }
                case 18: {
                  result.hasPwd = input.ReadBytes(ref result.pwd_);
                  break;
                }
                case 88: {
                  result.hasWsEntryid = input.ReadInt32(ref result.wsEntryid_);
                  break;
                }
                case 98: {
                  result.hasChannelPlatid = input.ReadBytes(ref result.channelPlatid_);
                  break;
                }
                case 106: {
                  result.hasChannelGameid = input.ReadBytes(ref result.channelGameid_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasUid {
            get { return result.hasUid; }
          }
          public pb::ByteString Uid {
            get { return result.Uid; }
            set { SetUid(value); }
          }
          public Builder SetUid(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUid = true;
            result.uid_ = value;
            return this;
          }
          public Builder ClearUid() {
            PrepareBuilder();
            result.hasUid = false;
            result.uid_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasPwd {
            get { return result.hasPwd; }
          }
          public pb::ByteString Pwd {
            get { return result.Pwd; }
            set { SetPwd(value); }
          }
          public Builder SetPwd(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPwd = true;
            result.pwd_ = value;
            return this;
          }
          public Builder ClearPwd() {
            PrepareBuilder();
            result.hasPwd = false;
            result.pwd_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasWsEntryid {
            get { return result.hasWsEntryid; }
          }
          public int WsEntryid {
            get { return result.WsEntryid; }
            set { SetWsEntryid(value); }
          }
          public Builder SetWsEntryid(int value) {
            PrepareBuilder();
            result.hasWsEntryid = true;
            result.wsEntryid_ = value;
            return this;
          }
          public Builder ClearWsEntryid() {
            PrepareBuilder();
            result.hasWsEntryid = false;
            result.wsEntryid_ = 0;
            return this;
          }

          public bool HasChannelPlatid {
            get { return result.hasChannelPlatid; }
          }
          public pb::ByteString ChannelPlatid {
            get { return result.ChannelPlatid; }
            set { SetChannelPlatid(value); }
          }
          public Builder SetChannelPlatid(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasChannelPlatid = true;
            result.channelPlatid_ = value;
            return this;
          }
          public Builder ClearChannelPlatid() {
            PrepareBuilder();
            result.hasChannelPlatid = false;
            result.channelPlatid_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasChannelGameid {
            get { return result.hasChannelGameid; }
          }
          public pb::ByteString ChannelGameid {
            get { return result.ChannelGameid; }
            set { SetChannelGameid(value); }
          }
          public Builder SetChannelGameid(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasChannelGameid = true;
            result.channelGameid_ = value;
            return this;
          }
          public Builder ClearChannelGameid() {
            PrepareBuilder();
            result.hasChannelGameid = false;
            result.channelGameid_ = pb::ByteString.Empty;
            return this;
          }
        }
        static LoginRequest() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LoginResponse : pb::GeneratedMessage<LoginResponse, LoginResponse.Builder> {
        private LoginResponse() { }
        private static readonly LoginResponse defaultInstance = new LoginResponse().MakeReadOnly();
        private static readonly string[] _loginResponseFieldNames = new string[] { "result", "uuid" };
        private static readonly uint[] _loginResponseFieldTags = new uint[] { 8, 16 };
        public static LoginResponse DefaultInstance {
          get { return defaultInstance; }
        }

        public override LoginResponse DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override LoginResponse ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_AccountLoginService_LoginResponse__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<LoginResponse, LoginResponse.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_AccountLoginService_LoginResponse__FieldAccessorTable; }
        }

        public const int ResultFieldNumber = 1;
        private bool hasResult;
        private global::gate.AccountLoginService.Types.RESULT result_ = global::gate.AccountLoginService.Types.RESULT.OK;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::gate.AccountLoginService.Types.RESULT Result {
          get { return result_; }
        }

        public const int UuidFieldNumber = 2;
        private bool hasUuid;
        private ulong uuid_;
        public bool HasUuid {
          get { return hasUuid; }
        }
        public ulong Uuid {
          get { return uuid_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasResult) return false;
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _loginResponseFieldNames;
          if (hasResult) {
            output.WriteEnum(1, field_names[0], (int) Result, Result);
          }
          if (hasUuid) {
            output.WriteUInt64(2, field_names[1], Uuid);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasResult) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Result);
          }
          if (hasUuid) {
            size += pb::CodedOutputStream.ComputeUInt64Size(2, Uuid);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static LoginResponse ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LoginResponse ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LoginResponse ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static LoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static LoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static LoginResponse ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private LoginResponse MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(LoginResponse prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<LoginResponse, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(LoginResponse cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private LoginResponse result;

          private LoginResponse PrepareBuilder() {
            if (resultIsReadOnly) {
              LoginResponse original = result;
              result = new LoginResponse();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override LoginResponse MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.AccountLoginService.Types.LoginResponse.Descriptor; }
          }

          public override LoginResponse DefaultInstanceForType {
            get { return global::gate.AccountLoginService.Types.LoginResponse.DefaultInstance; }
          }

          public override LoginResponse BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is LoginResponse) {
              return MergeFrom((LoginResponse) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(LoginResponse other) {
            if (other == global::gate.AccountLoginService.Types.LoginResponse.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasResult) {
              Result = other.Result;
            }
            if (other.HasUuid) {
              Uuid = other.Uuid;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_loginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _loginResponseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.result_, out unknown)) {
                    result.hasResult = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 16: {
                  result.hasUuid = input.ReadUInt64(ref result.uuid_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasResult {
            get { return result.hasResult; }
          }
          public global::gate.AccountLoginService.Types.RESULT Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::gate.AccountLoginService.Types.RESULT value) {
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = global::gate.AccountLoginService.Types.RESULT.OK;
            return this;
          }

          public bool HasUuid {
            get { return result.hasUuid; }
          }
          public ulong Uuid {
            get { return result.Uuid; }
            set { SetUuid(value); }
          }
          public Builder SetUuid(ulong value) {
            PrepareBuilder();
            result.hasUuid = true;
            result.uuid_ = value;
            return this;
          }
          public Builder ClearUuid() {
            PrepareBuilder();
            result.hasUuid = false;
            result.uuid_ = 0UL;
            return this;
          }
        }
        static LoginResponse() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

    }
    #endregion

    public const int ReqFieldNumber = 1;
    private bool hasReq;
    private global::gate.AccountLoginService.Types.LoginRequest req_;
    public bool HasReq {
      get { return hasReq; }
    }
    public global::gate.AccountLoginService.Types.LoginRequest Req {
      get { return req_ ?? global::gate.AccountLoginService.Types.LoginRequest.DefaultInstance; }
    }

    public const int RespFieldNumber = 2;
    private bool hasResp;
    private global::gate.AccountLoginService.Types.LoginResponse resp_;
    public bool HasResp {
      get { return hasResp; }
    }
    public global::gate.AccountLoginService.Types.LoginResponse Resp {
      get { return resp_ ?? global::gate.AccountLoginService.Types.LoginResponse.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (HasReq) {
          if (!Req.IsInitialized) return false;
        }
        if (HasResp) {
          if (!Resp.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _accountLoginServiceFieldNames;
      if (hasReq) {
        output.WriteMessage(1, field_names[0], Req);
      }
      if (hasResp) {
        output.WriteMessage(2, field_names[1], Resp);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasReq) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Req);
      }
      if (hasResp) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Resp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AccountLoginService ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountLoginService ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountLoginService ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountLoginService ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountLoginService ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountLoginService ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountLoginService ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountLoginService ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountLoginService ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountLoginService ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountLoginService MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountLoginService prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountLoginService, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountLoginService cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private AccountLoginService result;

      private AccountLoginService PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountLoginService original = result;
          result = new AccountLoginService();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override AccountLoginService MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gate.AccountLoginService.Descriptor; }
      }

      public override AccountLoginService DefaultInstanceForType {
        get { return global::gate.AccountLoginService.DefaultInstance; }
      }

      public override AccountLoginService BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountLoginService) {
          return MergeFrom((AccountLoginService) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(AccountLoginService other) {
        if (other == global::gate.AccountLoginService.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReq) {
          MergeReq(other.Req);
        }
        if (other.HasResp) {
          MergeResp(other.Resp);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountLoginServiceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountLoginServiceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gate.AccountLoginService.Types.LoginRequest.Builder subBuilder = global::gate.AccountLoginService.Types.LoginRequest.CreateBuilder();
              if (result.hasReq) {
                subBuilder.MergeFrom(Req);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Req = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::gate.AccountLoginService.Types.LoginResponse.Builder subBuilder = global::gate.AccountLoginService.Types.LoginResponse.CreateBuilder();
              if (result.hasResp) {
                subBuilder.MergeFrom(Resp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Resp = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasReq {
       get { return result.hasReq; }
      }
      public global::gate.AccountLoginService.Types.LoginRequest Req {
        get { return result.Req; }
        set { SetReq(value); }
      }
      public Builder SetReq(global::gate.AccountLoginService.Types.LoginRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = value;
        return this;
      }
      public Builder SetReq(global::gate.AccountLoginService.Types.LoginRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReq(global::gate.AccountLoginService.Types.LoginRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReq &&
            result.req_ != global::gate.AccountLoginService.Types.LoginRequest.DefaultInstance) {
            result.req_ = global::gate.AccountLoginService.Types.LoginRequest.CreateBuilder(result.req_).MergeFrom(value).BuildPartial();
        } else {
          result.req_ = value;
        }
        result.hasReq = true;
        return this;
      }
      public Builder ClearReq() {
        PrepareBuilder();
        result.hasReq = false;
        result.req_ = null;
        return this;
      }

      public bool HasResp {
       get { return result.hasResp; }
      }
      public global::gate.AccountLoginService.Types.LoginResponse Resp {
        get { return result.Resp; }
        set { SetResp(value); }
      }
      public Builder SetResp(global::gate.AccountLoginService.Types.LoginResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = value;
        return this;
      }
      public Builder SetResp(global::gate.AccountLoginService.Types.LoginResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResp(global::gate.AccountLoginService.Types.LoginResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResp &&
            result.resp_ != global::gate.AccountLoginService.Types.LoginResponse.DefaultInstance) {
            result.resp_ = global::gate.AccountLoginService.Types.LoginResponse.CreateBuilder(result.resp_).MergeFrom(value).BuildPartial();
        } else {
          result.resp_ = value;
        }
        result.hasResp = true;
        return this;
      }
      public Builder ClearResp() {
        PrepareBuilder();
        result.hasResp = false;
        result.resp_ = null;
        return this;
      }
    }
    static AccountLoginService() {
      object.ReferenceEquals(global::gate.Gate.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountReloginService : pb::GeneratedMessage<AccountReloginService, AccountReloginService.Builder> {
    private AccountReloginService() { }
    private static readonly AccountReloginService defaultInstance = new AccountReloginService().MakeReadOnly();
    private static readonly string[] _accountReloginServiceFieldNames = new string[] { "req", "resp" };
    private static readonly uint[] _accountReloginServiceFieldTags = new uint[] { 10, 18 };
    public static AccountReloginService DefaultInstance {
      get { return defaultInstance; }
    }

    public override AccountReloginService DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override AccountReloginService ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::gate.Gate.internal__static_gate_AccountReloginService__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<AccountReloginService, AccountReloginService.Builder> InternalFieldAccessors {
      get { return global::gate.Gate.internal__static_gate_AccountReloginService__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum RESULT {
        OK = 0,
        FAILED = 1,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ReloginRequest : pb::GeneratedMessage<ReloginRequest, ReloginRequest.Builder> {
        private ReloginRequest() { }
        private static readonly ReloginRequest defaultInstance = new ReloginRequest().MakeReadOnly();
        private static readonly string[] _reloginRequestFieldNames = new string[] { "pwd", "uid" };
        private static readonly uint[] _reloginRequestFieldTags = new uint[] { 18, 10 };
        public static ReloginRequest DefaultInstance {
          get { return defaultInstance; }
        }

        public override ReloginRequest DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override ReloginRequest ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_AccountReloginService_ReloginRequest__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ReloginRequest, ReloginRequest.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_AccountReloginService_ReloginRequest__FieldAccessorTable; }
        }

        public const int UidFieldNumber = 1;
        private bool hasUid;
        private pb::ByteString uid_ = pb::ByteString.Empty;
        public bool HasUid {
          get { return hasUid; }
        }
        public pb::ByteString Uid {
          get { return uid_; }
        }

        public const int PwdFieldNumber = 2;
        private bool hasPwd;
        private pb::ByteString pwd_ = pb::ByteString.Empty;
        public bool HasPwd {
          get { return hasPwd; }
        }
        public pb::ByteString Pwd {
          get { return pwd_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasUid) return false;
            if (!hasPwd) return false;
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _reloginRequestFieldNames;
          if (hasUid) {
            output.WriteBytes(1, field_names[1], Uid);
          }
          if (hasPwd) {
            output.WriteBytes(2, field_names[0], Pwd);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasUid) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, Uid);
          }
          if (hasPwd) {
            size += pb::CodedOutputStream.ComputeBytesSize(2, Pwd);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static ReloginRequest ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ReloginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ReloginRequest ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ReloginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ReloginRequest ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ReloginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ReloginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ReloginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ReloginRequest ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ReloginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ReloginRequest MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ReloginRequest prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ReloginRequest, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ReloginRequest cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private ReloginRequest result;

          private ReloginRequest PrepareBuilder() {
            if (resultIsReadOnly) {
              ReloginRequest original = result;
              result = new ReloginRequest();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override ReloginRequest MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.AccountReloginService.Types.ReloginRequest.Descriptor; }
          }

          public override ReloginRequest DefaultInstanceForType {
            get { return global::gate.AccountReloginService.Types.ReloginRequest.DefaultInstance; }
          }

          public override ReloginRequest BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ReloginRequest) {
              return MergeFrom((ReloginRequest) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(ReloginRequest other) {
            if (other == global::gate.AccountReloginService.Types.ReloginRequest.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasUid) {
              Uid = other.Uid;
            }
            if (other.HasPwd) {
              Pwd = other.Pwd;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_reloginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _reloginRequestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasUid = input.ReadBytes(ref result.uid_);
                  break;
                }
                case 18: {
                  result.hasPwd = input.ReadBytes(ref result.pwd_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasUid {
            get { return result.hasUid; }
          }
          public pb::ByteString Uid {
            get { return result.Uid; }
            set { SetUid(value); }
          }
          public Builder SetUid(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUid = true;
            result.uid_ = value;
            return this;
          }
          public Builder ClearUid() {
            PrepareBuilder();
            result.hasUid = false;
            result.uid_ = pb::ByteString.Empty;
            return this;
          }

          public bool HasPwd {
            get { return result.hasPwd; }
          }
          public pb::ByteString Pwd {
            get { return result.Pwd; }
            set { SetPwd(value); }
          }
          public Builder SetPwd(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPwd = true;
            result.pwd_ = value;
            return this;
          }
          public Builder ClearPwd() {
            PrepareBuilder();
            result.hasPwd = false;
            result.pwd_ = pb::ByteString.Empty;
            return this;
          }
        }
        static ReloginRequest() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ReloginResponse : pb::GeneratedMessage<ReloginResponse, ReloginResponse.Builder> {
        private ReloginResponse() { }
        private static readonly ReloginResponse defaultInstance = new ReloginResponse().MakeReadOnly();
        private static readonly string[] _reloginResponseFieldNames = new string[] { "result", "uuid" };
        private static readonly uint[] _reloginResponseFieldTags = new uint[] { 8, 16 };
        public static ReloginResponse DefaultInstance {
          get { return defaultInstance; }
        }

        public override ReloginResponse DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override ReloginResponse ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_AccountReloginService_ReloginResponse__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ReloginResponse, ReloginResponse.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_AccountReloginService_ReloginResponse__FieldAccessorTable; }
        }

        public const int ResultFieldNumber = 1;
        private bool hasResult;
        private global::gate.AccountReloginService.Types.RESULT result_ = global::gate.AccountReloginService.Types.RESULT.OK;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::gate.AccountReloginService.Types.RESULT Result {
          get { return result_; }
        }

        public const int UuidFieldNumber = 2;
        private bool hasUuid;
        private ulong uuid_;
        public bool HasUuid {
          get { return hasUuid; }
        }
        public ulong Uuid {
          get { return uuid_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasResult) return false;
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _reloginResponseFieldNames;
          if (hasResult) {
            output.WriteEnum(1, field_names[0], (int) Result, Result);
          }
          if (hasUuid) {
            output.WriteUInt64(2, field_names[1], Uuid);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasResult) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Result);
          }
          if (hasUuid) {
            size += pb::CodedOutputStream.ComputeUInt64Size(2, Uuid);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static ReloginResponse ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ReloginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ReloginResponse ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ReloginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ReloginResponse ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ReloginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ReloginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ReloginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ReloginResponse ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ReloginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ReloginResponse MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ReloginResponse prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ReloginResponse, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ReloginResponse cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private ReloginResponse result;

          private ReloginResponse PrepareBuilder() {
            if (resultIsReadOnly) {
              ReloginResponse original = result;
              result = new ReloginResponse();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override ReloginResponse MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.AccountReloginService.Types.ReloginResponse.Descriptor; }
          }

          public override ReloginResponse DefaultInstanceForType {
            get { return global::gate.AccountReloginService.Types.ReloginResponse.DefaultInstance; }
          }

          public override ReloginResponse BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ReloginResponse) {
              return MergeFrom((ReloginResponse) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(ReloginResponse other) {
            if (other == global::gate.AccountReloginService.Types.ReloginResponse.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasResult) {
              Result = other.Result;
            }
            if (other.HasUuid) {
              Uuid = other.Uuid;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_reloginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _reloginResponseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.result_, out unknown)) {
                    result.hasResult = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 16: {
                  result.hasUuid = input.ReadUInt64(ref result.uuid_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasResult {
            get { return result.hasResult; }
          }
          public global::gate.AccountReloginService.Types.RESULT Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::gate.AccountReloginService.Types.RESULT value) {
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = global::gate.AccountReloginService.Types.RESULT.OK;
            return this;
          }

          public bool HasUuid {
            get { return result.hasUuid; }
          }
          public ulong Uuid {
            get { return result.Uuid; }
            set { SetUuid(value); }
          }
          public Builder SetUuid(ulong value) {
            PrepareBuilder();
            result.hasUuid = true;
            result.uuid_ = value;
            return this;
          }
          public Builder ClearUuid() {
            PrepareBuilder();
            result.hasUuid = false;
            result.uuid_ = 0UL;
            return this;
          }
        }
        static ReloginResponse() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

    }
    #endregion

    public const int ReqFieldNumber = 1;
    private bool hasReq;
    private global::gate.AccountReloginService.Types.ReloginRequest req_;
    public bool HasReq {
      get { return hasReq; }
    }
    public global::gate.AccountReloginService.Types.ReloginRequest Req {
      get { return req_ ?? global::gate.AccountReloginService.Types.ReloginRequest.DefaultInstance; }
    }

    public const int RespFieldNumber = 2;
    private bool hasResp;
    private global::gate.AccountReloginService.Types.ReloginResponse resp_;
    public bool HasResp {
      get { return hasResp; }
    }
    public global::gate.AccountReloginService.Types.ReloginResponse Resp {
      get { return resp_ ?? global::gate.AccountReloginService.Types.ReloginResponse.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (HasReq) {
          if (!Req.IsInitialized) return false;
        }
        if (HasResp) {
          if (!Resp.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _accountReloginServiceFieldNames;
      if (hasReq) {
        output.WriteMessage(1, field_names[0], Req);
      }
      if (hasResp) {
        output.WriteMessage(2, field_names[1], Resp);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasReq) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Req);
      }
      if (hasResp) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Resp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AccountReloginService ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountReloginService ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountReloginService ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountReloginService ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountReloginService ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountReloginService ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountReloginService ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountReloginService ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountReloginService ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountReloginService ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountReloginService MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountReloginService prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountReloginService, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountReloginService cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private AccountReloginService result;

      private AccountReloginService PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountReloginService original = result;
          result = new AccountReloginService();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override AccountReloginService MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gate.AccountReloginService.Descriptor; }
      }

      public override AccountReloginService DefaultInstanceForType {
        get { return global::gate.AccountReloginService.DefaultInstance; }
      }

      public override AccountReloginService BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountReloginService) {
          return MergeFrom((AccountReloginService) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(AccountReloginService other) {
        if (other == global::gate.AccountReloginService.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReq) {
          MergeReq(other.Req);
        }
        if (other.HasResp) {
          MergeResp(other.Resp);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountReloginServiceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountReloginServiceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gate.AccountReloginService.Types.ReloginRequest.Builder subBuilder = global::gate.AccountReloginService.Types.ReloginRequest.CreateBuilder();
              if (result.hasReq) {
                subBuilder.MergeFrom(Req);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Req = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::gate.AccountReloginService.Types.ReloginResponse.Builder subBuilder = global::gate.AccountReloginService.Types.ReloginResponse.CreateBuilder();
              if (result.hasResp) {
                subBuilder.MergeFrom(Resp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Resp = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasReq {
       get { return result.hasReq; }
      }
      public global::gate.AccountReloginService.Types.ReloginRequest Req {
        get { return result.Req; }
        set { SetReq(value); }
      }
      public Builder SetReq(global::gate.AccountReloginService.Types.ReloginRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = value;
        return this;
      }
      public Builder SetReq(global::gate.AccountReloginService.Types.ReloginRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReq(global::gate.AccountReloginService.Types.ReloginRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReq &&
            result.req_ != global::gate.AccountReloginService.Types.ReloginRequest.DefaultInstance) {
            result.req_ = global::gate.AccountReloginService.Types.ReloginRequest.CreateBuilder(result.req_).MergeFrom(value).BuildPartial();
        } else {
          result.req_ = value;
        }
        result.hasReq = true;
        return this;
      }
      public Builder ClearReq() {
        PrepareBuilder();
        result.hasReq = false;
        result.req_ = null;
        return this;
      }

      public bool HasResp {
       get { return result.hasResp; }
      }
      public global::gate.AccountReloginService.Types.ReloginResponse Resp {
        get { return result.Resp; }
        set { SetResp(value); }
      }
      public Builder SetResp(global::gate.AccountReloginService.Types.ReloginResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = value;
        return this;
      }
      public Builder SetResp(global::gate.AccountReloginService.Types.ReloginResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResp(global::gate.AccountReloginService.Types.ReloginResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResp &&
            result.resp_ != global::gate.AccountReloginService.Types.ReloginResponse.DefaultInstance) {
            result.resp_ = global::gate.AccountReloginService.Types.ReloginResponse.CreateBuilder(result.resp_).MergeFrom(value).BuildPartial();
        } else {
          result.resp_ = value;
        }
        result.hasResp = true;
        return this;
      }
      public Builder ClearResp() {
        PrepareBuilder();
        result.hasResp = false;
        result.resp_ = null;
        return this;
      }
    }
    static AccountReloginService() {
      object.ReferenceEquals(global::gate.Gate.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameServer : pb::GeneratedMessage<GameServer, GameServer.Builder> {
    private GameServer() { }
    private static readonly GameServer defaultInstance = new GameServer().MakeReadOnly();
    private static readonly string[] _gameServerFieldNames = new string[] { "id", "name" };
    private static readonly uint[] _gameServerFieldTags = new uint[] { 8, 18 };
    public static GameServer DefaultInstance {
      get { return defaultInstance; }
    }

    public override GameServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override GameServer ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::gate.Gate.internal__static_gate_GameServer__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<GameServer, GameServer.Builder> InternalFieldAccessors {
      get { return global::gate.Gate.internal__static_gate_GameServer__FieldAccessorTable; }
    }

    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }

    public const int NameFieldNumber = 2;
    private bool hasName;
    private pb::ByteString name_ = pb::ByteString.Empty;
    public bool HasName {
      get { return hasName; }
    }
    public pb::ByteString Name {
      get { return name_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameServerFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasName) {
        output.WriteBytes(2, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameServer MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameServer prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private GameServer result;

      private GameServer PrepareBuilder() {
        if (resultIsReadOnly) {
          GameServer original = result;
          result = new GameServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override GameServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gate.GameServer.Descriptor; }
      }

      public override GameServer DefaultInstanceForType {
        get { return global::gate.GameServer.DefaultInstance; }
      }

      public override GameServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameServer) {
          return MergeFrom((GameServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(GameServer other) {
        if (other == global::gate.GameServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadBytes(ref result.name_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }

      public bool HasName {
        get { return result.hasName; }
      }
      public pb::ByteString Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = pb::ByteString.Empty;
        return this;
      }
    }
    static GameServer() {
      object.ReferenceEquals(global::gate.Gate.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameServerList : pb::GeneratedMessage<GameServerList, GameServerList.Builder> {
    private GameServerList() { }
    private static readonly GameServerList defaultInstance = new GameServerList().MakeReadOnly();
    private static readonly string[] _gameServerListFieldNames = new string[] { "list" };
    private static readonly uint[] _gameServerListFieldTags = new uint[] { 10 };
    public static GameServerList DefaultInstance {
      get { return defaultInstance; }
    }

    public override GameServerList DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override GameServerList ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::gate.Gate.internal__static_gate_GameServerList__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<GameServerList, GameServerList.Builder> InternalFieldAccessors {
      get { return global::gate.Gate.internal__static_gate_GameServerList__FieldAccessorTable; }
    }

    public const int ListFieldNumber = 1;
    private pbc::PopsicleList<global::gate.GameServer> list_ = new pbc::PopsicleList<global::gate.GameServer>();
    public scg::IList<global::gate.GameServer> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::gate.GameServer GetList(int index) {
      return list_[index];
    }

    public override bool IsInitialized {
      get {
        foreach (global::gate.GameServer element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameServerListFieldNames;
      if (list_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], list_);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::gate.GameServer element in ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameServerList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameServerList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameServerList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameServerList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameServerList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameServerList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameServerList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameServerList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameServerList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameServerList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameServerList MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameServerList prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameServerList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameServerList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private GameServerList result;

      private GameServerList PrepareBuilder() {
        if (resultIsReadOnly) {
          GameServerList original = result;
          result = new GameServerList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override GameServerList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gate.GameServerList.Descriptor; }
      }

      public override GameServerList DefaultInstanceForType {
        get { return global::gate.GameServerList.DefaultInstance; }
      }

      public override GameServerList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameServerList) {
          return MergeFrom((GameServerList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(GameServerList other) {
        if (other == global::gate.GameServerList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameServerListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameServerListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.list_, global::gate.GameServer.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::gate.GameServer> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::gate.GameServer GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::gate.GameServer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::gate.GameServer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::gate.GameServer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::gate.GameServer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::gate.GameServer> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
    }
    static GameServerList() {
      object.ReferenceEquals(global::gate.Gate.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameServerService : pb::GeneratedMessage<GameServerService, GameServerService.Builder> {
    private GameServerService() { }
    private static readonly GameServerService defaultInstance = new GameServerService().MakeReadOnly();
    private static readonly string[] _gameServerServiceFieldNames = new string[] { "req", "resp" };
    private static readonly uint[] _gameServerServiceFieldTags = new uint[] { 10, 18 };
    public static GameServerService DefaultInstance {
      get { return defaultInstance; }
    }

    public override GameServerService DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override GameServerService ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::gate.Gate.internal__static_gate_GameServerService__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<GameServerService, GameServerService.Builder> InternalFieldAccessors {
      get { return global::gate.Gate.internal__static_gate_GameServerService__FieldAccessorTable; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum GAME_SERVER_COMMAND {
        QUERY = 1,
        SELECT_SERVER = 2,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class GameServerRequest : pb::GeneratedMessage<GameServerRequest, GameServerRequest.Builder> {
        private GameServerRequest() { }
        private static readonly GameServerRequest defaultInstance = new GameServerRequest().MakeReadOnly();
        private static readonly string[] _gameServerRequestFieldNames = new string[] { "cmd", "serverid" };
        private static readonly uint[] _gameServerRequestFieldTags = new uint[] { 8, 16 };
        public static GameServerRequest DefaultInstance {
          get { return defaultInstance; }
        }

        public override GameServerRequest DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override GameServerRequest ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_GameServerService_GameServerRequest__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<GameServerRequest, GameServerRequest.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_GameServerService_GameServerRequest__FieldAccessorTable; }
        }

        public const int CmdFieldNumber = 1;
        private bool hasCmd;
        private global::gate.GameServerService.Types.GAME_SERVER_COMMAND cmd_ = global::gate.GameServerService.Types.GAME_SERVER_COMMAND.QUERY;
        public bool HasCmd {
          get { return hasCmd; }
        }
        public global::gate.GameServerService.Types.GAME_SERVER_COMMAND Cmd {
          get { return cmd_; }
        }

        public const int ServeridFieldNumber = 2;
        private bool hasServerid;
        private int serverid_;
        public bool HasServerid {
          get { return hasServerid; }
        }
        public int Serverid {
          get { return serverid_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasCmd) return false;
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _gameServerRequestFieldNames;
          if (hasCmd) {
            output.WriteEnum(1, field_names[0], (int) Cmd, Cmd);
          }
          if (hasServerid) {
            output.WriteInt32(2, field_names[1], Serverid);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasCmd) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Cmd);
          }
          if (hasServerid) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Serverid);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static GameServerRequest ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GameServerRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GameServerRequest ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GameServerRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GameServerRequest ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GameServerRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static GameServerRequest ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static GameServerRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static GameServerRequest ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GameServerRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private GameServerRequest MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(GameServerRequest prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<GameServerRequest, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(GameServerRequest cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private GameServerRequest result;

          private GameServerRequest PrepareBuilder() {
            if (resultIsReadOnly) {
              GameServerRequest original = result;
              result = new GameServerRequest();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override GameServerRequest MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.GameServerService.Types.GameServerRequest.Descriptor; }
          }

          public override GameServerRequest DefaultInstanceForType {
            get { return global::gate.GameServerService.Types.GameServerRequest.DefaultInstance; }
          }

          public override GameServerRequest BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is GameServerRequest) {
              return MergeFrom((GameServerRequest) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(GameServerRequest other) {
            if (other == global::gate.GameServerService.Types.GameServerRequest.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasCmd) {
              Cmd = other.Cmd;
            }
            if (other.HasServerid) {
              Serverid = other.Serverid;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_gameServerRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _gameServerRequestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.cmd_, out unknown)) {
                    result.hasCmd = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 16: {
                  result.hasServerid = input.ReadInt32(ref result.serverid_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasCmd {
            get { return result.hasCmd; }
          }
          public global::gate.GameServerService.Types.GAME_SERVER_COMMAND Cmd {
            get { return result.Cmd; }
            set { SetCmd(value); }
          }
          public Builder SetCmd(global::gate.GameServerService.Types.GAME_SERVER_COMMAND value) {
            PrepareBuilder();
            result.hasCmd = true;
            result.cmd_ = value;
            return this;
          }
          public Builder ClearCmd() {
            PrepareBuilder();
            result.hasCmd = false;
            result.cmd_ = global::gate.GameServerService.Types.GAME_SERVER_COMMAND.QUERY;
            return this;
          }

          public bool HasServerid {
            get { return result.hasServerid; }
          }
          public int Serverid {
            get { return result.Serverid; }
            set { SetServerid(value); }
          }
          public Builder SetServerid(int value) {
            PrepareBuilder();
            result.hasServerid = true;
            result.serverid_ = value;
            return this;
          }
          public Builder ClearServerid() {
            PrepareBuilder();
            result.hasServerid = false;
            result.serverid_ = 0;
            return this;
          }
        }
        static GameServerRequest() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class GameServerResponse : pb::GeneratedMessage<GameServerResponse, GameServerResponse.Builder> {
        private GameServerResponse() { }
        private static readonly GameServerResponse defaultInstance = new GameServerResponse().MakeReadOnly();
        private static readonly string[] _gameServerResponseFieldNames = new string[] { "last_serverid", "result", "server_list" };
        private static readonly uint[] _gameServerResponseFieldTags = new uint[] { 24, 8, 18 };
        public static GameServerResponse DefaultInstance {
          get { return defaultInstance; }
        }

        public override GameServerResponse DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override GameServerResponse ThisMessage {
          get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor {
          get { return global::gate.Gate.internal__static_gate_GameServerService_GameServerResponse__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<GameServerResponse, GameServerResponse.Builder> InternalFieldAccessors {
          get { return global::gate.Gate.internal__static_gate_GameServerService_GameServerResponse__FieldAccessorTable; }
        }

        public const int ResultFieldNumber = 1;
        private bool hasResult;
        private int result_;
        public bool HasResult {
          get { return hasResult; }
        }
        public int Result {
          get { return result_; }
        }

        public const int ServerListFieldNumber = 2;
        private bool hasServerList;
        private global::gate.GameServerList serverList_;
        public bool HasServerList {
          get { return hasServerList; }
        }
        public global::gate.GameServerList ServerList {
          get { return serverList_ ?? global::gate.GameServerList.DefaultInstance; }
        }

        public const int LastServeridFieldNumber = 3;
        private bool hasLastServerid;
        private int lastServerid_;
        public bool HasLastServerid {
          get { return hasLastServerid; }
        }
        public int LastServerid {
          get { return lastServerid_; }
        }

        public override bool IsInitialized {
          get {
            if (!hasResult) return false;
            if (HasServerList) {
              if (!ServerList.IsInitialized) return false;
            }
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _gameServerResponseFieldNames;
          if (hasResult) {
            output.WriteInt32(1, field_names[1], Result);
          }
          if (hasServerList) {
            output.WriteMessage(2, field_names[2], ServerList);
          }
          if (hasLastServerid) {
            output.WriteInt32(3, field_names[0], LastServerid);
          }
          UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasResult) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
          }
          if (hasServerList) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, ServerList);
          }
          if (hasLastServerid) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, LastServerid);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static GameServerResponse ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GameServerResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GameServerResponse ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GameServerResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GameServerResponse ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GameServerResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static GameServerResponse ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static GameServerResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static GameServerResponse ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GameServerResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private GameServerResponse MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(GameServerResponse prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<GameServerResponse, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(GameServerResponse cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private GameServerResponse result;

          private GameServerResponse PrepareBuilder() {
            if (resultIsReadOnly) {
              GameServerResponse original = result;
              result = new GameServerResponse();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override GameServerResponse MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::gate.GameServerService.Types.GameServerResponse.Descriptor; }
          }

          public override GameServerResponse DefaultInstanceForType {
            get { return global::gate.GameServerService.Types.GameServerResponse.DefaultInstance; }
          }

          public override GameServerResponse BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessage other) {
            if (other is GameServerResponse) {
              return MergeFrom((GameServerResponse) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(GameServerResponse other) {
            if (other == global::gate.GameServerService.Types.GameServerResponse.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasResult) {
              Result = other.Result;
            }
            if (other.HasServerList) {
              MergeServerList(other.ServerList);
            }
            if (other.HasLastServerid) {
              LastServerid = other.LastServerid;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_gameServerResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _gameServerResponseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasResult = input.ReadInt32(ref result.result_);
                  break;
                }
                case 18: {
                  global::gate.GameServerList.Builder subBuilder = global::gate.GameServerList.CreateBuilder();
                  if (result.hasServerList) {
                    subBuilder.MergeFrom(ServerList);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  ServerList = subBuilder.BuildPartial();
                  break;
                }
                case 24: {
                  result.hasLastServerid = input.ReadInt32(ref result.lastServerid_);
                  break;
                }
              }
            }

            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }


          public bool HasResult {
            get { return result.hasResult; }
          }
          public int Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(int value) {
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = 0;
            return this;
          }

          public bool HasServerList {
           get { return result.hasServerList; }
          }
          public global::gate.GameServerList ServerList {
            get { return result.ServerList; }
            set { SetServerList(value); }
          }
          public Builder SetServerList(global::gate.GameServerList value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasServerList = true;
            result.serverList_ = value;
            return this;
          }
          public Builder SetServerList(global::gate.GameServerList.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasServerList = true;
            result.serverList_ = builderForValue.Build();
            return this;
          }
          public Builder MergeServerList(global::gate.GameServerList value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasServerList &&
                result.serverList_ != global::gate.GameServerList.DefaultInstance) {
                result.serverList_ = global::gate.GameServerList.CreateBuilder(result.serverList_).MergeFrom(value).BuildPartial();
            } else {
              result.serverList_ = value;
            }
            result.hasServerList = true;
            return this;
          }
          public Builder ClearServerList() {
            PrepareBuilder();
            result.hasServerList = false;
            result.serverList_ = null;
            return this;
          }

          public bool HasLastServerid {
            get { return result.hasLastServerid; }
          }
          public int LastServerid {
            get { return result.LastServerid; }
            set { SetLastServerid(value); }
          }
          public Builder SetLastServerid(int value) {
            PrepareBuilder();
            result.hasLastServerid = true;
            result.lastServerid_ = value;
            return this;
          }
          public Builder ClearLastServerid() {
            PrepareBuilder();
            result.hasLastServerid = false;
            result.lastServerid_ = 0;
            return this;
          }
        }
        static GameServerResponse() {
          object.ReferenceEquals(global::gate.Gate.Descriptor, null);
        }
      }

    }
    #endregion

    public const int ReqFieldNumber = 1;
    private bool hasReq;
    private global::gate.GameServerService.Types.GameServerRequest req_;
    public bool HasReq {
      get { return hasReq; }
    }
    public global::gate.GameServerService.Types.GameServerRequest Req {
      get { return req_ ?? global::gate.GameServerService.Types.GameServerRequest.DefaultInstance; }
    }

    public const int RespFieldNumber = 2;
    private bool hasResp;
    private global::gate.GameServerService.Types.GameServerResponse resp_;
    public bool HasResp {
      get { return hasResp; }
    }
    public global::gate.GameServerService.Types.GameServerResponse Resp {
      get { return resp_ ?? global::gate.GameServerService.Types.GameServerResponse.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        if (HasReq) {
          if (!Req.IsInitialized) return false;
        }
        if (HasResp) {
          if (!Resp.IsInitialized) return false;
        }
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameServerServiceFieldNames;
      if (hasReq) {
        output.WriteMessage(1, field_names[0], Req);
      }
      if (hasResp) {
        output.WriteMessage(2, field_names[1], Resp);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasReq) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Req);
      }
      if (hasResp) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Resp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameServerService ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameServerService ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameServerService ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameServerService ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameServerService ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameServerService ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameServerService ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameServerService ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameServerService ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameServerService ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameServerService MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameServerService prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameServerService, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameServerService cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private GameServerService result;

      private GameServerService PrepareBuilder() {
        if (resultIsReadOnly) {
          GameServerService original = result;
          result = new GameServerService();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override GameServerService MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gate.GameServerService.Descriptor; }
      }

      public override GameServerService DefaultInstanceForType {
        get { return global::gate.GameServerService.DefaultInstance; }
      }

      public override GameServerService BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameServerService) {
          return MergeFrom((GameServerService) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(GameServerService other) {
        if (other == global::gate.GameServerService.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReq) {
          MergeReq(other.Req);
        }
        if (other.HasResp) {
          MergeResp(other.Resp);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameServerServiceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameServerServiceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gate.GameServerService.Types.GameServerRequest.Builder subBuilder = global::gate.GameServerService.Types.GameServerRequest.CreateBuilder();
              if (result.hasReq) {
                subBuilder.MergeFrom(Req);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Req = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::gate.GameServerService.Types.GameServerResponse.Builder subBuilder = global::gate.GameServerService.Types.GameServerResponse.CreateBuilder();
              if (result.hasResp) {
                subBuilder.MergeFrom(Resp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Resp = subBuilder.BuildPartial();
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasReq {
       get { return result.hasReq; }
      }
      public global::gate.GameServerService.Types.GameServerRequest Req {
        get { return result.Req; }
        set { SetReq(value); }
      }
      public Builder SetReq(global::gate.GameServerService.Types.GameServerRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = value;
        return this;
      }
      public Builder SetReq(global::gate.GameServerService.Types.GameServerRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReq = true;
        result.req_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReq(global::gate.GameServerService.Types.GameServerRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReq &&
            result.req_ != global::gate.GameServerService.Types.GameServerRequest.DefaultInstance) {
            result.req_ = global::gate.GameServerService.Types.GameServerRequest.CreateBuilder(result.req_).MergeFrom(value).BuildPartial();
        } else {
          result.req_ = value;
        }
        result.hasReq = true;
        return this;
      }
      public Builder ClearReq() {
        PrepareBuilder();
        result.hasReq = false;
        result.req_ = null;
        return this;
      }

      public bool HasResp {
       get { return result.hasResp; }
      }
      public global::gate.GameServerService.Types.GameServerResponse Resp {
        get { return result.Resp; }
        set { SetResp(value); }
      }
      public Builder SetResp(global::gate.GameServerService.Types.GameServerResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = value;
        return this;
      }
      public Builder SetResp(global::gate.GameServerService.Types.GameServerResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResp = true;
        result.resp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResp(global::gate.GameServerService.Types.GameServerResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResp &&
            result.resp_ != global::gate.GameServerService.Types.GameServerResponse.DefaultInstance) {
            result.resp_ = global::gate.GameServerService.Types.GameServerResponse.CreateBuilder(result.resp_).MergeFrom(value).BuildPartial();
        } else {
          result.resp_ = value;
        }
        result.hasResp = true;
        return this;
      }
      public Builder ClearResp() {
        PrepareBuilder();
        result.hasResp = false;
        result.resp_ = null;
        return this;
      }
    }
    static GameServerService() {
      object.ReferenceEquals(global::gate.Gate.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
