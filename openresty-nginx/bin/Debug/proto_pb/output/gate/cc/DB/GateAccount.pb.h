// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateAccount.proto

#ifndef PROTOBUF_INCLUDED_GateAccount_2eproto
#define PROTOBUF_INCLUDED_GateAccount_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GateAccount_2eproto 

namespace protobuf_GateAccount_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GateAccount_2eproto
namespace db {
class GateAccount;
class GateAccountDefaultTypeInternal;
extern GateAccountDefaultTypeInternal _GateAccount_default_instance_;
class GateActiveCode;
class GateActiveCodeDefaultTypeInternal;
extern GateActiveCodeDefaultTypeInternal _GateActiveCode_default_instance_;
class GateCfgActiveCode;
class GateCfgActiveCodeDefaultTypeInternal;
extern GateCfgActiveCodeDefaultTypeInternal _GateCfgActiveCode_default_instance_;
class GateLogOnline;
class GateLogOnlineDefaultTypeInternal;
extern GateLogOnlineDefaultTypeInternal _GateLogOnline_default_instance_;
class proc_register_account;
class proc_register_accountDefaultTypeInternal;
extern proc_register_accountDefaultTypeInternal _proc_register_account_default_instance_;
class proc_register_account_Parameter;
class proc_register_account_ParameterDefaultTypeInternal;
extern proc_register_account_ParameterDefaultTypeInternal _proc_register_account_Parameter_default_instance_;
class proc_register_account_ReturnRecord;
class proc_register_account_ReturnRecordDefaultTypeInternal;
extern proc_register_account_ReturnRecordDefaultTypeInternal _proc_register_account_ReturnRecord_default_instance_;
class proc_save_account_state;
class proc_save_account_stateDefaultTypeInternal;
extern proc_save_account_stateDefaultTypeInternal _proc_save_account_state_default_instance_;
class proc_save_account_state_Parameter;
class proc_save_account_state_ParameterDefaultTypeInternal;
extern proc_save_account_state_ParameterDefaultTypeInternal _proc_save_account_state_Parameter_default_instance_;
}  // namespace db
namespace google {
namespace protobuf {
template<> ::db::GateAccount* Arena::CreateMaybeMessage<::db::GateAccount>(Arena*);
template<> ::db::GateActiveCode* Arena::CreateMaybeMessage<::db::GateActiveCode>(Arena*);
template<> ::db::GateCfgActiveCode* Arena::CreateMaybeMessage<::db::GateCfgActiveCode>(Arena*);
template<> ::db::GateLogOnline* Arena::CreateMaybeMessage<::db::GateLogOnline>(Arena*);
template<> ::db::proc_register_account* Arena::CreateMaybeMessage<::db::proc_register_account>(Arena*);
template<> ::db::proc_register_account_Parameter* Arena::CreateMaybeMessage<::db::proc_register_account_Parameter>(Arena*);
template<> ::db::proc_register_account_ReturnRecord* Arena::CreateMaybeMessage<::db::proc_register_account_ReturnRecord>(Arena*);
template<> ::db::proc_save_account_state* Arena::CreateMaybeMessage<::db::proc_save_account_state>(Arena*);
template<> ::db::proc_save_account_state_Parameter* Arena::CreateMaybeMessage<::db::proc_save_account_state_Parameter>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace db {

// ===================================================================

class GateAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GateAccount) */ {
 public:
  GateAccount();
  virtual ~GateAccount();

  GateAccount(const GateAccount& from);

  inline GateAccount& operator=(const GateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateAccount(GateAccount&& from) noexcept
    : GateAccount() {
    *this = ::std::move(from);
  }

  inline GateAccount& operator=(GateAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateAccount* internal_default_instance() {
    return reinterpret_cast<const GateAccount*>(
               &_GateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(GateAccount* other);
  void Swap(GateAccount* other);
  friend void swap(GateAccount& a, GateAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateAccount* New() const final {
    return CreateMaybeMessage<GateAccount>(NULL);
  }

  GateAccount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateAccount& from);
  void MergeFrom(const GateAccount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateAccount* other);
  protected:
  explicit GateAccount(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes pwd = 2;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pwd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd(
      ::std::string* pwd);

  // required bytes nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes email = 4;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const void* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_email();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      ::std::string* email);

  // required bytes platid = 7;
  bool has_platid() const;
  void clear_platid();
  static const int kPlatidFieldNumber = 7;
  const ::std::string& platid() const;
  void set_platid(const ::std::string& value);
  #if LANG_CXX11
  void set_platid(::std::string&& value);
  #endif
  void set_platid(const char* value);
  void set_platid(const void* value, size_t size);
  ::std::string* mutable_platid();
  ::std::string* release_platid();
  void set_allocated_platid(::std::string* platid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_platid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platid(
      ::std::string* platid);

  // required bytes gameid = 8;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 8;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_gameid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gameid(
      ::std::string* gameid);

  // required int32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 admin = 6;
  bool has_admin() const;
  void clear_admin();
  static const int kAdminFieldNumber = 6;
  ::google::protobuf::int32 admin() const;
  void set_admin(::google::protobuf::int32 value);

  // required sfixed64 createtime = 11;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreatetimeFieldNumber = 11;
  ::google::protobuf::int64 createtime() const;
  void set_createtime(::google::protobuf::int64 value);

  // required int32 state = 9;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 9;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 ticketid = 21;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 21;
  ::google::protobuf::int32 ticketid() const;
  void set_ticketid(::google::protobuf::int32 value);

  // required int32 serverid = 22;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 22;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // required sfixed64 logintime = 23;
  bool has_logintime() const;
  void clear_logintime();
  static const int kLogintimeFieldNumber = 23;
  ::google::protobuf::int64 logintime() const;
  void set_logintime(::google::protobuf::int64 value);

  // required sfixed64 first_logintime = 24;
  bool has_first_logintime() const;
  void clear_first_logintime();
  static const int kFirstLogintimeFieldNumber = 24;
  ::google::protobuf::int64 first_logintime() const;
  void set_first_logintime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.GateAccount)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_nick();
  void clear_has_nick();
  void set_has_email();
  void clear_has_email();
  void set_has_level();
  void clear_has_level();
  void set_has_admin();
  void clear_has_admin();
  void set_has_platid();
  void clear_has_platid();
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_state();
  void clear_has_state();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_ticketid();
  void clear_has_ticketid();
  void set_has_serverid();
  void clear_has_serverid();
  void set_has_logintime();
  void clear_has_logintime();
  void set_has_first_logintime();
  void clear_has_first_logintime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr platid_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 admin_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 ticketid_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int64 logintime_;
  ::google::protobuf::int64 first_logintime_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_register_account_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_register_account.Parameter) */ {
 public:
  proc_register_account_Parameter();
  virtual ~proc_register_account_Parameter();

  proc_register_account_Parameter(const proc_register_account_Parameter& from);

  inline proc_register_account_Parameter& operator=(const proc_register_account_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_register_account_Parameter(proc_register_account_Parameter&& from) noexcept
    : proc_register_account_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_register_account_Parameter& operator=(proc_register_account_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_register_account_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_register_account_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_register_account_Parameter*>(
               &_proc_register_account_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(proc_register_account_Parameter* other);
  void Swap(proc_register_account_Parameter* other);
  friend void swap(proc_register_account_Parameter& a, proc_register_account_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_register_account_Parameter* New() const final {
    return CreateMaybeMessage<proc_register_account_Parameter>(NULL);
  }

  proc_register_account_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_register_account_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_register_account_Parameter& from);
  void MergeFrom(const proc_register_account_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_register_account_Parameter* other);
  protected:
  explicit proc_register_account_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes p_userid = 1;
  bool has_p_userid() const;
  void clear_p_userid();
  static const int kPUseridFieldNumber = 1;
  const ::std::string& p_userid() const;
  void set_p_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_p_userid(::std::string&& value);
  #endif
  void set_p_userid(const char* value);
  void set_p_userid(const void* value, size_t size);
  ::std::string* mutable_p_userid();
  ::std::string* release_p_userid();
  void set_allocated_p_userid(::std::string* p_userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_p_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_userid(
      ::std::string* p_userid);

  // required bytes p_pwd = 2;
  bool has_p_pwd() const;
  void clear_p_pwd();
  static const int kPPwdFieldNumber = 2;
  const ::std::string& p_pwd() const;
  void set_p_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_p_pwd(::std::string&& value);
  #endif
  void set_p_pwd(const char* value);
  void set_p_pwd(const void* value, size_t size);
  ::std::string* mutable_p_pwd();
  ::std::string* release_p_pwd();
  void set_allocated_p_pwd(::std::string* p_pwd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_p_pwd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_pwd(
      ::std::string* p_pwd);

  // required bytes p_nick = 3;
  bool has_p_nick() const;
  void clear_p_nick();
  static const int kPNickFieldNumber = 3;
  const ::std::string& p_nick() const;
  void set_p_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_p_nick(::std::string&& value);
  #endif
  void set_p_nick(const char* value);
  void set_p_nick(const void* value, size_t size);
  ::std::string* mutable_p_nick();
  ::std::string* release_p_nick();
  void set_allocated_p_nick(::std::string* p_nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_p_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_nick(
      ::std::string* p_nick);

  // required bytes p_email = 4;
  bool has_p_email() const;
  void clear_p_email();
  static const int kPEmailFieldNumber = 4;
  const ::std::string& p_email() const;
  void set_p_email(const ::std::string& value);
  #if LANG_CXX11
  void set_p_email(::std::string&& value);
  #endif
  void set_p_email(const char* value);
  void set_p_email(const void* value, size_t size);
  ::std::string* mutable_p_email();
  ::std::string* release_p_email();
  void set_allocated_p_email(::std::string* p_email);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_p_email();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_email(
      ::std::string* p_email);

  // required bytes p_platid = 7;
  bool has_p_platid() const;
  void clear_p_platid();
  static const int kPPlatidFieldNumber = 7;
  const ::std::string& p_platid() const;
  void set_p_platid(const ::std::string& value);
  #if LANG_CXX11
  void set_p_platid(::std::string&& value);
  #endif
  void set_p_platid(const char* value);
  void set_p_platid(const void* value, size_t size);
  ::std::string* mutable_p_platid();
  ::std::string* release_p_platid();
  void set_allocated_p_platid(::std::string* p_platid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_p_platid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_platid(
      ::std::string* p_platid);

  // required bytes p_gameid = 8;
  bool has_p_gameid() const;
  void clear_p_gameid();
  static const int kPGameidFieldNumber = 8;
  const ::std::string& p_gameid() const;
  void set_p_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_p_gameid(::std::string&& value);
  #endif
  void set_p_gameid(const char* value);
  void set_p_gameid(const void* value, size_t size);
  ::std::string* mutable_p_gameid();
  ::std::string* release_p_gameid();
  void set_allocated_p_gameid(::std::string* p_gameid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_p_gameid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_gameid(
      ::std::string* p_gameid);

  // required int32 p_level = 5;
  bool has_p_level() const;
  void clear_p_level();
  static const int kPLevelFieldNumber = 5;
  ::google::protobuf::int32 p_level() const;
  void set_p_level(::google::protobuf::int32 value);

  // required int32 p_admin = 6;
  bool has_p_admin() const;
  void clear_p_admin();
  static const int kPAdminFieldNumber = 6;
  ::google::protobuf::int32 p_admin() const;
  void set_p_admin(::google::protobuf::int32 value);

  // required sfixed64 p_createtime = 10;
  bool has_p_createtime() const;
  void clear_p_createtime();
  static const int kPCreatetimeFieldNumber = 10;
  ::google::protobuf::int64 p_createtime() const;
  void set_p_createtime(::google::protobuf::int64 value);

  // required int32 p_state = 9;
  bool has_p_state() const;
  void clear_p_state();
  static const int kPStateFieldNumber = 9;
  ::google::protobuf::int32 p_state() const;
  void set_p_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.proc_register_account.Parameter)
 private:
  void set_has_p_userid();
  void clear_has_p_userid();
  void set_has_p_pwd();
  void clear_has_p_pwd();
  void set_has_p_nick();
  void clear_has_p_nick();
  void set_has_p_email();
  void clear_has_p_email();
  void set_has_p_level();
  void clear_has_p_level();
  void set_has_p_admin();
  void clear_has_p_admin();
  void set_has_p_platid();
  void clear_has_p_platid();
  void set_has_p_gameid();
  void clear_has_p_gameid();
  void set_has_p_state();
  void clear_has_p_state();
  void set_has_p_createtime();
  void clear_has_p_createtime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr p_userid_;
  ::google::protobuf::internal::ArenaStringPtr p_pwd_;
  ::google::protobuf::internal::ArenaStringPtr p_nick_;
  ::google::protobuf::internal::ArenaStringPtr p_email_;
  ::google::protobuf::internal::ArenaStringPtr p_platid_;
  ::google::protobuf::internal::ArenaStringPtr p_gameid_;
  ::google::protobuf::int32 p_level_;
  ::google::protobuf::int32 p_admin_;
  ::google::protobuf::int64 p_createtime_;
  ::google::protobuf::int32 p_state_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_register_account_ReturnRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_register_account.ReturnRecord) */ {
 public:
  proc_register_account_ReturnRecord();
  virtual ~proc_register_account_ReturnRecord();

  proc_register_account_ReturnRecord(const proc_register_account_ReturnRecord& from);

  inline proc_register_account_ReturnRecord& operator=(const proc_register_account_ReturnRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_register_account_ReturnRecord(proc_register_account_ReturnRecord&& from) noexcept
    : proc_register_account_ReturnRecord() {
    *this = ::std::move(from);
  }

  inline proc_register_account_ReturnRecord& operator=(proc_register_account_ReturnRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_register_account_ReturnRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_register_account_ReturnRecord* internal_default_instance() {
    return reinterpret_cast<const proc_register_account_ReturnRecord*>(
               &_proc_register_account_ReturnRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(proc_register_account_ReturnRecord* other);
  void Swap(proc_register_account_ReturnRecord* other);
  friend void swap(proc_register_account_ReturnRecord& a, proc_register_account_ReturnRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_register_account_ReturnRecord* New() const final {
    return CreateMaybeMessage<proc_register_account_ReturnRecord>(NULL);
  }

  proc_register_account_ReturnRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_register_account_ReturnRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_register_account_ReturnRecord& from);
  void MergeFrom(const proc_register_account_ReturnRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_register_account_ReturnRecord* other);
  protected:
  explicit proc_register_account_ReturnRecord(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.proc_register_account.ReturnRecord)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_register_account : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_register_account) */ {
 public:
  proc_register_account();
  virtual ~proc_register_account();

  proc_register_account(const proc_register_account& from);

  inline proc_register_account& operator=(const proc_register_account& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_register_account(proc_register_account&& from) noexcept
    : proc_register_account() {
    *this = ::std::move(from);
  }

  inline proc_register_account& operator=(proc_register_account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_register_account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_register_account* internal_default_instance() {
    return reinterpret_cast<const proc_register_account*>(
               &_proc_register_account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(proc_register_account* other);
  void Swap(proc_register_account* other);
  friend void swap(proc_register_account& a, proc_register_account& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_register_account* New() const final {
    return CreateMaybeMessage<proc_register_account>(NULL);
  }

  proc_register_account* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_register_account>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_register_account& from);
  void MergeFrom(const proc_register_account& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_register_account* other);
  protected:
  explicit proc_register_account(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_register_account_Parameter Parameter;
  typedef proc_register_account_ReturnRecord ReturnRecord;

  // accessors -------------------------------------------------------

  // repeated .db.proc_register_account.ReturnRecord return_record_list = 2;
  int return_record_list_size() const;
  void clear_return_record_list();
  static const int kReturnRecordListFieldNumber = 2;
  ::db::proc_register_account_ReturnRecord* mutable_return_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::db::proc_register_account_ReturnRecord >*
      mutable_return_record_list();
  const ::db::proc_register_account_ReturnRecord& return_record_list(int index) const;
  ::db::proc_register_account_ReturnRecord* add_return_record_list();
  const ::google::protobuf::RepeatedPtrField< ::db::proc_register_account_ReturnRecord >&
      return_record_list() const;

  // optional .db.proc_register_account.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_register_account_Parameter& _internal_param() const;
  public:
  const ::db::proc_register_account_Parameter& param() const;
  ::db::proc_register_account_Parameter* release_param();
  ::db::proc_register_account_Parameter* mutable_param();
  void set_allocated_param(::db::proc_register_account_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_register_account_Parameter* param);
  ::db::proc_register_account_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_register_account)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::db::proc_register_account_ReturnRecord > return_record_list_;
  ::db::proc_register_account_Parameter* param_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_save_account_state_Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_save_account_state.Parameter) */ {
 public:
  proc_save_account_state_Parameter();
  virtual ~proc_save_account_state_Parameter();

  proc_save_account_state_Parameter(const proc_save_account_state_Parameter& from);

  inline proc_save_account_state_Parameter& operator=(const proc_save_account_state_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_save_account_state_Parameter(proc_save_account_state_Parameter&& from) noexcept
    : proc_save_account_state_Parameter() {
    *this = ::std::move(from);
  }

  inline proc_save_account_state_Parameter& operator=(proc_save_account_state_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_save_account_state_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_save_account_state_Parameter* internal_default_instance() {
    return reinterpret_cast<const proc_save_account_state_Parameter*>(
               &_proc_save_account_state_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(proc_save_account_state_Parameter* other);
  void Swap(proc_save_account_state_Parameter* other);
  friend void swap(proc_save_account_state_Parameter& a, proc_save_account_state_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_save_account_state_Parameter* New() const final {
    return CreateMaybeMessage<proc_save_account_state_Parameter>(NULL);
  }

  proc_save_account_state_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_save_account_state_Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_save_account_state_Parameter& from);
  void MergeFrom(const proc_save_account_state_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_save_account_state_Parameter* other);
  protected:
  explicit proc_save_account_state_Parameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes p_userid = 1;
  bool has_p_userid() const;
  void clear_p_userid();
  static const int kPUseridFieldNumber = 1;
  const ::std::string& p_userid() const;
  void set_p_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_p_userid(::std::string&& value);
  #endif
  void set_p_userid(const char* value);
  void set_p_userid(const void* value, size_t size);
  ::std::string* mutable_p_userid();
  ::std::string* release_p_userid();
  void set_allocated_p_userid(::std::string* p_userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_p_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_userid(
      ::std::string* p_userid);

  // required int32 p_state = 2;
  bool has_p_state() const;
  void clear_p_state();
  static const int kPStateFieldNumber = 2;
  ::google::protobuf::int32 p_state() const;
  void set_p_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db.proc_save_account_state.Parameter)
 private:
  void set_has_p_userid();
  void clear_has_p_userid();
  void set_has_p_state();
  void clear_has_p_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr p_userid_;
  ::google::protobuf::int32 p_state_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class proc_save_account_state : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.proc_save_account_state) */ {
 public:
  proc_save_account_state();
  virtual ~proc_save_account_state();

  proc_save_account_state(const proc_save_account_state& from);

  inline proc_save_account_state& operator=(const proc_save_account_state& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  proc_save_account_state(proc_save_account_state&& from) noexcept
    : proc_save_account_state() {
    *this = ::std::move(from);
  }

  inline proc_save_account_state& operator=(proc_save_account_state&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const proc_save_account_state& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const proc_save_account_state* internal_default_instance() {
    return reinterpret_cast<const proc_save_account_state*>(
               &_proc_save_account_state_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(proc_save_account_state* other);
  void Swap(proc_save_account_state* other);
  friend void swap(proc_save_account_state& a, proc_save_account_state& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline proc_save_account_state* New() const final {
    return CreateMaybeMessage<proc_save_account_state>(NULL);
  }

  proc_save_account_state* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<proc_save_account_state>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const proc_save_account_state& from);
  void MergeFrom(const proc_save_account_state& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proc_save_account_state* other);
  protected:
  explicit proc_save_account_state(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proc_save_account_state_Parameter Parameter;

  // accessors -------------------------------------------------------

  // optional .db.proc_save_account_state.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  private:
  const ::db::proc_save_account_state_Parameter& _internal_param() const;
  public:
  const ::db::proc_save_account_state_Parameter& param() const;
  ::db::proc_save_account_state_Parameter* release_param();
  ::db::proc_save_account_state_Parameter* mutable_param();
  void set_allocated_param(::db::proc_save_account_state_Parameter* param);
  void unsafe_arena_set_allocated_param(
      ::db::proc_save_account_state_Parameter* param);
  ::db::proc_save_account_state_Parameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:db.proc_save_account_state)
 private:
  void set_has_param();
  void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::db::proc_save_account_state_Parameter* param_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GateLogOnline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GateLogOnline) */ {
 public:
  GateLogOnline();
  virtual ~GateLogOnline();

  GateLogOnline(const GateLogOnline& from);

  inline GateLogOnline& operator=(const GateLogOnline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateLogOnline(GateLogOnline&& from) noexcept
    : GateLogOnline() {
    *this = ::std::move(from);
  }

  inline GateLogOnline& operator=(GateLogOnline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateLogOnline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateLogOnline* internal_default_instance() {
    return reinterpret_cast<const GateLogOnline*>(
               &_GateLogOnline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(GateLogOnline* other);
  void Swap(GateLogOnline* other);
  friend void swap(GateLogOnline& a, GateLogOnline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateLogOnline* New() const final {
    return CreateMaybeMessage<GateLogOnline>(NULL);
  }

  GateLogOnline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateLogOnline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateLogOnline& from);
  void MergeFrom(const GateLogOnline& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateLogOnline* other);
  protected:
  explicit GateLogOnline(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // required bytes pwd = 2;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pwd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd(
      ::std::string* pwd);

  // required bytes nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // required bytes email = 4;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const void* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_email();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      ::std::string* email);

  // required bytes platid = 7;
  bool has_platid() const;
  void clear_platid();
  static const int kPlatidFieldNumber = 7;
  const ::std::string& platid() const;
  void set_platid(const ::std::string& value);
  #if LANG_CXX11
  void set_platid(::std::string&& value);
  #endif
  void set_platid(const char* value);
  void set_platid(const void* value, size_t size);
  ::std::string* mutable_platid();
  ::std::string* release_platid();
  void set_allocated_platid(::std::string* platid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_platid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platid(
      ::std::string* platid);

  // required bytes gameid = 8;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 8;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const void* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_gameid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gameid(
      ::std::string* gameid);

  // required int32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 admin = 6;
  bool has_admin() const;
  void clear_admin();
  static const int kAdminFieldNumber = 6;
  ::google::protobuf::int32 admin() const;
  void set_admin(::google::protobuf::int32 value);

  // required sfixed64 createtime = 11;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreatetimeFieldNumber = 11;
  ::google::protobuf::int64 createtime() const;
  void set_createtime(::google::protobuf::int64 value);

  // required int32 state = 9;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 9;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // required int32 ticketid = 21;
  bool has_ticketid() const;
  void clear_ticketid();
  static const int kTicketidFieldNumber = 21;
  ::google::protobuf::int32 ticketid() const;
  void set_ticketid(::google::protobuf::int32 value);

  // required int32 serverid = 22;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 22;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // required sfixed64 logintime = 23;
  bool has_logintime() const;
  void clear_logintime();
  static const int kLogintimeFieldNumber = 23;
  ::google::protobuf::int64 logintime() const;
  void set_logintime(::google::protobuf::int64 value);

  // required sfixed64 first_logintime = 24;
  bool has_first_logintime() const;
  void clear_first_logintime();
  static const int kFirstLogintimeFieldNumber = 24;
  ::google::protobuf::int64 first_logintime() const;
  void set_first_logintime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.GateLogOnline)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_nick();
  void clear_has_nick();
  void set_has_email();
  void clear_has_email();
  void set_has_level();
  void clear_has_level();
  void set_has_admin();
  void clear_has_admin();
  void set_has_platid();
  void clear_has_platid();
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_state();
  void clear_has_state();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_ticketid();
  void clear_has_ticketid();
  void set_has_serverid();
  void clear_has_serverid();
  void set_has_logintime();
  void clear_has_logintime();
  void set_has_first_logintime();
  void clear_has_first_logintime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr platid_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 admin_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 ticketid_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int64 logintime_;
  ::google::protobuf::int64 first_logintime_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GateCfgActiveCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GateCfgActiveCode) */ {
 public:
  GateCfgActiveCode();
  virtual ~GateCfgActiveCode();

  GateCfgActiveCode(const GateCfgActiveCode& from);

  inline GateCfgActiveCode& operator=(const GateCfgActiveCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateCfgActiveCode(GateCfgActiveCode&& from) noexcept
    : GateCfgActiveCode() {
    *this = ::std::move(from);
  }

  inline GateCfgActiveCode& operator=(GateCfgActiveCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateCfgActiveCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateCfgActiveCode* internal_default_instance() {
    return reinterpret_cast<const GateCfgActiveCode*>(
               &_GateCfgActiveCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(GateCfgActiveCode* other);
  void Swap(GateCfgActiveCode* other);
  friend void swap(GateCfgActiveCode& a, GateCfgActiveCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateCfgActiveCode* New() const final {
    return CreateMaybeMessage<GateCfgActiveCode>(NULL);
  }

  GateCfgActiveCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateCfgActiveCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateCfgActiveCode& from);
  void MergeFrom(const GateCfgActiveCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateCfgActiveCode* other);
  protected:
  explicit GateCfgActiveCode(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const void* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_code();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_code(
      ::std::string* code);

  // required bytes desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_desc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      ::std::string* desc);

  // required sfixed64 begin_time = 3;
  bool has_begin_time() const;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 3;
  ::google::protobuf::int64 begin_time() const;
  void set_begin_time(::google::protobuf::int64 value);

  // required sfixed64 end_time = 4;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  ::google::protobuf::int64 end_time() const;
  void set_end_time(::google::protobuf::int64 value);

  // required uint64 reward_typeid = 5;
  bool has_reward_typeid() const;
  void clear_reward_typeid();
  static const int kRewardTypeidFieldNumber = 5;
  ::google::protobuf::uint64 reward_typeid() const;
  void set_reward_typeid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:db.GateCfgActiveCode)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_desc();
  void clear_has_desc();
  void set_has_begin_time();
  void clear_has_begin_time();
  void set_has_end_time();
  void clear_has_end_time();
  void set_has_reward_typeid();
  void clear_has_reward_typeid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int64 begin_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::uint64 reward_typeid_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GateActiveCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.GateActiveCode) */ {
 public:
  GateActiveCode();
  virtual ~GateActiveCode();

  GateActiveCode(const GateActiveCode& from);

  inline GateActiveCode& operator=(const GateActiveCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateActiveCode(GateActiveCode&& from) noexcept
    : GateActiveCode() {
    *this = ::std::move(from);
  }

  inline GateActiveCode& operator=(GateActiveCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateActiveCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateActiveCode* internal_default_instance() {
    return reinterpret_cast<const GateActiveCode*>(
               &_GateActiveCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(GateActiveCode* other);
  void Swap(GateActiveCode* other);
  friend void swap(GateActiveCode& a, GateActiveCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateActiveCode* New() const final {
    return CreateMaybeMessage<GateActiveCode>(NULL);
  }

  GateActiveCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateActiveCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateActiveCode& from);
  void MergeFrom(const GateActiveCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateActiveCode* other);
  protected:
  explicit GateActiveCode(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const void* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_code();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_code(
      ::std::string* code);

  // required bytes userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_userid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      ::std::string* userid);

  // optional sfixed64 active_time = 3;
  bool has_active_time() const;
  void clear_active_time();
  static const int kActiveTimeFieldNumber = 3;
  ::google::protobuf::int64 active_time() const;
  void set_active_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:db.GateActiveCode)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_userid();
  void clear_has_userid();
  void set_has_active_time();
  void clear_has_active_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 active_time_;
  friend struct ::protobuf_GateAccount_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GateAccount

// required bytes userid = 1;
inline bool GateAccount::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateAccount::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateAccount::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateAccount::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& GateAccount::userid() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.userid)
  return userid_.Get();
}
inline void GateAccount::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateAccount.userid)
}
#if LANG_CXX11
inline void GateAccount::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateAccount.userid)
}
#endif
inline void GateAccount::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateAccount.userid)
}
inline void GateAccount::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateAccount.userid)
}
inline ::std::string* GateAccount::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.GateAccount.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateAccount::release_userid() {
  // @@protoc_insertion_point(field_release:db.GateAccount.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateAccount::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateAccount.userid)
}
inline ::std::string* GateAccount::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateAccount.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateAccount::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateAccount.userid)
}

// required bytes pwd = 2;
inline bool GateAccount::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateAccount::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateAccount::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateAccount::clear_pwd() {
  pwd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pwd();
}
inline const ::std::string& GateAccount::pwd() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.pwd)
  return pwd_.Get();
}
inline void GateAccount::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateAccount.pwd)
}
#if LANG_CXX11
inline void GateAccount::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateAccount.pwd)
}
#endif
inline void GateAccount::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateAccount.pwd)
}
inline void GateAccount::set_pwd(const void* value,
    size_t size) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateAccount.pwd)
}
inline ::std::string* GateAccount::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:db.GateAccount.pwd)
  return pwd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateAccount::release_pwd() {
  // @@protoc_insertion_point(field_release:db.GateAccount.pwd)
  if (!has_pwd()) {
    return NULL;
  }
  clear_has_pwd();
  return pwd_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateAccount::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateAccount.pwd)
}
inline ::std::string* GateAccount::unsafe_arena_release_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateAccount.pwd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pwd();
  return pwd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateAccount::unsafe_arena_set_allocated_pwd(
    ::std::string* pwd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pwd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateAccount.pwd)
}

// required bytes nick = 3;
inline bool GateAccount::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateAccount::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateAccount::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateAccount::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& GateAccount::nick() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.nick)
  return nick_.Get();
}
inline void GateAccount::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateAccount.nick)
}
#if LANG_CXX11
inline void GateAccount::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateAccount.nick)
}
#endif
inline void GateAccount::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateAccount.nick)
}
inline void GateAccount::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateAccount.nick)
}
inline ::std::string* GateAccount::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:db.GateAccount.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateAccount::release_nick() {
  // @@protoc_insertion_point(field_release:db.GateAccount.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateAccount::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateAccount.nick)
}
inline ::std::string* GateAccount::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateAccount.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateAccount::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateAccount.nick)
}

// required bytes email = 4;
inline bool GateAccount::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateAccount::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateAccount::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateAccount::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_email();
}
inline const ::std::string& GateAccount::email() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.email)
  return email_.Get();
}
inline void GateAccount::set_email(const ::std::string& value) {
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateAccount.email)
}
#if LANG_CXX11
inline void GateAccount::set_email(::std::string&& value) {
  set_has_email();
  email_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateAccount.email)
}
#endif
inline void GateAccount::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateAccount.email)
}
inline void GateAccount::set_email(const void* value,
    size_t size) {
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateAccount.email)
}
inline ::std::string* GateAccount::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:db.GateAccount.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateAccount::release_email() {
  // @@protoc_insertion_point(field_release:db.GateAccount.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateAccount::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateAccount.email)
}
inline ::std::string* GateAccount::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateAccount.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_email();
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateAccount::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateAccount.email)
}

// required int32 level = 5;
inline bool GateAccount::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GateAccount::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GateAccount::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GateAccount::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GateAccount::level() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.level)
  return level_;
}
inline void GateAccount::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.GateAccount.level)
}

// required int32 admin = 6;
inline bool GateAccount::has_admin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GateAccount::set_has_admin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GateAccount::clear_has_admin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GateAccount::clear_admin() {
  admin_ = 0;
  clear_has_admin();
}
inline ::google::protobuf::int32 GateAccount::admin() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.admin)
  return admin_;
}
inline void GateAccount::set_admin(::google::protobuf::int32 value) {
  set_has_admin();
  admin_ = value;
  // @@protoc_insertion_point(field_set:db.GateAccount.admin)
}

// required bytes platid = 7;
inline bool GateAccount::has_platid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GateAccount::set_has_platid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GateAccount::clear_has_platid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GateAccount::clear_platid() {
  platid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_platid();
}
inline const ::std::string& GateAccount::platid() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.platid)
  return platid_.Get();
}
inline void GateAccount::set_platid(const ::std::string& value) {
  set_has_platid();
  platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateAccount.platid)
}
#if LANG_CXX11
inline void GateAccount::set_platid(::std::string&& value) {
  set_has_platid();
  platid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateAccount.platid)
}
#endif
inline void GateAccount::set_platid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platid();
  platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateAccount.platid)
}
inline void GateAccount::set_platid(const void* value,
    size_t size) {
  set_has_platid();
  platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateAccount.platid)
}
inline ::std::string* GateAccount::mutable_platid() {
  set_has_platid();
  // @@protoc_insertion_point(field_mutable:db.GateAccount.platid)
  return platid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateAccount::release_platid() {
  // @@protoc_insertion_point(field_release:db.GateAccount.platid)
  if (!has_platid()) {
    return NULL;
  }
  clear_has_platid();
  return platid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateAccount::set_allocated_platid(::std::string* platid) {
  if (platid != NULL) {
    set_has_platid();
  } else {
    clear_has_platid();
  }
  platid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateAccount.platid)
}
inline ::std::string* GateAccount::unsafe_arena_release_platid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateAccount.platid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_platid();
  return platid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateAccount::unsafe_arena_set_allocated_platid(
    ::std::string* platid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (platid != NULL) {
    set_has_platid();
  } else {
    clear_has_platid();
  }
  platid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      platid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateAccount.platid)
}

// required bytes gameid = 8;
inline bool GateAccount::has_gameid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GateAccount::set_has_gameid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GateAccount::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GateAccount::clear_gameid() {
  gameid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_gameid();
}
inline const ::std::string& GateAccount::gameid() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.gameid)
  return gameid_.Get();
}
inline void GateAccount::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateAccount.gameid)
}
#if LANG_CXX11
inline void GateAccount::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateAccount.gameid)
}
#endif
inline void GateAccount::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateAccount.gameid)
}
inline void GateAccount::set_gameid(const void* value,
    size_t size) {
  set_has_gameid();
  gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateAccount.gameid)
}
inline ::std::string* GateAccount::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:db.GateAccount.gameid)
  return gameid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateAccount::release_gameid() {
  // @@protoc_insertion_point(field_release:db.GateAccount.gameid)
  if (!has_gameid()) {
    return NULL;
  }
  clear_has_gameid();
  return gameid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateAccount::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateAccount.gameid)
}
inline ::std::string* GateAccount::unsafe_arena_release_gameid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateAccount.gameid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_gameid();
  return gameid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateAccount::unsafe_arena_set_allocated_gameid(
    ::std::string* gameid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gameid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateAccount.gameid)
}

// required int32 state = 9;
inline bool GateAccount::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GateAccount::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GateAccount::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GateAccount::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GateAccount::state() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.state)
  return state_;
}
inline void GateAccount::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.GateAccount.state)
}

// required sfixed64 createtime = 11;
inline bool GateAccount::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GateAccount::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GateAccount::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GateAccount::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 GateAccount::createtime() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.createtime)
  return createtime_;
}
inline void GateAccount::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:db.GateAccount.createtime)
}

// required int32 ticketid = 21;
inline bool GateAccount::has_ticketid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GateAccount::set_has_ticketid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GateAccount::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GateAccount::clear_ticketid() {
  ticketid_ = 0;
  clear_has_ticketid();
}
inline ::google::protobuf::int32 GateAccount::ticketid() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.ticketid)
  return ticketid_;
}
inline void GateAccount::set_ticketid(::google::protobuf::int32 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.GateAccount.ticketid)
}

// required int32 serverid = 22;
inline bool GateAccount::has_serverid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GateAccount::set_has_serverid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GateAccount::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GateAccount::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GateAccount::serverid() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.serverid)
  return serverid_;
}
inline void GateAccount::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:db.GateAccount.serverid)
}

// required sfixed64 logintime = 23;
inline bool GateAccount::has_logintime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GateAccount::set_has_logintime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GateAccount::clear_has_logintime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GateAccount::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::int64 GateAccount::logintime() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.logintime)
  return logintime_;
}
inline void GateAccount::set_logintime(::google::protobuf::int64 value) {
  set_has_logintime();
  logintime_ = value;
  // @@protoc_insertion_point(field_set:db.GateAccount.logintime)
}

// required sfixed64 first_logintime = 24;
inline bool GateAccount::has_first_logintime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GateAccount::set_has_first_logintime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GateAccount::clear_has_first_logintime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GateAccount::clear_first_logintime() {
  first_logintime_ = GOOGLE_LONGLONG(0);
  clear_has_first_logintime();
}
inline ::google::protobuf::int64 GateAccount::first_logintime() const {
  // @@protoc_insertion_point(field_get:db.GateAccount.first_logintime)
  return first_logintime_;
}
inline void GateAccount::set_first_logintime(::google::protobuf::int64 value) {
  set_has_first_logintime();
  first_logintime_ = value;
  // @@protoc_insertion_point(field_set:db.GateAccount.first_logintime)
}

// -------------------------------------------------------------------

// proc_register_account_Parameter

// required bytes p_userid = 1;
inline bool proc_register_account_Parameter::has_p_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_register_account_Parameter::clear_has_p_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_register_account_Parameter::clear_p_userid() {
  p_userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_p_userid();
}
inline const ::std::string& proc_register_account_Parameter::p_userid() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_userid)
  return p_userid_.Get();
}
inline void proc_register_account_Parameter::set_p_userid(const ::std::string& value) {
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_userid)
}
#if LANG_CXX11
inline void proc_register_account_Parameter::set_p_userid(::std::string&& value) {
  set_has_p_userid();
  p_userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.proc_register_account.Parameter.p_userid)
}
#endif
inline void proc_register_account_Parameter::set_p_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.proc_register_account.Parameter.p_userid)
}
inline void proc_register_account_Parameter::set_p_userid(const void* value,
    size_t size) {
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.proc_register_account.Parameter.p_userid)
}
inline ::std::string* proc_register_account_Parameter::mutable_p_userid() {
  set_has_p_userid();
  // @@protoc_insertion_point(field_mutable:db.proc_register_account.Parameter.p_userid)
  return p_userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* proc_register_account_Parameter::release_p_userid() {
  // @@protoc_insertion_point(field_release:db.proc_register_account.Parameter.p_userid)
  if (!has_p_userid()) {
    return NULL;
  }
  clear_has_p_userid();
  return p_userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::set_allocated_p_userid(::std::string* p_userid) {
  if (p_userid != NULL) {
    set_has_p_userid();
  } else {
    clear_has_p_userid();
  }
  p_userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.proc_register_account.Parameter.p_userid)
}
inline ::std::string* proc_register_account_Parameter::unsafe_arena_release_p_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_register_account.Parameter.p_userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_p_userid();
  return p_userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::unsafe_arena_set_allocated_p_userid(
    ::std::string* p_userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (p_userid != NULL) {
    set_has_p_userid();
  } else {
    clear_has_p_userid();
  }
  p_userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      p_userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_register_account.Parameter.p_userid)
}

// required bytes p_pwd = 2;
inline bool proc_register_account_Parameter::has_p_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void proc_register_account_Parameter::clear_has_p_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void proc_register_account_Parameter::clear_p_pwd() {
  p_pwd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_p_pwd();
}
inline const ::std::string& proc_register_account_Parameter::p_pwd() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_pwd)
  return p_pwd_.Get();
}
inline void proc_register_account_Parameter::set_p_pwd(const ::std::string& value) {
  set_has_p_pwd();
  p_pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_pwd)
}
#if LANG_CXX11
inline void proc_register_account_Parameter::set_p_pwd(::std::string&& value) {
  set_has_p_pwd();
  p_pwd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.proc_register_account.Parameter.p_pwd)
}
#endif
inline void proc_register_account_Parameter::set_p_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_p_pwd();
  p_pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.proc_register_account.Parameter.p_pwd)
}
inline void proc_register_account_Parameter::set_p_pwd(const void* value,
    size_t size) {
  set_has_p_pwd();
  p_pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.proc_register_account.Parameter.p_pwd)
}
inline ::std::string* proc_register_account_Parameter::mutable_p_pwd() {
  set_has_p_pwd();
  // @@protoc_insertion_point(field_mutable:db.proc_register_account.Parameter.p_pwd)
  return p_pwd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* proc_register_account_Parameter::release_p_pwd() {
  // @@protoc_insertion_point(field_release:db.proc_register_account.Parameter.p_pwd)
  if (!has_p_pwd()) {
    return NULL;
  }
  clear_has_p_pwd();
  return p_pwd_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::set_allocated_p_pwd(::std::string* p_pwd) {
  if (p_pwd != NULL) {
    set_has_p_pwd();
  } else {
    clear_has_p_pwd();
  }
  p_pwd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_pwd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.proc_register_account.Parameter.p_pwd)
}
inline ::std::string* proc_register_account_Parameter::unsafe_arena_release_p_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_register_account.Parameter.p_pwd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_p_pwd();
  return p_pwd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::unsafe_arena_set_allocated_p_pwd(
    ::std::string* p_pwd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (p_pwd != NULL) {
    set_has_p_pwd();
  } else {
    clear_has_p_pwd();
  }
  p_pwd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      p_pwd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_register_account.Parameter.p_pwd)
}

// required bytes p_nick = 3;
inline bool proc_register_account_Parameter::has_p_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void proc_register_account_Parameter::clear_has_p_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void proc_register_account_Parameter::clear_p_nick() {
  p_nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_p_nick();
}
inline const ::std::string& proc_register_account_Parameter::p_nick() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_nick)
  return p_nick_.Get();
}
inline void proc_register_account_Parameter::set_p_nick(const ::std::string& value) {
  set_has_p_nick();
  p_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_nick)
}
#if LANG_CXX11
inline void proc_register_account_Parameter::set_p_nick(::std::string&& value) {
  set_has_p_nick();
  p_nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.proc_register_account.Parameter.p_nick)
}
#endif
inline void proc_register_account_Parameter::set_p_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_p_nick();
  p_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.proc_register_account.Parameter.p_nick)
}
inline void proc_register_account_Parameter::set_p_nick(const void* value,
    size_t size) {
  set_has_p_nick();
  p_nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.proc_register_account.Parameter.p_nick)
}
inline ::std::string* proc_register_account_Parameter::mutable_p_nick() {
  set_has_p_nick();
  // @@protoc_insertion_point(field_mutable:db.proc_register_account.Parameter.p_nick)
  return p_nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* proc_register_account_Parameter::release_p_nick() {
  // @@protoc_insertion_point(field_release:db.proc_register_account.Parameter.p_nick)
  if (!has_p_nick()) {
    return NULL;
  }
  clear_has_p_nick();
  return p_nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::set_allocated_p_nick(::std::string* p_nick) {
  if (p_nick != NULL) {
    set_has_p_nick();
  } else {
    clear_has_p_nick();
  }
  p_nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.proc_register_account.Parameter.p_nick)
}
inline ::std::string* proc_register_account_Parameter::unsafe_arena_release_p_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_register_account.Parameter.p_nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_p_nick();
  return p_nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::unsafe_arena_set_allocated_p_nick(
    ::std::string* p_nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (p_nick != NULL) {
    set_has_p_nick();
  } else {
    clear_has_p_nick();
  }
  p_nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      p_nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_register_account.Parameter.p_nick)
}

// required bytes p_email = 4;
inline bool proc_register_account_Parameter::has_p_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void proc_register_account_Parameter::clear_has_p_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void proc_register_account_Parameter::clear_p_email() {
  p_email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_p_email();
}
inline const ::std::string& proc_register_account_Parameter::p_email() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_email)
  return p_email_.Get();
}
inline void proc_register_account_Parameter::set_p_email(const ::std::string& value) {
  set_has_p_email();
  p_email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_email)
}
#if LANG_CXX11
inline void proc_register_account_Parameter::set_p_email(::std::string&& value) {
  set_has_p_email();
  p_email_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.proc_register_account.Parameter.p_email)
}
#endif
inline void proc_register_account_Parameter::set_p_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_p_email();
  p_email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.proc_register_account.Parameter.p_email)
}
inline void proc_register_account_Parameter::set_p_email(const void* value,
    size_t size) {
  set_has_p_email();
  p_email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.proc_register_account.Parameter.p_email)
}
inline ::std::string* proc_register_account_Parameter::mutable_p_email() {
  set_has_p_email();
  // @@protoc_insertion_point(field_mutable:db.proc_register_account.Parameter.p_email)
  return p_email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* proc_register_account_Parameter::release_p_email() {
  // @@protoc_insertion_point(field_release:db.proc_register_account.Parameter.p_email)
  if (!has_p_email()) {
    return NULL;
  }
  clear_has_p_email();
  return p_email_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::set_allocated_p_email(::std::string* p_email) {
  if (p_email != NULL) {
    set_has_p_email();
  } else {
    clear_has_p_email();
  }
  p_email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.proc_register_account.Parameter.p_email)
}
inline ::std::string* proc_register_account_Parameter::unsafe_arena_release_p_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_register_account.Parameter.p_email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_p_email();
  return p_email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::unsafe_arena_set_allocated_p_email(
    ::std::string* p_email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (p_email != NULL) {
    set_has_p_email();
  } else {
    clear_has_p_email();
  }
  p_email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      p_email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_register_account.Parameter.p_email)
}

// required int32 p_level = 5;
inline bool proc_register_account_Parameter::has_p_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void proc_register_account_Parameter::clear_has_p_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void proc_register_account_Parameter::clear_p_level() {
  p_level_ = 0;
  clear_has_p_level();
}
inline ::google::protobuf::int32 proc_register_account_Parameter::p_level() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_level)
  return p_level_;
}
inline void proc_register_account_Parameter::set_p_level(::google::protobuf::int32 value) {
  set_has_p_level();
  p_level_ = value;
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_level)
}

// required int32 p_admin = 6;
inline bool proc_register_account_Parameter::has_p_admin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_admin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void proc_register_account_Parameter::clear_has_p_admin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void proc_register_account_Parameter::clear_p_admin() {
  p_admin_ = 0;
  clear_has_p_admin();
}
inline ::google::protobuf::int32 proc_register_account_Parameter::p_admin() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_admin)
  return p_admin_;
}
inline void proc_register_account_Parameter::set_p_admin(::google::protobuf::int32 value) {
  set_has_p_admin();
  p_admin_ = value;
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_admin)
}

// required bytes p_platid = 7;
inline bool proc_register_account_Parameter::has_p_platid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_platid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void proc_register_account_Parameter::clear_has_p_platid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void proc_register_account_Parameter::clear_p_platid() {
  p_platid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_p_platid();
}
inline const ::std::string& proc_register_account_Parameter::p_platid() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_platid)
  return p_platid_.Get();
}
inline void proc_register_account_Parameter::set_p_platid(const ::std::string& value) {
  set_has_p_platid();
  p_platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_platid)
}
#if LANG_CXX11
inline void proc_register_account_Parameter::set_p_platid(::std::string&& value) {
  set_has_p_platid();
  p_platid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.proc_register_account.Parameter.p_platid)
}
#endif
inline void proc_register_account_Parameter::set_p_platid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_p_platid();
  p_platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.proc_register_account.Parameter.p_platid)
}
inline void proc_register_account_Parameter::set_p_platid(const void* value,
    size_t size) {
  set_has_p_platid();
  p_platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.proc_register_account.Parameter.p_platid)
}
inline ::std::string* proc_register_account_Parameter::mutable_p_platid() {
  set_has_p_platid();
  // @@protoc_insertion_point(field_mutable:db.proc_register_account.Parameter.p_platid)
  return p_platid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* proc_register_account_Parameter::release_p_platid() {
  // @@protoc_insertion_point(field_release:db.proc_register_account.Parameter.p_platid)
  if (!has_p_platid()) {
    return NULL;
  }
  clear_has_p_platid();
  return p_platid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::set_allocated_p_platid(::std::string* p_platid) {
  if (p_platid != NULL) {
    set_has_p_platid();
  } else {
    clear_has_p_platid();
  }
  p_platid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_platid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.proc_register_account.Parameter.p_platid)
}
inline ::std::string* proc_register_account_Parameter::unsafe_arena_release_p_platid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_register_account.Parameter.p_platid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_p_platid();
  return p_platid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::unsafe_arena_set_allocated_p_platid(
    ::std::string* p_platid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (p_platid != NULL) {
    set_has_p_platid();
  } else {
    clear_has_p_platid();
  }
  p_platid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      p_platid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_register_account.Parameter.p_platid)
}

// required bytes p_gameid = 8;
inline bool proc_register_account_Parameter::has_p_gameid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_gameid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void proc_register_account_Parameter::clear_has_p_gameid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void proc_register_account_Parameter::clear_p_gameid() {
  p_gameid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_p_gameid();
}
inline const ::std::string& proc_register_account_Parameter::p_gameid() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_gameid)
  return p_gameid_.Get();
}
inline void proc_register_account_Parameter::set_p_gameid(const ::std::string& value) {
  set_has_p_gameid();
  p_gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_gameid)
}
#if LANG_CXX11
inline void proc_register_account_Parameter::set_p_gameid(::std::string&& value) {
  set_has_p_gameid();
  p_gameid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.proc_register_account.Parameter.p_gameid)
}
#endif
inline void proc_register_account_Parameter::set_p_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_p_gameid();
  p_gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.proc_register_account.Parameter.p_gameid)
}
inline void proc_register_account_Parameter::set_p_gameid(const void* value,
    size_t size) {
  set_has_p_gameid();
  p_gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.proc_register_account.Parameter.p_gameid)
}
inline ::std::string* proc_register_account_Parameter::mutable_p_gameid() {
  set_has_p_gameid();
  // @@protoc_insertion_point(field_mutable:db.proc_register_account.Parameter.p_gameid)
  return p_gameid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* proc_register_account_Parameter::release_p_gameid() {
  // @@protoc_insertion_point(field_release:db.proc_register_account.Parameter.p_gameid)
  if (!has_p_gameid()) {
    return NULL;
  }
  clear_has_p_gameid();
  return p_gameid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::set_allocated_p_gameid(::std::string* p_gameid) {
  if (p_gameid != NULL) {
    set_has_p_gameid();
  } else {
    clear_has_p_gameid();
  }
  p_gameid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_gameid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.proc_register_account.Parameter.p_gameid)
}
inline ::std::string* proc_register_account_Parameter::unsafe_arena_release_p_gameid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_register_account.Parameter.p_gameid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_p_gameid();
  return p_gameid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void proc_register_account_Parameter::unsafe_arena_set_allocated_p_gameid(
    ::std::string* p_gameid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (p_gameid != NULL) {
    set_has_p_gameid();
  } else {
    clear_has_p_gameid();
  }
  p_gameid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      p_gameid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_register_account.Parameter.p_gameid)
}

// required int32 p_state = 9;
inline bool proc_register_account_Parameter::has_p_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void proc_register_account_Parameter::clear_has_p_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void proc_register_account_Parameter::clear_p_state() {
  p_state_ = 0;
  clear_has_p_state();
}
inline ::google::protobuf::int32 proc_register_account_Parameter::p_state() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_state)
  return p_state_;
}
inline void proc_register_account_Parameter::set_p_state(::google::protobuf::int32 value) {
  set_has_p_state();
  p_state_ = value;
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_state)
}

// required sfixed64 p_createtime = 10;
inline bool proc_register_account_Parameter::has_p_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void proc_register_account_Parameter::set_has_p_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void proc_register_account_Parameter::clear_has_p_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void proc_register_account_Parameter::clear_p_createtime() {
  p_createtime_ = GOOGLE_LONGLONG(0);
  clear_has_p_createtime();
}
inline ::google::protobuf::int64 proc_register_account_Parameter::p_createtime() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.Parameter.p_createtime)
  return p_createtime_;
}
inline void proc_register_account_Parameter::set_p_createtime(::google::protobuf::int64 value) {
  set_has_p_createtime();
  p_createtime_ = value;
  // @@protoc_insertion_point(field_set:db.proc_register_account.Parameter.p_createtime)
}

// -------------------------------------------------------------------

// proc_register_account_ReturnRecord

// required int32 result = 1;
inline bool proc_register_account_ReturnRecord::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_register_account_ReturnRecord::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_register_account_ReturnRecord::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_register_account_ReturnRecord::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 proc_register_account_ReturnRecord::result() const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.ReturnRecord.result)
  return result_;
}
inline void proc_register_account_ReturnRecord::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:db.proc_register_account.ReturnRecord.result)
}

// -------------------------------------------------------------------

// proc_register_account

// optional .db.proc_register_account.Parameter param = 1;
inline bool proc_register_account::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_register_account::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_register_account::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_register_account::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_register_account_Parameter& proc_register_account::_internal_param() const {
  return *param_;
}
inline const ::db::proc_register_account_Parameter& proc_register_account::param() const {
  const ::db::proc_register_account_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_register_account.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_register_account_Parameter*>(
      &::db::_proc_register_account_Parameter_default_instance_);
}
inline ::db::proc_register_account_Parameter* proc_register_account::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_register_account.param)
  clear_has_param();
  ::db::proc_register_account_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_register_account_Parameter* proc_register_account::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_register_account.param)
  clear_has_param();
  ::db::proc_register_account_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_register_account_Parameter* proc_register_account::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_register_account_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_register_account.param)
  return param_;
}
inline void proc_register_account::set_allocated_param(::db::proc_register_account_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_register_account.param)
}

// repeated .db.proc_register_account.ReturnRecord return_record_list = 2;
inline int proc_register_account::return_record_list_size() const {
  return return_record_list_.size();
}
inline void proc_register_account::clear_return_record_list() {
  return_record_list_.Clear();
}
inline ::db::proc_register_account_ReturnRecord* proc_register_account::mutable_return_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:db.proc_register_account.return_record_list)
  return return_record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::db::proc_register_account_ReturnRecord >*
proc_register_account::mutable_return_record_list() {
  // @@protoc_insertion_point(field_mutable_list:db.proc_register_account.return_record_list)
  return &return_record_list_;
}
inline const ::db::proc_register_account_ReturnRecord& proc_register_account::return_record_list(int index) const {
  // @@protoc_insertion_point(field_get:db.proc_register_account.return_record_list)
  return return_record_list_.Get(index);
}
inline ::db::proc_register_account_ReturnRecord* proc_register_account::add_return_record_list() {
  // @@protoc_insertion_point(field_add:db.proc_register_account.return_record_list)
  return return_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::db::proc_register_account_ReturnRecord >&
proc_register_account::return_record_list() const {
  // @@protoc_insertion_point(field_list:db.proc_register_account.return_record_list)
  return return_record_list_;
}

// -------------------------------------------------------------------

// proc_save_account_state_Parameter

// required bytes p_userid = 1;
inline bool proc_save_account_state_Parameter::has_p_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_save_account_state_Parameter::set_has_p_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_save_account_state_Parameter::clear_has_p_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_save_account_state_Parameter::clear_p_userid() {
  p_userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_p_userid();
}
inline const ::std::string& proc_save_account_state_Parameter::p_userid() const {
  // @@protoc_insertion_point(field_get:db.proc_save_account_state.Parameter.p_userid)
  return p_userid_.Get();
}
inline void proc_save_account_state_Parameter::set_p_userid(const ::std::string& value) {
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.proc_save_account_state.Parameter.p_userid)
}
#if LANG_CXX11
inline void proc_save_account_state_Parameter::set_p_userid(::std::string&& value) {
  set_has_p_userid();
  p_userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.proc_save_account_state.Parameter.p_userid)
}
#endif
inline void proc_save_account_state_Parameter::set_p_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.proc_save_account_state.Parameter.p_userid)
}
inline void proc_save_account_state_Parameter::set_p_userid(const void* value,
    size_t size) {
  set_has_p_userid();
  p_userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.proc_save_account_state.Parameter.p_userid)
}
inline ::std::string* proc_save_account_state_Parameter::mutable_p_userid() {
  set_has_p_userid();
  // @@protoc_insertion_point(field_mutable:db.proc_save_account_state.Parameter.p_userid)
  return p_userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* proc_save_account_state_Parameter::release_p_userid() {
  // @@protoc_insertion_point(field_release:db.proc_save_account_state.Parameter.p_userid)
  if (!has_p_userid()) {
    return NULL;
  }
  clear_has_p_userid();
  return p_userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void proc_save_account_state_Parameter::set_allocated_p_userid(::std::string* p_userid) {
  if (p_userid != NULL) {
    set_has_p_userid();
  } else {
    clear_has_p_userid();
  }
  p_userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p_userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.proc_save_account_state.Parameter.p_userid)
}
inline ::std::string* proc_save_account_state_Parameter::unsafe_arena_release_p_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_save_account_state.Parameter.p_userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_p_userid();
  return p_userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void proc_save_account_state_Parameter::unsafe_arena_set_allocated_p_userid(
    ::std::string* p_userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (p_userid != NULL) {
    set_has_p_userid();
  } else {
    clear_has_p_userid();
  }
  p_userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      p_userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.proc_save_account_state.Parameter.p_userid)
}

// required int32 p_state = 2;
inline bool proc_save_account_state_Parameter::has_p_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void proc_save_account_state_Parameter::set_has_p_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void proc_save_account_state_Parameter::clear_has_p_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void proc_save_account_state_Parameter::clear_p_state() {
  p_state_ = 0;
  clear_has_p_state();
}
inline ::google::protobuf::int32 proc_save_account_state_Parameter::p_state() const {
  // @@protoc_insertion_point(field_get:db.proc_save_account_state.Parameter.p_state)
  return p_state_;
}
inline void proc_save_account_state_Parameter::set_p_state(::google::protobuf::int32 value) {
  set_has_p_state();
  p_state_ = value;
  // @@protoc_insertion_point(field_set:db.proc_save_account_state.Parameter.p_state)
}

// -------------------------------------------------------------------

// proc_save_account_state

// optional .db.proc_save_account_state.Parameter param = 1;
inline bool proc_save_account_state::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void proc_save_account_state::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void proc_save_account_state::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void proc_save_account_state::clear_param() {
  if (param_ != NULL) param_->Clear();
  clear_has_param();
}
inline const ::db::proc_save_account_state_Parameter& proc_save_account_state::_internal_param() const {
  return *param_;
}
inline const ::db::proc_save_account_state_Parameter& proc_save_account_state::param() const {
  const ::db::proc_save_account_state_Parameter* p = param_;
  // @@protoc_insertion_point(field_get:db.proc_save_account_state.param)
  return p != NULL ? *p : *reinterpret_cast<const ::db::proc_save_account_state_Parameter*>(
      &::db::_proc_save_account_state_Parameter_default_instance_);
}
inline ::db::proc_save_account_state_Parameter* proc_save_account_state::release_param() {
  // @@protoc_insertion_point(field_release:db.proc_save_account_state.param)
  clear_has_param();
  ::db::proc_save_account_state_Parameter* temp = param_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  param_ = NULL;
  return temp;
}
inline ::db::proc_save_account_state_Parameter* proc_save_account_state::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.proc_save_account_state.param)
  clear_has_param();
  ::db::proc_save_account_state_Parameter* temp = param_;
  param_ = NULL;
  return temp;
}
inline ::db::proc_save_account_state_Parameter* proc_save_account_state::mutable_param() {
  set_has_param();
  if (param_ == NULL) {
    auto* p = CreateMaybeMessage<::db::proc_save_account_state_Parameter>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db.proc_save_account_state.param)
  return param_;
}
inline void proc_save_account_state::set_allocated_param(::db::proc_save_account_state_Parameter* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    set_has_param();
  } else {
    clear_has_param();
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:db.proc_save_account_state.param)
}

// -------------------------------------------------------------------

// GateLogOnline

// required bytes userid = 1;
inline bool GateLogOnline::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateLogOnline::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateLogOnline::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateLogOnline::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& GateLogOnline::userid() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.userid)
  return userid_.Get();
}
inline void GateLogOnline::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateLogOnline.userid)
}
#if LANG_CXX11
inline void GateLogOnline::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateLogOnline.userid)
}
#endif
inline void GateLogOnline::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateLogOnline.userid)
}
inline void GateLogOnline::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateLogOnline.userid)
}
inline ::std::string* GateLogOnline::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.GateLogOnline.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateLogOnline::release_userid() {
  // @@protoc_insertion_point(field_release:db.GateLogOnline.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateLogOnline::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateLogOnline.userid)
}
inline ::std::string* GateLogOnline::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateLogOnline.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateLogOnline::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateLogOnline.userid)
}

// required bytes pwd = 2;
inline bool GateLogOnline::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateLogOnline::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateLogOnline::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateLogOnline::clear_pwd() {
  pwd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_pwd();
}
inline const ::std::string& GateLogOnline::pwd() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.pwd)
  return pwd_.Get();
}
inline void GateLogOnline::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateLogOnline.pwd)
}
#if LANG_CXX11
inline void GateLogOnline::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateLogOnline.pwd)
}
#endif
inline void GateLogOnline::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateLogOnline.pwd)
}
inline void GateLogOnline::set_pwd(const void* value,
    size_t size) {
  set_has_pwd();
  pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateLogOnline.pwd)
}
inline ::std::string* GateLogOnline::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:db.GateLogOnline.pwd)
  return pwd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateLogOnline::release_pwd() {
  // @@protoc_insertion_point(field_release:db.GateLogOnline.pwd)
  if (!has_pwd()) {
    return NULL;
  }
  clear_has_pwd();
  return pwd_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateLogOnline::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateLogOnline.pwd)
}
inline ::std::string* GateLogOnline::unsafe_arena_release_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateLogOnline.pwd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_pwd();
  return pwd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateLogOnline::unsafe_arena_set_allocated_pwd(
    ::std::string* pwd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pwd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateLogOnline.pwd)
}

// required bytes nick = 3;
inline bool GateLogOnline::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateLogOnline::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateLogOnline::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateLogOnline::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& GateLogOnline::nick() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.nick)
  return nick_.Get();
}
inline void GateLogOnline::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateLogOnline.nick)
}
#if LANG_CXX11
inline void GateLogOnline::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateLogOnline.nick)
}
#endif
inline void GateLogOnline::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateLogOnline.nick)
}
inline void GateLogOnline::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateLogOnline.nick)
}
inline ::std::string* GateLogOnline::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:db.GateLogOnline.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateLogOnline::release_nick() {
  // @@protoc_insertion_point(field_release:db.GateLogOnline.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateLogOnline::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateLogOnline.nick)
}
inline ::std::string* GateLogOnline::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateLogOnline.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateLogOnline::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateLogOnline.nick)
}

// required bytes email = 4;
inline bool GateLogOnline::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateLogOnline::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateLogOnline::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateLogOnline::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_email();
}
inline const ::std::string& GateLogOnline::email() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.email)
  return email_.Get();
}
inline void GateLogOnline::set_email(const ::std::string& value) {
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateLogOnline.email)
}
#if LANG_CXX11
inline void GateLogOnline::set_email(::std::string&& value) {
  set_has_email();
  email_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateLogOnline.email)
}
#endif
inline void GateLogOnline::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateLogOnline.email)
}
inline void GateLogOnline::set_email(const void* value,
    size_t size) {
  set_has_email();
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateLogOnline.email)
}
inline ::std::string* GateLogOnline::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:db.GateLogOnline.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateLogOnline::release_email() {
  // @@protoc_insertion_point(field_release:db.GateLogOnline.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateLogOnline::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateLogOnline.email)
}
inline ::std::string* GateLogOnline::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateLogOnline.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_email();
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateLogOnline::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateLogOnline.email)
}

// required int32 level = 5;
inline bool GateLogOnline::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GateLogOnline::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GateLogOnline::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GateLogOnline::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GateLogOnline::level() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.level)
  return level_;
}
inline void GateLogOnline::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:db.GateLogOnline.level)
}

// required int32 admin = 6;
inline bool GateLogOnline::has_admin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GateLogOnline::set_has_admin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GateLogOnline::clear_has_admin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GateLogOnline::clear_admin() {
  admin_ = 0;
  clear_has_admin();
}
inline ::google::protobuf::int32 GateLogOnline::admin() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.admin)
  return admin_;
}
inline void GateLogOnline::set_admin(::google::protobuf::int32 value) {
  set_has_admin();
  admin_ = value;
  // @@protoc_insertion_point(field_set:db.GateLogOnline.admin)
}

// required bytes platid = 7;
inline bool GateLogOnline::has_platid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GateLogOnline::set_has_platid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GateLogOnline::clear_has_platid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GateLogOnline::clear_platid() {
  platid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_platid();
}
inline const ::std::string& GateLogOnline::platid() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.platid)
  return platid_.Get();
}
inline void GateLogOnline::set_platid(const ::std::string& value) {
  set_has_platid();
  platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateLogOnline.platid)
}
#if LANG_CXX11
inline void GateLogOnline::set_platid(::std::string&& value) {
  set_has_platid();
  platid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateLogOnline.platid)
}
#endif
inline void GateLogOnline::set_platid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platid();
  platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateLogOnline.platid)
}
inline void GateLogOnline::set_platid(const void* value,
    size_t size) {
  set_has_platid();
  platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateLogOnline.platid)
}
inline ::std::string* GateLogOnline::mutable_platid() {
  set_has_platid();
  // @@protoc_insertion_point(field_mutable:db.GateLogOnline.platid)
  return platid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateLogOnline::release_platid() {
  // @@protoc_insertion_point(field_release:db.GateLogOnline.platid)
  if (!has_platid()) {
    return NULL;
  }
  clear_has_platid();
  return platid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateLogOnline::set_allocated_platid(::std::string* platid) {
  if (platid != NULL) {
    set_has_platid();
  } else {
    clear_has_platid();
  }
  platid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateLogOnline.platid)
}
inline ::std::string* GateLogOnline::unsafe_arena_release_platid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateLogOnline.platid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_platid();
  return platid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateLogOnline::unsafe_arena_set_allocated_platid(
    ::std::string* platid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (platid != NULL) {
    set_has_platid();
  } else {
    clear_has_platid();
  }
  platid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      platid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateLogOnline.platid)
}

// required bytes gameid = 8;
inline bool GateLogOnline::has_gameid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GateLogOnline::set_has_gameid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GateLogOnline::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GateLogOnline::clear_gameid() {
  gameid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_gameid();
}
inline const ::std::string& GateLogOnline::gameid() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.gameid)
  return gameid_.Get();
}
inline void GateLogOnline::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateLogOnline.gameid)
}
#if LANG_CXX11
inline void GateLogOnline::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateLogOnline.gameid)
}
#endif
inline void GateLogOnline::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateLogOnline.gameid)
}
inline void GateLogOnline::set_gameid(const void* value,
    size_t size) {
  set_has_gameid();
  gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateLogOnline.gameid)
}
inline ::std::string* GateLogOnline::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:db.GateLogOnline.gameid)
  return gameid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateLogOnline::release_gameid() {
  // @@protoc_insertion_point(field_release:db.GateLogOnline.gameid)
  if (!has_gameid()) {
    return NULL;
  }
  clear_has_gameid();
  return gameid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateLogOnline::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateLogOnline.gameid)
}
inline ::std::string* GateLogOnline::unsafe_arena_release_gameid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateLogOnline.gameid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_gameid();
  return gameid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateLogOnline::unsafe_arena_set_allocated_gameid(
    ::std::string* gameid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gameid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateLogOnline.gameid)
}

// required int32 state = 9;
inline bool GateLogOnline::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GateLogOnline::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GateLogOnline::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GateLogOnline::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GateLogOnline::state() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.state)
  return state_;
}
inline void GateLogOnline::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:db.GateLogOnline.state)
}

// required sfixed64 createtime = 11;
inline bool GateLogOnline::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GateLogOnline::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GateLogOnline::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GateLogOnline::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 GateLogOnline::createtime() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.createtime)
  return createtime_;
}
inline void GateLogOnline::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:db.GateLogOnline.createtime)
}

// required int32 ticketid = 21;
inline bool GateLogOnline::has_ticketid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GateLogOnline::set_has_ticketid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GateLogOnline::clear_has_ticketid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GateLogOnline::clear_ticketid() {
  ticketid_ = 0;
  clear_has_ticketid();
}
inline ::google::protobuf::int32 GateLogOnline::ticketid() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.ticketid)
  return ticketid_;
}
inline void GateLogOnline::set_ticketid(::google::protobuf::int32 value) {
  set_has_ticketid();
  ticketid_ = value;
  // @@protoc_insertion_point(field_set:db.GateLogOnline.ticketid)
}

// required int32 serverid = 22;
inline bool GateLogOnline::has_serverid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GateLogOnline::set_has_serverid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GateLogOnline::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GateLogOnline::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GateLogOnline::serverid() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.serverid)
  return serverid_;
}
inline void GateLogOnline::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:db.GateLogOnline.serverid)
}

// required sfixed64 logintime = 23;
inline bool GateLogOnline::has_logintime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GateLogOnline::set_has_logintime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GateLogOnline::clear_has_logintime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GateLogOnline::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::int64 GateLogOnline::logintime() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.logintime)
  return logintime_;
}
inline void GateLogOnline::set_logintime(::google::protobuf::int64 value) {
  set_has_logintime();
  logintime_ = value;
  // @@protoc_insertion_point(field_set:db.GateLogOnline.logintime)
}

// required sfixed64 first_logintime = 24;
inline bool GateLogOnline::has_first_logintime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GateLogOnline::set_has_first_logintime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GateLogOnline::clear_has_first_logintime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GateLogOnline::clear_first_logintime() {
  first_logintime_ = GOOGLE_LONGLONG(0);
  clear_has_first_logintime();
}
inline ::google::protobuf::int64 GateLogOnline::first_logintime() const {
  // @@protoc_insertion_point(field_get:db.GateLogOnline.first_logintime)
  return first_logintime_;
}
inline void GateLogOnline::set_first_logintime(::google::protobuf::int64 value) {
  set_has_first_logintime();
  first_logintime_ = value;
  // @@protoc_insertion_point(field_set:db.GateLogOnline.first_logintime)
}

// -------------------------------------------------------------------

// GateCfgActiveCode

// required bytes code = 1;
inline bool GateCfgActiveCode::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateCfgActiveCode::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateCfgActiveCode::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateCfgActiveCode::clear_code() {
  code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_code();
}
inline const ::std::string& GateCfgActiveCode::code() const {
  // @@protoc_insertion_point(field_get:db.GateCfgActiveCode.code)
  return code_.Get();
}
inline void GateCfgActiveCode::set_code(const ::std::string& value) {
  set_has_code();
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateCfgActiveCode.code)
}
#if LANG_CXX11
inline void GateCfgActiveCode::set_code(::std::string&& value) {
  set_has_code();
  code_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateCfgActiveCode.code)
}
#endif
inline void GateCfgActiveCode::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateCfgActiveCode.code)
}
inline void GateCfgActiveCode::set_code(const void* value,
    size_t size) {
  set_has_code();
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateCfgActiveCode.code)
}
inline ::std::string* GateCfgActiveCode::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:db.GateCfgActiveCode.code)
  return code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateCfgActiveCode::release_code() {
  // @@protoc_insertion_point(field_release:db.GateCfgActiveCode.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateCfgActiveCode::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateCfgActiveCode.code)
}
inline ::std::string* GateCfgActiveCode::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateCfgActiveCode.code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_code();
  return code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateCfgActiveCode::unsafe_arena_set_allocated_code(
    ::std::string* code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateCfgActiveCode.code)
}

// required bytes desc = 2;
inline bool GateCfgActiveCode::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateCfgActiveCode::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateCfgActiveCode::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateCfgActiveCode::clear_desc() {
  desc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_desc();
}
inline const ::std::string& GateCfgActiveCode::desc() const {
  // @@protoc_insertion_point(field_get:db.GateCfgActiveCode.desc)
  return desc_.Get();
}
inline void GateCfgActiveCode::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateCfgActiveCode.desc)
}
#if LANG_CXX11
inline void GateCfgActiveCode::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateCfgActiveCode.desc)
}
#endif
inline void GateCfgActiveCode::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateCfgActiveCode.desc)
}
inline void GateCfgActiveCode::set_desc(const void* value,
    size_t size) {
  set_has_desc();
  desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateCfgActiveCode.desc)
}
inline ::std::string* GateCfgActiveCode::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:db.GateCfgActiveCode.desc)
  return desc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateCfgActiveCode::release_desc() {
  // @@protoc_insertion_point(field_release:db.GateCfgActiveCode.desc)
  if (!has_desc()) {
    return NULL;
  }
  clear_has_desc();
  return desc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateCfgActiveCode::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateCfgActiveCode.desc)
}
inline ::std::string* GateCfgActiveCode::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateCfgActiveCode.desc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_desc();
  return desc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateCfgActiveCode::unsafe_arena_set_allocated_desc(
    ::std::string* desc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      desc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateCfgActiveCode.desc)
}

// required sfixed64 begin_time = 3;
inline bool GateCfgActiveCode::has_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateCfgActiveCode::set_has_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateCfgActiveCode::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateCfgActiveCode::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::int64 GateCfgActiveCode::begin_time() const {
  // @@protoc_insertion_point(field_get:db.GateCfgActiveCode.begin_time)
  return begin_time_;
}
inline void GateCfgActiveCode::set_begin_time(::google::protobuf::int64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:db.GateCfgActiveCode.begin_time)
}

// required sfixed64 end_time = 4;
inline bool GateCfgActiveCode::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateCfgActiveCode::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateCfgActiveCode::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateCfgActiveCode::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 GateCfgActiveCode::end_time() const {
  // @@protoc_insertion_point(field_get:db.GateCfgActiveCode.end_time)
  return end_time_;
}
inline void GateCfgActiveCode::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:db.GateCfgActiveCode.end_time)
}

// required uint64 reward_typeid = 5;
inline bool GateCfgActiveCode::has_reward_typeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GateCfgActiveCode::set_has_reward_typeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GateCfgActiveCode::clear_has_reward_typeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GateCfgActiveCode::clear_reward_typeid() {
  reward_typeid_ = GOOGLE_ULONGLONG(0);
  clear_has_reward_typeid();
}
inline ::google::protobuf::uint64 GateCfgActiveCode::reward_typeid() const {
  // @@protoc_insertion_point(field_get:db.GateCfgActiveCode.reward_typeid)
  return reward_typeid_;
}
inline void GateCfgActiveCode::set_reward_typeid(::google::protobuf::uint64 value) {
  set_has_reward_typeid();
  reward_typeid_ = value;
  // @@protoc_insertion_point(field_set:db.GateCfgActiveCode.reward_typeid)
}

// -------------------------------------------------------------------

// GateActiveCode

// required bytes code = 1;
inline bool GateActiveCode::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateActiveCode::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateActiveCode::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateActiveCode::clear_code() {
  code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_code();
}
inline const ::std::string& GateActiveCode::code() const {
  // @@protoc_insertion_point(field_get:db.GateActiveCode.code)
  return code_.Get();
}
inline void GateActiveCode::set_code(const ::std::string& value) {
  set_has_code();
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateActiveCode.code)
}
#if LANG_CXX11
inline void GateActiveCode::set_code(::std::string&& value) {
  set_has_code();
  code_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateActiveCode.code)
}
#endif
inline void GateActiveCode::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateActiveCode.code)
}
inline void GateActiveCode::set_code(const void* value,
    size_t size) {
  set_has_code();
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateActiveCode.code)
}
inline ::std::string* GateActiveCode::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:db.GateActiveCode.code)
  return code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateActiveCode::release_code() {
  // @@protoc_insertion_point(field_release:db.GateActiveCode.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateActiveCode::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateActiveCode.code)
}
inline ::std::string* GateActiveCode::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateActiveCode.code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_code();
  return code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateActiveCode::unsafe_arena_set_allocated_code(
    ::std::string* code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateActiveCode.code)
}

// required bytes userid = 2;
inline bool GateActiveCode::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateActiveCode::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateActiveCode::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateActiveCode::clear_userid() {
  userid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_userid();
}
inline const ::std::string& GateActiveCode::userid() const {
  // @@protoc_insertion_point(field_get:db.GateActiveCode.userid)
  return userid_.Get();
}
inline void GateActiveCode::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:db.GateActiveCode.userid)
}
#if LANG_CXX11
inline void GateActiveCode::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:db.GateActiveCode.userid)
}
#endif
inline void GateActiveCode::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:db.GateActiveCode.userid)
}
inline void GateActiveCode::set_userid(const void* value,
    size_t size) {
  set_has_userid();
  userid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:db.GateActiveCode.userid)
}
inline ::std::string* GateActiveCode::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:db.GateActiveCode.userid)
  return userid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateActiveCode::release_userid() {
  // @@protoc_insertion_point(field_release:db.GateActiveCode.userid)
  if (!has_userid()) {
    return NULL;
  }
  clear_has_userid();
  return userid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateActiveCode::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:db.GateActiveCode.userid)
}
inline ::std::string* GateActiveCode::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:db.GateActiveCode.userid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_userid();
  return userid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateActiveCode::unsafe_arena_set_allocated_userid(
    ::std::string* userid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      userid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:db.GateActiveCode.userid)
}

// optional sfixed64 active_time = 3;
inline bool GateActiveCode::has_active_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateActiveCode::set_has_active_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateActiveCode::clear_has_active_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateActiveCode::clear_active_time() {
  active_time_ = GOOGLE_LONGLONG(0);
  clear_has_active_time();
}
inline ::google::protobuf::int64 GateActiveCode::active_time() const {
  // @@protoc_insertion_point(field_get:db.GateActiveCode.active_time)
  return active_time_;
}
inline void GateActiveCode::set_active_time(::google::protobuf::int64 value) {
  set_has_active_time();
  active_time_ = value;
  // @@protoc_insertion_point(field_set:db.GateActiveCode.active_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GateAccount_2eproto
