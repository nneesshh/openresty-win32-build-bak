// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gate.proto

#include "Gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Gate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountLoginService_LoginRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountLoginService_LoginResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountReloginService_ReloginRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountReloginService_ReloginResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActiveCodeService_ActiveRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActiveCodeService_ActiveResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FastRegisterAccountService_RegisterRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FastRegisterAccountService_RegisterResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameServer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameServerService_GameServerRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegisterAccountService_RegisterRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegisterAccountService_RegisterResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameServerList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Gate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameServerService_GameServerResponse;
}  // namespace protobuf_Gate_2eproto
namespace gate {
class ErrorNoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ErrorNo>
      _instance;
} _ErrorNo_default_instance_;
class RegisterAccountService_RegisterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterAccountService_RegisterRequest>
      _instance;
} _RegisterAccountService_RegisterRequest_default_instance_;
class RegisterAccountService_RegisterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterAccountService_RegisterResponse>
      _instance;
} _RegisterAccountService_RegisterResponse_default_instance_;
class RegisterAccountServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterAccountService>
      _instance;
} _RegisterAccountService_default_instance_;
class FastRegisterAccountService_RegisterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FastRegisterAccountService_RegisterRequest>
      _instance;
} _FastRegisterAccountService_RegisterRequest_default_instance_;
class FastRegisterAccountService_RegisterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FastRegisterAccountService_RegisterResponse>
      _instance;
} _FastRegisterAccountService_RegisterResponse_default_instance_;
class FastRegisterAccountServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FastRegisterAccountService>
      _instance;
} _FastRegisterAccountService_default_instance_;
class AccountLoginService_LoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountLoginService_LoginRequest>
      _instance;
} _AccountLoginService_LoginRequest_default_instance_;
class AccountLoginService_LoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountLoginService_LoginResponse>
      _instance;
} _AccountLoginService_LoginResponse_default_instance_;
class AccountLoginServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountLoginService>
      _instance;
} _AccountLoginService_default_instance_;
class AccountReloginService_ReloginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountReloginService_ReloginRequest>
      _instance;
} _AccountReloginService_ReloginRequest_default_instance_;
class AccountReloginService_ReloginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountReloginService_ReloginResponse>
      _instance;
} _AccountReloginService_ReloginResponse_default_instance_;
class AccountReloginServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountReloginService>
      _instance;
} _AccountReloginService_default_instance_;
class GameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServer>
      _instance;
} _GameServer_default_instance_;
class GameServerListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServerList>
      _instance;
} _GameServerList_default_instance_;
class GameServerService_GameServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServerService_GameServerRequest>
      _instance;
} _GameServerService_GameServerRequest_default_instance_;
class GameServerService_GameServerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServerService_GameServerResponse>
      _instance;
} _GameServerService_GameServerResponse_default_instance_;
class GameServerServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameServerService>
      _instance;
} _GameServerService_default_instance_;
class ActiveCodeService_ActiveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveCodeService_ActiveRequest>
      _instance;
} _ActiveCodeService_ActiveRequest_default_instance_;
class ActiveCodeService_ActiveResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveCodeService_ActiveResponse>
      _instance;
} _ActiveCodeService_ActiveResponse_default_instance_;
class ActiveCodeServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveCodeService>
      _instance;
} _ActiveCodeService_default_instance_;
}  // namespace gate
namespace protobuf_Gate_2eproto {
static void InitDefaultsErrorNo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_ErrorNo_default_instance_;
    new (ptr) ::gate::ErrorNo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::ErrorNo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ErrorNo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErrorNo}, {}};

static void InitDefaultsRegisterAccountService_RegisterRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_RegisterAccountService_RegisterRequest_default_instance_;
    new (ptr) ::gate::RegisterAccountService_RegisterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::RegisterAccountService_RegisterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterAccountService_RegisterRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterAccountService_RegisterRequest}, {}};

static void InitDefaultsRegisterAccountService_RegisterResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_RegisterAccountService_RegisterResponse_default_instance_;
    new (ptr) ::gate::RegisterAccountService_RegisterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::RegisterAccountService_RegisterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterAccountService_RegisterResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterAccountService_RegisterResponse}, {}};

static void InitDefaultsRegisterAccountService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_RegisterAccountService_default_instance_;
    new (ptr) ::gate::RegisterAccountService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::RegisterAccountService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RegisterAccountService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRegisterAccountService}, {
      &protobuf_Gate_2eproto::scc_info_RegisterAccountService_RegisterRequest.base,
      &protobuf_Gate_2eproto::scc_info_RegisterAccountService_RegisterResponse.base,}};

static void InitDefaultsFastRegisterAccountService_RegisterRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_FastRegisterAccountService_RegisterRequest_default_instance_;
    new (ptr) ::gate::FastRegisterAccountService_RegisterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::FastRegisterAccountService_RegisterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FastRegisterAccountService_RegisterRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFastRegisterAccountService_RegisterRequest}, {}};

static void InitDefaultsFastRegisterAccountService_RegisterResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_FastRegisterAccountService_RegisterResponse_default_instance_;
    new (ptr) ::gate::FastRegisterAccountService_RegisterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::FastRegisterAccountService_RegisterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FastRegisterAccountService_RegisterResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFastRegisterAccountService_RegisterResponse}, {}};

static void InitDefaultsFastRegisterAccountService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_FastRegisterAccountService_default_instance_;
    new (ptr) ::gate::FastRegisterAccountService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::FastRegisterAccountService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FastRegisterAccountService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFastRegisterAccountService}, {
      &protobuf_Gate_2eproto::scc_info_FastRegisterAccountService_RegisterRequest.base,
      &protobuf_Gate_2eproto::scc_info_FastRegisterAccountService_RegisterResponse.base,}};

static void InitDefaultsAccountLoginService_LoginRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_AccountLoginService_LoginRequest_default_instance_;
    new (ptr) ::gate::AccountLoginService_LoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::AccountLoginService_LoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountLoginService_LoginRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountLoginService_LoginRequest}, {}};

static void InitDefaultsAccountLoginService_LoginResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_AccountLoginService_LoginResponse_default_instance_;
    new (ptr) ::gate::AccountLoginService_LoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::AccountLoginService_LoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountLoginService_LoginResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountLoginService_LoginResponse}, {}};

static void InitDefaultsAccountLoginService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_AccountLoginService_default_instance_;
    new (ptr) ::gate::AccountLoginService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::AccountLoginService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AccountLoginService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAccountLoginService}, {
      &protobuf_Gate_2eproto::scc_info_AccountLoginService_LoginRequest.base,
      &protobuf_Gate_2eproto::scc_info_AccountLoginService_LoginResponse.base,}};

static void InitDefaultsAccountReloginService_ReloginRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_AccountReloginService_ReloginRequest_default_instance_;
    new (ptr) ::gate::AccountReloginService_ReloginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::AccountReloginService_ReloginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountReloginService_ReloginRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountReloginService_ReloginRequest}, {}};

static void InitDefaultsAccountReloginService_ReloginResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_AccountReloginService_ReloginResponse_default_instance_;
    new (ptr) ::gate::AccountReloginService_ReloginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::AccountReloginService_ReloginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountReloginService_ReloginResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountReloginService_ReloginResponse}, {}};

static void InitDefaultsAccountReloginService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_AccountReloginService_default_instance_;
    new (ptr) ::gate::AccountReloginService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::AccountReloginService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AccountReloginService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAccountReloginService}, {
      &protobuf_Gate_2eproto::scc_info_AccountReloginService_ReloginRequest.base,
      &protobuf_Gate_2eproto::scc_info_AccountReloginService_ReloginResponse.base,}};

static void InitDefaultsGameServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_GameServer_default_instance_;
    new (ptr) ::gate::GameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::GameServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameServer}, {}};

static void InitDefaultsGameServerList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_GameServerList_default_instance_;
    new (ptr) ::gate::GameServerList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::GameServerList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameServerList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameServerList}, {
      &protobuf_Gate_2eproto::scc_info_GameServer.base,}};

static void InitDefaultsGameServerService_GameServerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_GameServerService_GameServerRequest_default_instance_;
    new (ptr) ::gate::GameServerService_GameServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::GameServerService_GameServerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameServerService_GameServerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameServerService_GameServerRequest}, {}};

static void InitDefaultsGameServerService_GameServerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_GameServerService_GameServerResponse_default_instance_;
    new (ptr) ::gate::GameServerService_GameServerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::GameServerService_GameServerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameServerService_GameServerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameServerService_GameServerResponse}, {
      &protobuf_Gate_2eproto::scc_info_GameServerList.base,}};

static void InitDefaultsGameServerService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_GameServerService_default_instance_;
    new (ptr) ::gate::GameServerService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::GameServerService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GameServerService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGameServerService}, {
      &protobuf_Gate_2eproto::scc_info_GameServerService_GameServerRequest.base,
      &protobuf_Gate_2eproto::scc_info_GameServerService_GameServerResponse.base,}};

static void InitDefaultsActiveCodeService_ActiveRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_ActiveCodeService_ActiveRequest_default_instance_;
    new (ptr) ::gate::ActiveCodeService_ActiveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::ActiveCodeService_ActiveRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActiveCodeService_ActiveRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActiveCodeService_ActiveRequest}, {}};

static void InitDefaultsActiveCodeService_ActiveResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_ActiveCodeService_ActiveResponse_default_instance_;
    new (ptr) ::gate::ActiveCodeService_ActiveResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::ActiveCodeService_ActiveResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActiveCodeService_ActiveResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActiveCodeService_ActiveResponse}, {}};

static void InitDefaultsActiveCodeService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gate::_ActiveCodeService_default_instance_;
    new (ptr) ::gate::ActiveCodeService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gate::ActiveCodeService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ActiveCodeService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsActiveCodeService}, {
      &protobuf_Gate_2eproto::scc_info_ActiveCodeService_ActiveRequest.base,
      &protobuf_Gate_2eproto::scc_info_ActiveCodeService_ActiveResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ErrorNo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterAccountService_RegisterRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterAccountService_RegisterResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterAccountService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FastRegisterAccountService_RegisterRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FastRegisterAccountService_RegisterResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FastRegisterAccountService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountLoginService_LoginRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountLoginService_LoginResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountLoginService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountReloginService_ReloginRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountReloginService_ReloginResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountReloginService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameServerList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameServerService_GameServerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameServerService_GameServerResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameServerService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActiveCodeService_ActiveRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActiveCodeService_ActiveResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActiveCodeService.base);
}

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ErrorNo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ErrorNo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ErrorNo, error_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ErrorNo, desc_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterRequest, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterRequest, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterRequest, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterRequest, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterRequest, sponsor_uid_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService_RegisterResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::RegisterAccountService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterResponse, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterResponse, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterResponse, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterResponse, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService_RegisterResponse, sponsor_uid_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::FastRegisterAccountService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginRequest, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginRequest, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginRequest, ws_entryid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginRequest, channel_platid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginRequest, channel_gameid_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService_LoginResponse, uuid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountLoginService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService_ReloginRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService_ReloginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService_ReloginRequest, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService_ReloginRequest, pwd_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService_ReloginResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService_ReloginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService_ReloginResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService_ReloginResponse, uuid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::AccountReloginService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServer, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerList, list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerRequest, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerRequest, serverid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerResponse, server_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService_GameServerResponse, last_serverid_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::GameServerService, resp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService_ActiveRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService_ActiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService_ActiveRequest, active_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService_ActiveRequest, uid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService_ActiveResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService_ActiveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService_ActiveResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gate::ActiveCodeService, resp_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gate::ErrorNo)},
  { 9, 19, sizeof(::gate::RegisterAccountService_RegisterRequest)},
  { 24, 30, sizeof(::gate::RegisterAccountService_RegisterResponse)},
  { 31, 38, sizeof(::gate::RegisterAccountService)},
  { 40, 45, sizeof(::gate::FastRegisterAccountService_RegisterRequest)},
  { 45, 55, sizeof(::gate::FastRegisterAccountService_RegisterResponse)},
  { 60, 67, sizeof(::gate::FastRegisterAccountService)},
  { 69, 79, sizeof(::gate::AccountLoginService_LoginRequest)},
  { 84, 91, sizeof(::gate::AccountLoginService_LoginResponse)},
  { 93, 100, sizeof(::gate::AccountLoginService)},
  { 102, 109, sizeof(::gate::AccountReloginService_ReloginRequest)},
  { 111, 118, sizeof(::gate::AccountReloginService_ReloginResponse)},
  { 120, 127, sizeof(::gate::AccountReloginService)},
  { 129, 136, sizeof(::gate::GameServer)},
  { 138, 144, sizeof(::gate::GameServerList)},
  { 145, 152, sizeof(::gate::GameServerService_GameServerRequest)},
  { 154, 162, sizeof(::gate::GameServerService_GameServerResponse)},
  { 165, 172, sizeof(::gate::GameServerService)},
  { 174, 181, sizeof(::gate::ActiveCodeService_ActiveRequest)},
  { 183, 189, sizeof(::gate::ActiveCodeService_ActiveResponse)},
  { 190, 197, sizeof(::gate::ActiveCodeService)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_ErrorNo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_RegisterAccountService_RegisterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_RegisterAccountService_RegisterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_RegisterAccountService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_FastRegisterAccountService_RegisterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_FastRegisterAccountService_RegisterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_FastRegisterAccountService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_AccountLoginService_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_AccountLoginService_LoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_AccountLoginService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_AccountReloginService_ReloginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_AccountReloginService_ReloginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_AccountReloginService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_GameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_GameServerList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_GameServerService_GameServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_GameServerService_GameServerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_GameServerService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_ActiveCodeService_ActiveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_ActiveCodeService_ActiveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gate::_ActiveCodeService_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Gate.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nGate.proto\022\004gate\"\202\001\n\007ErrorNo\022\020\n\010error_"
      "no\030\001 \002(\005\022\014\n\004desc\030\002 \002(\014\"W\n\010ERROR_NO\022\024\n\007RE"
      "LOGIN\020\330\271\377\377\377\377\377\377\377\001\022\031\n\014IP_IS_BANNED\020\327\271\377\377\377\377\377"
      "\377\377\001\022\032\n\rUID_IS_BANNED\020\326\271\377\377\377\377\377\377\377\001\"\341\003\n\026Regi"
      "sterAccountService\0229\n\003req\030\001 \001(\0132,.gate.R"
      "egisterAccountService.RegisterRequest\022;\n"
      "\004resp\030\002 \001(\0132-.gate.RegisterAccountServic"
      "e.RegisterResponse\032]\n\017RegisterRequest\022\013\n"
      "\003uid\030\001 \002(\014\022\013\n\003pwd\030\002 \002(\014\022\014\n\004nick\030\003 \002(\014\022\r\n"
      "\005email\030\004 \002(\014\022\023\n\013sponsor_uid\030\013 \001(\014\032\"\n\020Reg"
      "isterResponse\022\016\n\006result\030\001 \002(\005\"\313\001\n\006RESULT"
      "\022\006\n\002OK\020\000\022!\n\024UID_OR_PWD_TOO_SHORT\020\377\377\377\377\377\377\377"
      "\377\377\001\022\037\n\022UID_ALREADY_EXISTS\020\376\377\377\377\377\377\377\377\377\001\022)\n\034"
      "UID_MUST_START_WITH_A_LETTER\020\375\377\377\377\377\377\377\377\377\001\022"
      "\032\n\rEMAIL_INVALID\020\374\377\377\377\377\377\377\377\377\001\022\025\n\010DB_ERROR\020"
      "\310\272\377\377\377\377\377\377\377\001\022\027\n\nASYNC_WAIT\020\361\261\377\377\377\377\377\377\377\001\"\217\002\n\032"
      "FastRegisterAccountService\022=\n\003req\030\001 \001(\0132"
      "0.gate.FastRegisterAccountService.Regist"
      "erRequest\022\?\n\004resp\030\002 \001(\01321.gate.FastRegis"
      "terAccountService.RegisterResponse\032\021\n\017Re"
      "gisterRequest\032^\n\020RegisterResponse\022\013\n\003uid"
      "\030\001 \002(\014\022\013\n\003pwd\030\002 \002(\014\022\014\n\004nick\030\003 \002(\014\022\r\n\005ema"
      "il\030\004 \002(\014\022\023\n\013sponsor_uid\030\013 \001(\014\"\376\003\n\023Accoun"
      "tLoginService\0223\n\003req\030\001 \001(\0132&.gate.Accoun"
      "tLoginService.LoginRequest\0225\n\004resp\030\002 \001(\013"
      "2\'.gate.AccountLoginService.LoginRespons"
      "e\032l\n\014LoginRequest\022\013\n\003uid\030\001 \002(\014\022\013\n\003pwd\030\002 "
      "\002(\014\022\022\n\nws_entryid\030\013 \001(\005\022\026\n\016channel_plati"
      "d\030\014 \001(\014\022\026\n\016channel_gameid\030\r \001(\014\032O\n\rLogin"
      "Response\0220\n\006result\030\001 \002(\0162 .gate.AccountL"
      "oginService.RESULT\022\014\n\004uuid\030\002 \001(\004\"\273\001\n\006RES"
      "ULT\022\006\n\002OK\020\000\022$\n\027UID_OR_PWD_IS_NOT_VALID\020\377"
      "\377\377\377\377\377\377\377\377\001\022$\n\027USER_ASSETS_LOAD_FAILED\020\376\377\377"
      "\377\377\377\377\377\377\001\022\035\n\020TOO_MANY_REQUEST\020\375\377\377\377\377\377\377\377\377\001\022\""
      "\n\025GAME_SERVER_NOT_READY\020\374\377\377\377\377\377\377\377\377\001\022\032\n\rNE"
      "ED_ACTIVATE\020\373\377\377\377\377\377\377\377\377\001\"\252\002\n\025AccountRelogi"
      "nService\0227\n\003req\030\001 \001(\0132*.gate.AccountRelo"
      "ginService.ReloginRequest\0229\n\004resp\030\002 \001(\0132"
      "+.gate.AccountReloginService.ReloginResp"
      "onse\032*\n\016ReloginRequest\022\013\n\003uid\030\001 \002(\014\022\013\n\003p"
      "wd\030\002 \002(\014\032S\n\017ReloginResponse\0222\n\006result\030\001 "
      "\002(\0162\".gate.AccountReloginService.RESULT\022"
      "\014\n\004uuid\030\002 \001(\004\"\034\n\006RESULT\022\006\n\002OK\020\000\022\n\n\006FAILE"
      "D\020\001\"&\n\nGameServer\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 "
      "\002(\014\"0\n\016GameServerList\022\036\n\004list\030\001 \003(\0132\020.ga"
      "te.GameServer\"\203\003\n\021GameServerService\0226\n\003r"
      "eq\030\001 \001(\0132).gate.GameServerService.GameSe"
      "rverRequest\0228\n\004resp\030\002 \001(\0132*.gate.GameSer"
      "verService.GameServerResponse\032_\n\021GameSer"
      "verRequest\0228\n\003cmd\030\001 \002(\0162+.gate.GameServe"
      "rService.GAME_SERVER_COMMAND\022\020\n\010serverid"
      "\030\002 \001(\005\032f\n\022GameServerResponse\022\016\n\006result\030\001"
      " \002(\005\022)\n\013server_list\030\002 \001(\0132\024.gate.GameSer"
      "verList\022\025\n\rlast_serverid\030\003 \001(\005\"3\n\023GAME_S"
      "ERVER_COMMAND\022\t\n\005QUERY\020\001\022\021\n\rSELECT_SERVE"
      "R\020\002\"\322\001\n\021ActiveCodeService\0222\n\003req\030\001 \001(\0132%"
      ".gate.ActiveCodeService.ActiveRequest\0224\n"
      "\004resp\030\002 \001(\0132&.gate.ActiveCodeService.Act"
      "iveResponse\0321\n\rActiveRequest\022\023\n\013active_c"
      "ode\030\001 \002(\014\022\013\n\003uid\030\002 \002(\014\032 \n\016ActiveResponse"
      "\022\016\n\006result\030\001 \001(\005*\201\001\n\023GATE_ACCOUNT_STATUS"
      "\022\'\n\032GATE_ACCOUNT_STATUS_LOCKED\020\377\377\377\377\377\377\377\377\377"
      "\001\022\036\n\032GATE_ACCOUNT_STATUS_NORMAL\020\000\022!\n\035GAT"
      "E_ACCOUNT_STATUS_ACTIVATED\020\001B\003\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2553);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Gate.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Gate_2eproto
namespace gate {
const ::google::protobuf::EnumDescriptor* ErrorNo_ERROR_NO_descriptor() {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gate_2eproto::file_level_enum_descriptors[0];
}
bool ErrorNo_ERROR_NO_IsValid(int value) {
  switch (value) {
    case -9002:
    case -9001:
    case -9000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ErrorNo_ERROR_NO ErrorNo::RELOGIN;
const ErrorNo_ERROR_NO ErrorNo::IP_IS_BANNED;
const ErrorNo_ERROR_NO ErrorNo::UID_IS_BANNED;
const ErrorNo_ERROR_NO ErrorNo::ERROR_NO_MIN;
const ErrorNo_ERROR_NO ErrorNo::ERROR_NO_MAX;
const int ErrorNo::ERROR_NO_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RegisterAccountService_RESULT_descriptor() {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gate_2eproto::file_level_enum_descriptors[1];
}
bool RegisterAccountService_RESULT_IsValid(int value) {
  switch (value) {
    case -9999:
    case -8888:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RegisterAccountService_RESULT RegisterAccountService::OK;
const RegisterAccountService_RESULT RegisterAccountService::UID_OR_PWD_TOO_SHORT;
const RegisterAccountService_RESULT RegisterAccountService::UID_ALREADY_EXISTS;
const RegisterAccountService_RESULT RegisterAccountService::UID_MUST_START_WITH_A_LETTER;
const RegisterAccountService_RESULT RegisterAccountService::EMAIL_INVALID;
const RegisterAccountService_RESULT RegisterAccountService::DB_ERROR;
const RegisterAccountService_RESULT RegisterAccountService::ASYNC_WAIT;
const RegisterAccountService_RESULT RegisterAccountService::RESULT_MIN;
const RegisterAccountService_RESULT RegisterAccountService::RESULT_MAX;
const int RegisterAccountService::RESULT_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AccountLoginService_RESULT_descriptor() {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gate_2eproto::file_level_enum_descriptors[2];
}
bool AccountLoginService_RESULT_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AccountLoginService_RESULT AccountLoginService::OK;
const AccountLoginService_RESULT AccountLoginService::UID_OR_PWD_IS_NOT_VALID;
const AccountLoginService_RESULT AccountLoginService::USER_ASSETS_LOAD_FAILED;
const AccountLoginService_RESULT AccountLoginService::TOO_MANY_REQUEST;
const AccountLoginService_RESULT AccountLoginService::GAME_SERVER_NOT_READY;
const AccountLoginService_RESULT AccountLoginService::NEED_ACTIVATE;
const AccountLoginService_RESULT AccountLoginService::RESULT_MIN;
const AccountLoginService_RESULT AccountLoginService::RESULT_MAX;
const int AccountLoginService::RESULT_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AccountReloginService_RESULT_descriptor() {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gate_2eproto::file_level_enum_descriptors[3];
}
bool AccountReloginService_RESULT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AccountReloginService_RESULT AccountReloginService::OK;
const AccountReloginService_RESULT AccountReloginService::FAILED;
const AccountReloginService_RESULT AccountReloginService::RESULT_MIN;
const AccountReloginService_RESULT AccountReloginService::RESULT_MAX;
const int AccountReloginService::RESULT_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GameServerService_GAME_SERVER_COMMAND_descriptor() {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gate_2eproto::file_level_enum_descriptors[4];
}
bool GameServerService_GAME_SERVER_COMMAND_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameServerService_GAME_SERVER_COMMAND GameServerService::QUERY;
const GameServerService_GAME_SERVER_COMMAND GameServerService::SELECT_SERVER;
const GameServerService_GAME_SERVER_COMMAND GameServerService::GAME_SERVER_COMMAND_MIN;
const GameServerService_GAME_SERVER_COMMAND GameServerService::GAME_SERVER_COMMAND_MAX;
const int GameServerService::GAME_SERVER_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GATE_ACCOUNT_STATUS_descriptor() {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Gate_2eproto::file_level_enum_descriptors[5];
}
bool GATE_ACCOUNT_STATUS_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ErrorNo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorNo::kErrorNoFieldNumber;
const int ErrorNo::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorNo::ErrorNo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_ErrorNo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.ErrorNo)
}
ErrorNo::ErrorNo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_ErrorNo.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.ErrorNo)
}
ErrorNo::ErrorNo(const ErrorNo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc(),
      GetArenaNoVirtual());
  }
  error_no_ = from.error_no_;
  // @@protoc_insertion_point(copy_constructor:gate.ErrorNo)
}

void ErrorNo::SharedCtor() {
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_no_ = 0;
}

ErrorNo::~ErrorNo() {
  // @@protoc_insertion_point(destructor:gate.ErrorNo)
  SharedDtor();
}

void ErrorNo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ErrorNo::ArenaDtor(void* object) {
  ErrorNo* _this = reinterpret_cast< ErrorNo* >(object);
  (void)_this;
}
void ErrorNo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ErrorNo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ErrorNo::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ErrorNo& ErrorNo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_ErrorNo.base);
  return *internal_default_instance();
}


void ErrorNo::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.ErrorNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    desc_.ClearNonDefaultToEmpty();
  }
  error_no_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ErrorNo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.ErrorNo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_no = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.ErrorNo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.ErrorNo)
  return false;
#undef DO_
}

void ErrorNo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.ErrorNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 error_no = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_no(), output);
  }

  // required bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.ErrorNo)
}

::google::protobuf::uint8* ErrorNo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.ErrorNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 error_no = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_no(), target);
  }

  // required bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.ErrorNo)
  return target;
}

size_t ErrorNo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gate.ErrorNo)
  size_t total_size = 0;

  if (has_desc()) {
    // required bytes desc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (has_error_no()) {
    // required int32 error_no = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_no());
  }

  return total_size;
}
size_t ErrorNo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.ErrorNo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes desc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());

    // required int32 error_no = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_no());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorNo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.ErrorNo)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorNo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorNo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.ErrorNo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.ErrorNo)
    MergeFrom(*source);
  }
}

void ErrorNo::MergeFrom(const ErrorNo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.ErrorNo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_desc(from.desc());
    }
    if (cached_has_bits & 0x00000002u) {
      error_no_ = from.error_no_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ErrorNo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.ErrorNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorNo::CopyFrom(const ErrorNo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.ErrorNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorNo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ErrorNo::Swap(ErrorNo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ErrorNo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ErrorNo::UnsafeArenaSwap(ErrorNo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ErrorNo::InternalSwap(ErrorNo* other) {
  using std::swap;
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_no_, other->error_no_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ErrorNo::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterAccountService_RegisterRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterAccountService_RegisterRequest::kUidFieldNumber;
const int RegisterAccountService_RegisterRequest::kPwdFieldNumber;
const int RegisterAccountService_RegisterRequest::kNickFieldNumber;
const int RegisterAccountService_RegisterRequest::kEmailFieldNumber;
const int RegisterAccountService_RegisterRequest::kSponsorUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterAccountService_RegisterRequest::RegisterAccountService_RegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_RegisterAccountService_RegisterRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.RegisterAccountService.RegisterRequest)
}
RegisterAccountService_RegisterRequest::RegisterAccountService_RegisterRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_RegisterAccountService_RegisterRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.RegisterAccountService.RegisterRequest)
}
RegisterAccountService_RegisterRequest::RegisterAccountService_RegisterRequest(const RegisterAccountService_RegisterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid(),
      GetArenaNoVirtual());
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd(),
      GetArenaNoVirtual());
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email(),
      GetArenaNoVirtual());
  }
  sponsor_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sponsor_uid()) {
    sponsor_uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsor_uid(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:gate.RegisterAccountService.RegisterRequest)
}

void RegisterAccountService_RegisterRequest::SharedCtor() {
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterAccountService_RegisterRequest::~RegisterAccountService_RegisterRequest() {
  // @@protoc_insertion_point(destructor:gate.RegisterAccountService.RegisterRequest)
  SharedDtor();
}

void RegisterAccountService_RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterAccountService_RegisterRequest::ArenaDtor(void* object) {
  RegisterAccountService_RegisterRequest* _this = reinterpret_cast< RegisterAccountService_RegisterRequest* >(object);
  (void)_this;
}
void RegisterAccountService_RegisterRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RegisterAccountService_RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterAccountService_RegisterRequest::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterAccountService_RegisterRequest& RegisterAccountService_RegisterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_RegisterAccountService_RegisterRequest.base);
  return *internal_default_instance();
}


void RegisterAccountService_RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.RegisterAccountService.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pwd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      sponsor_uid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterAccountService_RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.RegisterAccountService.RegisterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes email = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sponsor_uid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sponsor_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.RegisterAccountService.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.RegisterAccountService.RegisterRequest)
  return false;
#undef DO_
}

void RegisterAccountService_RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.RegisterAccountService.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uid(), output);
  }

  // required bytes pwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pwd(), output);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nick(), output);
  }

  // required bytes email = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->email(), output);
  }

  // optional bytes sponsor_uid = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->sponsor_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.RegisterAccountService.RegisterRequest)
}

::google::protobuf::uint8* RegisterAccountService_RegisterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.RegisterAccountService.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uid(), target);
  }

  // required bytes pwd = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pwd(), target);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  // required bytes email = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->email(), target);
  }

  // optional bytes sponsor_uid = 11;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->sponsor_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.RegisterAccountService.RegisterRequest)
  return target;
}

size_t RegisterAccountService_RegisterRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gate.RegisterAccountService.RegisterRequest)
  size_t total_size = 0;

  if (has_uid()) {
    // required bytes uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());
  }

  if (has_pwd()) {
    // required bytes pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());
  }

  if (has_nick()) {
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_email()) {
    // required bytes email = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->email());
  }

  return total_size;
}
size_t RegisterAccountService_RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.RegisterAccountService.RegisterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());

    // required bytes pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());

    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required bytes email = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->email());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes sponsor_uid = 11;
  if (has_sponsor_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sponsor_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterAccountService_RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.RegisterAccountService.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterAccountService_RegisterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterAccountService_RegisterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.RegisterAccountService.RegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.RegisterAccountService.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterAccountService_RegisterRequest::MergeFrom(const RegisterAccountService_RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.RegisterAccountService.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_uid(from.uid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_pwd(from.pwd());
    }
    if (cached_has_bits & 0x00000004u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000008u) {
      set_email(from.email());
    }
    if (cached_has_bits & 0x00000010u) {
      set_sponsor_uid(from.sponsor_uid());
    }
  }
}

void RegisterAccountService_RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.RegisterAccountService.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAccountService_RegisterRequest::CopyFrom(const RegisterAccountService_RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.RegisterAccountService.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAccountService_RegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RegisterAccountService_RegisterRequest::Swap(RegisterAccountService_RegisterRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterAccountService_RegisterRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RegisterAccountService_RegisterRequest::UnsafeArenaSwap(RegisterAccountService_RegisterRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterAccountService_RegisterRequest::InternalSwap(RegisterAccountService_RegisterRequest* other) {
  using std::swap;
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sponsor_uid_.Swap(&other->sponsor_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterAccountService_RegisterRequest::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterAccountService_RegisterResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterAccountService_RegisterResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterAccountService_RegisterResponse::RegisterAccountService_RegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_RegisterAccountService_RegisterResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.RegisterAccountService.RegisterResponse)
}
RegisterAccountService_RegisterResponse::RegisterAccountService_RegisterResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_RegisterAccountService_RegisterResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.RegisterAccountService.RegisterResponse)
}
RegisterAccountService_RegisterResponse::RegisterAccountService_RegisterResponse(const RegisterAccountService_RegisterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:gate.RegisterAccountService.RegisterResponse)
}

void RegisterAccountService_RegisterResponse::SharedCtor() {
  result_ = 0;
}

RegisterAccountService_RegisterResponse::~RegisterAccountService_RegisterResponse() {
  // @@protoc_insertion_point(destructor:gate.RegisterAccountService.RegisterResponse)
  SharedDtor();
}

void RegisterAccountService_RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void RegisterAccountService_RegisterResponse::ArenaDtor(void* object) {
  RegisterAccountService_RegisterResponse* _this = reinterpret_cast< RegisterAccountService_RegisterResponse* >(object);
  (void)_this;
}
void RegisterAccountService_RegisterResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RegisterAccountService_RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterAccountService_RegisterResponse::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterAccountService_RegisterResponse& RegisterAccountService_RegisterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_RegisterAccountService_RegisterResponse.base);
  return *internal_default_instance();
}


void RegisterAccountService_RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.RegisterAccountService.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterAccountService_RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.RegisterAccountService.RegisterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.RegisterAccountService.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.RegisterAccountService.RegisterResponse)
  return false;
#undef DO_
}

void RegisterAccountService_RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.RegisterAccountService.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.RegisterAccountService.RegisterResponse)
}

::google::protobuf::uint8* RegisterAccountService_RegisterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.RegisterAccountService.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.RegisterAccountService.RegisterResponse)
  return target;
}

size_t RegisterAccountService_RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.RegisterAccountService.RegisterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterAccountService_RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.RegisterAccountService.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterAccountService_RegisterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterAccountService_RegisterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.RegisterAccountService.RegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.RegisterAccountService.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterAccountService_RegisterResponse::MergeFrom(const RegisterAccountService_RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.RegisterAccountService.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void RegisterAccountService_RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.RegisterAccountService.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAccountService_RegisterResponse::CopyFrom(const RegisterAccountService_RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.RegisterAccountService.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAccountService_RegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RegisterAccountService_RegisterResponse::Swap(RegisterAccountService_RegisterResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterAccountService_RegisterResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RegisterAccountService_RegisterResponse::UnsafeArenaSwap(RegisterAccountService_RegisterResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterAccountService_RegisterResponse::InternalSwap(RegisterAccountService_RegisterResponse* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterAccountService_RegisterResponse::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterAccountService::InitAsDefaultInstance() {
  ::gate::_RegisterAccountService_default_instance_._instance.get_mutable()->req_ = const_cast< ::gate::RegisterAccountService_RegisterRequest*>(
      ::gate::RegisterAccountService_RegisterRequest::internal_default_instance());
  ::gate::_RegisterAccountService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::gate::RegisterAccountService_RegisterResponse*>(
      ::gate::RegisterAccountService_RegisterResponse::internal_default_instance());
}
void RegisterAccountService::unsafe_arena_set_allocated_req(
    ::gate::RegisterAccountService_RegisterRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.RegisterAccountService.req)
}
void RegisterAccountService::unsafe_arena_set_allocated_resp(
    ::gate::RegisterAccountService_RegisterResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.RegisterAccountService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterAccountService::kReqFieldNumber;
const int RegisterAccountService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterAccountService::RegisterAccountService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_RegisterAccountService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.RegisterAccountService)
}
RegisterAccountService::RegisterAccountService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_RegisterAccountService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.RegisterAccountService)
}
RegisterAccountService::RegisterAccountService(const RegisterAccountService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::gate::RegisterAccountService_RegisterRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::gate::RegisterAccountService_RegisterResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gate.RegisterAccountService)
}

void RegisterAccountService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

RegisterAccountService::~RegisterAccountService() {
  // @@protoc_insertion_point(destructor:gate.RegisterAccountService)
  SharedDtor();
}

void RegisterAccountService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void RegisterAccountService::ArenaDtor(void* object) {
  RegisterAccountService* _this = reinterpret_cast< RegisterAccountService* >(object);
  (void)_this;
}
void RegisterAccountService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RegisterAccountService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterAccountService::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterAccountService& RegisterAccountService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_RegisterAccountService.base);
  return *internal_default_instance();
}


void RegisterAccountService::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.RegisterAccountService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterAccountService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.RegisterAccountService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gate.RegisterAccountService.RegisterRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gate.RegisterAccountService.RegisterResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.RegisterAccountService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.RegisterAccountService)
  return false;
#undef DO_
}

void RegisterAccountService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.RegisterAccountService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.RegisterAccountService.RegisterRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .gate.RegisterAccountService.RegisterResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.RegisterAccountService)
}

::google::protobuf::uint8* RegisterAccountService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.RegisterAccountService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.RegisterAccountService.RegisterRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .gate.RegisterAccountService.RegisterResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.RegisterAccountService)
  return target;
}

size_t RegisterAccountService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.RegisterAccountService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .gate.RegisterAccountService.RegisterRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .gate.RegisterAccountService.RegisterResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterAccountService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.RegisterAccountService)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterAccountService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterAccountService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.RegisterAccountService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.RegisterAccountService)
    MergeFrom(*source);
  }
}

void RegisterAccountService::MergeFrom(const RegisterAccountService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.RegisterAccountService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::gate::RegisterAccountService_RegisterRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::gate::RegisterAccountService_RegisterResponse::MergeFrom(from.resp());
    }
  }
}

void RegisterAccountService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.RegisterAccountService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAccountService::CopyFrom(const RegisterAccountService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.RegisterAccountService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAccountService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void RegisterAccountService::Swap(RegisterAccountService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterAccountService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RegisterAccountService::UnsafeArenaSwap(RegisterAccountService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterAccountService::InternalSwap(RegisterAccountService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterAccountService::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FastRegisterAccountService_RegisterRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastRegisterAccountService_RegisterRequest::FastRegisterAccountService_RegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_FastRegisterAccountService_RegisterRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.FastRegisterAccountService.RegisterRequest)
}
FastRegisterAccountService_RegisterRequest::FastRegisterAccountService_RegisterRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_FastRegisterAccountService_RegisterRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.FastRegisterAccountService.RegisterRequest)
}
FastRegisterAccountService_RegisterRequest::FastRegisterAccountService_RegisterRequest(const FastRegisterAccountService_RegisterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gate.FastRegisterAccountService.RegisterRequest)
}

void FastRegisterAccountService_RegisterRequest::SharedCtor() {
}

FastRegisterAccountService_RegisterRequest::~FastRegisterAccountService_RegisterRequest() {
  // @@protoc_insertion_point(destructor:gate.FastRegisterAccountService.RegisterRequest)
  SharedDtor();
}

void FastRegisterAccountService_RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FastRegisterAccountService_RegisterRequest::ArenaDtor(void* object) {
  FastRegisterAccountService_RegisterRequest* _this = reinterpret_cast< FastRegisterAccountService_RegisterRequest* >(object);
  (void)_this;
}
void FastRegisterAccountService_RegisterRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FastRegisterAccountService_RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FastRegisterAccountService_RegisterRequest::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FastRegisterAccountService_RegisterRequest& FastRegisterAccountService_RegisterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_FastRegisterAccountService_RegisterRequest.base);
  return *internal_default_instance();
}


void FastRegisterAccountService_RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.FastRegisterAccountService.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FastRegisterAccountService_RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.FastRegisterAccountService.RegisterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:gate.FastRegisterAccountService.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.FastRegisterAccountService.RegisterRequest)
  return false;
#undef DO_
}

void FastRegisterAccountService_RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.FastRegisterAccountService.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.FastRegisterAccountService.RegisterRequest)
}

::google::protobuf::uint8* FastRegisterAccountService_RegisterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.FastRegisterAccountService.RegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.FastRegisterAccountService.RegisterRequest)
  return target;
}

size_t FastRegisterAccountService_RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.FastRegisterAccountService.RegisterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastRegisterAccountService_RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.FastRegisterAccountService.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FastRegisterAccountService_RegisterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FastRegisterAccountService_RegisterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.FastRegisterAccountService.RegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.FastRegisterAccountService.RegisterRequest)
    MergeFrom(*source);
  }
}

void FastRegisterAccountService_RegisterRequest::MergeFrom(const FastRegisterAccountService_RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.FastRegisterAccountService.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FastRegisterAccountService_RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.FastRegisterAccountService.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastRegisterAccountService_RegisterRequest::CopyFrom(const FastRegisterAccountService_RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.FastRegisterAccountService.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastRegisterAccountService_RegisterRequest::IsInitialized() const {
  return true;
}

void FastRegisterAccountService_RegisterRequest::Swap(FastRegisterAccountService_RegisterRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FastRegisterAccountService_RegisterRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FastRegisterAccountService_RegisterRequest::UnsafeArenaSwap(FastRegisterAccountService_RegisterRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FastRegisterAccountService_RegisterRequest::InternalSwap(FastRegisterAccountService_RegisterRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FastRegisterAccountService_RegisterRequest::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FastRegisterAccountService_RegisterResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastRegisterAccountService_RegisterResponse::kUidFieldNumber;
const int FastRegisterAccountService_RegisterResponse::kPwdFieldNumber;
const int FastRegisterAccountService_RegisterResponse::kNickFieldNumber;
const int FastRegisterAccountService_RegisterResponse::kEmailFieldNumber;
const int FastRegisterAccountService_RegisterResponse::kSponsorUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastRegisterAccountService_RegisterResponse::FastRegisterAccountService_RegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_FastRegisterAccountService_RegisterResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.FastRegisterAccountService.RegisterResponse)
}
FastRegisterAccountService_RegisterResponse::FastRegisterAccountService_RegisterResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_FastRegisterAccountService_RegisterResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.FastRegisterAccountService.RegisterResponse)
}
FastRegisterAccountService_RegisterResponse::FastRegisterAccountService_RegisterResponse(const FastRegisterAccountService_RegisterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid(),
      GetArenaNoVirtual());
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd(),
      GetArenaNoVirtual());
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick(),
      GetArenaNoVirtual());
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email(),
      GetArenaNoVirtual());
  }
  sponsor_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sponsor_uid()) {
    sponsor_uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsor_uid(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:gate.FastRegisterAccountService.RegisterResponse)
}

void FastRegisterAccountService_RegisterResponse::SharedCtor() {
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FastRegisterAccountService_RegisterResponse::~FastRegisterAccountService_RegisterResponse() {
  // @@protoc_insertion_point(destructor:gate.FastRegisterAccountService.RegisterResponse)
  SharedDtor();
}

void FastRegisterAccountService_RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FastRegisterAccountService_RegisterResponse::ArenaDtor(void* object) {
  FastRegisterAccountService_RegisterResponse* _this = reinterpret_cast< FastRegisterAccountService_RegisterResponse* >(object);
  (void)_this;
}
void FastRegisterAccountService_RegisterResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FastRegisterAccountService_RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FastRegisterAccountService_RegisterResponse::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FastRegisterAccountService_RegisterResponse& FastRegisterAccountService_RegisterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_FastRegisterAccountService_RegisterResponse.base);
  return *internal_default_instance();
}


void FastRegisterAccountService_RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.FastRegisterAccountService.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pwd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      sponsor_uid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FastRegisterAccountService_RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.FastRegisterAccountService.RegisterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes email = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sponsor_uid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sponsor_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.FastRegisterAccountService.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.FastRegisterAccountService.RegisterResponse)
  return false;
#undef DO_
}

void FastRegisterAccountService_RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.FastRegisterAccountService.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uid(), output);
  }

  // required bytes pwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pwd(), output);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nick(), output);
  }

  // required bytes email = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->email(), output);
  }

  // optional bytes sponsor_uid = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->sponsor_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.FastRegisterAccountService.RegisterResponse)
}

::google::protobuf::uint8* FastRegisterAccountService_RegisterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.FastRegisterAccountService.RegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uid(), target);
  }

  // required bytes pwd = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pwd(), target);
  }

  // required bytes nick = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  // required bytes email = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->email(), target);
  }

  // optional bytes sponsor_uid = 11;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->sponsor_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.FastRegisterAccountService.RegisterResponse)
  return target;
}

size_t FastRegisterAccountService_RegisterResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gate.FastRegisterAccountService.RegisterResponse)
  size_t total_size = 0;

  if (has_uid()) {
    // required bytes uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());
  }

  if (has_pwd()) {
    // required bytes pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());
  }

  if (has_nick()) {
    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());
  }

  if (has_email()) {
    // required bytes email = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->email());
  }

  return total_size;
}
size_t FastRegisterAccountService_RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.FastRegisterAccountService.RegisterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());

    // required bytes pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());

    // required bytes nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nick());

    // required bytes email = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->email());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes sponsor_uid = 11;
  if (has_sponsor_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sponsor_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastRegisterAccountService_RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.FastRegisterAccountService.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FastRegisterAccountService_RegisterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FastRegisterAccountService_RegisterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.FastRegisterAccountService.RegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.FastRegisterAccountService.RegisterResponse)
    MergeFrom(*source);
  }
}

void FastRegisterAccountService_RegisterResponse::MergeFrom(const FastRegisterAccountService_RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.FastRegisterAccountService.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_uid(from.uid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_pwd(from.pwd());
    }
    if (cached_has_bits & 0x00000004u) {
      set_nick(from.nick());
    }
    if (cached_has_bits & 0x00000008u) {
      set_email(from.email());
    }
    if (cached_has_bits & 0x00000010u) {
      set_sponsor_uid(from.sponsor_uid());
    }
  }
}

void FastRegisterAccountService_RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.FastRegisterAccountService.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastRegisterAccountService_RegisterResponse::CopyFrom(const FastRegisterAccountService_RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.FastRegisterAccountService.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastRegisterAccountService_RegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void FastRegisterAccountService_RegisterResponse::Swap(FastRegisterAccountService_RegisterResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FastRegisterAccountService_RegisterResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FastRegisterAccountService_RegisterResponse::UnsafeArenaSwap(FastRegisterAccountService_RegisterResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FastRegisterAccountService_RegisterResponse::InternalSwap(FastRegisterAccountService_RegisterResponse* other) {
  using std::swap;
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sponsor_uid_.Swap(&other->sponsor_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FastRegisterAccountService_RegisterResponse::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FastRegisterAccountService::InitAsDefaultInstance() {
  ::gate::_FastRegisterAccountService_default_instance_._instance.get_mutable()->req_ = const_cast< ::gate::FastRegisterAccountService_RegisterRequest*>(
      ::gate::FastRegisterAccountService_RegisterRequest::internal_default_instance());
  ::gate::_FastRegisterAccountService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::gate::FastRegisterAccountService_RegisterResponse*>(
      ::gate::FastRegisterAccountService_RegisterResponse::internal_default_instance());
}
void FastRegisterAccountService::unsafe_arena_set_allocated_req(
    ::gate::FastRegisterAccountService_RegisterRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.FastRegisterAccountService.req)
}
void FastRegisterAccountService::unsafe_arena_set_allocated_resp(
    ::gate::FastRegisterAccountService_RegisterResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.FastRegisterAccountService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastRegisterAccountService::kReqFieldNumber;
const int FastRegisterAccountService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastRegisterAccountService::FastRegisterAccountService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_FastRegisterAccountService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.FastRegisterAccountService)
}
FastRegisterAccountService::FastRegisterAccountService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_FastRegisterAccountService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.FastRegisterAccountService)
}
FastRegisterAccountService::FastRegisterAccountService(const FastRegisterAccountService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::gate::FastRegisterAccountService_RegisterRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::gate::FastRegisterAccountService_RegisterResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gate.FastRegisterAccountService)
}

void FastRegisterAccountService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

FastRegisterAccountService::~FastRegisterAccountService() {
  // @@protoc_insertion_point(destructor:gate.FastRegisterAccountService)
  SharedDtor();
}

void FastRegisterAccountService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void FastRegisterAccountService::ArenaDtor(void* object) {
  FastRegisterAccountService* _this = reinterpret_cast< FastRegisterAccountService* >(object);
  (void)_this;
}
void FastRegisterAccountService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FastRegisterAccountService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FastRegisterAccountService::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FastRegisterAccountService& FastRegisterAccountService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_FastRegisterAccountService.base);
  return *internal_default_instance();
}


void FastRegisterAccountService::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.FastRegisterAccountService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FastRegisterAccountService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.FastRegisterAccountService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gate.FastRegisterAccountService.RegisterRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gate.FastRegisterAccountService.RegisterResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.FastRegisterAccountService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.FastRegisterAccountService)
  return false;
#undef DO_
}

void FastRegisterAccountService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.FastRegisterAccountService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.FastRegisterAccountService.RegisterRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .gate.FastRegisterAccountService.RegisterResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.FastRegisterAccountService)
}

::google::protobuf::uint8* FastRegisterAccountService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.FastRegisterAccountService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.FastRegisterAccountService.RegisterRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .gate.FastRegisterAccountService.RegisterResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.FastRegisterAccountService)
  return target;
}

size_t FastRegisterAccountService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.FastRegisterAccountService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .gate.FastRegisterAccountService.RegisterRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .gate.FastRegisterAccountService.RegisterResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastRegisterAccountService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.FastRegisterAccountService)
  GOOGLE_DCHECK_NE(&from, this);
  const FastRegisterAccountService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FastRegisterAccountService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.FastRegisterAccountService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.FastRegisterAccountService)
    MergeFrom(*source);
  }
}

void FastRegisterAccountService::MergeFrom(const FastRegisterAccountService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.FastRegisterAccountService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::gate::FastRegisterAccountService_RegisterRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::gate::FastRegisterAccountService_RegisterResponse::MergeFrom(from.resp());
    }
  }
}

void FastRegisterAccountService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.FastRegisterAccountService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastRegisterAccountService::CopyFrom(const FastRegisterAccountService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.FastRegisterAccountService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastRegisterAccountService::IsInitialized() const {
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void FastRegisterAccountService::Swap(FastRegisterAccountService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FastRegisterAccountService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FastRegisterAccountService::UnsafeArenaSwap(FastRegisterAccountService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FastRegisterAccountService::InternalSwap(FastRegisterAccountService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FastRegisterAccountService::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountLoginService_LoginRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountLoginService_LoginRequest::kUidFieldNumber;
const int AccountLoginService_LoginRequest::kPwdFieldNumber;
const int AccountLoginService_LoginRequest::kWsEntryidFieldNumber;
const int AccountLoginService_LoginRequest::kChannelPlatidFieldNumber;
const int AccountLoginService_LoginRequest::kChannelGameidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountLoginService_LoginRequest::AccountLoginService_LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_AccountLoginService_LoginRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.AccountLoginService.LoginRequest)
}
AccountLoginService_LoginRequest::AccountLoginService_LoginRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountLoginService_LoginRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.AccountLoginService.LoginRequest)
}
AccountLoginService_LoginRequest::AccountLoginService_LoginRequest(const AccountLoginService_LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid(),
      GetArenaNoVirtual());
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd(),
      GetArenaNoVirtual());
  }
  channel_platid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_platid()) {
    channel_platid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_platid(),
      GetArenaNoVirtual());
  }
  channel_gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_gameid()) {
    channel_gameid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_gameid(),
      GetArenaNoVirtual());
  }
  ws_entryid_ = from.ws_entryid_;
  // @@protoc_insertion_point(copy_constructor:gate.AccountLoginService.LoginRequest)
}

void AccountLoginService_LoginRequest::SharedCtor() {
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_platid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ws_entryid_ = 0;
}

AccountLoginService_LoginRequest::~AccountLoginService_LoginRequest() {
  // @@protoc_insertion_point(destructor:gate.AccountLoginService.LoginRequest)
  SharedDtor();
}

void AccountLoginService_LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_platid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountLoginService_LoginRequest::ArenaDtor(void* object) {
  AccountLoginService_LoginRequest* _this = reinterpret_cast< AccountLoginService_LoginRequest* >(object);
  (void)_this;
}
void AccountLoginService_LoginRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AccountLoginService_LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountLoginService_LoginRequest::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountLoginService_LoginRequest& AccountLoginService_LoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountLoginService_LoginRequest.base);
  return *internal_default_instance();
}


void AccountLoginService_LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.AccountLoginService.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pwd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      channel_platid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      channel_gameid_.ClearNonDefaultToEmpty();
    }
  }
  ws_entryid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountLoginService_LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.AccountLoginService.LoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ws_entryid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_ws_entryid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ws_entryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes channel_platid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channel_platid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes channel_gameid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channel_gameid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.AccountLoginService.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.AccountLoginService.LoginRequest)
  return false;
#undef DO_
}

void AccountLoginService_LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.AccountLoginService.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uid(), output);
  }

  // required bytes pwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pwd(), output);
  }

  // optional int32 ws_entryid = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ws_entryid(), output);
  }

  // optional bytes channel_platid = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->channel_platid(), output);
  }

  // optional bytes channel_gameid = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->channel_gameid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.AccountLoginService.LoginRequest)
}

::google::protobuf::uint8* AccountLoginService_LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.AccountLoginService.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uid(), target);
  }

  // required bytes pwd = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pwd(), target);
  }

  // optional int32 ws_entryid = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ws_entryid(), target);
  }

  // optional bytes channel_platid = 12;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->channel_platid(), target);
  }

  // optional bytes channel_gameid = 13;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->channel_gameid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.AccountLoginService.LoginRequest)
  return target;
}

size_t AccountLoginService_LoginRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gate.AccountLoginService.LoginRequest)
  size_t total_size = 0;

  if (has_uid()) {
    // required bytes uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());
  }

  if (has_pwd()) {
    // required bytes pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());
  }

  return total_size;
}
size_t AccountLoginService_LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.AccountLoginService.LoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());

    // required bytes pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional bytes channel_platid = 12;
    if (has_channel_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channel_platid());
    }

    // optional bytes channel_gameid = 13;
    if (has_channel_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channel_gameid());
    }

    // optional int32 ws_entryid = 11;
    if (has_ws_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ws_entryid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountLoginService_LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.AccountLoginService.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountLoginService_LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountLoginService_LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.AccountLoginService.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.AccountLoginService.LoginRequest)
    MergeFrom(*source);
  }
}

void AccountLoginService_LoginRequest::MergeFrom(const AccountLoginService_LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.AccountLoginService.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_uid(from.uid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_pwd(from.pwd());
    }
    if (cached_has_bits & 0x00000004u) {
      set_channel_platid(from.channel_platid());
    }
    if (cached_has_bits & 0x00000008u) {
      set_channel_gameid(from.channel_gameid());
    }
    if (cached_has_bits & 0x00000010u) {
      ws_entryid_ = from.ws_entryid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountLoginService_LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.AccountLoginService.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginService_LoginRequest::CopyFrom(const AccountLoginService_LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.AccountLoginService.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginService_LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AccountLoginService_LoginRequest::Swap(AccountLoginService_LoginRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AccountLoginService_LoginRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AccountLoginService_LoginRequest::UnsafeArenaSwap(AccountLoginService_LoginRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AccountLoginService_LoginRequest::InternalSwap(AccountLoginService_LoginRequest* other) {
  using std::swap;
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_platid_.Swap(&other->channel_platid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_gameid_.Swap(&other->channel_gameid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ws_entryid_, other->ws_entryid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountLoginService_LoginRequest::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountLoginService_LoginResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountLoginService_LoginResponse::kResultFieldNumber;
const int AccountLoginService_LoginResponse::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountLoginService_LoginResponse::AccountLoginService_LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_AccountLoginService_LoginResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.AccountLoginService.LoginResponse)
}
AccountLoginService_LoginResponse::AccountLoginService_LoginResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountLoginService_LoginResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.AccountLoginService.LoginResponse)
}
AccountLoginService_LoginResponse::AccountLoginService_LoginResponse(const AccountLoginService_LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:gate.AccountLoginService.LoginResponse)
}

void AccountLoginService_LoginResponse::SharedCtor() {
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(result_));
}

AccountLoginService_LoginResponse::~AccountLoginService_LoginResponse() {
  // @@protoc_insertion_point(destructor:gate.AccountLoginService.LoginResponse)
  SharedDtor();
}

void AccountLoginService_LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void AccountLoginService_LoginResponse::ArenaDtor(void* object) {
  AccountLoginService_LoginResponse* _this = reinterpret_cast< AccountLoginService_LoginResponse* >(object);
  (void)_this;
}
void AccountLoginService_LoginResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AccountLoginService_LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountLoginService_LoginResponse::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountLoginService_LoginResponse& AccountLoginService_LoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountLoginService_LoginResponse.base);
  return *internal_default_instance();
}


void AccountLoginService_LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.AccountLoginService.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountLoginService_LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.AccountLoginService.LoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gate.AccountLoginService.RESULT result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gate::AccountLoginService_RESULT_IsValid(value)) {
            set_result(static_cast< ::gate::AccountLoginService_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.AccountLoginService.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.AccountLoginService.LoginResponse)
  return false;
#undef DO_
}

void AccountLoginService_LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.AccountLoginService.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gate.AccountLoginService.RESULT result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.AccountLoginService.LoginResponse)
}

::google::protobuf::uint8* AccountLoginService_LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.AccountLoginService.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gate.AccountLoginService.RESULT result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.AccountLoginService.LoginResponse)
  return target;
}

size_t AccountLoginService_LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.AccountLoginService.LoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gate.AccountLoginService.RESULT result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  // optional uint64 uuid = 2;
  if (has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountLoginService_LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.AccountLoginService.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountLoginService_LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountLoginService_LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.AccountLoginService.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.AccountLoginService.LoginResponse)
    MergeFrom(*source);
  }
}

void AccountLoginService_LoginResponse::MergeFrom(const AccountLoginService_LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.AccountLoginService.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountLoginService_LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.AccountLoginService.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginService_LoginResponse::CopyFrom(const AccountLoginService_LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.AccountLoginService.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginService_LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void AccountLoginService_LoginResponse::Swap(AccountLoginService_LoginResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AccountLoginService_LoginResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AccountLoginService_LoginResponse::UnsafeArenaSwap(AccountLoginService_LoginResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AccountLoginService_LoginResponse::InternalSwap(AccountLoginService_LoginResponse* other) {
  using std::swap;
  swap(uuid_, other->uuid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountLoginService_LoginResponse::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountLoginService::InitAsDefaultInstance() {
  ::gate::_AccountLoginService_default_instance_._instance.get_mutable()->req_ = const_cast< ::gate::AccountLoginService_LoginRequest*>(
      ::gate::AccountLoginService_LoginRequest::internal_default_instance());
  ::gate::_AccountLoginService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::gate::AccountLoginService_LoginResponse*>(
      ::gate::AccountLoginService_LoginResponse::internal_default_instance());
}
void AccountLoginService::unsafe_arena_set_allocated_req(
    ::gate::AccountLoginService_LoginRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.AccountLoginService.req)
}
void AccountLoginService::unsafe_arena_set_allocated_resp(
    ::gate::AccountLoginService_LoginResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.AccountLoginService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountLoginService::kReqFieldNumber;
const int AccountLoginService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountLoginService::AccountLoginService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_AccountLoginService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.AccountLoginService)
}
AccountLoginService::AccountLoginService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountLoginService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.AccountLoginService)
}
AccountLoginService::AccountLoginService(const AccountLoginService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::gate::AccountLoginService_LoginRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::gate::AccountLoginService_LoginResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gate.AccountLoginService)
}

void AccountLoginService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

AccountLoginService::~AccountLoginService() {
  // @@protoc_insertion_point(destructor:gate.AccountLoginService)
  SharedDtor();
}

void AccountLoginService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void AccountLoginService::ArenaDtor(void* object) {
  AccountLoginService* _this = reinterpret_cast< AccountLoginService* >(object);
  (void)_this;
}
void AccountLoginService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AccountLoginService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountLoginService::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountLoginService& AccountLoginService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountLoginService.base);
  return *internal_default_instance();
}


void AccountLoginService::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.AccountLoginService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountLoginService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.AccountLoginService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gate.AccountLoginService.LoginRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gate.AccountLoginService.LoginResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.AccountLoginService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.AccountLoginService)
  return false;
#undef DO_
}

void AccountLoginService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.AccountLoginService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.AccountLoginService.LoginRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .gate.AccountLoginService.LoginResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.AccountLoginService)
}

::google::protobuf::uint8* AccountLoginService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.AccountLoginService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.AccountLoginService.LoginRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .gate.AccountLoginService.LoginResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.AccountLoginService)
  return target;
}

size_t AccountLoginService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.AccountLoginService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .gate.AccountLoginService.LoginRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .gate.AccountLoginService.LoginResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountLoginService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.AccountLoginService)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountLoginService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountLoginService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.AccountLoginService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.AccountLoginService)
    MergeFrom(*source);
  }
}

void AccountLoginService::MergeFrom(const AccountLoginService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.AccountLoginService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::gate::AccountLoginService_LoginRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::gate::AccountLoginService_LoginResponse::MergeFrom(from.resp());
    }
  }
}

void AccountLoginService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.AccountLoginService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginService::CopyFrom(const AccountLoginService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.AccountLoginService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void AccountLoginService::Swap(AccountLoginService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AccountLoginService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AccountLoginService::UnsafeArenaSwap(AccountLoginService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AccountLoginService::InternalSwap(AccountLoginService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountLoginService::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountReloginService_ReloginRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountReloginService_ReloginRequest::kUidFieldNumber;
const int AccountReloginService_ReloginRequest::kPwdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountReloginService_ReloginRequest::AccountReloginService_ReloginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_AccountReloginService_ReloginRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.AccountReloginService.ReloginRequest)
}
AccountReloginService_ReloginRequest::AccountReloginService_ReloginRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountReloginService_ReloginRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.AccountReloginService.ReloginRequest)
}
AccountReloginService_ReloginRequest::AccountReloginService_ReloginRequest(const AccountReloginService_ReloginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid(),
      GetArenaNoVirtual());
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pwd()) {
    pwd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:gate.AccountReloginService.ReloginRequest)
}

void AccountReloginService_ReloginRequest::SharedCtor() {
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountReloginService_ReloginRequest::~AccountReloginService_ReloginRequest() {
  // @@protoc_insertion_point(destructor:gate.AccountReloginService.ReloginRequest)
  SharedDtor();
}

void AccountReloginService_ReloginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountReloginService_ReloginRequest::ArenaDtor(void* object) {
  AccountReloginService_ReloginRequest* _this = reinterpret_cast< AccountReloginService_ReloginRequest* >(object);
  (void)_this;
}
void AccountReloginService_ReloginRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AccountReloginService_ReloginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountReloginService_ReloginRequest::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountReloginService_ReloginRequest& AccountReloginService_ReloginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountReloginService_ReloginRequest.base);
  return *internal_default_instance();
}


void AccountReloginService_ReloginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.AccountReloginService.ReloginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pwd_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountReloginService_ReloginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.AccountReloginService.ReloginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.AccountReloginService.ReloginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.AccountReloginService.ReloginRequest)
  return false;
#undef DO_
}

void AccountReloginService_ReloginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.AccountReloginService.ReloginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uid(), output);
  }

  // required bytes pwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pwd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.AccountReloginService.ReloginRequest)
}

::google::protobuf::uint8* AccountReloginService_ReloginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.AccountReloginService.ReloginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uid(), target);
  }

  // required bytes pwd = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pwd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.AccountReloginService.ReloginRequest)
  return target;
}

size_t AccountReloginService_ReloginRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gate.AccountReloginService.ReloginRequest)
  size_t total_size = 0;

  if (has_uid()) {
    // required bytes uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());
  }

  if (has_pwd()) {
    // required bytes pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());
  }

  return total_size;
}
size_t AccountReloginService_ReloginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.AccountReloginService.ReloginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());

    // required bytes pwd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountReloginService_ReloginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.AccountReloginService.ReloginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountReloginService_ReloginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountReloginService_ReloginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.AccountReloginService.ReloginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.AccountReloginService.ReloginRequest)
    MergeFrom(*source);
  }
}

void AccountReloginService_ReloginRequest::MergeFrom(const AccountReloginService_ReloginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.AccountReloginService.ReloginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_uid(from.uid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_pwd(from.pwd());
    }
  }
}

void AccountReloginService_ReloginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.AccountReloginService.ReloginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountReloginService_ReloginRequest::CopyFrom(const AccountReloginService_ReloginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.AccountReloginService.ReloginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountReloginService_ReloginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AccountReloginService_ReloginRequest::Swap(AccountReloginService_ReloginRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AccountReloginService_ReloginRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AccountReloginService_ReloginRequest::UnsafeArenaSwap(AccountReloginService_ReloginRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AccountReloginService_ReloginRequest::InternalSwap(AccountReloginService_ReloginRequest* other) {
  using std::swap;
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountReloginService_ReloginRequest::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountReloginService_ReloginResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountReloginService_ReloginResponse::kResultFieldNumber;
const int AccountReloginService_ReloginResponse::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountReloginService_ReloginResponse::AccountReloginService_ReloginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_AccountReloginService_ReloginResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.AccountReloginService.ReloginResponse)
}
AccountReloginService_ReloginResponse::AccountReloginService_ReloginResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountReloginService_ReloginResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.AccountReloginService.ReloginResponse)
}
AccountReloginService_ReloginResponse::AccountReloginService_ReloginResponse(const AccountReloginService_ReloginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:gate.AccountReloginService.ReloginResponse)
}

void AccountReloginService_ReloginResponse::SharedCtor() {
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(result_));
}

AccountReloginService_ReloginResponse::~AccountReloginService_ReloginResponse() {
  // @@protoc_insertion_point(destructor:gate.AccountReloginService.ReloginResponse)
  SharedDtor();
}

void AccountReloginService_ReloginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void AccountReloginService_ReloginResponse::ArenaDtor(void* object) {
  AccountReloginService_ReloginResponse* _this = reinterpret_cast< AccountReloginService_ReloginResponse* >(object);
  (void)_this;
}
void AccountReloginService_ReloginResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AccountReloginService_ReloginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountReloginService_ReloginResponse::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountReloginService_ReloginResponse& AccountReloginService_ReloginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountReloginService_ReloginResponse.base);
  return *internal_default_instance();
}


void AccountReloginService_ReloginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.AccountReloginService.ReloginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountReloginService_ReloginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.AccountReloginService.ReloginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gate.AccountReloginService.RESULT result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gate::AccountReloginService_RESULT_IsValid(value)) {
            set_result(static_cast< ::gate::AccountReloginService_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.AccountReloginService.ReloginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.AccountReloginService.ReloginResponse)
  return false;
#undef DO_
}

void AccountReloginService_ReloginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.AccountReloginService.ReloginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gate.AccountReloginService.RESULT result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint64 uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.AccountReloginService.ReloginResponse)
}

::google::protobuf::uint8* AccountReloginService_ReloginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.AccountReloginService.ReloginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gate.AccountReloginService.RESULT result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint64 uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.AccountReloginService.ReloginResponse)
  return target;
}

size_t AccountReloginService_ReloginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.AccountReloginService.ReloginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gate.AccountReloginService.RESULT result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  // optional uint64 uuid = 2;
  if (has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountReloginService_ReloginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.AccountReloginService.ReloginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountReloginService_ReloginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountReloginService_ReloginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.AccountReloginService.ReloginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.AccountReloginService.ReloginResponse)
    MergeFrom(*source);
  }
}

void AccountReloginService_ReloginResponse::MergeFrom(const AccountReloginService_ReloginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.AccountReloginService.ReloginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountReloginService_ReloginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.AccountReloginService.ReloginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountReloginService_ReloginResponse::CopyFrom(const AccountReloginService_ReloginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.AccountReloginService.ReloginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountReloginService_ReloginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void AccountReloginService_ReloginResponse::Swap(AccountReloginService_ReloginResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AccountReloginService_ReloginResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AccountReloginService_ReloginResponse::UnsafeArenaSwap(AccountReloginService_ReloginResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AccountReloginService_ReloginResponse::InternalSwap(AccountReloginService_ReloginResponse* other) {
  using std::swap;
  swap(uuid_, other->uuid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountReloginService_ReloginResponse::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountReloginService::InitAsDefaultInstance() {
  ::gate::_AccountReloginService_default_instance_._instance.get_mutable()->req_ = const_cast< ::gate::AccountReloginService_ReloginRequest*>(
      ::gate::AccountReloginService_ReloginRequest::internal_default_instance());
  ::gate::_AccountReloginService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::gate::AccountReloginService_ReloginResponse*>(
      ::gate::AccountReloginService_ReloginResponse::internal_default_instance());
}
void AccountReloginService::unsafe_arena_set_allocated_req(
    ::gate::AccountReloginService_ReloginRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.AccountReloginService.req)
}
void AccountReloginService::unsafe_arena_set_allocated_resp(
    ::gate::AccountReloginService_ReloginResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.AccountReloginService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountReloginService::kReqFieldNumber;
const int AccountReloginService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountReloginService::AccountReloginService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_AccountReloginService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.AccountReloginService)
}
AccountReloginService::AccountReloginService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountReloginService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.AccountReloginService)
}
AccountReloginService::AccountReloginService(const AccountReloginService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::gate::AccountReloginService_ReloginRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::gate::AccountReloginService_ReloginResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gate.AccountReloginService)
}

void AccountReloginService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

AccountReloginService::~AccountReloginService() {
  // @@protoc_insertion_point(destructor:gate.AccountReloginService)
  SharedDtor();
}

void AccountReloginService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void AccountReloginService::ArenaDtor(void* object) {
  AccountReloginService* _this = reinterpret_cast< AccountReloginService* >(object);
  (void)_this;
}
void AccountReloginService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AccountReloginService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountReloginService::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountReloginService& AccountReloginService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_AccountReloginService.base);
  return *internal_default_instance();
}


void AccountReloginService::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.AccountReloginService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountReloginService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.AccountReloginService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gate.AccountReloginService.ReloginRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gate.AccountReloginService.ReloginResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.AccountReloginService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.AccountReloginService)
  return false;
#undef DO_
}

void AccountReloginService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.AccountReloginService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.AccountReloginService.ReloginRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .gate.AccountReloginService.ReloginResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.AccountReloginService)
}

::google::protobuf::uint8* AccountReloginService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.AccountReloginService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.AccountReloginService.ReloginRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .gate.AccountReloginService.ReloginResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.AccountReloginService)
  return target;
}

size_t AccountReloginService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.AccountReloginService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .gate.AccountReloginService.ReloginRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .gate.AccountReloginService.ReloginResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountReloginService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.AccountReloginService)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountReloginService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountReloginService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.AccountReloginService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.AccountReloginService)
    MergeFrom(*source);
  }
}

void AccountReloginService::MergeFrom(const AccountReloginService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.AccountReloginService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::gate::AccountReloginService_ReloginRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::gate::AccountReloginService_ReloginResponse::MergeFrom(from.resp());
    }
  }
}

void AccountReloginService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.AccountReloginService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountReloginService::CopyFrom(const AccountReloginService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.AccountReloginService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountReloginService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void AccountReloginService::Swap(AccountReloginService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AccountReloginService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AccountReloginService::UnsafeArenaSwap(AccountReloginService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AccountReloginService::InternalSwap(AccountReloginService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountReloginService::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServer::kIdFieldNumber;
const int GameServer::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServer::GameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_GameServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.GameServer)
}
GameServer::GameServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServer.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.GameServer)
}
GameServer::GameServer(const GameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:gate.GameServer)
}

void GameServer::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

GameServer::~GameServer() {
  // @@protoc_insertion_point(destructor:gate.GameServer)
  SharedDtor();
}

void GameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameServer::ArenaDtor(void* object) {
  GameServer* _this = reinterpret_cast< GameServer* >(object);
  (void)_this;
}
void GameServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameServer::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServer& GameServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServer.base);
  return *internal_default_instance();
}


void GameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.GameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.GameServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.GameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.GameServer)
  return false;
#undef DO_
}

void GameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.GameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.GameServer)
}

::google::protobuf::uint8* GameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.GameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.GameServer)
  return target;
}

size_t GameServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gate.GameServer)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t GameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.GameServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.GameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.GameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.GameServer)
    MergeFrom(*source);
  }
}

void GameServer::MergeFrom(const GameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.GameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_name(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.GameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer::CopyFrom(const GameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.GameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameServer::Swap(GameServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameServer::UnsafeArenaSwap(GameServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameServer::InternalSwap(GameServer* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameServer::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServerList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServerList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServerList::GameServerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_GameServerList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.GameServerList)
}
GameServerList::GameServerList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  list_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServerList.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.GameServerList)
}
GameServerList::GameServerList(const GameServerList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gate.GameServerList)
}

void GameServerList::SharedCtor() {
}

GameServerList::~GameServerList() {
  // @@protoc_insertion_point(destructor:gate.GameServerList)
  SharedDtor();
}

void GameServerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameServerList::ArenaDtor(void* object) {
  GameServerList* _this = reinterpret_cast< GameServerList* >(object);
  (void)_this;
}
void GameServerList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameServerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameServerList::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServerList& GameServerList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServerList.base);
  return *internal_default_instance();
}


void GameServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.GameServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.GameServerList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gate.GameServer list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.GameServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.GameServerList)
  return false;
#undef DO_
}

void GameServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.GameServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gate.GameServer list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.GameServerList)
}

::google::protobuf::uint8* GameServerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.GameServerList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gate.GameServer list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.GameServerList)
  return target;
}

size_t GameServerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.GameServerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gate.GameServer list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.GameServerList)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.GameServerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.GameServerList)
    MergeFrom(*source);
  }
}

void GameServerList::MergeFrom(const GameServerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.GameServerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void GameServerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.GameServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerList::CopyFrom(const GameServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.GameServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GameServerList::Swap(GameServerList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameServerList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameServerList::UnsafeArenaSwap(GameServerList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameServerList::InternalSwap(GameServerList* other) {
  using std::swap;
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameServerList::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServerService_GameServerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServerService_GameServerRequest::kCmdFieldNumber;
const int GameServerService_GameServerRequest::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServerService_GameServerRequest::GameServerService_GameServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_GameServerService_GameServerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.GameServerService.GameServerRequest)
}
GameServerService_GameServerRequest::GameServerService_GameServerRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServerService_GameServerRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.GameServerService.GameServerRequest)
}
GameServerService_GameServerRequest::GameServerService_GameServerRequest(const GameServerService_GameServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:gate.GameServerService.GameServerRequest)
}

void GameServerService_GameServerRequest::SharedCtor() {
  serverid_ = 0;
  cmd_ = 1;
}

GameServerService_GameServerRequest::~GameServerService_GameServerRequest() {
  // @@protoc_insertion_point(destructor:gate.GameServerService.GameServerRequest)
  SharedDtor();
}

void GameServerService_GameServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GameServerService_GameServerRequest::ArenaDtor(void* object) {
  GameServerService_GameServerRequest* _this = reinterpret_cast< GameServerService_GameServerRequest* >(object);
  (void)_this;
}
void GameServerService_GameServerRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameServerService_GameServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameServerService_GameServerRequest::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServerService_GameServerRequest& GameServerService_GameServerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServerService_GameServerRequest.base);
  return *internal_default_instance();
}


void GameServerService_GameServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.GameServerService.GameServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    serverid_ = 0;
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameServerService_GameServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.GameServerService.GameServerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gate.GameServerService.GAME_SERVER_COMMAND cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gate::GameServerService_GAME_SERVER_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::gate::GameServerService_GAME_SERVER_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 serverid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.GameServerService.GameServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.GameServerService.GameServerRequest)
  return false;
#undef DO_
}

void GameServerService_GameServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.GameServerService.GameServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gate.GameServerService.GAME_SERVER_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 serverid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.GameServerService.GameServerRequest)
}

::google::protobuf::uint8* GameServerService_GameServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.GameServerService.GameServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gate.GameServerService.GAME_SERVER_COMMAND cmd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 serverid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.GameServerService.GameServerRequest)
  return target;
}

size_t GameServerService_GameServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.GameServerService.GameServerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gate.GameServerService.GAME_SERVER_COMMAND cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }
  // optional int32 serverid = 2;
  if (has_serverid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerService_GameServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.GameServerService.GameServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerService_GameServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServerService_GameServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.GameServerService.GameServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.GameServerService.GameServerRequest)
    MergeFrom(*source);
  }
}

void GameServerService_GameServerRequest::MergeFrom(const GameServerService_GameServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.GameServerService.GameServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameServerService_GameServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.GameServerService.GameServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerService_GameServerRequest::CopyFrom(const GameServerService_GameServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.GameServerService.GameServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerService_GameServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void GameServerService_GameServerRequest::Swap(GameServerService_GameServerRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameServerService_GameServerRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameServerService_GameServerRequest::UnsafeArenaSwap(GameServerService_GameServerRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameServerService_GameServerRequest::InternalSwap(GameServerService_GameServerRequest* other) {
  using std::swap;
  swap(serverid_, other->serverid_);
  swap(cmd_, other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameServerService_GameServerRequest::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServerService_GameServerResponse::InitAsDefaultInstance() {
  ::gate::_GameServerService_GameServerResponse_default_instance_._instance.get_mutable()->server_list_ = const_cast< ::gate::GameServerList*>(
      ::gate::GameServerList::internal_default_instance());
}
void GameServerService_GameServerResponse::unsafe_arena_set_allocated_server_list(
    ::gate::GameServerList* server_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete server_list_;
  }
  server_list_ = server_list;
  if (server_list) {
    set_has_server_list();
  } else {
    clear_has_server_list();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.GameServerService.GameServerResponse.server_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServerService_GameServerResponse::kResultFieldNumber;
const int GameServerService_GameServerResponse::kServerListFieldNumber;
const int GameServerService_GameServerResponse::kLastServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServerService_GameServerResponse::GameServerService_GameServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_GameServerService_GameServerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.GameServerService.GameServerResponse)
}
GameServerService_GameServerResponse::GameServerService_GameServerResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServerService_GameServerResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.GameServerService.GameServerResponse)
}
GameServerService_GameServerResponse::GameServerService_GameServerResponse(const GameServerService_GameServerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_list()) {
    server_list_ = new ::gate::GameServerList(*from.server_list_);
  } else {
    server_list_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_serverid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(last_serverid_));
  // @@protoc_insertion_point(copy_constructor:gate.GameServerService.GameServerResponse)
}

void GameServerService_GameServerResponse::SharedCtor() {
  ::memset(&server_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_serverid_) -
      reinterpret_cast<char*>(&server_list_)) + sizeof(last_serverid_));
}

GameServerService_GameServerResponse::~GameServerService_GameServerResponse() {
  // @@protoc_insertion_point(destructor:gate.GameServerService.GameServerResponse)
  SharedDtor();
}

void GameServerService_GameServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete server_list_;
}

void GameServerService_GameServerResponse::ArenaDtor(void* object) {
  GameServerService_GameServerResponse* _this = reinterpret_cast< GameServerService_GameServerResponse* >(object);
  (void)_this;
}
void GameServerService_GameServerResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameServerService_GameServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameServerService_GameServerResponse::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServerService_GameServerResponse& GameServerService_GameServerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServerService_GameServerResponse.base);
  return *internal_default_instance();
}


void GameServerService_GameServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.GameServerService.GameServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_list_ != NULL);
    server_list_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_serverid_) -
        reinterpret_cast<char*>(&result_)) + sizeof(last_serverid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameServerService_GameServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.GameServerService.GameServerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gate.GameServerList server_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.GameServerService.GameServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.GameServerService.GameServerResponse)
  return false;
#undef DO_
}

void GameServerService_GameServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.GameServerService.GameServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .gate.GameServerList server_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_server_list(), output);
  }

  // optional int32 last_serverid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.GameServerService.GameServerResponse)
}

::google::protobuf::uint8* GameServerService_GameServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.GameServerService.GameServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .gate.GameServerList server_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_server_list(), deterministic, target);
  }

  // optional int32 last_serverid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.GameServerService.GameServerResponse)
  return target;
}

size_t GameServerService_GameServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.GameServerService.GameServerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional .gate.GameServerList server_list = 2;
  if (has_server_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_list_);
  }

  // optional int32 last_serverid = 3;
  if (has_last_serverid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerService_GameServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.GameServerService.GameServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerService_GameServerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServerService_GameServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.GameServerService.GameServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.GameServerService.GameServerResponse)
    MergeFrom(*source);
  }
}

void GameServerService_GameServerResponse::MergeFrom(const GameServerService_GameServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.GameServerService.GameServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server_list()->::gate::GameServerList::MergeFrom(from.server_list());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_serverid_ = from.last_serverid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameServerService_GameServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.GameServerService.GameServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerService_GameServerResponse::CopyFrom(const GameServerService_GameServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.GameServerService.GameServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerService_GameServerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_server_list()) {
    if (!this->server_list_->IsInitialized()) return false;
  }
  return true;
}

void GameServerService_GameServerResponse::Swap(GameServerService_GameServerResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameServerService_GameServerResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameServerService_GameServerResponse::UnsafeArenaSwap(GameServerService_GameServerResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameServerService_GameServerResponse::InternalSwap(GameServerService_GameServerResponse* other) {
  using std::swap;
  swap(server_list_, other->server_list_);
  swap(result_, other->result_);
  swap(last_serverid_, other->last_serverid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameServerService_GameServerResponse::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameServerService::InitAsDefaultInstance() {
  ::gate::_GameServerService_default_instance_._instance.get_mutable()->req_ = const_cast< ::gate::GameServerService_GameServerRequest*>(
      ::gate::GameServerService_GameServerRequest::internal_default_instance());
  ::gate::_GameServerService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::gate::GameServerService_GameServerResponse*>(
      ::gate::GameServerService_GameServerResponse::internal_default_instance());
}
void GameServerService::unsafe_arena_set_allocated_req(
    ::gate::GameServerService_GameServerRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.GameServerService.req)
}
void GameServerService::unsafe_arena_set_allocated_resp(
    ::gate::GameServerService_GameServerResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.GameServerService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameServerService::kReqFieldNumber;
const int GameServerService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameServerService::GameServerService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_GameServerService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.GameServerService)
}
GameServerService::GameServerService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServerService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.GameServerService)
}
GameServerService::GameServerService(const GameServerService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::gate::GameServerService_GameServerRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::gate::GameServerService_GameServerResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gate.GameServerService)
}

void GameServerService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

GameServerService::~GameServerService() {
  // @@protoc_insertion_point(destructor:gate.GameServerService)
  SharedDtor();
}

void GameServerService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void GameServerService::ArenaDtor(void* object) {
  GameServerService* _this = reinterpret_cast< GameServerService* >(object);
  (void)_this;
}
void GameServerService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GameServerService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameServerService::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameServerService& GameServerService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_GameServerService.base);
  return *internal_default_instance();
}


void GameServerService::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.GameServerService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameServerService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.GameServerService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gate.GameServerService.GameServerRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gate.GameServerService.GameServerResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.GameServerService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.GameServerService)
  return false;
#undef DO_
}

void GameServerService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.GameServerService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.GameServerService.GameServerRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .gate.GameServerService.GameServerResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.GameServerService)
}

::google::protobuf::uint8* GameServerService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.GameServerService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.GameServerService.GameServerRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .gate.GameServerService.GameServerResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.GameServerService)
  return target;
}

size_t GameServerService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.GameServerService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .gate.GameServerService.GameServerRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .gate.GameServerService.GameServerResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.GameServerService)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameServerService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.GameServerService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.GameServerService)
    MergeFrom(*source);
  }
}

void GameServerService::MergeFrom(const GameServerService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.GameServerService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::gate::GameServerService_GameServerRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::gate::GameServerService_GameServerResponse::MergeFrom(from.resp());
    }
  }
}

void GameServerService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.GameServerService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerService::CopyFrom(const GameServerService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.GameServerService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  return true;
}

void GameServerService::Swap(GameServerService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GameServerService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GameServerService::UnsafeArenaSwap(GameServerService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GameServerService::InternalSwap(GameServerService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameServerService::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActiveCodeService_ActiveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveCodeService_ActiveRequest::kActiveCodeFieldNumber;
const int ActiveCodeService_ActiveRequest::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveCodeService_ActiveRequest::ActiveCodeService_ActiveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_ActiveCodeService_ActiveRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.ActiveCodeService.ActiveRequest)
}
ActiveCodeService_ActiveRequest::ActiveCodeService_ActiveRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_ActiveCodeService_ActiveRequest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.ActiveCodeService.ActiveRequest)
}
ActiveCodeService_ActiveRequest::ActiveCodeService_ActiveRequest(const ActiveCodeService_ActiveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  active_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_active_code()) {
    active_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.active_code(),
      GetArenaNoVirtual());
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:gate.ActiveCodeService.ActiveRequest)
}

void ActiveCodeService_ActiveRequest::SharedCtor() {
  active_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActiveCodeService_ActiveRequest::~ActiveCodeService_ActiveRequest() {
  // @@protoc_insertion_point(destructor:gate.ActiveCodeService.ActiveRequest)
  SharedDtor();
}

void ActiveCodeService_ActiveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  active_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActiveCodeService_ActiveRequest::ArenaDtor(void* object) {
  ActiveCodeService_ActiveRequest* _this = reinterpret_cast< ActiveCodeService_ActiveRequest* >(object);
  (void)_this;
}
void ActiveCodeService_ActiveRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ActiveCodeService_ActiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActiveCodeService_ActiveRequest::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActiveCodeService_ActiveRequest& ActiveCodeService_ActiveRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_ActiveCodeService_ActiveRequest.base);
  return *internal_default_instance();
}


void ActiveCodeService_ActiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.ActiveCodeService.ActiveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      active_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      uid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveCodeService_ActiveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.ActiveCodeService.ActiveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes active_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_active_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.ActiveCodeService.ActiveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.ActiveCodeService.ActiveRequest)
  return false;
#undef DO_
}

void ActiveCodeService_ActiveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.ActiveCodeService.ActiveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes active_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->active_code(), output);
  }

  // required bytes uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.ActiveCodeService.ActiveRequest)
}

::google::protobuf::uint8* ActiveCodeService_ActiveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.ActiveCodeService.ActiveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes active_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->active_code(), target);
  }

  // required bytes uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.ActiveCodeService.ActiveRequest)
  return target;
}

size_t ActiveCodeService_ActiveRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gate.ActiveCodeService.ActiveRequest)
  size_t total_size = 0;

  if (has_active_code()) {
    // required bytes active_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->active_code());
  }

  if (has_uid()) {
    // required bytes uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());
  }

  return total_size;
}
size_t ActiveCodeService_ActiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.ActiveCodeService.ActiveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes active_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->active_code());

    // required bytes uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveCodeService_ActiveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.ActiveCodeService.ActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveCodeService_ActiveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActiveCodeService_ActiveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.ActiveCodeService.ActiveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.ActiveCodeService.ActiveRequest)
    MergeFrom(*source);
  }
}

void ActiveCodeService_ActiveRequest::MergeFrom(const ActiveCodeService_ActiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.ActiveCodeService.ActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_active_code(from.active_code());
    }
    if (cached_has_bits & 0x00000002u) {
      set_uid(from.uid());
    }
  }
}

void ActiveCodeService_ActiveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.ActiveCodeService.ActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveCodeService_ActiveRequest::CopyFrom(const ActiveCodeService_ActiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.ActiveCodeService.ActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveCodeService_ActiveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ActiveCodeService_ActiveRequest::Swap(ActiveCodeService_ActiveRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ActiveCodeService_ActiveRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ActiveCodeService_ActiveRequest::UnsafeArenaSwap(ActiveCodeService_ActiveRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ActiveCodeService_ActiveRequest::InternalSwap(ActiveCodeService_ActiveRequest* other) {
  using std::swap;
  active_code_.Swap(&other->active_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActiveCodeService_ActiveRequest::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActiveCodeService_ActiveResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveCodeService_ActiveResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveCodeService_ActiveResponse::ActiveCodeService_ActiveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_ActiveCodeService_ActiveResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.ActiveCodeService.ActiveResponse)
}
ActiveCodeService_ActiveResponse::ActiveCodeService_ActiveResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_ActiveCodeService_ActiveResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.ActiveCodeService.ActiveResponse)
}
ActiveCodeService_ActiveResponse::ActiveCodeService_ActiveResponse(const ActiveCodeService_ActiveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:gate.ActiveCodeService.ActiveResponse)
}

void ActiveCodeService_ActiveResponse::SharedCtor() {
  result_ = 0;
}

ActiveCodeService_ActiveResponse::~ActiveCodeService_ActiveResponse() {
  // @@protoc_insertion_point(destructor:gate.ActiveCodeService.ActiveResponse)
  SharedDtor();
}

void ActiveCodeService_ActiveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ActiveCodeService_ActiveResponse::ArenaDtor(void* object) {
  ActiveCodeService_ActiveResponse* _this = reinterpret_cast< ActiveCodeService_ActiveResponse* >(object);
  (void)_this;
}
void ActiveCodeService_ActiveResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ActiveCodeService_ActiveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActiveCodeService_ActiveResponse::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActiveCodeService_ActiveResponse& ActiveCodeService_ActiveResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_ActiveCodeService_ActiveResponse.base);
  return *internal_default_instance();
}


void ActiveCodeService_ActiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.ActiveCodeService.ActiveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveCodeService_ActiveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.ActiveCodeService.ActiveResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.ActiveCodeService.ActiveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.ActiveCodeService.ActiveResponse)
  return false;
#undef DO_
}

void ActiveCodeService_ActiveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.ActiveCodeService.ActiveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.ActiveCodeService.ActiveResponse)
}

::google::protobuf::uint8* ActiveCodeService_ActiveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.ActiveCodeService.ActiveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.ActiveCodeService.ActiveResponse)
  return target;
}

size_t ActiveCodeService_ActiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.ActiveCodeService.ActiveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveCodeService_ActiveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.ActiveCodeService.ActiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveCodeService_ActiveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActiveCodeService_ActiveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.ActiveCodeService.ActiveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.ActiveCodeService.ActiveResponse)
    MergeFrom(*source);
  }
}

void ActiveCodeService_ActiveResponse::MergeFrom(const ActiveCodeService_ActiveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.ActiveCodeService.ActiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void ActiveCodeService_ActiveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.ActiveCodeService.ActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveCodeService_ActiveResponse::CopyFrom(const ActiveCodeService_ActiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.ActiveCodeService.ActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveCodeService_ActiveResponse::IsInitialized() const {
  return true;
}

void ActiveCodeService_ActiveResponse::Swap(ActiveCodeService_ActiveResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ActiveCodeService_ActiveResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ActiveCodeService_ActiveResponse::UnsafeArenaSwap(ActiveCodeService_ActiveResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ActiveCodeService_ActiveResponse::InternalSwap(ActiveCodeService_ActiveResponse* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActiveCodeService_ActiveResponse::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActiveCodeService::InitAsDefaultInstance() {
  ::gate::_ActiveCodeService_default_instance_._instance.get_mutable()->req_ = const_cast< ::gate::ActiveCodeService_ActiveRequest*>(
      ::gate::ActiveCodeService_ActiveRequest::internal_default_instance());
  ::gate::_ActiveCodeService_default_instance_._instance.get_mutable()->resp_ = const_cast< ::gate::ActiveCodeService_ActiveResponse*>(
      ::gate::ActiveCodeService_ActiveResponse::internal_default_instance());
}
void ActiveCodeService::unsafe_arena_set_allocated_req(
    ::gate::ActiveCodeService_ActiveRequest* req) {
  if (GetArenaNoVirtual() == NULL) {
    delete req_;
  }
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.ActiveCodeService.req)
}
void ActiveCodeService::unsafe_arena_set_allocated_resp(
    ::gate::ActiveCodeService_ActiveResponse* resp) {
  if (GetArenaNoVirtual() == NULL) {
    delete resp_;
  }
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.ActiveCodeService.resp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveCodeService::kReqFieldNumber;
const int ActiveCodeService::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveCodeService::ActiveCodeService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gate_2eproto::scc_info_ActiveCodeService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gate.ActiveCodeService)
}
ActiveCodeService::ActiveCodeService(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_ActiveCodeService.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gate.ActiveCodeService)
}
ActiveCodeService::ActiveCodeService(const ActiveCodeService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::gate::ActiveCodeService_ActiveRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::gate::ActiveCodeService_ActiveResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gate.ActiveCodeService)
}

void ActiveCodeService::SharedCtor() {
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(resp_));
}

ActiveCodeService::~ActiveCodeService() {
  // @@protoc_insertion_point(destructor:gate.ActiveCodeService)
  SharedDtor();
}

void ActiveCodeService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void ActiveCodeService::ArenaDtor(void* object) {
  ActiveCodeService* _this = reinterpret_cast< ActiveCodeService* >(object);
  (void)_this;
}
void ActiveCodeService::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ActiveCodeService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActiveCodeService::descriptor() {
  ::protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActiveCodeService& ActiveCodeService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gate_2eproto::scc_info_ActiveCodeService.base);
  return *internal_default_instance();
}


void ActiveCodeService::Clear() {
// @@protoc_insertion_point(message_clear_start:gate.ActiveCodeService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActiveCodeService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gate.ActiveCodeService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gate.ActiveCodeService.ActiveRequest req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gate.ActiveCodeService.ActiveResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gate.ActiveCodeService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gate.ActiveCodeService)
  return false;
#undef DO_
}

void ActiveCodeService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gate.ActiveCodeService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.ActiveCodeService.ActiveRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_req(), output);
  }

  // optional .gate.ActiveCodeService.ActiveResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gate.ActiveCodeService)
}

::google::protobuf::uint8* ActiveCodeService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gate.ActiveCodeService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gate.ActiveCodeService.ActiveRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_req(), deterministic, target);
  }

  // optional .gate.ActiveCodeService.ActiveResponse resp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gate.ActiveCodeService)
  return target;
}

size_t ActiveCodeService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gate.ActiveCodeService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .gate.ActiveCodeService.ActiveRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .gate.ActiveCodeService.ActiveResponse resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveCodeService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gate.ActiveCodeService)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveCodeService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActiveCodeService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gate.ActiveCodeService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gate.ActiveCodeService)
    MergeFrom(*source);
  }
}

void ActiveCodeService::MergeFrom(const ActiveCodeService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gate.ActiveCodeService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_req()->::gate::ActiveCodeService_ActiveRequest::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resp()->::gate::ActiveCodeService_ActiveResponse::MergeFrom(from.resp());
    }
  }
}

void ActiveCodeService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gate.ActiveCodeService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveCodeService::CopyFrom(const ActiveCodeService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gate.ActiveCodeService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveCodeService::IsInitialized() const {
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  return true;
}

void ActiveCodeService::Swap(ActiveCodeService* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ActiveCodeService* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ActiveCodeService::UnsafeArenaSwap(ActiveCodeService* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ActiveCodeService::InternalSwap(ActiveCodeService* other) {
  using std::swap;
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActiveCodeService::GetMetadata() const {
  protobuf_Gate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gate
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::ErrorNo* Arena::CreateMaybeMessage< ::gate::ErrorNo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::ErrorNo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::RegisterAccountService_RegisterRequest* Arena::CreateMaybeMessage< ::gate::RegisterAccountService_RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::RegisterAccountService_RegisterRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::RegisterAccountService_RegisterResponse* Arena::CreateMaybeMessage< ::gate::RegisterAccountService_RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::RegisterAccountService_RegisterResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::RegisterAccountService* Arena::CreateMaybeMessage< ::gate::RegisterAccountService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::RegisterAccountService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::FastRegisterAccountService_RegisterRequest* Arena::CreateMaybeMessage< ::gate::FastRegisterAccountService_RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::FastRegisterAccountService_RegisterRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::FastRegisterAccountService_RegisterResponse* Arena::CreateMaybeMessage< ::gate::FastRegisterAccountService_RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::FastRegisterAccountService_RegisterResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::FastRegisterAccountService* Arena::CreateMaybeMessage< ::gate::FastRegisterAccountService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::FastRegisterAccountService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::AccountLoginService_LoginRequest* Arena::CreateMaybeMessage< ::gate::AccountLoginService_LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::AccountLoginService_LoginRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::AccountLoginService_LoginResponse* Arena::CreateMaybeMessage< ::gate::AccountLoginService_LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::AccountLoginService_LoginResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::AccountLoginService* Arena::CreateMaybeMessage< ::gate::AccountLoginService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::AccountLoginService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::AccountReloginService_ReloginRequest* Arena::CreateMaybeMessage< ::gate::AccountReloginService_ReloginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::AccountReloginService_ReloginRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::AccountReloginService_ReloginResponse* Arena::CreateMaybeMessage< ::gate::AccountReloginService_ReloginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::AccountReloginService_ReloginResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::AccountReloginService* Arena::CreateMaybeMessage< ::gate::AccountReloginService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::AccountReloginService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::GameServer* Arena::CreateMaybeMessage< ::gate::GameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::GameServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::GameServerList* Arena::CreateMaybeMessage< ::gate::GameServerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::GameServerList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::GameServerService_GameServerRequest* Arena::CreateMaybeMessage< ::gate::GameServerService_GameServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::GameServerService_GameServerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::GameServerService_GameServerResponse* Arena::CreateMaybeMessage< ::gate::GameServerService_GameServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::GameServerService_GameServerResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::GameServerService* Arena::CreateMaybeMessage< ::gate::GameServerService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::GameServerService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::ActiveCodeService_ActiveRequest* Arena::CreateMaybeMessage< ::gate::ActiveCodeService_ActiveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::ActiveCodeService_ActiveRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::ActiveCodeService_ActiveResponse* Arena::CreateMaybeMessage< ::gate::ActiveCodeService_ActiveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::ActiveCodeService_ActiveResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gate::ActiveCodeService* Arena::CreateMaybeMessage< ::gate::ActiveCodeService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gate::ActiveCodeService >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
