// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateInner.proto

#ifndef PROTOBUF_INCLUDED_GateInner_2eproto
#define PROTOBUF_INCLUDED_GateInner_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Gate.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GateInner_2eproto 

namespace protobuf_GateInner_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GateInner_2eproto
namespace gate {
class GateShakeHandNotify;
class GateShakeHandNotifyDefaultTypeInternal;
extern GateShakeHandNotifyDefaultTypeInternal _GateShakeHandNotify_default_instance_;
class KeepAliveNotify;
class KeepAliveNotifyDefaultTypeInternal;
extern KeepAliveNotifyDefaultTypeInternal _KeepAliveNotify_default_instance_;
class PlayerJoinService;
class PlayerJoinServiceDefaultTypeInternal;
extern PlayerJoinServiceDefaultTypeInternal _PlayerJoinService_default_instance_;
class PlayerJoinService_JoinRequest;
class PlayerJoinService_JoinRequestDefaultTypeInternal;
extern PlayerJoinService_JoinRequestDefaultTypeInternal _PlayerJoinService_JoinRequest_default_instance_;
class PlayerJoinService_JoinResponse;
class PlayerJoinService_JoinResponseDefaultTypeInternal;
extern PlayerJoinService_JoinResponseDefaultTypeInternal _PlayerJoinService_JoinResponse_default_instance_;
class PlayerQuitService;
class PlayerQuitServiceDefaultTypeInternal;
extern PlayerQuitServiceDefaultTypeInternal _PlayerQuitService_default_instance_;
class PlayerQuitService_QuitRequest;
class PlayerQuitService_QuitRequestDefaultTypeInternal;
extern PlayerQuitService_QuitRequestDefaultTypeInternal _PlayerQuitService_QuitRequest_default_instance_;
class PlayerQuitService_QuitResponse;
class PlayerQuitService_QuitResponseDefaultTypeInternal;
extern PlayerQuitService_QuitResponseDefaultTypeInternal _PlayerQuitService_QuitResponse_default_instance_;
class RegisterNativeClientService;
class RegisterNativeClientServiceDefaultTypeInternal;
extern RegisterNativeClientServiceDefaultTypeInternal _RegisterNativeClientService_default_instance_;
class RegisterNativeClientService_RegisterRequest;
class RegisterNativeClientService_RegisterRequestDefaultTypeInternal;
extern RegisterNativeClientService_RegisterRequestDefaultTypeInternal _RegisterNativeClientService_RegisterRequest_default_instance_;
class RegisterNativeClientService_RegisterResponse;
class RegisterNativeClientService_RegisterResponseDefaultTypeInternal;
extern RegisterNativeClientService_RegisterResponseDefaultTypeInternal _RegisterNativeClientService_RegisterResponse_default_instance_;
}  // namespace gate
namespace google {
namespace protobuf {
template<> ::gate::GateShakeHandNotify* Arena::CreateMaybeMessage<::gate::GateShakeHandNotify>(Arena*);
template<> ::gate::KeepAliveNotify* Arena::CreateMaybeMessage<::gate::KeepAliveNotify>(Arena*);
template<> ::gate::PlayerJoinService* Arena::CreateMaybeMessage<::gate::PlayerJoinService>(Arena*);
template<> ::gate::PlayerJoinService_JoinRequest* Arena::CreateMaybeMessage<::gate::PlayerJoinService_JoinRequest>(Arena*);
template<> ::gate::PlayerJoinService_JoinResponse* Arena::CreateMaybeMessage<::gate::PlayerJoinService_JoinResponse>(Arena*);
template<> ::gate::PlayerQuitService* Arena::CreateMaybeMessage<::gate::PlayerQuitService>(Arena*);
template<> ::gate::PlayerQuitService_QuitRequest* Arena::CreateMaybeMessage<::gate::PlayerQuitService_QuitRequest>(Arena*);
template<> ::gate::PlayerQuitService_QuitResponse* Arena::CreateMaybeMessage<::gate::PlayerQuitService_QuitResponse>(Arena*);
template<> ::gate::RegisterNativeClientService* Arena::CreateMaybeMessage<::gate::RegisterNativeClientService>(Arena*);
template<> ::gate::RegisterNativeClientService_RegisterRequest* Arena::CreateMaybeMessage<::gate::RegisterNativeClientService_RegisterRequest>(Arena*);
template<> ::gate::RegisterNativeClientService_RegisterResponse* Arena::CreateMaybeMessage<::gate::RegisterNativeClientService_RegisterResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gate {

enum GateShakeHandNotify_SHAKE_HAND_COMMAND {
  GateShakeHandNotify_SHAKE_HAND_COMMAND_INIT = 1,
  GateShakeHandNotify_SHAKE_HAND_COMMAND_CONFIRM = 2
};
bool GateShakeHandNotify_SHAKE_HAND_COMMAND_IsValid(int value);
const GateShakeHandNotify_SHAKE_HAND_COMMAND GateShakeHandNotify_SHAKE_HAND_COMMAND_SHAKE_HAND_COMMAND_MIN = GateShakeHandNotify_SHAKE_HAND_COMMAND_INIT;
const GateShakeHandNotify_SHAKE_HAND_COMMAND GateShakeHandNotify_SHAKE_HAND_COMMAND_SHAKE_HAND_COMMAND_MAX = GateShakeHandNotify_SHAKE_HAND_COMMAND_CONFIRM;
const int GateShakeHandNotify_SHAKE_HAND_COMMAND_SHAKE_HAND_COMMAND_ARRAYSIZE = GateShakeHandNotify_SHAKE_HAND_COMMAND_SHAKE_HAND_COMMAND_MAX + 1;

const ::google::protobuf::EnumDescriptor* GateShakeHandNotify_SHAKE_HAND_COMMAND_descriptor();
inline const ::std::string& GateShakeHandNotify_SHAKE_HAND_COMMAND_Name(GateShakeHandNotify_SHAKE_HAND_COMMAND value) {
  return ::google::protobuf::internal::NameOfEnum(
    GateShakeHandNotify_SHAKE_HAND_COMMAND_descriptor(), value);
}
inline bool GateShakeHandNotify_SHAKE_HAND_COMMAND_Parse(
    const ::std::string& name, GateShakeHandNotify_SHAKE_HAND_COMMAND* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GateShakeHandNotify_SHAKE_HAND_COMMAND>(
    GateShakeHandNotify_SHAKE_HAND_COMMAND_descriptor(), name, value);
}
enum PlayerJoinService_RESULT {
  PlayerJoinService_RESULT_OK = 0,
  PlayerJoinService_RESULT_FAILED = 1
};
bool PlayerJoinService_RESULT_IsValid(int value);
const PlayerJoinService_RESULT PlayerJoinService_RESULT_RESULT_MIN = PlayerJoinService_RESULT_OK;
const PlayerJoinService_RESULT PlayerJoinService_RESULT_RESULT_MAX = PlayerJoinService_RESULT_FAILED;
const int PlayerJoinService_RESULT_RESULT_ARRAYSIZE = PlayerJoinService_RESULT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerJoinService_RESULT_descriptor();
inline const ::std::string& PlayerJoinService_RESULT_Name(PlayerJoinService_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerJoinService_RESULT_descriptor(), value);
}
inline bool PlayerJoinService_RESULT_Parse(
    const ::std::string& name, PlayerJoinService_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerJoinService_RESULT>(
    PlayerJoinService_RESULT_descriptor(), name, value);
}
enum PlayerQuitService_RESULT {
  PlayerQuitService_RESULT_OK = 0,
  PlayerQuitService_RESULT_FAILED = 1
};
bool PlayerQuitService_RESULT_IsValid(int value);
const PlayerQuitService_RESULT PlayerQuitService_RESULT_RESULT_MIN = PlayerQuitService_RESULT_OK;
const PlayerQuitService_RESULT PlayerQuitService_RESULT_RESULT_MAX = PlayerQuitService_RESULT_FAILED;
const int PlayerQuitService_RESULT_RESULT_ARRAYSIZE = PlayerQuitService_RESULT_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerQuitService_RESULT_descriptor();
inline const ::std::string& PlayerQuitService_RESULT_Name(PlayerQuitService_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerQuitService_RESULT_descriptor(), value);
}
inline bool PlayerQuitService_RESULT_Parse(
    const ::std::string& name, PlayerQuitService_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerQuitService_RESULT>(
    PlayerQuitService_RESULT_descriptor(), name, value);
}
enum INNER_SERVER_TYPE {
  INNER_SERVER_TYPE_UNKNOWN = 0,
  INNER_SERVER_TYPE_GAME = 1,
  INNER_SERVER_TYPE_CHAT = 2
};
bool INNER_SERVER_TYPE_IsValid(int value);
const INNER_SERVER_TYPE INNER_SERVER_TYPE_MIN = INNER_SERVER_TYPE_UNKNOWN;
const INNER_SERVER_TYPE INNER_SERVER_TYPE_MAX = INNER_SERVER_TYPE_CHAT;
const int INNER_SERVER_TYPE_ARRAYSIZE = INNER_SERVER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* INNER_SERVER_TYPE_descriptor();
inline const ::std::string& INNER_SERVER_TYPE_Name(INNER_SERVER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    INNER_SERVER_TYPE_descriptor(), value);
}
inline bool INNER_SERVER_TYPE_Parse(
    const ::std::string& name, INNER_SERVER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<INNER_SERVER_TYPE>(
    INNER_SERVER_TYPE_descriptor(), name, value);
}
enum INNER_SERVER_VISIBILITY {
  INNER_SERVER_VISIBILITY_UNKNOWN = 0,
  INNER_SERVER_VISIBILITY_NORMAL = 1,
  INNER_SERVER_VISIBILITY_TEST = 2,
  INNER_SERVER_VISIBILITY_REVIEW = 3
};
bool INNER_SERVER_VISIBILITY_IsValid(int value);
const INNER_SERVER_VISIBILITY INNER_SERVER_VISIBILITY_MIN = INNER_SERVER_VISIBILITY_UNKNOWN;
const INNER_SERVER_VISIBILITY INNER_SERVER_VISIBILITY_MAX = INNER_SERVER_VISIBILITY_REVIEW;
const int INNER_SERVER_VISIBILITY_ARRAYSIZE = INNER_SERVER_VISIBILITY_MAX + 1;

const ::google::protobuf::EnumDescriptor* INNER_SERVER_VISIBILITY_descriptor();
inline const ::std::string& INNER_SERVER_VISIBILITY_Name(INNER_SERVER_VISIBILITY value) {
  return ::google::protobuf::internal::NameOfEnum(
    INNER_SERVER_VISIBILITY_descriptor(), value);
}
inline bool INNER_SERVER_VISIBILITY_Parse(
    const ::std::string& name, INNER_SERVER_VISIBILITY* value) {
  return ::google::protobuf::internal::ParseNamedEnum<INNER_SERVER_VISIBILITY>(
    INNER_SERVER_VISIBILITY_descriptor(), name, value);
}
// ===================================================================

class GateShakeHandNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.GateShakeHandNotify) */ {
 public:
  GateShakeHandNotify();
  virtual ~GateShakeHandNotify();

  GateShakeHandNotify(const GateShakeHandNotify& from);

  inline GateShakeHandNotify& operator=(const GateShakeHandNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateShakeHandNotify(GateShakeHandNotify&& from) noexcept
    : GateShakeHandNotify() {
    *this = ::std::move(from);
  }

  inline GateShakeHandNotify& operator=(GateShakeHandNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GateShakeHandNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateShakeHandNotify* internal_default_instance() {
    return reinterpret_cast<const GateShakeHandNotify*>(
               &_GateShakeHandNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(GateShakeHandNotify* other);
  void Swap(GateShakeHandNotify* other);
  friend void swap(GateShakeHandNotify& a, GateShakeHandNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateShakeHandNotify* New() const final {
    return CreateMaybeMessage<GateShakeHandNotify>(NULL);
  }

  GateShakeHandNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateShakeHandNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateShakeHandNotify& from);
  void MergeFrom(const GateShakeHandNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateShakeHandNotify* other);
  protected:
  explicit GateShakeHandNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GateShakeHandNotify_SHAKE_HAND_COMMAND SHAKE_HAND_COMMAND;
  static const SHAKE_HAND_COMMAND INIT =
    GateShakeHandNotify_SHAKE_HAND_COMMAND_INIT;
  static const SHAKE_HAND_COMMAND CONFIRM =
    GateShakeHandNotify_SHAKE_HAND_COMMAND_CONFIRM;
  static inline bool SHAKE_HAND_COMMAND_IsValid(int value) {
    return GateShakeHandNotify_SHAKE_HAND_COMMAND_IsValid(value);
  }
  static const SHAKE_HAND_COMMAND SHAKE_HAND_COMMAND_MIN =
    GateShakeHandNotify_SHAKE_HAND_COMMAND_SHAKE_HAND_COMMAND_MIN;
  static const SHAKE_HAND_COMMAND SHAKE_HAND_COMMAND_MAX =
    GateShakeHandNotify_SHAKE_HAND_COMMAND_SHAKE_HAND_COMMAND_MAX;
  static const int SHAKE_HAND_COMMAND_ARRAYSIZE =
    GateShakeHandNotify_SHAKE_HAND_COMMAND_SHAKE_HAND_COMMAND_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SHAKE_HAND_COMMAND_descriptor() {
    return GateShakeHandNotify_SHAKE_HAND_COMMAND_descriptor();
  }
  static inline const ::std::string& SHAKE_HAND_COMMAND_Name(SHAKE_HAND_COMMAND value) {
    return GateShakeHandNotify_SHAKE_HAND_COMMAND_Name(value);
  }
  static inline bool SHAKE_HAND_COMMAND_Parse(const ::std::string& name,
      SHAKE_HAND_COMMAND* value) {
    return GateShakeHandNotify_SHAKE_HAND_COMMAND_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes gate_desc = 12;
  bool has_gate_desc() const;
  void clear_gate_desc();
  static const int kGateDescFieldNumber = 12;
  const ::std::string& gate_desc() const;
  void set_gate_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_gate_desc(::std::string&& value);
  #endif
  void set_gate_desc(const char* value);
  void set_gate_desc(const void* value, size_t size);
  ::std::string* mutable_gate_desc();
  ::std::string* release_gate_desc();
  void set_allocated_gate_desc(::std::string* gate_desc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_gate_desc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gate_desc(
      ::std::string* gate_desc);

  // optional .gate.GameServer server = 2;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 2;
  private:
  const ::gate::GameServer& _internal_server() const;
  public:
  const ::gate::GameServer& server() const;
  ::gate::GameServer* release_server();
  ::gate::GameServer* mutable_server();
  void set_allocated_server(::gate::GameServer* server);
  void unsafe_arena_set_allocated_server(
      ::gate::GameServer* server);
  ::gate::GameServer* unsafe_arena_release_server();

  // optional uint32 gateid = 11;
  bool has_gateid() const;
  void clear_gateid();
  static const int kGateidFieldNumber = 11;
  ::google::protobuf::uint32 gateid() const;
  void set_gateid(::google::protobuf::uint32 value);

  // required .gate.GateShakeHandNotify.SHAKE_HAND_COMMAND cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND cmd() const;
  void set_cmd(::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND value);

  // @@protoc_insertion_point(class_scope:gate.GateShakeHandNotify)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_server();
  void clear_has_server();
  void set_has_gateid();
  void clear_has_gateid();
  void set_has_gate_desc();
  void clear_has_gate_desc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gate_desc_;
  ::gate::GameServer* server_;
  ::google::protobuf::uint32 gateid_;
  int cmd_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerJoinService_JoinRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.PlayerJoinService.JoinRequest) */ {
 public:
  PlayerJoinService_JoinRequest();
  virtual ~PlayerJoinService_JoinRequest();

  PlayerJoinService_JoinRequest(const PlayerJoinService_JoinRequest& from);

  inline PlayerJoinService_JoinRequest& operator=(const PlayerJoinService_JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoinService_JoinRequest(PlayerJoinService_JoinRequest&& from) noexcept
    : PlayerJoinService_JoinRequest() {
    *this = ::std::move(from);
  }

  inline PlayerJoinService_JoinRequest& operator=(PlayerJoinService_JoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoinService_JoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoinService_JoinRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerJoinService_JoinRequest*>(
               &_PlayerJoinService_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(PlayerJoinService_JoinRequest* other);
  void Swap(PlayerJoinService_JoinRequest* other);
  friend void swap(PlayerJoinService_JoinRequest& a, PlayerJoinService_JoinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoinService_JoinRequest* New() const final {
    return CreateMaybeMessage<PlayerJoinService_JoinRequest>(NULL);
  }

  PlayerJoinService_JoinRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoinService_JoinRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerJoinService_JoinRequest& from);
  void MergeFrom(const PlayerJoinService_JoinRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoinService_JoinRequest* other);
  protected:
  explicit PlayerJoinService_JoinRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_uid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      ::std::string* uid);

  // optional bytes nick = 2;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // optional uint32 gateid = 11;
  bool has_gateid() const;
  void clear_gateid();
  static const int kGateidFieldNumber = 11;
  ::google::protobuf::uint32 gateid() const;
  void set_gateid(::google::protobuf::uint32 value);

  // optional uint32 gameserverid = 12;
  bool has_gameserverid() const;
  void clear_gameserverid();
  static const int kGameserveridFieldNumber = 12;
  ::google::protobuf::uint32 gameserverid() const;
  void set_gameserverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gate.PlayerJoinService.JoinRequest)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_nick();
  void clear_has_nick();
  void set_has_gateid();
  void clear_has_gateid();
  void set_has_gameserverid();
  void clear_has_gameserverid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 gameserverid_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerJoinService_JoinResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.PlayerJoinService.JoinResponse) */ {
 public:
  PlayerJoinService_JoinResponse();
  virtual ~PlayerJoinService_JoinResponse();

  PlayerJoinService_JoinResponse(const PlayerJoinService_JoinResponse& from);

  inline PlayerJoinService_JoinResponse& operator=(const PlayerJoinService_JoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoinService_JoinResponse(PlayerJoinService_JoinResponse&& from) noexcept
    : PlayerJoinService_JoinResponse() {
    *this = ::std::move(from);
  }

  inline PlayerJoinService_JoinResponse& operator=(PlayerJoinService_JoinResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoinService_JoinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoinService_JoinResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerJoinService_JoinResponse*>(
               &_PlayerJoinService_JoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PlayerJoinService_JoinResponse* other);
  void Swap(PlayerJoinService_JoinResponse* other);
  friend void swap(PlayerJoinService_JoinResponse& a, PlayerJoinService_JoinResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoinService_JoinResponse* New() const final {
    return CreateMaybeMessage<PlayerJoinService_JoinResponse>(NULL);
  }

  PlayerJoinService_JoinResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoinService_JoinResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerJoinService_JoinResponse& from);
  void MergeFrom(const PlayerJoinService_JoinResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoinService_JoinResponse* other);
  protected:
  explicit PlayerJoinService_JoinResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gate.PlayerJoinService.RESULT result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::gate::PlayerJoinService_RESULT result() const;
  void set_result(::gate::PlayerJoinService_RESULT value);

  // @@protoc_insertion_point(class_scope:gate.PlayerJoinService.JoinResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerJoinService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.PlayerJoinService) */ {
 public:
  PlayerJoinService();
  virtual ~PlayerJoinService();

  PlayerJoinService(const PlayerJoinService& from);

  inline PlayerJoinService& operator=(const PlayerJoinService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoinService(PlayerJoinService&& from) noexcept
    : PlayerJoinService() {
    *this = ::std::move(from);
  }

  inline PlayerJoinService& operator=(PlayerJoinService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoinService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoinService* internal_default_instance() {
    return reinterpret_cast<const PlayerJoinService*>(
               &_PlayerJoinService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PlayerJoinService* other);
  void Swap(PlayerJoinService* other);
  friend void swap(PlayerJoinService& a, PlayerJoinService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoinService* New() const final {
    return CreateMaybeMessage<PlayerJoinService>(NULL);
  }

  PlayerJoinService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoinService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerJoinService& from);
  void MergeFrom(const PlayerJoinService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoinService* other);
  protected:
  explicit PlayerJoinService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerJoinService_JoinRequest JoinRequest;
  typedef PlayerJoinService_JoinResponse JoinResponse;

  typedef PlayerJoinService_RESULT RESULT;
  static const RESULT OK =
    PlayerJoinService_RESULT_OK;
  static const RESULT FAILED =
    PlayerJoinService_RESULT_FAILED;
  static inline bool RESULT_IsValid(int value) {
    return PlayerJoinService_RESULT_IsValid(value);
  }
  static const RESULT RESULT_MIN =
    PlayerJoinService_RESULT_RESULT_MIN;
  static const RESULT RESULT_MAX =
    PlayerJoinService_RESULT_RESULT_MAX;
  static const int RESULT_ARRAYSIZE =
    PlayerJoinService_RESULT_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_descriptor() {
    return PlayerJoinService_RESULT_descriptor();
  }
  static inline const ::std::string& RESULT_Name(RESULT value) {
    return PlayerJoinService_RESULT_Name(value);
  }
  static inline bool RESULT_Parse(const ::std::string& name,
      RESULT* value) {
    return PlayerJoinService_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .gate.PlayerJoinService.JoinRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::gate::PlayerJoinService_JoinRequest& _internal_req() const;
  public:
  const ::gate::PlayerJoinService_JoinRequest& req() const;
  ::gate::PlayerJoinService_JoinRequest* release_req();
  ::gate::PlayerJoinService_JoinRequest* mutable_req();
  void set_allocated_req(::gate::PlayerJoinService_JoinRequest* req);
  void unsafe_arena_set_allocated_req(
      ::gate::PlayerJoinService_JoinRequest* req);
  ::gate::PlayerJoinService_JoinRequest* unsafe_arena_release_req();

  // optional .gate.PlayerJoinService.JoinResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::gate::PlayerJoinService_JoinResponse& _internal_resp() const;
  public:
  const ::gate::PlayerJoinService_JoinResponse& resp() const;
  ::gate::PlayerJoinService_JoinResponse* release_resp();
  ::gate::PlayerJoinService_JoinResponse* mutable_resp();
  void set_allocated_resp(::gate::PlayerJoinService_JoinResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::gate::PlayerJoinService_JoinResponse* resp);
  ::gate::PlayerJoinService_JoinResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:gate.PlayerJoinService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gate::PlayerJoinService_JoinRequest* req_;
  ::gate::PlayerJoinService_JoinResponse* resp_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuitService_QuitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.PlayerQuitService.QuitRequest) */ {
 public:
  PlayerQuitService_QuitRequest();
  virtual ~PlayerQuitService_QuitRequest();

  PlayerQuitService_QuitRequest(const PlayerQuitService_QuitRequest& from);

  inline PlayerQuitService_QuitRequest& operator=(const PlayerQuitService_QuitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuitService_QuitRequest(PlayerQuitService_QuitRequest&& from) noexcept
    : PlayerQuitService_QuitRequest() {
    *this = ::std::move(from);
  }

  inline PlayerQuitService_QuitRequest& operator=(PlayerQuitService_QuitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuitService_QuitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerQuitService_QuitRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerQuitService_QuitRequest*>(
               &_PlayerQuitService_QuitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(PlayerQuitService_QuitRequest* other);
  void Swap(PlayerQuitService_QuitRequest* other);
  friend void swap(PlayerQuitService_QuitRequest& a, PlayerQuitService_QuitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuitService_QuitRequest* New() const final {
    return CreateMaybeMessage<PlayerQuitService_QuitRequest>(NULL);
  }

  PlayerQuitService_QuitRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerQuitService_QuitRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerQuitService_QuitRequest& from);
  void MergeFrom(const PlayerQuitService_QuitRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerQuitService_QuitRequest* other);
  protected:
  explicit PlayerQuitService_QuitRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_uid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      ::std::string* uid);

  // optional bytes nick = 2;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const void* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_nick();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nick(
      ::std::string* nick);

  // @@protoc_insertion_point(class_scope:gate.PlayerQuitService.QuitRequest)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_nick();
  void clear_has_nick();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuitService_QuitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.PlayerQuitService.QuitResponse) */ {
 public:
  PlayerQuitService_QuitResponse();
  virtual ~PlayerQuitService_QuitResponse();

  PlayerQuitService_QuitResponse(const PlayerQuitService_QuitResponse& from);

  inline PlayerQuitService_QuitResponse& operator=(const PlayerQuitService_QuitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuitService_QuitResponse(PlayerQuitService_QuitResponse&& from) noexcept
    : PlayerQuitService_QuitResponse() {
    *this = ::std::move(from);
  }

  inline PlayerQuitService_QuitResponse& operator=(PlayerQuitService_QuitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuitService_QuitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerQuitService_QuitResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerQuitService_QuitResponse*>(
               &_PlayerQuitService_QuitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(PlayerQuitService_QuitResponse* other);
  void Swap(PlayerQuitService_QuitResponse* other);
  friend void swap(PlayerQuitService_QuitResponse& a, PlayerQuitService_QuitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuitService_QuitResponse* New() const final {
    return CreateMaybeMessage<PlayerQuitService_QuitResponse>(NULL);
  }

  PlayerQuitService_QuitResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerQuitService_QuitResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerQuitService_QuitResponse& from);
  void MergeFrom(const PlayerQuitService_QuitResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerQuitService_QuitResponse* other);
  protected:
  explicit PlayerQuitService_QuitResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gate.PlayerQuitService.RESULT result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::gate::PlayerQuitService_RESULT result() const;
  void set_result(::gate::PlayerQuitService_RESULT value);

  // @@protoc_insertion_point(class_scope:gate.PlayerQuitService.QuitResponse)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuitService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.PlayerQuitService) */ {
 public:
  PlayerQuitService();
  virtual ~PlayerQuitService();

  PlayerQuitService(const PlayerQuitService& from);

  inline PlayerQuitService& operator=(const PlayerQuitService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuitService(PlayerQuitService&& from) noexcept
    : PlayerQuitService() {
    *this = ::std::move(from);
  }

  inline PlayerQuitService& operator=(PlayerQuitService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuitService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerQuitService* internal_default_instance() {
    return reinterpret_cast<const PlayerQuitService*>(
               &_PlayerQuitService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(PlayerQuitService* other);
  void Swap(PlayerQuitService* other);
  friend void swap(PlayerQuitService& a, PlayerQuitService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuitService* New() const final {
    return CreateMaybeMessage<PlayerQuitService>(NULL);
  }

  PlayerQuitService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerQuitService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerQuitService& from);
  void MergeFrom(const PlayerQuitService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerQuitService* other);
  protected:
  explicit PlayerQuitService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerQuitService_QuitRequest QuitRequest;
  typedef PlayerQuitService_QuitResponse QuitResponse;

  typedef PlayerQuitService_RESULT RESULT;
  static const RESULT OK =
    PlayerQuitService_RESULT_OK;
  static const RESULT FAILED =
    PlayerQuitService_RESULT_FAILED;
  static inline bool RESULT_IsValid(int value) {
    return PlayerQuitService_RESULT_IsValid(value);
  }
  static const RESULT RESULT_MIN =
    PlayerQuitService_RESULT_RESULT_MIN;
  static const RESULT RESULT_MAX =
    PlayerQuitService_RESULT_RESULT_MAX;
  static const int RESULT_ARRAYSIZE =
    PlayerQuitService_RESULT_RESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_descriptor() {
    return PlayerQuitService_RESULT_descriptor();
  }
  static inline const ::std::string& RESULT_Name(RESULT value) {
    return PlayerQuitService_RESULT_Name(value);
  }
  static inline bool RESULT_Parse(const ::std::string& name,
      RESULT* value) {
    return PlayerQuitService_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .gate.PlayerQuitService.QuitRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::gate::PlayerQuitService_QuitRequest& _internal_req() const;
  public:
  const ::gate::PlayerQuitService_QuitRequest& req() const;
  ::gate::PlayerQuitService_QuitRequest* release_req();
  ::gate::PlayerQuitService_QuitRequest* mutable_req();
  void set_allocated_req(::gate::PlayerQuitService_QuitRequest* req);
  void unsafe_arena_set_allocated_req(
      ::gate::PlayerQuitService_QuitRequest* req);
  ::gate::PlayerQuitService_QuitRequest* unsafe_arena_release_req();

  // optional .gate.PlayerQuitService.QuitResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::gate::PlayerQuitService_QuitResponse& _internal_resp() const;
  public:
  const ::gate::PlayerQuitService_QuitResponse& resp() const;
  ::gate::PlayerQuitService_QuitResponse* release_resp();
  ::gate::PlayerQuitService_QuitResponse* mutable_resp();
  void set_allocated_resp(::gate::PlayerQuitService_QuitResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::gate::PlayerQuitService_QuitResponse* resp);
  ::gate::PlayerQuitService_QuitResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:gate.PlayerQuitService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gate::PlayerQuitService_QuitRequest* req_;
  ::gate::PlayerQuitService_QuitResponse* resp_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterNativeClientService_RegisterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.RegisterNativeClientService.RegisterRequest) */ {
 public:
  RegisterNativeClientService_RegisterRequest();
  virtual ~RegisterNativeClientService_RegisterRequest();

  RegisterNativeClientService_RegisterRequest(const RegisterNativeClientService_RegisterRequest& from);

  inline RegisterNativeClientService_RegisterRequest& operator=(const RegisterNativeClientService_RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterNativeClientService_RegisterRequest(RegisterNativeClientService_RegisterRequest&& from) noexcept
    : RegisterNativeClientService_RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterNativeClientService_RegisterRequest& operator=(RegisterNativeClientService_RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterNativeClientService_RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterNativeClientService_RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterNativeClientService_RegisterRequest*>(
               &_RegisterNativeClientService_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(RegisterNativeClientService_RegisterRequest* other);
  void Swap(RegisterNativeClientService_RegisterRequest* other);
  friend void swap(RegisterNativeClientService_RegisterRequest& a, RegisterNativeClientService_RegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterNativeClientService_RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterNativeClientService_RegisterRequest>(NULL);
  }

  RegisterNativeClientService_RegisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterNativeClientService_RegisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterNativeClientService_RegisterRequest& from);
  void MergeFrom(const RegisterNativeClientService_RegisterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNativeClientService_RegisterRequest* other);
  protected:
  explicit RegisterNativeClientService_RegisterRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gate.RegisterNativeClientService.RegisterRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterNativeClientService_RegisterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.RegisterNativeClientService.RegisterResponse) */ {
 public:
  RegisterNativeClientService_RegisterResponse();
  virtual ~RegisterNativeClientService_RegisterResponse();

  RegisterNativeClientService_RegisterResponse(const RegisterNativeClientService_RegisterResponse& from);

  inline RegisterNativeClientService_RegisterResponse& operator=(const RegisterNativeClientService_RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterNativeClientService_RegisterResponse(RegisterNativeClientService_RegisterResponse&& from) noexcept
    : RegisterNativeClientService_RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterNativeClientService_RegisterResponse& operator=(RegisterNativeClientService_RegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterNativeClientService_RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterNativeClientService_RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterNativeClientService_RegisterResponse*>(
               &_RegisterNativeClientService_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(RegisterNativeClientService_RegisterResponse* other);
  void Swap(RegisterNativeClientService_RegisterResponse* other);
  friend void swap(RegisterNativeClientService_RegisterResponse& a, RegisterNativeClientService_RegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterNativeClientService_RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterNativeClientService_RegisterResponse>(NULL);
  }

  RegisterNativeClientService_RegisterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterNativeClientService_RegisterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterNativeClientService_RegisterResponse& from);
  void MergeFrom(const RegisterNativeClientService_RegisterResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNativeClientService_RegisterResponse* other);
  protected:
  explicit RegisterNativeClientService_RegisterResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gate.RegisterNativeClientService.RegisterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterNativeClientService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.RegisterNativeClientService) */ {
 public:
  RegisterNativeClientService();
  virtual ~RegisterNativeClientService();

  RegisterNativeClientService(const RegisterNativeClientService& from);

  inline RegisterNativeClientService& operator=(const RegisterNativeClientService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterNativeClientService(RegisterNativeClientService&& from) noexcept
    : RegisterNativeClientService() {
    *this = ::std::move(from);
  }

  inline RegisterNativeClientService& operator=(RegisterNativeClientService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterNativeClientService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterNativeClientService* internal_default_instance() {
    return reinterpret_cast<const RegisterNativeClientService*>(
               &_RegisterNativeClientService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(RegisterNativeClientService* other);
  void Swap(RegisterNativeClientService* other);
  friend void swap(RegisterNativeClientService& a, RegisterNativeClientService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterNativeClientService* New() const final {
    return CreateMaybeMessage<RegisterNativeClientService>(NULL);
  }

  RegisterNativeClientService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterNativeClientService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterNativeClientService& from);
  void MergeFrom(const RegisterNativeClientService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNativeClientService* other);
  protected:
  explicit RegisterNativeClientService(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterNativeClientService_RegisterRequest RegisterRequest;
  typedef RegisterNativeClientService_RegisterResponse RegisterResponse;

  // accessors -------------------------------------------------------

  // optional .gate.RegisterNativeClientService.RegisterRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  private:
  const ::gate::RegisterNativeClientService_RegisterRequest& _internal_req() const;
  public:
  const ::gate::RegisterNativeClientService_RegisterRequest& req() const;
  ::gate::RegisterNativeClientService_RegisterRequest* release_req();
  ::gate::RegisterNativeClientService_RegisterRequest* mutable_req();
  void set_allocated_req(::gate::RegisterNativeClientService_RegisterRequest* req);
  void unsafe_arena_set_allocated_req(
      ::gate::RegisterNativeClientService_RegisterRequest* req);
  ::gate::RegisterNativeClientService_RegisterRequest* unsafe_arena_release_req();

  // optional .gate.RegisterNativeClientService.RegisterResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  private:
  const ::gate::RegisterNativeClientService_RegisterResponse& _internal_resp() const;
  public:
  const ::gate::RegisterNativeClientService_RegisterResponse& resp() const;
  ::gate::RegisterNativeClientService_RegisterResponse* release_resp();
  ::gate::RegisterNativeClientService_RegisterResponse* mutable_resp();
  void set_allocated_resp(::gate::RegisterNativeClientService_RegisterResponse* resp);
  void unsafe_arena_set_allocated_resp(
      ::gate::RegisterNativeClientService_RegisterResponse* resp);
  ::gate::RegisterNativeClientService_RegisterResponse* unsafe_arena_release_resp();

  // @@protoc_insertion_point(class_scope:gate.RegisterNativeClientService)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_resp();
  void clear_has_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gate::RegisterNativeClientService_RegisterRequest* req_;
  ::gate::RegisterNativeClientService_RegisterResponse* resp_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeepAliveNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.KeepAliveNotify) */ {
 public:
  KeepAliveNotify();
  virtual ~KeepAliveNotify();

  KeepAliveNotify(const KeepAliveNotify& from);

  inline KeepAliveNotify& operator=(const KeepAliveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeepAliveNotify(KeepAliveNotify&& from) noexcept
    : KeepAliveNotify() {
    *this = ::std::move(from);
  }

  inline KeepAliveNotify& operator=(KeepAliveNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeepAliveNotify* internal_default_instance() {
    return reinterpret_cast<const KeepAliveNotify*>(
               &_KeepAliveNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(KeepAliveNotify* other);
  void Swap(KeepAliveNotify* other);
  friend void swap(KeepAliveNotify& a, KeepAliveNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeepAliveNotify* New() const final {
    return CreateMaybeMessage<KeepAliveNotify>(NULL);
  }

  KeepAliveNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeepAliveNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeepAliveNotify& from);
  void MergeFrom(const KeepAliveNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAliveNotify* other);
  protected:
  explicit KeepAliveNotify(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serverid = 1;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gate.KeepAliveNotify)
 private:
  void set_has_serverid();
  void clear_has_serverid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 serverid_;
  friend struct ::protobuf_GateInner_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GateShakeHandNotify

// required .gate.GateShakeHandNotify.SHAKE_HAND_COMMAND cmd = 1;
inline bool GateShakeHandNotify::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateShakeHandNotify::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateShakeHandNotify::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateShakeHandNotify::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND GateShakeHandNotify::cmd() const {
  // @@protoc_insertion_point(field_get:gate.GateShakeHandNotify.cmd)
  return static_cast< ::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND >(cmd_);
}
inline void GateShakeHandNotify::set_cmd(::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND value) {
  assert(::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:gate.GateShakeHandNotify.cmd)
}

// optional .gate.GameServer server = 2;
inline bool GateShakeHandNotify::has_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateShakeHandNotify::set_has_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateShakeHandNotify::clear_has_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gate::GameServer& GateShakeHandNotify::_internal_server() const {
  return *server_;
}
inline const ::gate::GameServer& GateShakeHandNotify::server() const {
  const ::gate::GameServer* p = server_;
  // @@protoc_insertion_point(field_get:gate.GateShakeHandNotify.server)
  return p != NULL ? *p : *reinterpret_cast<const ::gate::GameServer*>(
      &::gate::_GameServer_default_instance_);
}
inline ::gate::GameServer* GateShakeHandNotify::release_server() {
  // @@protoc_insertion_point(field_release:gate.GateShakeHandNotify.server)
  clear_has_server();
  ::gate::GameServer* temp = server_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  server_ = NULL;
  return temp;
}
inline ::gate::GameServer* GateShakeHandNotify::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.GateShakeHandNotify.server)
  clear_has_server();
  ::gate::GameServer* temp = server_;
  server_ = NULL;
  return temp;
}
inline ::gate::GameServer* GateShakeHandNotify::mutable_server() {
  set_has_server();
  if (server_ == NULL) {
    auto* p = CreateMaybeMessage<::gate::GameServer>(GetArenaNoVirtual());
    server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gate.GateShakeHandNotify.server)
  return server_;
}
inline void GateShakeHandNotify::set_allocated_server(::gate::GameServer* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(server_);
  }
  if (server) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(server)->GetArena();
    if (message_arena != submessage_arena) {
      server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    set_has_server();
  } else {
    clear_has_server();
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:gate.GateShakeHandNotify.server)
}

// optional uint32 gateid = 11;
inline bool GateShakeHandNotify::has_gateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateShakeHandNotify::set_has_gateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateShakeHandNotify::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateShakeHandNotify::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 GateShakeHandNotify::gateid() const {
  // @@protoc_insertion_point(field_get:gate.GateShakeHandNotify.gateid)
  return gateid_;
}
inline void GateShakeHandNotify::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:gate.GateShakeHandNotify.gateid)
}

// optional bytes gate_desc = 12;
inline bool GateShakeHandNotify::has_gate_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateShakeHandNotify::set_has_gate_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateShakeHandNotify::clear_has_gate_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateShakeHandNotify::clear_gate_desc() {
  gate_desc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_gate_desc();
}
inline const ::std::string& GateShakeHandNotify::gate_desc() const {
  // @@protoc_insertion_point(field_get:gate.GateShakeHandNotify.gate_desc)
  return gate_desc_.Get();
}
inline void GateShakeHandNotify::set_gate_desc(const ::std::string& value) {
  set_has_gate_desc();
  gate_desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:gate.GateShakeHandNotify.gate_desc)
}
#if LANG_CXX11
inline void GateShakeHandNotify::set_gate_desc(::std::string&& value) {
  set_has_gate_desc();
  gate_desc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:gate.GateShakeHandNotify.gate_desc)
}
#endif
inline void GateShakeHandNotify::set_gate_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gate_desc();
  gate_desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:gate.GateShakeHandNotify.gate_desc)
}
inline void GateShakeHandNotify::set_gate_desc(const void* value,
    size_t size) {
  set_has_gate_desc();
  gate_desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:gate.GateShakeHandNotify.gate_desc)
}
inline ::std::string* GateShakeHandNotify::mutable_gate_desc() {
  set_has_gate_desc();
  // @@protoc_insertion_point(field_mutable:gate.GateShakeHandNotify.gate_desc)
  return gate_desc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GateShakeHandNotify::release_gate_desc() {
  // @@protoc_insertion_point(field_release:gate.GateShakeHandNotify.gate_desc)
  if (!has_gate_desc()) {
    return NULL;
  }
  clear_has_gate_desc();
  return gate_desc_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GateShakeHandNotify::set_allocated_gate_desc(::std::string* gate_desc) {
  if (gate_desc != NULL) {
    set_has_gate_desc();
  } else {
    clear_has_gate_desc();
  }
  gate_desc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gate_desc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:gate.GateShakeHandNotify.gate_desc)
}
inline ::std::string* GateShakeHandNotify::unsafe_arena_release_gate_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.GateShakeHandNotify.gate_desc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_gate_desc();
  return gate_desc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GateShakeHandNotify::unsafe_arena_set_allocated_gate_desc(
    ::std::string* gate_desc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gate_desc != NULL) {
    set_has_gate_desc();
  } else {
    clear_has_gate_desc();
  }
  gate_desc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gate_desc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.GateShakeHandNotify.gate_desc)
}

// -------------------------------------------------------------------

// PlayerJoinService_JoinRequest

// required bytes uid = 1;
inline bool PlayerJoinService_JoinRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerJoinService_JoinRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerJoinService_JoinRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerJoinService_JoinRequest::clear_uid() {
  uid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_uid();
}
inline const ::std::string& PlayerJoinService_JoinRequest::uid() const {
  // @@protoc_insertion_point(field_get:gate.PlayerJoinService.JoinRequest.uid)
  return uid_.Get();
}
inline void PlayerJoinService_JoinRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:gate.PlayerJoinService.JoinRequest.uid)
}
#if LANG_CXX11
inline void PlayerJoinService_JoinRequest::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:gate.PlayerJoinService.JoinRequest.uid)
}
#endif
inline void PlayerJoinService_JoinRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:gate.PlayerJoinService.JoinRequest.uid)
}
inline void PlayerJoinService_JoinRequest::set_uid(const void* value,
    size_t size) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:gate.PlayerJoinService.JoinRequest.uid)
}
inline ::std::string* PlayerJoinService_JoinRequest::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:gate.PlayerJoinService.JoinRequest.uid)
  return uid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerJoinService_JoinRequest::release_uid() {
  // @@protoc_insertion_point(field_release:gate.PlayerJoinService.JoinRequest.uid)
  if (!has_uid()) {
    return NULL;
  }
  clear_has_uid();
  return uid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerJoinService_JoinRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:gate.PlayerJoinService.JoinRequest.uid)
}
inline ::std::string* PlayerJoinService_JoinRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.PlayerJoinService.JoinRequest.uid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_uid();
  return uid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerJoinService_JoinRequest::unsafe_arena_set_allocated_uid(
    ::std::string* uid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.PlayerJoinService.JoinRequest.uid)
}

// optional bytes nick = 2;
inline bool PlayerJoinService_JoinRequest::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerJoinService_JoinRequest::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerJoinService_JoinRequest::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerJoinService_JoinRequest::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& PlayerJoinService_JoinRequest::nick() const {
  // @@protoc_insertion_point(field_get:gate.PlayerJoinService.JoinRequest.nick)
  return nick_.Get();
}
inline void PlayerJoinService_JoinRequest::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:gate.PlayerJoinService.JoinRequest.nick)
}
#if LANG_CXX11
inline void PlayerJoinService_JoinRequest::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:gate.PlayerJoinService.JoinRequest.nick)
}
#endif
inline void PlayerJoinService_JoinRequest::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:gate.PlayerJoinService.JoinRequest.nick)
}
inline void PlayerJoinService_JoinRequest::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:gate.PlayerJoinService.JoinRequest.nick)
}
inline ::std::string* PlayerJoinService_JoinRequest::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:gate.PlayerJoinService.JoinRequest.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerJoinService_JoinRequest::release_nick() {
  // @@protoc_insertion_point(field_release:gate.PlayerJoinService.JoinRequest.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerJoinService_JoinRequest::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:gate.PlayerJoinService.JoinRequest.nick)
}
inline ::std::string* PlayerJoinService_JoinRequest::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.PlayerJoinService.JoinRequest.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerJoinService_JoinRequest::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.PlayerJoinService.JoinRequest.nick)
}

// optional uint32 gateid = 11;
inline bool PlayerJoinService_JoinRequest::has_gateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerJoinService_JoinRequest::set_has_gateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerJoinService_JoinRequest::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerJoinService_JoinRequest::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 PlayerJoinService_JoinRequest::gateid() const {
  // @@protoc_insertion_point(field_get:gate.PlayerJoinService.JoinRequest.gateid)
  return gateid_;
}
inline void PlayerJoinService_JoinRequest::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
  // @@protoc_insertion_point(field_set:gate.PlayerJoinService.JoinRequest.gateid)
}

// optional uint32 gameserverid = 12;
inline bool PlayerJoinService_JoinRequest::has_gameserverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerJoinService_JoinRequest::set_has_gameserverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerJoinService_JoinRequest::clear_has_gameserverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerJoinService_JoinRequest::clear_gameserverid() {
  gameserverid_ = 0u;
  clear_has_gameserverid();
}
inline ::google::protobuf::uint32 PlayerJoinService_JoinRequest::gameserverid() const {
  // @@protoc_insertion_point(field_get:gate.PlayerJoinService.JoinRequest.gameserverid)
  return gameserverid_;
}
inline void PlayerJoinService_JoinRequest::set_gameserverid(::google::protobuf::uint32 value) {
  set_has_gameserverid();
  gameserverid_ = value;
  // @@protoc_insertion_point(field_set:gate.PlayerJoinService.JoinRequest.gameserverid)
}

// -------------------------------------------------------------------

// PlayerJoinService_JoinResponse

// required .gate.PlayerJoinService.RESULT result = 1;
inline bool PlayerJoinService_JoinResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerJoinService_JoinResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerJoinService_JoinResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerJoinService_JoinResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::gate::PlayerJoinService_RESULT PlayerJoinService_JoinResponse::result() const {
  // @@protoc_insertion_point(field_get:gate.PlayerJoinService.JoinResponse.result)
  return static_cast< ::gate::PlayerJoinService_RESULT >(result_);
}
inline void PlayerJoinService_JoinResponse::set_result(::gate::PlayerJoinService_RESULT value) {
  assert(::gate::PlayerJoinService_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:gate.PlayerJoinService.JoinResponse.result)
}

// -------------------------------------------------------------------

// PlayerJoinService

// optional .gate.PlayerJoinService.JoinRequest req = 1;
inline bool PlayerJoinService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerJoinService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerJoinService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerJoinService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::gate::PlayerJoinService_JoinRequest& PlayerJoinService::_internal_req() const {
  return *req_;
}
inline const ::gate::PlayerJoinService_JoinRequest& PlayerJoinService::req() const {
  const ::gate::PlayerJoinService_JoinRequest* p = req_;
  // @@protoc_insertion_point(field_get:gate.PlayerJoinService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::gate::PlayerJoinService_JoinRequest*>(
      &::gate::_PlayerJoinService_JoinRequest_default_instance_);
}
inline ::gate::PlayerJoinService_JoinRequest* PlayerJoinService::release_req() {
  // @@protoc_insertion_point(field_release:gate.PlayerJoinService.req)
  clear_has_req();
  ::gate::PlayerJoinService_JoinRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::gate::PlayerJoinService_JoinRequest* PlayerJoinService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.PlayerJoinService.req)
  clear_has_req();
  ::gate::PlayerJoinService_JoinRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::gate::PlayerJoinService_JoinRequest* PlayerJoinService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::gate::PlayerJoinService_JoinRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gate.PlayerJoinService.req)
  return req_;
}
inline void PlayerJoinService::set_allocated_req(::gate::PlayerJoinService_JoinRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:gate.PlayerJoinService.req)
}

// optional .gate.PlayerJoinService.JoinResponse resp = 2;
inline bool PlayerJoinService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerJoinService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerJoinService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerJoinService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::gate::PlayerJoinService_JoinResponse& PlayerJoinService::_internal_resp() const {
  return *resp_;
}
inline const ::gate::PlayerJoinService_JoinResponse& PlayerJoinService::resp() const {
  const ::gate::PlayerJoinService_JoinResponse* p = resp_;
  // @@protoc_insertion_point(field_get:gate.PlayerJoinService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::gate::PlayerJoinService_JoinResponse*>(
      &::gate::_PlayerJoinService_JoinResponse_default_instance_);
}
inline ::gate::PlayerJoinService_JoinResponse* PlayerJoinService::release_resp() {
  // @@protoc_insertion_point(field_release:gate.PlayerJoinService.resp)
  clear_has_resp();
  ::gate::PlayerJoinService_JoinResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::gate::PlayerJoinService_JoinResponse* PlayerJoinService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.PlayerJoinService.resp)
  clear_has_resp();
  ::gate::PlayerJoinService_JoinResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::gate::PlayerJoinService_JoinResponse* PlayerJoinService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::gate::PlayerJoinService_JoinResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gate.PlayerJoinService.resp)
  return resp_;
}
inline void PlayerJoinService::set_allocated_resp(::gate::PlayerJoinService_JoinResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:gate.PlayerJoinService.resp)
}

// -------------------------------------------------------------------

// PlayerQuitService_QuitRequest

// required bytes uid = 1;
inline bool PlayerQuitService_QuitRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerQuitService_QuitRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerQuitService_QuitRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerQuitService_QuitRequest::clear_uid() {
  uid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_uid();
}
inline const ::std::string& PlayerQuitService_QuitRequest::uid() const {
  // @@protoc_insertion_point(field_get:gate.PlayerQuitService.QuitRequest.uid)
  return uid_.Get();
}
inline void PlayerQuitService_QuitRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:gate.PlayerQuitService.QuitRequest.uid)
}
#if LANG_CXX11
inline void PlayerQuitService_QuitRequest::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:gate.PlayerQuitService.QuitRequest.uid)
}
#endif
inline void PlayerQuitService_QuitRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:gate.PlayerQuitService.QuitRequest.uid)
}
inline void PlayerQuitService_QuitRequest::set_uid(const void* value,
    size_t size) {
  set_has_uid();
  uid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:gate.PlayerQuitService.QuitRequest.uid)
}
inline ::std::string* PlayerQuitService_QuitRequest::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:gate.PlayerQuitService.QuitRequest.uid)
  return uid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerQuitService_QuitRequest::release_uid() {
  // @@protoc_insertion_point(field_release:gate.PlayerQuitService.QuitRequest.uid)
  if (!has_uid()) {
    return NULL;
  }
  clear_has_uid();
  return uid_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerQuitService_QuitRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:gate.PlayerQuitService.QuitRequest.uid)
}
inline ::std::string* PlayerQuitService_QuitRequest::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.PlayerQuitService.QuitRequest.uid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_uid();
  return uid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerQuitService_QuitRequest::unsafe_arena_set_allocated_uid(
    ::std::string* uid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.PlayerQuitService.QuitRequest.uid)
}

// optional bytes nick = 2;
inline bool PlayerQuitService_QuitRequest::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerQuitService_QuitRequest::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerQuitService_QuitRequest::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerQuitService_QuitRequest::clear_nick() {
  nick_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_nick();
}
inline const ::std::string& PlayerQuitService_QuitRequest::nick() const {
  // @@protoc_insertion_point(field_get:gate.PlayerQuitService.QuitRequest.nick)
  return nick_.Get();
}
inline void PlayerQuitService_QuitRequest::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:gate.PlayerQuitService.QuitRequest.nick)
}
#if LANG_CXX11
inline void PlayerQuitService_QuitRequest::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:gate.PlayerQuitService.QuitRequest.nick)
}
#endif
inline void PlayerQuitService_QuitRequest::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:gate.PlayerQuitService.QuitRequest.nick)
}
inline void PlayerQuitService_QuitRequest::set_nick(const void* value,
    size_t size) {
  set_has_nick();
  nick_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:gate.PlayerQuitService.QuitRequest.nick)
}
inline ::std::string* PlayerQuitService_QuitRequest::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:gate.PlayerQuitService.QuitRequest.nick)
  return nick_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PlayerQuitService_QuitRequest::release_nick() {
  // @@protoc_insertion_point(field_release:gate.PlayerQuitService.QuitRequest.nick)
  if (!has_nick()) {
    return NULL;
  }
  clear_has_nick();
  return nick_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PlayerQuitService_QuitRequest::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:gate.PlayerQuitService.QuitRequest.nick)
}
inline ::std::string* PlayerQuitService_QuitRequest::unsafe_arena_release_nick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.PlayerQuitService.QuitRequest.nick)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_nick();
  return nick_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PlayerQuitService_QuitRequest::unsafe_arena_set_allocated_nick(
    ::std::string* nick) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      nick, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.PlayerQuitService.QuitRequest.nick)
}

// -------------------------------------------------------------------

// PlayerQuitService_QuitResponse

// required .gate.PlayerQuitService.RESULT result = 1;
inline bool PlayerQuitService_QuitResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerQuitService_QuitResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerQuitService_QuitResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerQuitService_QuitResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::gate::PlayerQuitService_RESULT PlayerQuitService_QuitResponse::result() const {
  // @@protoc_insertion_point(field_get:gate.PlayerQuitService.QuitResponse.result)
  return static_cast< ::gate::PlayerQuitService_RESULT >(result_);
}
inline void PlayerQuitService_QuitResponse::set_result(::gate::PlayerQuitService_RESULT value) {
  assert(::gate::PlayerQuitService_RESULT_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:gate.PlayerQuitService.QuitResponse.result)
}

// -------------------------------------------------------------------

// PlayerQuitService

// optional .gate.PlayerQuitService.QuitRequest req = 1;
inline bool PlayerQuitService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerQuitService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerQuitService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerQuitService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::gate::PlayerQuitService_QuitRequest& PlayerQuitService::_internal_req() const {
  return *req_;
}
inline const ::gate::PlayerQuitService_QuitRequest& PlayerQuitService::req() const {
  const ::gate::PlayerQuitService_QuitRequest* p = req_;
  // @@protoc_insertion_point(field_get:gate.PlayerQuitService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::gate::PlayerQuitService_QuitRequest*>(
      &::gate::_PlayerQuitService_QuitRequest_default_instance_);
}
inline ::gate::PlayerQuitService_QuitRequest* PlayerQuitService::release_req() {
  // @@protoc_insertion_point(field_release:gate.PlayerQuitService.req)
  clear_has_req();
  ::gate::PlayerQuitService_QuitRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::gate::PlayerQuitService_QuitRequest* PlayerQuitService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.PlayerQuitService.req)
  clear_has_req();
  ::gate::PlayerQuitService_QuitRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::gate::PlayerQuitService_QuitRequest* PlayerQuitService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::gate::PlayerQuitService_QuitRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gate.PlayerQuitService.req)
  return req_;
}
inline void PlayerQuitService::set_allocated_req(::gate::PlayerQuitService_QuitRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:gate.PlayerQuitService.req)
}

// optional .gate.PlayerQuitService.QuitResponse resp = 2;
inline bool PlayerQuitService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerQuitService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerQuitService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerQuitService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::gate::PlayerQuitService_QuitResponse& PlayerQuitService::_internal_resp() const {
  return *resp_;
}
inline const ::gate::PlayerQuitService_QuitResponse& PlayerQuitService::resp() const {
  const ::gate::PlayerQuitService_QuitResponse* p = resp_;
  // @@protoc_insertion_point(field_get:gate.PlayerQuitService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::gate::PlayerQuitService_QuitResponse*>(
      &::gate::_PlayerQuitService_QuitResponse_default_instance_);
}
inline ::gate::PlayerQuitService_QuitResponse* PlayerQuitService::release_resp() {
  // @@protoc_insertion_point(field_release:gate.PlayerQuitService.resp)
  clear_has_resp();
  ::gate::PlayerQuitService_QuitResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::gate::PlayerQuitService_QuitResponse* PlayerQuitService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.PlayerQuitService.resp)
  clear_has_resp();
  ::gate::PlayerQuitService_QuitResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::gate::PlayerQuitService_QuitResponse* PlayerQuitService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::gate::PlayerQuitService_QuitResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gate.PlayerQuitService.resp)
  return resp_;
}
inline void PlayerQuitService::set_allocated_resp(::gate::PlayerQuitService_QuitResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:gate.PlayerQuitService.resp)
}

// -------------------------------------------------------------------

// RegisterNativeClientService_RegisterRequest

// required int32 id = 1;
inline bool RegisterNativeClientService_RegisterRequest::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterNativeClientService_RegisterRequest::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterNativeClientService_RegisterRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterNativeClientService_RegisterRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RegisterNativeClientService_RegisterRequest::id() const {
  // @@protoc_insertion_point(field_get:gate.RegisterNativeClientService.RegisterRequest.id)
  return id_;
}
inline void RegisterNativeClientService_RegisterRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gate.RegisterNativeClientService.RegisterRequest.id)
}

// required bytes name = 2;
inline bool RegisterNativeClientService_RegisterRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterNativeClientService_RegisterRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterNativeClientService_RegisterRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterNativeClientService_RegisterRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_name();
}
inline const ::std::string& RegisterNativeClientService_RegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:gate.RegisterNativeClientService.RegisterRequest.name)
  return name_.Get();
}
inline void RegisterNativeClientService_RegisterRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:gate.RegisterNativeClientService.RegisterRequest.name)
}
#if LANG_CXX11
inline void RegisterNativeClientService_RegisterRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:gate.RegisterNativeClientService.RegisterRequest.name)
}
#endif
inline void RegisterNativeClientService_RegisterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:gate.RegisterNativeClientService.RegisterRequest.name)
}
inline void RegisterNativeClientService_RegisterRequest::set_name(const void* value,
    size_t size) {
  set_has_name();
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:gate.RegisterNativeClientService.RegisterRequest.name)
}
inline ::std::string* RegisterNativeClientService_RegisterRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gate.RegisterNativeClientService.RegisterRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RegisterNativeClientService_RegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:gate.RegisterNativeClientService.RegisterRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RegisterNativeClientService_RegisterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:gate.RegisterNativeClientService.RegisterRequest.name)
}
inline ::std::string* RegisterNativeClientService_RegisterRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.RegisterNativeClientService.RegisterRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_name();
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RegisterNativeClientService_RegisterRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gate.RegisterNativeClientService.RegisterRequest.name)
}

// -------------------------------------------------------------------

// RegisterNativeClientService_RegisterResponse

// -------------------------------------------------------------------

// RegisterNativeClientService

// optional .gate.RegisterNativeClientService.RegisterRequest req = 1;
inline bool RegisterNativeClientService::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterNativeClientService::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterNativeClientService::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterNativeClientService::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::gate::RegisterNativeClientService_RegisterRequest& RegisterNativeClientService::_internal_req() const {
  return *req_;
}
inline const ::gate::RegisterNativeClientService_RegisterRequest& RegisterNativeClientService::req() const {
  const ::gate::RegisterNativeClientService_RegisterRequest* p = req_;
  // @@protoc_insertion_point(field_get:gate.RegisterNativeClientService.req)
  return p != NULL ? *p : *reinterpret_cast<const ::gate::RegisterNativeClientService_RegisterRequest*>(
      &::gate::_RegisterNativeClientService_RegisterRequest_default_instance_);
}
inline ::gate::RegisterNativeClientService_RegisterRequest* RegisterNativeClientService::release_req() {
  // @@protoc_insertion_point(field_release:gate.RegisterNativeClientService.req)
  clear_has_req();
  ::gate::RegisterNativeClientService_RegisterRequest* temp = req_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  req_ = NULL;
  return temp;
}
inline ::gate::RegisterNativeClientService_RegisterRequest* RegisterNativeClientService::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.RegisterNativeClientService.req)
  clear_has_req();
  ::gate::RegisterNativeClientService_RegisterRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::gate::RegisterNativeClientService_RegisterRequest* RegisterNativeClientService::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::gate::RegisterNativeClientService_RegisterRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gate.RegisterNativeClientService.req)
  return req_;
}
inline void RegisterNativeClientService::set_allocated_req(::gate::RegisterNativeClientService_RegisterRequest* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(req);
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:gate.RegisterNativeClientService.req)
}

// optional .gate.RegisterNativeClientService.RegisterResponse resp = 2;
inline bool RegisterNativeClientService::has_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterNativeClientService::set_has_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterNativeClientService::clear_has_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterNativeClientService::clear_resp() {
  if (resp_ != NULL) resp_->Clear();
  clear_has_resp();
}
inline const ::gate::RegisterNativeClientService_RegisterResponse& RegisterNativeClientService::_internal_resp() const {
  return *resp_;
}
inline const ::gate::RegisterNativeClientService_RegisterResponse& RegisterNativeClientService::resp() const {
  const ::gate::RegisterNativeClientService_RegisterResponse* p = resp_;
  // @@protoc_insertion_point(field_get:gate.RegisterNativeClientService.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::gate::RegisterNativeClientService_RegisterResponse*>(
      &::gate::_RegisterNativeClientService_RegisterResponse_default_instance_);
}
inline ::gate::RegisterNativeClientService_RegisterResponse* RegisterNativeClientService::release_resp() {
  // @@protoc_insertion_point(field_release:gate.RegisterNativeClientService.resp)
  clear_has_resp();
  ::gate::RegisterNativeClientService_RegisterResponse* temp = resp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  resp_ = NULL;
  return temp;
}
inline ::gate::RegisterNativeClientService_RegisterResponse* RegisterNativeClientService::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gate.RegisterNativeClientService.resp)
  clear_has_resp();
  ::gate::RegisterNativeClientService_RegisterResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::gate::RegisterNativeClientService_RegisterResponse* RegisterNativeClientService::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    auto* p = CreateMaybeMessage<::gate::RegisterNativeClientService_RegisterResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gate.RegisterNativeClientService.resp)
  return resp_;
}
inline void RegisterNativeClientService::set_allocated_resp(::gate::RegisterNativeClientService_RegisterResponse* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resp_;
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resp);
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    set_has_resp();
  } else {
    clear_has_resp();
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:gate.RegisterNativeClientService.resp)
}

// -------------------------------------------------------------------

// KeepAliveNotify

// optional int32 serverid = 1;
inline bool KeepAliveNotify::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepAliveNotify::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepAliveNotify::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepAliveNotify::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 KeepAliveNotify::serverid() const {
  // @@protoc_insertion_point(field_get:gate.KeepAliveNotify.serverid)
  return serverid_;
}
inline void KeepAliveNotify::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:gate.KeepAliveNotify.serverid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gate

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND>() {
  return ::gate::GateShakeHandNotify_SHAKE_HAND_COMMAND_descriptor();
}
template <> struct is_proto_enum< ::gate::PlayerJoinService_RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gate::PlayerJoinService_RESULT>() {
  return ::gate::PlayerJoinService_RESULT_descriptor();
}
template <> struct is_proto_enum< ::gate::PlayerQuitService_RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gate::PlayerQuitService_RESULT>() {
  return ::gate::PlayerQuitService_RESULT_descriptor();
}
template <> struct is_proto_enum< ::gate::INNER_SERVER_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gate::INNER_SERVER_TYPE>() {
  return ::gate::INNER_SERVER_TYPE_descriptor();
}
template <> struct is_proto_enum< ::gate::INNER_SERVER_VISIBILITY> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gate::INNER_SERVER_VISIBILITY>() {
  return ::gate::INNER_SERVER_VISIBILITY_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GateInner_2eproto
